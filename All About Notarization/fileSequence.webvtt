WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:01.516 --> 00:00:08.516 A:middle
[音乐]

00:00:09.516 --> 00:00:12.546 A:middle
[掌声]

00:00:13.046 --> 00:00:13.886 A:middle
&gt;&gt; 大家下午好

00:00:14.056 --> 00:00:15.106 A:middle
感谢今天来到这里

00:00:16.065 --> 00:00:17.416 A:middle
我是 Garrett

00:00:17.416 --> 00:00:18.656 A:middle
我是 Apple 的信任与执行团队的一员

00:00:18.656 --> 00:00:20.236 A:middle
今天我们在这里要

00:00:20.236 --> 00:00:21.756 A:middle
一同探讨关于公证的问题

00:00:22.276 --> 00:00:25.346 A:middle
以下是本次演讲的一个快速议程

00:00:25.346 --> 00:00:26.516 A:middle
我们将会首先

00:00:26.516 --> 00:00:27.656 A:middle
简单概述一下

00:00:27.656 --> 00:00:29.046 A:middle
公证到底是什么 以及一些

00:00:29.046 --> 00:00:30.006 A:middle
它能够提供的好处

00:00:30.986 --> 00:00:31.776 A:middle
然后我们将会讨论

00:00:31.776 --> 00:00:33.076 A:middle
为使你的软件公证

00:00:33.076 --> 00:00:34.466 A:middle
所需的 App 要求

00:00:35.336 --> 00:00:36.256 A:middle
最后我们会过一遍

00:00:36.256 --> 00:00:38.156 A:middle
公证你的软件

00:00:38.226 --> 00:00:40.086 A:middle
你所需要的

00:00:40.086 --> 00:00:40.656 A:middle
工作流程和工具

00:00:43.616 --> 00:00:44.666 A:middle
让我们开始吧

00:00:45.196 --> 00:00:46.746 A:middle
到底什么是公证

00:00:47.666 --> 00:00:50.136 A:middle
嗯 这是我们在

00:00:50.136 --> 00:00:52.356 A:middle
去年的 WWDC 上提出一个流程

00:00:52.746 --> 00:00:54.106 A:middle
来用于在分发之前

00:00:54.366 --> 00:00:56.666 A:middle
识别和阻断恶意软件

00:00:57.326 --> 00:00:59.346 A:middle
现在它已经是

00:00:59.346 --> 00:01:00.906 A:middle
Developer ID 程序的一个扩展

00:01:00.906 --> 00:01:02.936 A:middle
意味着你不需要注册或是

00:01:03.586 --> 00:01:04.796 A:middle
使用任何不同的证书

00:01:05.786 --> 00:01:07.236 A:middle
也就是说你可以

00:01:07.236 --> 00:01:08.986 A:middle
控制你的软件的

00:01:08.986 --> 00:01:10.366 A:middle
签名和分发

00:01:10.696 --> 00:01:12.886 A:middle
正如在引入公证之前一样

00:01:15.606 --> 00:01:19.826 A:middle
其关键是公证服务它对

00:01:19.826 --> 00:01:22.136 A:middle
Developer ID 签名的内容

00:01:22.136 --> 00:01:22.966 A:middle
执行自动安全检查

00:01:23.546 --> 00:01:26.926 A:middle
那么让我们了解一下

00:01:26.926 --> 00:01:30.306 A:middle
当你需要开始第一次公证你的软件时的工作流程

00:01:32.216 --> 00:01:35.696 A:middle
下面的这个图标解释了开发流程

00:01:35.696 --> 00:01:37.636 A:middle
并且本地开发

00:01:37.856 --> 00:01:39.266 A:middle
完全保持不变

00:01:39.966 --> 00:01:41.366 A:middle
你在你的桌面上

00:01:41.576 --> 00:01:42.656 A:middle
使用你的 Apple 开发人员证书

00:01:42.656 --> 00:01:45.236 A:middle
构建并签名 直到你有一个候选版本

00:01:45.776 --> 00:01:48.816 A:middle
此时你只需要

00:01:48.816 --> 00:01:50.196 A:middle
使用你的 Developer ID

00:01:50.196 --> 00:01:52.166 A:middle
证书进行签名 然后你可以将其

00:01:52.166 --> 00:01:53.486 A:middle
副本发送至 Apple 公证服务

00:01:53.486 --> 00:01:55.536 A:middle
来进行公证

00:01:56.726 --> 00:01:58.376 A:middle
当公证完成并

00:01:58.506 --> 00:02:00.346 A:middle
成功后公证服务

00:02:00.346 --> 00:02:02.076 A:middle
会发送回一个通行证

00:02:02.846 --> 00:02:03.726 A:middle
你可以将此通行证

00:02:03.726 --> 00:02:05.696 A:middle
在分发前加在你的软件上

00:02:06.266 --> 00:02:09.045 A:middle
它一旦被加上

00:02:09.045 --> 00:02:11.746 A:middle
软件就可以被分发 和之前一样

00:02:14.066 --> 00:02:15.746 A:middle
值得一提的是

00:02:16.046 --> 00:02:17.256 A:middle
这一工作流程

00:02:17.256 --> 00:02:19.296 A:middle
自去年起就没有变化 因此这只算是一个复习

00:02:19.946 --> 00:02:24.446 A:middle
我们去年没有谈到的是

00:02:24.446 --> 00:02:25.776 A:middle
当有人首次下载和使用你的软件时

00:02:25.776 --> 00:02:26.996 A:middle
会发生什么

00:02:28.426 --> 00:02:29.406 A:middle
当一个用户下载你的

00:02:29.406 --> 00:02:30.426 A:middle
加了通行证的软件并且

00:02:31.006 --> 00:02:32.096 A:middle
双击它来启动时

00:02:32.556 --> 00:02:34.716 A:middle
管理员会执行一次校验

00:02:35.966 --> 00:02:37.616 A:middle
它将会检查本地通行证

00:02:37.616 --> 00:02:41.066 A:middle
而且它也会通过 CloudKit 与公证服务联系

00:02:41.066 --> 00:02:42.006 A:middle
来检查通行证

00:02:42.906 --> 00:02:44.246 A:middle
只要通行证通过了检验

00:02:44.246 --> 00:02:45.456 A:middle
而且通行证与

00:02:45.456 --> 00:02:47.586 A:middle
你的 App 的内容相符

00:02:47.586 --> 00:02:48.696 A:middle
管理者会允许这个 App 运行

00:02:49.096 --> 00:02:50.076 A:middle
用户会看到正常的

00:02:50.076 --> 00:02:50.876 A:middle
首次启动提示

00:02:52.096 --> 00:02:53.746 A:middle
现在我想要提醒大家的是

00:02:54.296 --> 00:02:56.746 A:middle
公证并不是一个 App 审查

00:02:57.706 --> 00:02:59.186 A:middle
公证服务执行

00:02:59.186 --> 00:03:01.366 A:middle
一系列自动化的安全检查

00:03:03.016 --> 00:03:05.866 A:middle
去年我们设定了一个目标

00:03:05.866 --> 00:03:07.276 A:middle
即在一小时内大部分提交从

00:03:07.276 --> 00:03:08.586 A:middle
公证服务都能获得回应

00:03:10.026 --> 00:03:11.026 A:middle
而事实证明

00:03:11.026 --> 00:03:13.616 A:middle
在去年 99% 的

00:03:13.616 --> 00:03:15.306 A:middle
提交都能在

00:03:15.306 --> 00:03:17.376 A:middle
15 分钟内获得回应

00:03:18.636 --> 00:03:20.486 A:middle
而且公证

00:03:20.486 --> 00:03:22.046 A:middle
服务的状态现在位于

00:03:22.046 --> 00:03:22.816 A:middle
Apple 公共状态页上

00:03:23.326 --> 00:03:24.626 A:middle
因此你可以很轻松地查看

00:03:24.626 --> 00:03:27.686 A:middle
是否有可能造成问题的服务问题

00:03:28.246 --> 00:03:32.066 A:middle
那么公证能带来什么好处

00:03:32.866 --> 00:03:34.566 A:middle
嗯 好处有很多

00:03:34.666 --> 00:03:35.786 A:middle
因此我今天只强调

00:03:35.786 --> 00:03:37.476 A:middle
其中的几点

00:03:37.586 --> 00:03:40.646 A:middle
首先公证服务可以帮你防止

00:03:40.646 --> 00:03:42.566 A:middle
无意中发送恶意依赖项

00:03:44.476 --> 00:03:47.366 A:middle
其次 有强行运行的 App

00:03:47.496 --> 00:03:49.476 A:middle
在默认情况下

00:03:49.476 --> 00:03:50.986 A:middle
更安全 我们稍后会

00:03:50.986 --> 00:03:51.726 A:middle
详细讨论这一点

00:03:52.256 --> 00:03:53.636 A:middle
这可以防止你的 App

00:03:53.636 --> 00:03:55.166 A:middle
被攻击者滥用

00:03:59.106 --> 00:04:00.906 A:middle
第三 用户更有可能

00:04:00.906 --> 00:04:02.456 A:middle
下载和尝试新的软件 

00:04:02.786 --> 00:04:04.066 A:middle
当他们知道 Apple 已经

00:04:04.066 --> 00:04:05.526 A:middle
针对可知的安全问题进行了扫描后

00:04:08.576 --> 00:04:10.666 A:middle
最后 公证还可以

00:04:10.666 --> 00:04:11.806 A:middle
为由你的 Developer ID 账户

00:04:11.806 --> 00:04:13.096 A:middle
公证过的软件提供

00:04:13.096 --> 00:04:14.706 A:middle
审计跟踪

00:04:14.706 --> 00:04:15.896 A:middle
你可以使用它来检查

00:04:15.896 --> 00:04:17.245 A:middle
提交历史记录 确保

00:04:17.245 --> 00:04:20.886 A:middle
你不想要从你的账户发布的软件没有被发布

00:04:21.625 --> 00:04:23.386 A:middle
这就是关于

00:04:23.386 --> 00:04:24.556 A:middle
公证的一点概述

00:04:24.926 --> 00:04:26.096 A:middle
现在让我们请出 Robert

00:04:26.096 --> 00:04:27.116 A:middle
来谈谈关于

00:04:27.116 --> 00:04:28.936 A:middle
公证你的软件所需的 App 要求

00:04:29.806 --> 00:04:37.826 A:middle
Robert [掌声]

00:04:38.326 --> 00:04:40.016 A:middle
&gt;&gt; 首先我想说的是

00:04:40.016 --> 00:04:41.846 A:middle
对于任何

00:04:41.846 --> 00:04:43.536 A:middle
你们之前发布的软件

00:04:43.666 --> 00:04:45.246 A:middle
它们都不需要满足任何新要求

00:04:45.246 --> 00:04:47.876 A:middle
你可以将现有的

00:04:47.926 --> 00:04:48.896 A:middle
已经分发的软件

00:04:48.896 --> 00:04:50.766 A:middle
按照原样提交公证

00:04:50.766 --> 00:04:53.256 A:middle
但是对于新的软件

00:04:53.256 --> 00:04:54.646 A:middle
你需要确保它能够

00:04:54.646 --> 00:04:56.186 A:middle
满足几个安全要求

00:04:56.246 --> 00:04:57.736 A:middle
特别是 它必须

00:04:57.736 --> 00:04:59.286 A:middle
被完全地和正确地签名

00:04:59.696 --> 00:05:02.486 A:middle
并且它需要采用强化运行

00:05:02.486 --> 00:05:03.686 A:middle
所谓新软件 我指的是

00:05:03.686 --> 00:05:05.816 A:middle
代码签名时间在

00:05:05.876 --> 00:05:07.696 A:middle
2019 年 6 月 1 日之后的软件

00:05:08.806 --> 00:05:10.436 A:middle
下面我们将会详细地介绍

00:05:10.436 --> 00:05:11.916 A:middle
这两者的含义

00:05:11.916 --> 00:05:13.336 A:middle
即正确的签名和

00:05:13.336 --> 00:05:15.276 A:middle
强化运行

00:05:15.606 --> 00:05:19.716 A:middle
因此首先 当你要完全签名时 

00:05:19.716 --> 00:05:21.236 A:middle
你真的需要那么做

00:05:21.236 --> 00:05:22.556 A:middle
这包括捆绑包 Macho-O

00:05:22.586 --> 00:05:24.496 A:middle
程序安装包 无论它们在哪里 

00:05:24.496 --> 00:05:26.546 A:middle
以及无论你的

00:05:26.546 --> 00:05:28.086 A:middle
程序安装包中是否有 Mach-O

00:05:28.086 --> 00:05:29.576 A:middle
是否在你的捆绑包中有安装包

00:05:30.036 --> 00:05:31.456 A:middle
无论它们

00:05:31.456 --> 00:05:33.306 A:middle
出现在你的产品中的任何地方

00:05:33.306 --> 00:05:34.876 A:middle
它们都需要被签名

00:05:34.906 --> 00:05:36.856 A:middle
它们都需要被正确地签名

00:05:38.166 --> 00:05:39.936 A:middle
所以 要正确签名意味着

00:05:40.026 --> 00:05:42.756 A:middle
你需要签署捆绑包

00:05:42.756 --> 00:05:45.346 A:middle
Macho-O 和代码 我等一下会

00:05:45.346 --> 00:05:46.546 A:middle
详细介绍代码

00:05:46.866 --> 00:05:50.226 A:middle
和你的 Developer ID App 证书 

00:05:50.226 --> 00:05:51.556 A:middle
并确保

00:05:51.556 --> 00:05:52.876 A:middle
包含一个安全的时间戳

00:05:54.176 --> 00:05:56.056 A:middle
对于可执行文件 它们需要

00:05:56.056 --> 00:05:57.526 A:middle
打开强化运行

00:05:57.526 --> 00:05:58.836 A:middle
你不需要为

00:05:58.836 --> 00:06:00.196 A:middle
框架或动态库文件

00:06:00.196 --> 00:06:01.556 A:middle
或捆绑包打开强化运行

00:06:01.556 --> 00:06:02.196 A:middle
只是对可执行文件而言的

00:06:03.546 --> 00:06:05.386 A:middle
对于安装包你需要

00:06:05.386 --> 00:06:07.516 A:middle
使用你的

00:06:07.516 --> 00:06:09.316 A:middle
Developer ID 安装证书来签名

00:06:09.316 --> 00:06:11.856 A:middle
这与你的 Developer ID App

00:06:11.856 --> 00:06:12.906 A:middle
证书是不同的 所以要注意

00:06:14.236 --> 00:06:16.036 A:middle
另外 如果你选择

00:06:16.036 --> 00:06:17.926 A:middle
签名磁盘映像来避免网守

00:06:17.926 --> 00:06:20.306 A:middle
路径随机化 则必须

00:06:20.306 --> 00:06:21.686 A:middle
使用你的 Developer ID

00:06:21.686 --> 00:06:23.086 A:middle
App 证书来签名 而且

00:06:23.086 --> 00:06:24.346 A:middle
包含一个安全的时间戳

00:06:24.886 --> 00:06:27.926 A:middle
如果你使用 Xcode

00:06:27.926 --> 00:06:29.266 A:middle
来构建你的软件包

00:06:29.266 --> 00:06:29.986 A:middle
你的软件 这很容易

00:06:29.986 --> 00:06:32.186 A:middle
如果你打开自动

00:06:32.286 --> 00:06:34.056 A:middle
代码签名 Xcode 能够

00:06:34.056 --> 00:06:37.016 A:middle
为你完成所有这些 但你必须要注意

00:06:37.016 --> 00:06:39.586 A:middle
如果你使用的是脚本构建阶段

00:06:39.586 --> 00:06:41.666 A:middle
或拷贝构建阶段

00:06:41.776 --> 00:06:43.486 A:middle
它们可能会在你的软件中

00:06:43.486 --> 00:06:46.656 A:middle
引入新的代码 而 Xcode

00:06:46.656 --> 00:06:48.026 A:middle
并不知道这些代码 那么你就

00:06:48.026 --> 00:06:50.596 A:middle
需要确保它们得到正确的签名

00:06:51.206 --> 00:06:55.176 A:middle
我提到了代码文件

00:06:55.576 --> 00:06:58.996 A:middle
当我们在几年前提出了代码签名后

00:06:58.996 --> 00:07:02.456 A:middle
我们在技术说明中记录了这些

00:07:02.456 --> 00:07:03.396 A:middle
叫做代码位置的内容

00:07:03.706 --> 00:07:05.336 A:middle
因此任何在

00:07:05.336 --> 00:07:06.706 A:middle
其捆绑包中出现的任何文件

00:07:06.706 --> 00:07:07.906 A:middle
都会被代码签名的

00:07:07.906 --> 00:07:09.376 A:middle
基础结构认为是代码

00:07:09.376 --> 00:07:11.726 A:middle
也就是说它们需要有一个附加签名

00:07:12.246 --> 00:07:15.726 A:middle
Mach-Os 在这方面是最好的

00:07:15.726 --> 00:07:16.966 A:middle
你可以将签名

00:07:16.966 --> 00:07:18.726 A:middle
嵌入到任何你放在

00:07:18.726 --> 00:07:19.906 A:middle
这些位置的 Mach-O 和

00:07:19.906 --> 00:07:21.536 A:middle
捆绑包中 但是如果你

00:07:21.536 --> 00:07:23.416 A:middle
放置了其他种类的文件 比如

00:07:23.666 --> 00:07:27.536 A:middle
JPEG 文件或者原始的二进制文件

00:07:27.536 --> 00:07:30.116 A:middle
这些文件需要被签名 但是

00:07:30.116 --> 00:07:31.486 A:middle
它们不会获取附加

00:07:31.486 --> 00:07:32.826 A:middle
签名 反之附加签名会

00:07:32.826 --> 00:07:35.386 A:middle
最终成为一种扩展属性

00:07:35.826 --> 00:07:37.886 A:middle
而这意味着当你在打包你的代码时

00:07:37.886 --> 00:07:41.326 A:middle
你必须确保扩展属性保持在那些位置中

00:07:41.786 --> 00:07:43.316 A:middle
为了避免需要过度小心

00:07:43.316 --> 00:07:44.686 A:middle
我们建议你

00:07:44.686 --> 00:07:46.236 A:middle
将一切不是

00:07:46.236 --> 00:07:47.786 A:middle
Macho-O 或是包含

00:07:47.786 --> 00:07:49.406 A:middle
Macho-O 的捆绑包的任何东西放置于

00:07:49.406 --> 00:07:50.986 A:middle
这些位置之外的地方

00:07:50.986 --> 00:07:51.946 A:middle
当构建你的 App 时

00:07:52.646 --> 00:07:56.976 A:middle
因此 当你在

00:07:56.976 --> 00:07:58.976 A:middle
Xcode 之外签名时 我们推荐使用

00:07:58.976 --> 00:08:00.206 A:middle
彻底性代码签名

00:08:00.486 --> 00:08:02.016 A:middle
这意味着你首先

00:08:02.016 --> 00:08:05.096 A:middle
在你的 App 中的

00:08:05.096 --> 00:08:07.826 A:middle
最深层嵌套的包或代码段签名

00:08:08.366 --> 00:08:10.216 A:middle
这种情况下 应该是

00:08:10.216 --> 00:08:11.876 A:middle
Updater.app

00:08:11.876 --> 00:08:13.596 A:middle
在 Sparkle 框架内

00:08:13.596 --> 00:08:17.116 A:middle
在 WatchingGrassGrow.app 之下

00:08:17.116 --> 00:08:18.656 A:middle
然后你向上移动一级

00:08:18.656 --> 00:08:20.686 A:middle
然后分别对每一项进行签名

00:08:20.926 --> 00:08:21.966 A:middle
请注意 当你签署

00:08:21.966 --> 00:08:24.046 A:middle
Sparkle 框架 或者

00:08:24.046 --> 00:08:25.456 A:middle
抓取 Sparkle 主要执行文件的

00:08:25.456 --> 00:08:27.356 A:middle
Sparkle 框架 以及

00:08:27.356 --> 00:08:29.086 A:middle
同时签署 updater.app 时

00:08:29.086 --> 00:08:32.966 A:middle
你需要分别去 WatchingGrassGrow.saver

00:08:32.966 --> 00:08:35.846 A:middle
growGrass.dylib 以及

00:08:35.846 --> 00:08:36.976 A:middle
WatchingGrassGrowHelper

00:08:38.015 --> 00:08:39.515 A:middle
最终当你完成签名

00:08:39.515 --> 00:08:40.756 A:middle
所有这些后 你需要

00:08:40.756 --> 00:08:42.446 A:middle
在最顶层的捆绑包签署所有内容

00:08:42.446 --> 00:08:44.285 A:middle
这会签署最主要的

00:08:44.285 --> 00:08:45.846 A:middle
可执行文件

00:08:45.846 --> 00:08:47.786 A:middle
如你的 info. plist 所示

00:08:48.996 --> 00:08:50.616 A:middle
你们中有些人在

00:08:50.716 --> 00:08:52.106 A:middle
自定义工作流程中使用 -- Deep 标志

00:08:52.106 --> 00:08:54.406 A:middle
但那样需要额外注意

00:08:54.586 --> 00:08:56.146 A:middle
-- Deep 标志仅仅

00:08:56.146 --> 00:08:57.906 A:middle
在代码位置中寻找代码

00:08:58.176 --> 00:09:01.346 A:middle
而在这个案例中 growGrass.dylib

00:09:01.346 --> 00:09:03.046 A:middle
WatchingGrassGrow.saver

00:09:03.046 --> 00:09:05.066 A:middle
以及 Updater.app

00:09:05.526 --> 00:09:07.326 A:middle
不会被当做是代码

00:09:07.326 --> 00:09:08.176 A:middle
它们会被当做是

00:09:08.176 --> 00:09:09.876 A:middle
资源来签名 而非

00:09:09.876 --> 00:09:12.566 A:middle
作为代码被签名 因此他们会被

00:09:12.566 --> 00:09:13.846 A:middle
拒绝公证 除非你愿意

00:09:13.846 --> 00:09:15.576 A:middle
多费劲做彻底性签名

00:09:16.756 --> 00:09:19.856 A:middle
可以在会后查看 Technote 2206

00:09:19.856 --> 00:09:20.976 A:middle
获取更多关于

00:09:20.976 --> 00:09:24.686 A:middle
彻底性签名和代码位置的信息

00:09:26.226 --> 00:09:29.296 A:middle
当你完全正确地签名了你的

00:09:29.296 --> 00:09:30.996 A:middle
软件 你需要确保

00:09:30.996 --> 00:09:32.676 A:middle
你的签名不会失效顾客

00:09:32.886 --> 00:09:33.786 A:middle
也就是说 你永远不应该

00:09:33.786 --> 00:09:35.396 A:middle
更改你的数据包中的文件

00:09:35.396 --> 00:09:36.856 A:middle
除非是安装或

00:09:36.856 --> 00:09:38.856 A:middle
更新期间 而且当你更新软件时

00:09:38.856 --> 00:09:40.586 A:middle
确保更新的结果

00:09:40.586 --> 00:09:42.526 A:middle
是在顾客系统中

00:09:42.606 --> 00:09:44.916 A:middle
正确的签名和公证过的

00:09:44.916 --> 00:09:48.356 A:middle
那么接下来我们会深入地

00:09:48.356 --> 00:09:49.306 A:middle
介绍强化运行

00:09:49.306 --> 00:09:50.476 A:middle
我们去年在 WWDC

00:09:50.476 --> 00:09:53.696 A:middle
已经介绍了强化运行

00:09:53.696 --> 00:09:55.166 A:middle
现在我们将会

00:09:55.166 --> 00:09:57.076 A:middle
提供更多细节 讨论它的

00:09:57.126 --> 00:09:59.316 A:middle
优势和配置问题

00:09:59.776 --> 00:10:03.346 A:middle
强化运行将

00:10:03.346 --> 00:10:04.676 A:middle
很多我们在

00:10:04.676 --> 00:10:06.526 A:middle
macOS 上所拥有的系统完整性保护

00:10:06.526 --> 00:10:08.286 A:middle
扩展到了你的 App 中

00:10:08.696 --> 00:10:10.376 A:middle
包括 运行代码签名执行

00:10:10.376 --> 00:10:12.296 A:middle
库验证

00:10:12.646 --> 00:10:13.906 A:middle
DYLD 环境变量保护

00:10:13.906 --> 00:10:15.716 A:middle
和调试保护

00:10:16.146 --> 00:10:17.126 A:middle
请注意 全部这些

00:10:17.206 --> 00:10:19.056 A:middle
保护是默认配置的

00:10:19.056 --> 00:10:21.266 A:middle
在 iOS 不能配置

00:10:21.266 --> 00:10:22.896 A:middle
但是在 macOS 是可以

00:10:22.896 --> 00:10:24.216 A:middle
通过任何开发人员都可以设置的

00:10:24.216 --> 00:10:25.656 A:middle
权限进行配置的

00:10:26.106 --> 00:10:29.306 A:middle
因此如果你在使用 Xcode

00:10:29.306 --> 00:10:31.276 A:middle
配置强化运行很简单 

00:10:31.466 --> 00:10:34.096 A:middle
只需要进入签名与功能选项卡 确保

00:10:34.096 --> 00:10:35.706 A:middle
强化运行功能

00:10:35.706 --> 00:10:38.026 A:middle
可用于你的目标即可

00:10:40.226 --> 00:10:41.886 A:middle
然后你可以选择

00:10:41.886 --> 00:10:42.866 A:middle
你所需要的权限

00:10:42.866 --> 00:10:44.566 A:middle
来为你的项目

00:10:44.566 --> 00:10:47.146 A:middle
配置强化运行 通过勾选以下复选框

00:10:47.856 --> 00:10:51.166 A:middle
如果你正在使用

00:10:51.166 --> 00:10:52.836 A:middle
Xcode 之外的自定义工作流程 你可以

00:10:52.836 --> 00:10:54.126 A:middle
使用代码签名指令来

00:10:54.126 --> 00:10:55.576 A:middle
配置强化运行

00:10:55.576 --> 00:10:57.426 A:middle
为此你可以使用

00:10:57.426 --> 00:11:00.416 A:middle
代码签名的 options runtime 指令

00:11:00.416 --> 00:11:02.176 A:middle
确保你同时使用了 timestamp 选项

00:11:02.176 --> 00:11:06.126 A:middle
来确保在你的 App 上有一个

00:11:06.126 --> 00:11:06.876 A:middle
安全的时间戳

00:11:07.466 --> 00:11:11.076 A:middle
为了确认你已经

00:11:11.076 --> 00:11:12.316 A:middle
正确地配置了强化运行

00:11:12.616 --> 00:11:14.136 A:middle
使用代码签名下的 display 选项

00:11:14.136 --> 00:11:15.526 A:middle
设定 verbose

00:11:15.526 --> 00:11:17.636 A:middle
数值为 2 然后

00:11:17.636 --> 00:11:19.836 A:middle
在标志部分寻找 runtime 一词

00:11:20.466 --> 00:11:21.566 A:middle
另外需要注意的是

00:11:21.596 --> 00:11:22.346 A:middle
强化运行是版本化的

00:11:22.796 --> 00:11:24.076 A:middle
当你使用强化运行来

00:11:24.076 --> 00:11:26.046 A:middle
签名时 我们会记录下来

00:11:26.136 --> 00:11:27.706 A:middle
你所签名使用的版本

00:11:27.706 --> 00:11:29.496 A:middle
因此 如果我们想要

00:11:29.496 --> 00:11:30.476 A:middle
在未来为强化运行

00:11:30.476 --> 00:11:31.656 A:middle
添加更多保护

00:11:31.866 --> 00:11:33.366 A:middle
我们会确保

00:11:33.366 --> 00:11:34.456 A:middle
目前你的 App 已经测试过的那些

00:11:34.456 --> 00:11:36.356 A:middle
才会在未来的系统中应用

00:11:39.386 --> 00:11:41.556 A:middle
那么什么是运行代码签名执行呢

00:11:42.186 --> 00:11:44.906 A:middle
它防止在没有一个相关的

00:11:44.906 --> 00:11:47.056 A:middle
代码签名时 在你的进程中

00:11:47.056 --> 00:11:51.016 A:middle
创建一个可执行内存

00:11:51.016 --> 00:11:52.556 A:middle
通过首先确保

00:11:52.556 --> 00:11:54.196 A:middle
映射到你的进程中的所有字节

00:11:54.196 --> 00:11:55.666 A:middle
与其相关联的代码签名匹配

00:11:55.666 --> 00:11:57.146 A:middle
当它们被从磁盘中读取时来实现此目的

00:11:57.146 --> 00:11:59.256 A:middle
这不仅仅包括你的

00:11:59.256 --> 00:12:00.976 A:middle
Mach-O 中的可执行区域 也包括

00:12:00.976 --> 00:12:02.436 A:middle
非可执行映射

00:12:02.436 --> 00:12:03.476 A:middle
比如只读部分

00:12:05.476 --> 00:12:07.316 A:middle
并且防止执行

00:12:07.316 --> 00:12:08.866 A:middle
与其签名不相符的

00:12:08.866 --> 00:12:09.786 A:middle
已修改内存

00:12:10.456 --> 00:12:12.886 A:middle
因此 通过确认

00:12:12.976 --> 00:12:14.496 A:middle
我们正在从

00:12:14.496 --> 00:12:15.866 A:middle
磁盘中读取的内存如

00:12:15.866 --> 00:12:17.176 A:middle
它最初时一样 并且

00:12:17.176 --> 00:12:18.186 A:middle
不能被更改

00:12:18.186 --> 00:12:19.436 A:middle
我们能够确保你的

00:12:19.436 --> 00:12:20.386 A:middle
进程在运行中的一致性

00:12:22.546 --> 00:12:24.116 A:middle
那么其中一个

00:12:24.116 --> 00:12:25.336 A:middle
可能在使用

00:12:25.336 --> 00:12:26.546 A:middle
运行代码签名执行

00:12:26.546 --> 00:12:28.446 A:middle
出现的问题是 如果你的代码使用

00:12:28.446 --> 00:12:31.066 A:middle
JIT 来在你的 App 中

00:12:31.066 --> 00:12:31.896 A:middle
快速运行非本机代码

00:12:32.526 --> 00:12:33.986 A:middle
为此我们建议你

00:12:33.986 --> 00:12:35.486 A:middle
使用允许 JIT 授权

00:12:35.886 --> 00:12:37.936 A:middle
然后使用 MAP-JIT 标志

00:12:37.936 --> 00:12:39.306 A:middle
当你分配你的

00:12:39.306 --> 00:12:40.926 A:middle
你所编译代码的

00:12:40.926 --> 00:12:42.976 A:middle
读/写/执行内存时

00:12:43.276 --> 00:12:45.096 A:middle
这允许我们

00:12:45.096 --> 00:12:46.266 A:middle
对系统中的其他内存

00:12:46.266 --> 00:12:47.586 A:middle
保有其他的保护

00:12:47.586 --> 00:12:49.556 A:middle
同时给你提供

00:12:49.556 --> 00:12:51.506 A:middle
临时空间内存来

00:12:51.506 --> 00:12:52.996 A:middle
让你完成需要使用 JIT 的操作

00:12:54.026 --> 00:12:57.586 A:middle
如果你无法使用 MAP-JIT

00:12:57.586 --> 00:12:58.686 A:middle
标志 是因为你没有

00:12:58.776 --> 00:13:01.506 A:middle
你的 JIT 引擎的源代码访问权限

00:13:01.756 --> 00:13:02.946 A:middle
你可以使用允许未签名

00:13:02.946 --> 00:13:04.466 A:middle
可执行内存权限

00:13:04.936 --> 00:13:06.906 A:middle
这一操作将会降低

00:13:06.906 --> 00:13:09.126 A:middle
运行代码签名执行所提供的

00:13:09.126 --> 00:13:11.796 A:middle
安全性预测

00:13:11.796 --> 00:13:13.396 A:middle
仅确认对于每一个

00:13:13.396 --> 00:13:14.556 A:middle
具有代码签名的内存

00:13:14.556 --> 00:13:16.686 A:middle
所有你从磁盘读取的

00:13:16.686 --> 00:13:17.976 A:middle
字节都能够

00:13:18.216 --> 00:13:20.586 A:middle
实际上匹配 但是它会

00:13:20.586 --> 00:13:23.366 A:middle
允许修改任何

00:13:23.366 --> 00:13:25.256 A:middle
你的进程内的内存

00:13:25.426 --> 00:13:27.976 A:middle
并且允许创建

00:13:28.476 --> 00:13:29.886 A:middle
未签名的可执行区域

00:13:32.606 --> 00:13:33.446 A:middle
另一个我们看到的

00:13:33.446 --> 00:13:34.636 A:middle
一些开发人员遇到的挑战是

00:13:34.636 --> 00:13:39.086 A:middle
他们试图去修补一些

00:13:39.086 --> 00:13:40.066 A:middle
已经加载的系统框架

00:13:40.066 --> 00:13:43.106 A:middle
在已经使用了强化运行之后

00:13:43.866 --> 00:13:45.656 A:middle
我们不建议你这么做

00:13:45.656 --> 00:13:46.776 A:middle
你应该查看

00:13:46.776 --> 00:13:47.666 A:middle
是否有任何强化运行

00:13:47.736 --> 00:13:49.396 A:middle
功能实际上

00:13:49.686 --> 00:13:51.846 A:middle
解决了你这样做的原因

00:13:51.966 --> 00:13:53.746 A:middle
不过 如果你需要

00:13:53.746 --> 00:13:54.916 A:middle
允许未签名可执行内存权限

00:13:54.916 --> 00:13:56.676 A:middle
会执行你所

00:13:56.676 --> 00:13:58.166 A:middle
需要的操作 允许你修改

00:13:58.166 --> 00:14:00.636 A:middle
已映射的那些内存页

00:14:01.606 --> 00:14:04.046 A:middle
另外一个我们观察到的

00:14:04.046 --> 00:14:05.616 A:middle
有关于允许代码签名执行

00:14:05.616 --> 00:14:07.986 A:middle
的问题是

00:14:07.986 --> 00:14:09.796 A:middle
有些人在更新

00:14:09.796 --> 00:14:11.486 A:middle
App 时发生崩溃

00:14:11.916 --> 00:14:13.806 A:middle
这是因为代码签名

00:14:13.806 --> 00:14:16.066 A:middle
在内核中首次使用时

00:14:16.066 --> 00:14:17.966 A:middle
被锁存在文件中

00:14:17.966 --> 00:14:20.206 A:middle
这意味着如果你修改已经

00:14:20.206 --> 00:14:23.006 A:middle
运行和被签名的文件

00:14:23.006 --> 00:14:23.986 A:middle
它会不再匹配

00:14:23.986 --> 00:14:25.076 A:middle
内核中已有的签名

00:14:25.076 --> 00:14:26.296 A:middle
你就会看到

00:14:26.296 --> 00:14:27.816 A:middle
代码签名错误

00:14:28.626 --> 00:14:30.216 A:middle
我们的建议是

00:14:30.216 --> 00:14:31.916 A:middle
不要直接修改

00:14:31.916 --> 00:14:33.146 A:middle
磁盘中的已有文件

00:14:33.146 --> 00:14:35.626 A:middle
而是始终创建一个

00:14:35.656 --> 00:14:37.306 A:middle
具有更新内容的新文件

00:14:37.306 --> 00:14:38.376 A:middle
并移除旧文件

00:14:38.696 --> 00:14:42.056 A:middle
这会确保首次使用的新文件获取

00:14:42.056 --> 00:14:44.366 A:middle
其代码签名而不会

00:14:44.366 --> 00:14:45.986 A:middle
出现你所看到的代码签名错误

00:14:48.746 --> 00:14:50.226 A:middle
那么下面我们来讨论一下库验证

00:14:52.746 --> 00:14:54.156 A:middle
库验证可以保护

00:14:54.156 --> 00:14:55.586 A:middle
你的 App 免受代码注入和

00:14:55.586 --> 00:14:56.586 A:middle
动态库劫持

00:14:57.056 --> 00:14:58.736 A:middle
通过确保你的 App

00:14:58.736 --> 00:15:00.406 A:middle
仅加载由你的

00:15:00.406 --> 00:15:01.806 A:middle
团队或是 Apple 签名的代码

00:15:01.806 --> 00:15:03.626 A:middle
有的人或许会问

00:15:03.626 --> 00:15:05.436 A:middle
为什么需要加载由

00:15:05.436 --> 00:15:05.896 A:middle
Apple 签名的代码

00:15:06.036 --> 00:15:07.326 A:middle
好吧 请记住

00:15:07.326 --> 00:15:08.906 A:middle
所有的你从操作系统中

00:15:08.906 --> 00:15:09.676 A:middle
加载的框架和库

00:15:09.676 --> 00:15:11.156 A:middle
都是经过 Apple 签名的

00:15:11.156 --> 00:15:15.076 A:middle
因此你需要能够调用

00:15:12.486 --> 00:15:14.616 A:middle
它们并且将它们加载到你的进程中

00:15:16.156 --> 00:15:17.956 A:middle
请注意 库验证

00:15:18.056 --> 00:15:19.746 A:middle
可防止加载未签名的

00:15:19.746 --> 00:15:21.106 A:middle
和临时签名的代码

00:15:21.706 --> 00:15:23.946 A:middle
因此在开发过程中要保持小心

00:15:23.946 --> 00:15:25.396 A:middle
确保你在使用 Apple 开发证书 

00:15:25.396 --> 00:15:28.416 A:middle
而并非关闭代码签名或

00:15:28.646 --> 00:15:30.416 A:middle
只是使用临时签名

00:15:33.946 --> 00:15:35.926 A:middle
因此 库验证可能会

00:15:35.926 --> 00:15:38.806 A:middle
对某些使用进程内插件

00:15:39.066 --> 00:15:40.856 A:middle
或生态系统的 App 带来挑战

00:15:41.536 --> 00:15:42.606 A:middle
我们建议你考虑

00:15:42.606 --> 00:15:44.546 A:middle
迁移到一个进程外

00:15:44.546 --> 00:15:46.056 A:middle
插件模型 因此你就不需要

00:15:46.306 --> 00:15:48.036 A:middle
将未知的第三方代码

00:15:48.036 --> 00:15:50.746 A:middle
加载到你的 App 中 但是假设你

00:15:50.746 --> 00:15:52.606 A:middle
做不到 你可以使用禁用

00:15:52.606 --> 00:15:54.016 A:middle
库验证权限

00:15:54.096 --> 00:15:55.816 A:middle
这一操作会允许加载

00:15:55.816 --> 00:15:57.756 A:middle
未签名和临时签名的插件

00:15:58.136 --> 00:15:59.336 A:middle
请注意 你可以自行

00:15:59.336 --> 00:16:01.756 A:middle
执行这个操作 不需要

00:16:01.996 --> 00:16:02.986 A:middle
执行任何运行代码或

00:16:02.986 --> 00:16:04.796 A:middle
选择执行相关权限

00:16:05.036 --> 00:16:06.226 A:middle
只需把禁用

00:16:06.226 --> 00:16:07.896 A:middle
库验证打开 当系统

00:16:07.896 --> 00:16:09.636 A:middle
发现你正在加载一个

00:16:09.636 --> 00:16:11.486 A:middle
临时签名或未签名的

00:16:11.486 --> 00:16:12.546 A:middle
插件时 它会降低

00:16:12.546 --> 00:16:14.726 A:middle
你进程的安全性

00:16:14.726 --> 00:16:15.966 A:middle
来允许此发生 因为你已经

00:16:15.966 --> 00:16:18.666 A:middle
告知系统想要加载未签名的插件

00:16:20.096 --> 00:16:22.536 A:middle
下一个是 DYLD 环境

00:16:22.536 --> 00:16:23.306 A:middle
变量保护

00:16:23.816 --> 00:16:26.256 A:middle
DYLD 环境变量

00:16:26.256 --> 00:16:27.826 A:middle
在你的开发过程中

00:16:27.826 --> 00:16:29.976 A:middle
对于加载

00:16:29.976 --> 00:16:31.716 A:middle
调试库到你的 App 中十分有用

00:16:31.806 --> 00:16:35.746 A:middle
当你在测试或使用一些库

00:16:35.816 --> 00:16:36.856 A:middle
或者一些正在构建

00:16:36.856 --> 00:16:38.176 A:middle
和正在开发的的框架

00:16:38.176 --> 00:16:39.386 A:middle
但还未准备好将它们

00:16:39.386 --> 00:16:40.536 A:middle
置入你的 App 中 仅是测试时

00:16:40.956 --> 00:16:42.626 A:middle
但是它们可能是危险的

00:16:42.676 --> 00:16:43.766 A:middle
因为在你的构建和

00:16:43.766 --> 00:16:44.626 A:middle
测试过程中可以做的

00:16:44.626 --> 00:16:46.316 A:middle
任何操作 攻击者都可以

00:16:46.316 --> 00:16:48.996 A:middle
在一个顾客系统中操作来

00:16:48.996 --> 00:16:51.176 A:middle
利用你的 App 可用的

00:16:51.176 --> 00:16:52.256 A:middle
权限或数据

00:16:53.466 --> 00:16:54.656 A:middle
因为这个原因

00:16:54.656 --> 00:16:56.276 A:middle
当你使用它时 强化运行会

00:16:56.276 --> 00:16:57.826 A:middle
默认阻止这些变量

00:16:58.656 --> 00:17:01.916 A:middle
如果你在调试过程中

00:17:01.916 --> 00:17:03.806 A:middle
需要使用 DYLD 环境变量

00:17:03.806 --> 00:17:04.776 A:middle
你可以在调试版本中

00:17:04.776 --> 00:17:06.256 A:middle
使用获取任务允许权限

00:17:06.586 --> 00:17:07.866 A:middle
请注意 Xcode

00:17:07.866 --> 00:17:09.236 A:middle
会在你创建调试时

00:17:09.236 --> 00:17:10.906 A:middle
自动为你启用

00:17:10.906 --> 00:17:11.796 A:middle
而当你创建发布版本时

00:17:11.796 --> 00:17:14.656 A:middle
自动为你关闭

00:17:15.296 --> 00:17:16.945 A:middle
但是请注意 如果你在

00:17:16.945 --> 00:17:18.906 A:middle
使用一个自定义工作流程

00:17:18.945 --> 00:17:20.336 A:middle
大多数情况下公证服务

00:17:20.425 --> 00:17:21.786 A:middle
无法接受具有

00:17:21.786 --> 00:17:22.776 A:middle
获取任务允许权限的二进制文件

00:17:22.776 --> 00:17:25.806 A:middle
因此在你向公证服务发送你的

00:17:25.965 --> 00:17:27.976 A:middle
发布版本之前 请确保已经关闭此权限

00:17:30.246 --> 00:17:33.626 A:middle
因此在少数情况下 我们看到

00:17:33.626 --> 00:17:37.066 A:middle
开发人员需要使用

00:17:37.066 --> 00:17:39.326 A:middle
DYLD 环境变量

00:17:39.326 --> 00:17:40.696 A:middle
当他们向用户发布他们的 App 时

00:17:41.406 --> 00:17:42.886 A:middle
同样 我们并不建议

00:17:42.886 --> 00:17:43.376 A:middle
你这么做

00:17:43.376 --> 00:17:45.936 A:middle
这可能非常危险

00:17:45.936 --> 00:17:47.136 A:middle
容易在顾客系统上

00:17:47.136 --> 00:17:48.716 A:middle
利用你的 App 但是如果你

00:17:48.716 --> 00:17:50.256 A:middle
需要的话 有一个权限可以

00:17:50.306 --> 00:17:52.496 A:middle
允许 DYLD 环境变量

00:17:52.496 --> 00:17:53.836 A:middle
这会允许

00:17:53.886 --> 00:17:55.196 A:middle
使用这些变量 并且被

00:17:55.196 --> 00:17:55.926 A:middle
公证服务所接受

00:17:56.386 --> 00:17:59.506 A:middle
下一个是调试保护

00:18:03.916 --> 00:18:05.956 A:middle
允许开发人员来检视

00:18:05.956 --> 00:18:07.596 A:middle
寄存器和内存状态

00:18:07.916 --> 00:18:09.466 A:middle
修改进程内存

00:18:09.906 --> 00:18:11.606 A:middle
这意味着它们允许黑客

00:18:12.476 --> 00:18:14.266 A:middle
窃取敏感的用户数据

00:18:14.266 --> 00:18:15.306 A:middle
和注入恶意代码

00:18:16.006 --> 00:18:17.146 A:middle
因此在默认设置下

00:18:17.196 --> 00:18:19.096 A:middle
强化运行不允许

00:18:19.096 --> 00:18:21.746 A:middle
调试强化过程

00:18:21.746 --> 00:18:24.186 A:middle
但是如果你需要

00:18:24.186 --> 00:18:25.666 A:middle
在开发流中使用调试器

00:18:25.666 --> 00:18:26.986 A:middle
同样 获取允许任务权限

00:18:26.986 --> 00:18:28.646 A:middle
是你所需要的

00:18:28.646 --> 00:18:30.216 A:middle
与 DYLD 环境变量一起

00:18:30.216 --> 00:18:31.376 A:middle
获取任务允许权限

00:18:31.376 --> 00:18:34.036 A:middle
会允许你的 App 被调试

00:18:35.226 --> 00:18:37.456 A:middle
但是如果你使用

00:18:37.456 --> 00:18:39.426 A:middle
附带的调试器进行所有测试 需要小心 

00:18:39.426 --> 00:18:40.996 A:middle
这会掩盖一些

00:18:41.086 --> 00:18:42.536 A:middle
其他你可能遇到的

00:18:42.536 --> 00:18:43.556 A:middle
强化运行相关的问题

00:18:43.556 --> 00:18:45.866 A:middle
尤其是有关运行代码签名执行的

00:18:46.066 --> 00:18:47.426 A:middle
基本上 一旦调试器

00:18:47.426 --> 00:18:49.376 A:middle
被附加 我们就不再能强制

00:18:49.696 --> 00:18:51.036 A:middle
执行代码签名了

00:18:51.656 --> 00:18:53.266 A:middle
因为调试器 例如设定一个断点

00:18:53.266 --> 00:18:57.086 A:middle
会自动更改你的进程中的数据

00:18:57.086 --> 00:18:58.256 A:middle
如果我们继续

00:18:58.256 --> 00:18:59.616 A:middle
强制执行它们

00:18:59.616 --> 00:19:00.146 A:middle
它们会立即崩溃

00:19:00.606 --> 00:19:01.956 A:middle
因此请确保测试

00:19:01.956 --> 00:19:03.376 A:middle
发布版本来查看

00:19:03.666 --> 00:19:04.626 A:middle
运行代码签名执行

00:19:04.626 --> 00:19:07.216 A:middle
可能具有的其他影响

00:19:07.216 --> 00:19:08.806 A:middle
然后如果你需要

00:19:08.806 --> 00:19:10.676 A:middle
构建一个调试版本

00:19:10.676 --> 00:19:12.176 A:middle
而不通过 Xcode 的获取任务允许

00:19:12.176 --> 00:19:13.716 A:middle
你可以将代码签名注入基础权限

00:19:13.716 --> 00:19:17.096 A:middle
等于你的 Xcode 项目中的无选项

00:19:17.096 --> 00:19:18.456 A:middle
来获取所有的调试设置 除了

00:19:18.456 --> 00:19:18.856 A:middle
获取任务允许之外

00:19:21.216 --> 00:19:23.526 A:middle
同样这在插件生态系统中

00:19:23.526 --> 00:19:26.006 A:middle
也可能成为一个挑战

00:19:26.456 --> 00:19:27.926 A:middle
因为插件开发人员需要在

00:19:27.926 --> 00:19:29.696 A:middle
他们想要加载的 App 中

00:19:29.806 --> 00:19:30.716 A:middle
调试他们的插件

00:19:31.436 --> 00:19:32.426 A:middle
因此 我们同样建议你

00:19:32.586 --> 00:19:34.046 A:middle
考虑进程外

00:19:34.046 --> 00:19:36.576 A:middle
插件模型 或考虑

00:19:36.576 --> 00:19:38.666 A:middle
将一个你的

00:19:39.186 --> 00:19:40.486 A:middle
App 的调试版本发送给

00:19:40.486 --> 00:19:41.886 A:middle
注册插件开发人员

00:19:42.096 --> 00:19:44.126 A:middle
以便他们有能力进行

00:19:44.126 --> 00:19:45.416 A:middle
测试 但你不需要将其发送给

00:19:45.416 --> 00:19:48.166 A:middle
所有的顾客 但是如果

00:19:48.166 --> 00:19:50.776 A:middle
绝对必要 公证服务

00:19:50.776 --> 00:19:51.826 A:middle
将会接受

00:19:51.826 --> 00:19:53.446 A:middle
获取任务允许权限

00:19:53.446 --> 00:19:55.066 A:middle
和禁用

00:19:55.066 --> 00:19:56.506 A:middle
库验证权的组合

00:19:56.506 --> 00:19:57.616 A:middle
来允许此工作流程

00:20:02.396 --> 00:20:03.706 A:middle
受保护资源访问

00:20:05.036 --> 00:20:07.286 A:middle
我们都知道

00:20:07.286 --> 00:20:08.406 A:middle
你的顾客使用他们的 Mac 来

00:20:08.406 --> 00:20:10.946 A:middle
存储大量的关于

00:20:10.946 --> 00:20:13.526 A:middle
他们的生活的信息 而 Mac 则

00:20:13.526 --> 00:20:16.846 A:middle
可以访问对安全性敏感传感器

00:20:17.746 --> 00:20:19.136 A:middle
为了 或者 一旦你采用了

00:20:19.166 --> 00:20:20.376 A:middle
强化运行

00:20:20.696 --> 00:20:21.936 A:middle
你的 App 需要声明

00:20:21.936 --> 00:20:23.626 A:middle
其需要访问其中任何

00:20:23.626 --> 00:20:24.626 A:middle
受保护资源的意图

00:20:25.696 --> 00:20:27.696 A:middle
我们提到了去年的

00:20:27.696 --> 00:20:30.516 A:middle
内容 但是如果你需要访问

00:20:30.516 --> 00:20:32.616 A:middle
这些资源中的任意一个 你需要

00:20:32.616 --> 00:20:34.416 A:middle
在你的主捆绑包上

00:20:34.416 --> 00:20:37.716 A:middle
获得授权 然后声明一个

00:20:37.716 --> 00:20:39.786 A:middle
与授权有关的 usage 字符串

00:20:39.786 --> 00:20:41.016 A:middle
以便当你的

00:20:41.016 --> 00:20:43.016 A:middle
App 试图访问

00:20:43.016 --> 00:20:44.786 A:middle
这些资源的其中一个时

00:20:44.786 --> 00:20:46.086 A:middle
系统可以提供一个对话

00:20:46.086 --> 00:20:49.396 A:middle
说明需要访问这一资源的原因

00:20:49.396 --> 00:20:50.586 A:middle
以便你可以获取

00:20:50.586 --> 00:20:51.396 A:middle
用户的同意

00:20:52.656 --> 00:20:54.826 A:middle
下面是一些本部分的

00:20:54.826 --> 00:20:55.836 A:middle
总结建议

00:20:55.956 --> 00:20:57.856 A:middle
只使用你所需要的授权

00:20:57.986 --> 00:20:59.786 A:middle
这一授权关闭了

00:20:59.786 --> 00:21:00.996 A:middle
强化运行所提供的

00:21:00.996 --> 00:21:02.566 A:middle
安全性 而且它们可以被

00:21:02.566 --> 00:21:04.176 A:middle
任何查看你的

00:21:04.176 --> 00:21:05.936 A:middle
App 并试图发现

00:21:06.256 --> 00:21:07.476 A:middle
可以做点什么事情的人检视

00:21:07.476 --> 00:21:09.526 A:middle
一旦它被发送给顾客

00:21:09.746 --> 00:21:11.106 A:middle
因此要谨慎 只使用

00:21:11.106 --> 00:21:12.596 A:middle
你所需要的授权 并把它们

00:21:12.596 --> 00:21:14.416 A:middle
放在需要它们的进程中

00:21:14.416 --> 00:21:17.066 A:middle
如果你在你的 App 中有多个进程

00:21:17.066 --> 00:21:18.526 A:middle
多个可执行文件

00:21:18.526 --> 00:21:20.276 A:middle
它们不太可能都需要

00:21:20.276 --> 00:21:21.536 A:middle
同样的保护

00:21:21.536 --> 00:21:22.656 A:middle
你可能不需要在每一个进程中

00:21:22.656 --> 00:21:23.446 A:middle
都执行 JIT

00:21:23.446 --> 00:21:24.276 A:middle
你可能不需要将

00:21:24.276 --> 00:21:25.536 A:middle
插件加载到每一个进程中

00:21:25.806 --> 00:21:27.306 A:middle
因此只使用你所需要的授权

00:21:27.306 --> 00:21:28.806 A:middle
用于需要它们的进程

00:21:29.726 --> 00:21:31.306 A:middle
而且当你声明

00:21:31.306 --> 00:21:32.866 A:middle
资源访问时 确保

00:21:32.866 --> 00:21:34.266 A:middle
那些授权仅用于

00:21:34.266 --> 00:21:35.696 A:middle
你的 App 的主捆绑包

00:21:36.046 --> 00:21:38.686 A:middle
那些为你的捆绑包中

00:21:38.686 --> 00:21:41.206 A:middle
其他可执行文件所继承的包

00:21:41.206 --> 00:21:43.346 A:middle
它们不需要出现

00:21:43.416 --> 00:21:44.276 A:middle
只需要在主捆绑包上

00:21:44.716 --> 00:21:46.496 A:middle
现在我要把话筒交还给

00:21:46.496 --> 00:21:48.686 A:middle
Garrett 由他来介绍

00:21:48.686 --> 00:21:50.976 A:middle
实际提交公证需要怎么做

00:21:51.516 --> 00:21:57.206 A:middle
[掌声]

00:21:57.706 --> 00:21:58.196 A:middle
&gt;&gt; 谢谢 Robert

00:21:59.036 --> 00:22:00.066 A:middle
现在你们已经了解了

00:22:00.066 --> 00:22:00.886 A:middle
在构建和设计

00:22:00.886 --> 00:22:02.046 A:middle
App 时所要考虑的一切

00:22:02.046 --> 00:22:03.486 A:middle
以便它为

00:22:03.486 --> 00:22:05.516 A:middle
公证做好准备 那么你如何

00:22:05.516 --> 00:22:07.376 A:middle
实际将它提交给公证服务呢

00:22:08.356 --> 00:22:11.276 A:middle
我们先简单了解下

00:22:11.276 --> 00:22:12.846 A:middle
公证的工作流程

00:22:12.846 --> 00:22:13.926 A:middle
不管你使用的是

00:22:13.926 --> 00:22:15.166 A:middle
Xcode 还是有一个

00:22:15.166 --> 00:22:17.276 A:middle
自定义工作流程

00:22:17.406 --> 00:22:18.786 A:middle
大概的工作流程是基本相同的

00:22:19.866 --> 00:22:20.776 A:middle
你提交 App

00:22:20.776 --> 00:22:22.886 A:middle
进行公证 检查

00:22:23.116 --> 00:22:25.036 A:middle
公证服务的状态

00:22:25.336 --> 00:22:26.836 A:middle
一旦公证完成

00:22:27.256 --> 00:22:28.936 A:middle
你会获得一个标签

00:22:28.936 --> 00:22:31.276 A:middle
你最终需要确认该标签

00:22:31.276 --> 00:22:32.606 A:middle
和公证是否成功

00:22:32.606 --> 00:22:35.516 A:middle
在我们进一步解释

00:22:35.516 --> 00:22:36.946 A:middle
这个问题之前 我们应该先讨论一下

00:22:37.176 --> 00:22:39.636 A:middle
何时应该提交什么

00:22:39.636 --> 00:22:40.926 A:middle
你至少需要提交

00:22:40.926 --> 00:22:41.776 A:middle
你所发行的全部软件

00:22:41.776 --> 00:22:45.286 A:middle
但你其实也可以更频繁地

00:22:45.286 --> 00:22:46.616 A:middle
上传提交

00:22:46.616 --> 00:22:47.806 A:middle
让开发人员机器之外

00:22:47.806 --> 00:22:49.586 A:middle
运行的一切

00:22:49.586 --> 00:22:50.676 A:middle
都可以作为公证服务上传提交

00:22:51.076 --> 00:22:52.056 A:middle
不过你也不需要

00:22:52.056 --> 00:22:54.126 A:middle
上传所有 CI build

00:22:56.456 --> 00:22:58.266 A:middle
团队中的任何人都可提交

00:22:58.266 --> 00:23:00.386 A:middle
软件以供公证

00:23:00.926 --> 00:23:02.546 A:middle
这和去年不同

00:23:02.876 --> 00:23:04.706 A:middle
当时只有特定的成员才能这样做

00:23:07.076 --> 00:23:08.606 A:middle
现在你已经做好准备

00:23:08.606 --> 00:23:09.366 A:middle
提交给公证服务了

00:23:09.646 --> 00:23:11.596 A:middle
如果你使用的是 Xcode

00:23:11.596 --> 00:23:12.896 A:middle
那就非常容易 它已被集成到了

00:23:12.896 --> 00:23:14.356 A:middle
档案与发行工作流程里

00:23:14.946 --> 00:23:16.136 A:middle
所以一旦你构建了一份档案

00:23:16.176 --> 00:23:17.306 A:middle
就可以打开 Xcode 管理器

00:23:17.306 --> 00:23:18.486 A:middle
正如你所见的这样

00:23:19.306 --> 00:23:20.506 A:middle
然后选择发行 App

00:23:20.566 --> 00:23:22.236 A:middle
就像你之前使用 Developer ID 所做的那样

00:23:23.566 --> 00:23:27.246 A:middle
选择 Developer ID 然后使用

00:23:27.246 --> 00:23:28.536 A:middle
上传选项 把一份拷贝

00:23:28.536 --> 00:23:29.836 A:middle
提交给公证服务

00:23:30.346 --> 00:23:33.306 A:middle
你会在上传过程中

00:23:33.306 --> 00:23:35.626 A:middle
看到进度条

00:23:35.626 --> 00:23:37.126 A:middle
上传结束后

00:23:37.126 --> 00:23:38.586 A:middle
你会回到管理器

00:23:38.586 --> 00:23:39.956 A:middle
你会注意到

00:23:40.086 --> 00:23:41.566 A:middle
状态已改为正在处理

00:23:45.086 --> 00:23:46.216 A:middle
公证服务结束后

00:23:46.216 --> 00:23:48.386 A:middle
你将把通知

00:23:48.386 --> 00:23:51.056 A:middle
推送到 Xcode

00:23:51.056 --> 00:23:52.306 A:middle
回到管理器后

00:23:52.656 --> 00:23:53.706 A:middle
你会注意到状态

00:23:53.706 --> 00:23:55.856 A:middle
已经变成了准备发行

00:23:55.856 --> 00:23:57.446 A:middle
在屏幕的右下角

00:23:57.446 --> 00:23:59.826 A:middle
导出已公证 App 的选项已经可用了

00:24:02.586 --> 00:24:04.216 A:middle
Xcode 将为你

00:24:04.216 --> 00:24:06.496 A:middle
在 App 上附加通行证

00:24:06.496 --> 00:24:08.496 A:middle
这样它就完全准备好可以发行了

00:24:09.926 --> 00:24:10.766 A:middle
我们等一下会进一步说明

00:24:10.766 --> 00:24:12.026 A:middle
你将如何自我核实

00:24:12.026 --> 00:24:15.086 A:middle
因为那是自定义工作流程

00:24:15.086 --> 00:24:16.476 A:middle
与 Xcode 之间的共享工作流程

00:24:17.766 --> 00:24:20.636 A:middle
如果你不用 Xcode

00:24:21.266 --> 00:24:23.496 A:middle
那么用自定义工作流程进行提交

00:24:23.556 --> 00:24:24.316 A:middle
也一样的简单

00:24:24.956 --> 00:24:25.586 A:middle
首先你需要考虑

00:24:25.586 --> 00:24:28.296 A:middle
自己准备向公证服务提交什么

00:24:29.266 --> 00:24:31.146 A:middle
公证服务接受三种

00:24:31.146 --> 00:24:33.466 A:middle
主流格式 磁盘映像

00:24:33.726 --> 00:24:36.266 A:middle
安装包和 zip 档案

00:24:36.946 --> 00:24:38.466 A:middle
如果你的输出形式

00:24:38.466 --> 00:24:39.996 A:middle
是这三种之外的格式

00:24:40.526 --> 00:24:41.706 A:middle
那你就得先把它转换成

00:24:41.706 --> 00:24:42.956 A:middle
这三种格式之一

00:24:42.956 --> 00:24:44.136 A:middle
然后再发送到公证服务

00:24:44.666 --> 00:24:47.676 A:middle
别忘了 在你创建

00:24:47.676 --> 00:24:49.196 A:middle
zip 档案的时候

00:24:49.196 --> 00:24:51.026 A:middle
一定要包含 macOS

00:24:51.026 --> 00:24:53.536 A:middle
特定元数据 如扩展属性

00:24:54.126 --> 00:24:55.136 A:middle
如果你不知道该用哪种工具

00:24:55.136 --> 00:24:56.456 A:middle
可以在操作系统

00:24:56.456 --> 00:24:57.976 A:middle
内置的 ditto 和 Archive Utility 中获取支持

00:25:03.726 --> 00:25:05.496 A:middle
就是如果你使用

00:25:05.496 --> 00:25:07.266 A:middle
自定义安装工具

00:25:07.266 --> 00:25:08.356 A:middle
如果你的自定义安装工具

00:25:08.356 --> 00:25:10.116 A:middle
要从网络上拉取内容

00:25:10.116 --> 00:25:11.386 A:middle
作为安装的一部分

00:25:11.386 --> 00:25:13.556 A:middle
或者如果你使用

00:25:13.556 --> 00:25:15.436 A:middle
自定义打包格式 就会稍微麻烦一点

00:25:16.426 --> 00:25:17.816 A:middle
如果你的自定义安装工具

00:25:17.816 --> 00:25:19.346 A:middle
有上面的需要

00:25:19.736 --> 00:25:21.296 A:middle
那么你也许要采取

00:25:21.296 --> 00:25:23.846 A:middle
两步公证程序

00:25:23.846 --> 00:25:25.046 A:middle
也就是把所有将要

00:25:25.046 --> 00:25:27.146 A:middle
放进磁盘里的内容

00:25:27.146 --> 00:25:28.546 A:middle
使用上面提到的三种支持格式之一

00:25:28.546 --> 00:25:29.856 A:middle
提交公证

00:25:30.426 --> 00:25:32.296 A:middle
对其附加通行证

00:25:32.296 --> 00:25:33.736 A:middle
然后再单独提交你的安装 App

00:25:34.346 --> 00:25:37.206 A:middle
现在你已经知道

00:25:37.206 --> 00:25:38.066 A:middle
应该把哪些内容提交公证服务了

00:25:38.066 --> 00:25:40.453 A:middle
那么具体该怎么操作呢

00:25:40.516 --> 00:25:42.606 A:middle
Xcode 10 及更新版本

00:25:43.106 --> 00:25:44.336 A:middle
包括一个命令行工具

00:25:44.336 --> 00:25:45.646 A:middle
它叫做 altool

00:25:45.646 --> 00:25:47.336 A:middle
它的作用就是和公证服务进行交互

00:25:47.906 --> 00:25:49.066 A:middle
如果你在用多个版本的

00:25:49.066 --> 00:25:50.026 A:middle
Xcode 那就要用

00:25:50.026 --> 00:25:51.186 A:middle
Xcode select 以确保

00:25:51.186 --> 00:25:52.506 A:middle
你选择了 Xcode 10 

00:25:52.506 --> 00:25:54.546 A:middle
或更新版本 然后你就能用

00:25:54.726 --> 00:25:57.506 A:middle
带公证 App 指令的 altool 工具了

00:25:58.496 --> 00:25:59.806 A:middle
你需要用它提交

00:25:59.806 --> 00:26:02.146 A:middle
主捆绑包 ID

00:26:02.496 --> 00:26:03.656 A:middle
以及你想上传的文件

00:26:04.726 --> 00:26:05.916 A:middle
你需要验证

00:26:05.916 --> 00:26:08.056 A:middle
你的 Apple ID 如果你

00:26:08.056 --> 00:26:09.096 A:middle
看一看主页面 你会看到

00:26:09.096 --> 00:26:10.046 A:middle
使用钥匙串或者

00:26:10.046 --> 00:26:11.256 A:middle
环境变量的选项

00:26:11.256 --> 00:26:12.476 A:middle
这样一来你就不必

00:26:12.476 --> 00:26:13.446 A:middle
每次都输入密码了

00:26:14.006 --> 00:26:16.736 A:middle
公证上传完成后

00:26:16.736 --> 00:26:19.186 A:middle
你将收到一个 UID 请求

00:26:20.066 --> 00:26:21.906 A:middle
这个 UID 代表了

00:26:22.096 --> 00:26:24.206 A:middle
你提交的内容

00:26:24.206 --> 00:26:26.526 A:middle
你可以使用它和

00:26:26.526 --> 00:26:28.636 A:middle
公证信息指令

00:26:28.636 --> 00:26:30.576 A:middle
作为 altool 的一部分来

00:26:30.576 --> 00:26:32.886 A:middle
查看处理状态

00:26:32.886 --> 00:26:34.006 A:middle
你可以用这种方法来查看

00:26:34.286 --> 00:26:35.686 A:middle
公证何时结束

00:26:35.686 --> 00:26:38.646 A:middle
以及状态如何

00:26:39.766 --> 00:26:43.566 A:middle
这里是一个公证成功的例子

00:26:43.566 --> 00:26:44.916 A:middle
这里重要的是

00:26:44.916 --> 00:26:46.026 A:middle
日志文件 URL

00:26:46.676 --> 00:26:47.446 A:middle
无论公证是成功

00:26:47.446 --> 00:26:49.166 A:middle
还是出了问题

00:26:49.166 --> 00:26:51.116 A:middle
你都可以查看

00:26:51.116 --> 00:26:52.556 A:middle
日志文件 URL

00:26:52.556 --> 00:26:53.416 A:middle
了解更多信息

00:26:53.416 --> 00:26:56.676 A:middle
日志文件 URL 不会

00:26:56.676 --> 00:26:57.376 A:middle
长期存在

00:26:58.286 --> 00:26:59.656 A:middle
它们大约只会存在一天

00:27:01.446 --> 00:27:02.636 A:middle
获取一个新的 UID

00:27:03.076 --> 00:27:04.456 A:middle
这样当你需要公证信息时

00:27:04.456 --> 00:27:05.983 A:middle
就能获取新的日志文件 URL 了

00:27:09.786 --> 00:27:11.646 A:middle
这里的例子是一次

00:27:11.646 --> 00:27:12.806 A:middle
成功处理的 Json 日志

00:27:13.726 --> 00:27:15.896 A:middle
注意状态是已接受

00:27:16.906 --> 00:27:18.906 A:middle
如果它失败了

00:27:18.906 --> 00:27:23.026 A:middle
你就应该查看问题数组

00:27:23.026 --> 00:27:24.256 A:middle
在成功的公证里

00:27:24.256 --> 00:27:25.286 A:middle
这里应该是空白的

00:27:26.186 --> 00:27:27.906 A:middle
但如果出现了失败

00:27:27.906 --> 00:27:29.566 A:middle
这里就会出现对象

00:27:29.566 --> 00:27:31.116 A:middle
每一个对象代表

00:27:31.316 --> 00:27:32.166 A:middle
公证过程中的一个问题

00:27:32.166 --> 00:27:35.236 A:middle
它会显示哪个二进制文件

00:27:35.236 --> 00:27:37.586 A:middle
没有采用强化运行

00:27:37.886 --> 00:27:39.396 A:middle
或者是否有什么没有被正确签署

00:27:40.356 --> 00:27:42.576 A:middle
如果公证遭到拒绝 这里就是关键

00:27:43.086 --> 00:27:45.866 A:middle
如果成功了

00:27:45.866 --> 00:27:47.166 A:middle
你就应该查看

00:27:47.166 --> 00:27:49.176 A:middle
通行证内容 特别是如果你想

00:27:49.176 --> 00:27:50.166 A:middle
使用有趣的

00:27:50.166 --> 00:27:51.806 A:middle
打包软件方式的话

00:27:52.656 --> 00:27:54.136 A:middle
通行证内容应该列出

00:27:54.136 --> 00:27:55.936 A:middle
公证服务所发现的

00:27:55.936 --> 00:27:57.816 A:middle
每一个二进制文件

00:27:57.816 --> 00:27:59.116 A:middle
因此每个二进制文件的信息

00:27:59.116 --> 00:28:00.816 A:middle
都会被包含在通行证里

00:28:00.816 --> 00:28:01.826 A:middle
以供附加

00:28:02.826 --> 00:28:03.906 A:middle
如果你发现了

00:28:03.906 --> 00:28:04.836 A:middle
通行证内容里缺了什么

00:28:04.836 --> 00:28:07.386 A:middle
你就要尝试

00:28:07.576 --> 00:28:08.896 A:middle
发现问题所在

00:28:08.896 --> 00:28:09.436 A:middle
并再次尝试

00:28:10.476 --> 00:28:12.896 A:middle
无论你使用的是

00:28:12.896 --> 00:28:14.966 A:middle
Xcode 还是 altool

00:28:14.966 --> 00:28:16.006 A:middle
处理的提交

00:28:16.006 --> 00:28:18.716 A:middle
当公证服务完成后 你都会收到邮件

00:28:19.526 --> 00:28:20.746 A:middle
这里的例子是

00:28:20.746 --> 00:28:22.646 A:middle
一封代表公证成功的邮件

00:28:22.646 --> 00:28:24.286 A:middle
说明软件已经可以附加通行证了

00:28:24.876 --> 00:28:28.466 A:middle
然后就到了下一步

00:28:30.006 --> 00:28:32.106 A:middle
使用 Xcode 10 及以上版本内置的

00:28:32.106 --> 00:28:34.606 A:middle
一个叫 Stapler 的工具附加通行证

00:28:35.416 --> 00:28:36.656 A:middle
在这里你看到的例子

00:28:36.656 --> 00:28:38.856 A:middle
就是 Stapler 的附加指令

00:28:39.906 --> 00:28:40.946 A:middle
你可以用它直接向

00:28:40.946 --> 00:28:43.726 A:middle
安装包或磁盘映像附加通行证

00:28:44.206 --> 00:28:46.496 A:middle
现在要注意的是

00:28:46.496 --> 00:28:48.156 A:middle
你不能直接向 zip 文件附加通行证

00:28:48.156 --> 00:28:49.636 A:middle
你需要解压 zip 文件

00:28:50.026 --> 00:28:51.376 A:middle
向其内容附加通行证

00:28:51.376 --> 00:28:54.156 A:middle
然后再将其打包压缩准备发行

00:28:57.486 --> 00:28:59.226 A:middle
要注意的是

00:28:59.356 --> 00:29:01.856 A:middle
向命令行工具和库附加通行证的功能

00:29:01.916 --> 00:29:03.966 A:middle
目前还没有实现 虽然它们

00:29:03.966 --> 00:29:06.336 A:middle
也都可以而且应该被公证

00:29:10.336 --> 00:29:12.326 A:middle
附加通行证之后

00:29:12.326 --> 00:29:13.326 A:middle
下一步就是验证

00:29:13.326 --> 00:29:14.226 A:middle
一切都公证成功

00:29:14.226 --> 00:29:16.586 A:middle
取决于你想验证的东西

00:29:16.586 --> 00:29:17.756 A:middle
这一步会有小小的不同

00:29:17.756 --> 00:29:20.086 A:middle
但首先要做的事很简单

00:29:20.086 --> 00:29:21.226 A:middle
如果你只是想验证

00:29:21.226 --> 00:29:22.506 A:middle
某些东西附加了通行证

00:29:23.136 --> 00:29:24.496 A:middle
那你只需再次使用 Stapler 工具

00:29:25.106 --> 00:29:26.706 A:middle
在这里你可以看到

00:29:26.706 --> 00:29:28.546 A:middle
向 Stapler 工具输入了验证指令

00:29:29.046 --> 00:29:30.096 A:middle
让它去验证一个项目

00:29:30.286 --> 00:29:33.566 A:middle
正确地附加了通行证

00:29:33.566 --> 00:29:34.326 A:middle
而如果你想验证

00:29:34.326 --> 00:29:36.146 A:middle
某些未附加通行证

00:29:36.596 --> 00:29:38.636 A:middle
或者不是由你亲自附加通行证的项目

00:29:38.816 --> 00:29:40.146 A:middle
是否得到成功公证 该怎么做呢

00:29:40.706 --> 00:29:41.376 A:middle
在这种情况下

00:29:41.376 --> 00:29:43.586 A:middle
你就要用到 SPCTL 指令

00:29:44.026 --> 00:29:45.716 A:middle
它是 macOS 中内置的

00:29:46.616 --> 00:29:48.396 A:middle
运行把关评估的工具

00:29:48.936 --> 00:29:51.696 A:middle
取决于你想验证的内容

00:29:51.696 --> 00:29:53.246 A:middle
这一步也会有轻微的不同

00:29:53.246 --> 00:29:55.006 A:middle
但如果你想验证

00:29:55.006 --> 00:29:56.416 A:middle
一个 App 捆绑包

00:29:56.416 --> 00:29:58.856 A:middle
你可以使用 SPCTL 指令的

00:29:58.856 --> 00:30:01.466 A:middle
评估选项中的

00:30:02.316 --> 00:30:04.666 A:middle
详细输出了解

00:30:04.826 --> 00:30:06.026 A:middle
到 App 的路径

00:30:07.296 --> 00:30:08.786 A:middle
source 会告诉你

00:30:08.786 --> 00:30:09.756 A:middle
它是否得到了公证

00:30:10.656 --> 00:30:11.956 A:middle
经公证的 Developer ID 意味着

00:30:11.956 --> 00:30:12.786 A:middle
它成功地得到了公证

00:30:12.786 --> 00:30:13.986 A:middle
而如果它显示出

00:30:13.986 --> 00:30:15.706 A:middle
其它内容 那就说明

00:30:15.706 --> 00:30:16.566 A:middle
它没有得到公证

00:30:17.036 --> 00:30:20.086 A:middle
而如果你想验证

00:30:20.086 --> 00:30:21.046 A:middle
安装包是否得到了公证

00:30:21.046 --> 00:30:24.616 A:middle
你也可以像刚才那样

00:30:24.616 --> 00:30:26.446 A:middle
使用 SPCTL 指令

00:30:26.446 --> 00:30:27.806 A:middle
只不过再加上一个

00:30:27.866 --> 00:30:30.176 A:middle
类型选项把路径改成安装包

00:30:31.446 --> 00:30:32.436 A:middle
同样 这也会为你显示

00:30:32.436 --> 00:30:33.976 A:middle
source 如果它得到了

00:30:33.976 --> 00:30:35.066 A:middle
成功认证 你就会看到

00:30:35.066 --> 00:30:37.186 A:middle
经公证的 Developer ID

00:30:39.856 --> 00:30:42.586 A:middle
接下来 如果你想验证

00:30:42.586 --> 00:30:45.186 A:middle
已签署的磁盘映像又该怎么做呢

00:30:46.796 --> 00:30:48.206 A:middle
你也可以使用

00:30:48.206 --> 00:30:49.766 A:middle
基本相同的指令

00:30:49.766 --> 00:30:52.186 A:middle
只不过要换成 type open

00:30:52.186 --> 00:30:53.846 A:middle
并输入幻灯片上

00:30:54.346 --> 00:30:55.596 A:middle
列出的上下文

00:30:56.726 --> 00:30:57.866 A:middle
这会显示出和刚才一样的

00:30:57.866 --> 00:31:00.366 A:middle
输出 如果显示的是

00:31:00.366 --> 00:31:01.586 A:middle
经公证的 Developer ID

00:31:01.946 --> 00:31:03.966 A:middle
就说明已签署磁盘映像的公证成功了

00:31:05.546 --> 00:31:06.246 A:middle
如果你想验证

00:31:06.246 --> 00:31:08.006 A:middle
其它任何对象的公证状态

00:31:08.006 --> 00:31:09.736 A:middle
你就需要使用

00:31:09.736 --> 00:31:11.766 A:middle
代码签名指令

00:31:13.456 --> 00:31:14.726 A:middle
这里的例子就是使用

00:31:14.726 --> 00:31:17.126 A:middle
代码签名指令的验证功能

00:31:17.126 --> 00:31:21.316 A:middle
详细输出 以验证

00:31:21.316 --> 00:31:22.706 A:middle
一个非常特别的请求

00:31:23.226 --> 00:31:25.306 A:middle
notarized 然后是到

00:31:25.306 --> 00:31:26.376 A:middle
二进制文件的路径或者

00:31:26.376 --> 00:31:29.086 A:middle
你想验证的东西

00:31:29.086 --> 00:31:30.126 A:middle
输出的第三行会告诉你

00:31:30.126 --> 00:31:31.896 A:middle
explicit requirements satisfied

00:31:32.276 --> 00:31:33.206 A:middle
这说明你输入到

00:31:33.206 --> 00:31:34.506 A:middle
命令行的请求

00:31:34.506 --> 00:31:35.976 A:middle
已经成功得到满足

00:31:35.976 --> 00:31:37.586 A:middle
在这个例子里就说明

00:31:37.586 --> 00:31:39.406 A:middle
二进制文件得到了公证

00:31:40.536 --> 00:31:42.366 A:middle
如果它说的是

00:31:42.366 --> 00:31:44.126 A:middle
explicit requirement failed 

00:31:44.126 --> 00:31:45.936 A:middle
那就说明二进制文件没有得到成功公证

00:31:46.546 --> 00:31:50.056 A:middle
关于验证公证的方法

00:31:50.266 --> 00:31:51.366 A:middle
就讲到这里

00:31:51.816 --> 00:31:53.176 A:middle
我想再调回去

00:31:53.176 --> 00:31:55.586 A:middle
讲一下 altool 的另一个用途

00:31:55.586 --> 00:31:57.226 A:middle
我在这次演讲开始时提过它

00:31:58.636 --> 00:32:00.386 A:middle
altool 还能通过

00:32:00.386 --> 00:32:02.506 A:middle
公证历史指令

00:32:02.506 --> 00:32:04.646 A:middle
为你显示你提交公证过的

00:32:04.646 --> 00:32:06.006 A:middle
所有软件的

00:32:06.006 --> 00:32:08.226 A:middle
公证历史

00:32:09.406 --> 00:32:10.446 A:middle
在这里你会看到

00:32:10.446 --> 00:32:12.576 A:middle
指令与输出的范例

00:32:13.156 --> 00:32:14.546 A:middle
它还能接受页码标注

00:32:14.546 --> 00:32:17.666 A:middle
你可以为所有的提交操作标注页码

00:32:19.906 --> 00:32:21.056 A:middle
我明白要消化的信息

00:32:21.056 --> 00:32:26.316 A:middle
对于这样一场短短的演讲来说是多了点

00:32:26.316 --> 00:32:27.586 A:middle
但是有几件重要的事

00:32:27.586 --> 00:32:28.856 A:middle
是我非常希望大家能够了解的

00:32:29.776 --> 00:32:31.916 A:middle
首先 非常重要的是

00:32:31.916 --> 00:32:33.896 A:middle
使用彻底性代码签名

00:32:34.286 --> 00:32:35.786 A:middle
正确签署你的软件

00:32:36.576 --> 00:32:37.846 A:middle
这很重要 不仅因为

00:32:37.846 --> 00:32:39.286 A:middle
把关工具能够验证

00:32:39.286 --> 00:32:40.326 A:middle
你的软件没有遭到篡改

00:32:40.326 --> 00:32:42.746 A:middle
也是出于公证的需要

00:32:45.816 --> 00:32:48.036 A:middle
第二 不要接受

00:32:48.036 --> 00:32:50.126 A:middle
你不需要的强化运行授权

00:32:50.866 --> 00:32:52.266 A:middle
想一想强化运行

00:32:52.266 --> 00:32:55.206 A:middle
能为你的 App 和用户带来的好处

00:32:55.206 --> 00:32:56.546 A:middle
记住你接受的每一次授权

00:32:56.546 --> 00:32:59.246 A:middle
都会降低 App 的安全性

00:32:59.746 --> 00:33:01.866 A:middle
所以要只接受你需要的授权

00:33:03.646 --> 00:33:05.996 A:middle
最后 要公证你发行的

00:33:05.996 --> 00:33:07.166 A:middle
所有软件 并为其附加通行证

00:33:07.566 --> 00:33:10.146 A:middle
以便其通过 macOS Catalina 的把关工具

00:33:13.516 --> 00:33:15.296 A:middle
感谢参加本次会议

00:33:15.296 --> 00:33:16.086 A:middle
如果你对公证有

00:33:16.086 --> 00:33:17.536 A:middle
进一步的兴趣

00:33:17.536 --> 00:33:18.796 A:middle
请到公证实验室来

00:33:18.796 --> 00:33:19.596 A:middle
它会紧接着本次会议

00:33:19.596 --> 00:33:21.096 A:middle
于下午 4 点开始

00:33:21.586 --> 00:33:24.666 A:middle
此外 本周还有其它的几个实验室

00:33:24.666 --> 00:33:25.856 A:middle
会开放 我们将探讨

00:33:25.856 --> 00:33:27.726 A:middle
安全 公证和签名相关的话题

00:33:28.516 --> 00:33:36.500 A:middle
谢谢大家 [掌声]

