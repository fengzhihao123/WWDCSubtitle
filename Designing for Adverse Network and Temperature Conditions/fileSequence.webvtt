WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:01.176 --> 00:00:04.500 A:middle
[音乐]

00:00:11.696 --> 00:00:12.696 A:middle
&gt;&gt; 晚上好

00:00:14.066 --> 00:00:16.136 A:middle
欢迎你们参加主题为

00:00:16.136 --> 00:00:17.856 A:middle
“针对恶劣的网络和
温度条件进行设计” 的大会

00:00:18.716 --> 00:00:19.986 A:middle
无论你是刚开始开发你的第一个 App

00:00:19.986 --> 00:00:21.536 A:middle
或者已经是一个

00:00:21.536 --> 00:00:23.336 A:middle
经验丰富的 App 开发者

00:00:23.336 --> 00:00:25.036 A:middle
我们都希望你的设计

00:00:25.036 --> 00:00:26.136 A:middle
具有世界级的体验

00:00:27.016 --> 00:00:28.366 A:middle
你的 App 有潜力

00:00:28.366 --> 00:00:30.136 A:middle
可以被数百万人

00:00:30.136 --> 00:00:31.626 A:middle
在许多不同的情况下使用

00:00:32.566 --> 00:00:34.526 A:middle
其中许多人没有使用

00:00:34.526 --> 00:00:37.106 A:middle
超高速的 4G 网络

00:00:37.106 --> 00:00:38.806 A:middle
一些人可能身处更炎热的环境中

00:00:39.966 --> 00:00:41.166 A:middle
我们做了一定程度的测试

00:00:41.196 --> 00:00:43.346 A:middle
但是你是否做了足够的工作

00:00:43.346 --> 00:00:44.806 A:middle
来了解那些用户

00:00:44.806 --> 00:00:46.506 A:middle
如何与你的 App 进行交互

00:00:46.506 --> 00:00:48.346 A:middle
如果你做了这些

00:00:48.346 --> 00:00:51.146 A:middle
你又是否提供了最好的体验

00:00:52.326 --> 00:00:54.266 A:middle
优秀的 App

00:00:54.326 --> 00:00:55.436 A:middle
即使在具有挑战性的现实环境中

00:00:55.436 --> 00:00:57.006 A:middle
也能很好地工作

00:00:57.006 --> 00:00:58.496 A:middle
而做到这一点在设计层面上是比较困难的

00:00:59.046 --> 00:01:00.396 A:middle
这就是为什么

00:01:00.396 --> 00:01:02.046 A:middle
我们在这里与你分享一些技巧

00:01:02.086 --> 00:01:03.856 A:middle
以及 Xcode 中全新的工具来实现它

00:01:04.366 --> 00:01:05.215 A:middle
我是 Alex Kara

00:01:05.596 --> 00:01:06.546 A:middle
&gt;&gt; 我是 Ilya Veygman

00:01:07.206 --> 00:01:08.446 A:middle
我们致力于提升

00:01:08.446 --> 00:01:10.196 A:middle
iOS 系统的性能

00:01:10.196 --> 00:01:11.626 A:middle
使它能在现实世界中

00:01:11.626 --> 00:01:13.106 A:middle
良好 可靠且一致地运行

00:01:13.826 --> 00:01:15.286 A:middle
iOS 会对不断变化的网络

00:01:15.286 --> 00:01:16.866 A:middle
和温度条件做出反应

00:01:16.866 --> 00:01:18.386 A:middle
我们希望你的 App

00:01:18.386 --> 00:01:20.036 A:middle
能够同样做到这点

00:01:20.036 --> 00:01:21.156 A:middle
这样你就能以你设计的方式

00:01:21.376 --> 00:01:22.436 A:middle
体验你的 App

00:01:23.856 --> 00:01:24.956 A:middle
&gt;&gt; 今天 我们要谈论

00:01:24.956 --> 00:01:25.806 A:middle
一些令人兴奋的内容

00:01:26.146 --> 00:01:28.116 A:middle
首先 我们将深入探讨

00:01:28.116 --> 00:01:29.746 A:middle
真实世界的设备条件

00:01:29.746 --> 00:01:31.906 A:middle
以及它们与设计过程的契合之处

00:01:33.066 --> 00:01:34.906 A:middle
接下来 我们将向你展示

00:01:34.906 --> 00:01:36.286 A:middle
如何使用新的和现有的开发者工具

00:01:36.466 --> 00:01:37.866 A:middle
改进 App

00:01:38.186 --> 00:01:40.186 A:middle
在不同网络连接下的行为

00:01:41.366 --> 00:01:42.846 A:middle
最后 我们将展示

00:01:42.846 --> 00:01:44.506 A:middle
一个全新的方法来优化

00:01:44.506 --> 00:01:46.666 A:middle
你的 App 在不同温度条件下的性能

00:01:52.016 --> 00:01:54.166 A:middle
&gt;&gt; 我想让你想象一下

00:01:54.166 --> 00:01:55.736 A:middle
你如何以及在哪里使用 iOS

00:01:56.226 --> 00:01:57.646 A:middle
你不只是在家里

00:01:57.646 --> 00:01:59.176 A:middle
或办公室使用你的设备

00:02:01.636 --> 00:02:04.826 A:middle
去海滩 去公园

00:02:04.826 --> 00:02:06.736 A:middle
在地铁上 在汽车上

00:02:06.736 --> 00:02:07.336 A:middle
进行长途旅行

00:02:08.716 --> 00:02:09.826 A:middle
这些地方可能伴随着

00:02:09.826 --> 00:02:12.146 A:middle
充足的阳光或热量

00:02:12.146 --> 00:02:12.926 A:middle
抑或是很弱的网络连接

00:02:14.106 --> 00:02:15.186 A:middle
现在 想象一下你的用户

00:02:15.966 --> 00:02:17.326 A:middle
他们很有可能

00:02:17.326 --> 00:02:19.106 A:middle
会在这样的环境中使用你的 App

00:02:19.606 --> 00:02:20.746 A:middle
你需要考虑如何将其

00:02:20.746 --> 00:02:22.356 A:middle
与你的开发

00:02:22.356 --> 00:02:23.736 A:middle
和测试环境进行比较

00:02:25.106 --> 00:02:26.896 A:middle
你可能正在办公室

00:02:26.976 --> 00:02:28.976 A:middle
或实验室中进行大部分

00:02:28.976 --> 00:02:31.116 A:middle
或所有的开发和测试

00:02:31.536 --> 00:02:32.796 A:middle
这些场所都具有

00:02:32.796 --> 00:02:34.066 A:middle
快速 可靠的网络连接

00:02:34.066 --> 00:02:35.506 A:middle
和气候控制

00:02:35.506 --> 00:02:37.326 A:middle
这无疑是一件好事

00:02:37.326 --> 00:02:38.746 A:middle
我们都想要一个

00:02:38.746 --> 00:02:39.216 A:middle
可控的工作环境

00:02:40.526 --> 00:02:41.416 A:middle
但这些情况

00:02:41.416 --> 00:02:42.846 A:middle
与世界各地的用户

00:02:42.846 --> 00:02:44.376 A:middle
在与你的 App 交互时

00:02:44.376 --> 00:02:45.986 A:middle
所面临的情况并不相同

00:02:46.026 --> 00:02:47.176 A:middle
这种差异可能会使得你

00:02:47.176 --> 00:02:48.226 A:middle
在看到用户

00:02:48.226 --> 00:02:49.736 A:middle
对你的 App 发出抱怨时

00:02:49.736 --> 00:02:51.996 A:middle
将其视为一次性的故障或特例

00:02:52.556 --> 00:02:55.686 A:middle
除此之外 这些

00:02:55.686 --> 00:02:56.656 A:middle
设备还可能进行多任务处理

00:02:57.696 --> 00:02:58.996 A:middle
你的用户可能正坐在

00:02:58.996 --> 00:03:00.536 A:middle
汽车的副驾驶座位上

00:03:00.536 --> 00:03:01.766 A:middle
一边播放音乐

00:03:01.766 --> 00:03:03.196 A:middle
一边通过无线网络连接到 CarPlay

00:03:03.196 --> 00:03:03.756 A:middle
并获知转弯方向

00:03:04.706 --> 00:03:05.636 A:middle
他们可能在咖啡店

00:03:06.176 --> 00:03:07.816 A:middle
给 iPhone 充电

00:03:07.816 --> 00:03:09.526 A:middle
并将其作为 Mac 的个人热点

00:03:10.116 --> 00:03:11.496 A:middle
或者 他们可能在 App

00:03:11.496 --> 00:03:12.726 A:middle
运行 3D 渲染

00:03:12.726 --> 00:03:14.316 A:middle
或其他复杂的后台处理时

00:03:14.316 --> 00:03:15.686 A:middle
使用 ARKit

00:03:15.686 --> 00:03:17.506 A:middle
通过摄像头识别 App 中的对象

00:03:18.116 --> 00:03:21.176 A:middle
这一切告诉我们

00:03:21.176 --> 00:03:22.736 A:middle
所有这些场景都能造成

00:03:22.736 --> 00:03:25.096 A:middle
你的设备更高负载地工作并获得热量

00:03:26.486 --> 00:03:27.706 A:middle
虽然你的 App 的功能

00:03:27.706 --> 00:03:28.906 A:middle
可能在隔离的测试环境中

00:03:28.996 --> 00:03:30.976 A:middle
运行得很好

00:03:30.976 --> 00:03:32.506 A:middle
但是你是否考虑过

00:03:32.506 --> 00:03:33.676 A:middle
在这些非常真实和常见的例子中

00:03:33.676 --> 00:03:35.496 A:middle
App 的性能可能会有所不同

00:03:36.286 --> 00:03:38.326 A:middle
对用户来说的

00:03:38.326 --> 00:03:40.536 A:middle
一个潜在痛点是

00:03:40.536 --> 00:03:41.866 A:middle
他们一直在试图与一个

00:03:41.866 --> 00:03:43.556 A:middle
只针对你的工作环境而设计的 App 进行交互

00:03:44.456 --> 00:03:45.426 A:middle
他们会对此有怎样的意见

00:03:46.456 --> 00:03:48.806 A:middle
&gt;&gt; 我们已经注意到

00:03:48.806 --> 00:03:50.116 A:middle
App Store 上的一些评论

00:03:50.116 --> 00:03:52.676 A:middle
提到了在某些情况下 App 低于预期的性能

00:03:53.276 --> 00:03:54.686 A:middle
很棒的 App

00:03:54.686 --> 00:03:55.836 A:middle
但有时却不够好用

00:03:56.586 --> 00:03:57.706 A:middle
无论是在火车上

00:03:58.146 --> 00:03:59.956 A:middle
炎热的地方

00:03:59.956 --> 00:04:02.076 A:middle
还是在公路旅行中

00:04:02.076 --> 00:04:03.546 A:middle
这可能是你的用户

00:04:03.546 --> 00:04:04.856 A:middle
记住你的 App 的最重要的方式

00:04:04.856 --> 00:04:06.206 A:middle
他们可能不想在经历了

00:04:06.206 --> 00:04:07.996 A:middle
一场糟糕的体验后再次使用它

00:04:08.636 --> 00:04:10.176 A:middle
我们知道

00:04:10.176 --> 00:04:11.386 A:middle
当人们在阳光直射下

00:04:11.386 --> 00:04:13.206 A:middle
或者在隧道中使用手机时

00:04:13.206 --> 00:04:14.436 A:middle
他们希望你的 App 能够继续工作

00:04:14.436 --> 00:04:17.526 A:middle
我们也知道人们并不总是处于

00:04:17.526 --> 00:04:18.606 A:middle
最佳的网络环境中

00:04:19.606 --> 00:04:20.896 A:middle
如果你的开发条件并不具有代表性

00:04:20.896 --> 00:04:22.416 A:middle
或者是一个净室条件

00:04:22.416 --> 00:04:24.306 A:middle
那么这一点就很容易被忽略

00:04:25.476 --> 00:04:26.926 A:middle
所以我们想要

00:04:26.956 --> 00:04:28.496 A:middle
把这些情况考虑进去

00:04:28.496 --> 00:04:32.266 A:middle
我们希望你能够提供一个一致的

00:04:32.266 --> 00:04:33.086 A:middle
而不是低于预期的使用体验

00:04:33.906 --> 00:04:35.246 A:middle
你会在你的反馈中

00:04:35.306 --> 00:04:37.226 A:middle
发现身处 3G 网络环境中的用户

00:04:37.226 --> 00:04:38.456 A:middle
或者在你的 App 中发现一个问题

00:04:38.456 --> 00:04:41.386 A:middle
并注意到你的设备温度升高

00:04:42.066 --> 00:04:43.246 A:middle
你可能会认为

00:04:43.246 --> 00:04:44.826 A:middle
这些都是预期中的不良行为

00:04:44.856 --> 00:04:47.316 A:middle
但这些并不是极端情况

00:04:47.706 --> 00:04:49.046 A:middle
这些其实都是你和用户

00:04:49.046 --> 00:04:51.036 A:middle
将要面对的真实情况

00:04:51.626 --> 00:04:52.766 A:middle
为了更好地处理它们

00:04:52.766 --> 00:04:56.096 A:middle
你将需要正确的开发者工具

00:04:56.176 --> 00:04:57.876 A:middle
以及更好地应用它们的过程

00:04:58.186 --> 00:05:00.316 A:middle
让我们从网络连接开始

00:05:00.966 --> 00:05:03.256 A:middle
如果你将网络

00:05:03.586 --> 00:05:06.406 A:middle
用于 App 中的主要功能或后台工作

00:05:07.186 --> 00:05:08.426 A:middle
那么你可能已经在代码中决定

00:05:08.426 --> 00:05:10.086 A:middle
在所使用的网络类型中

00:05:10.086 --> 00:05:11.026 A:middle
进行相应的操作

00:05:12.096 --> 00:05:13.266 A:middle
如果网络通话时间过长

00:05:13.266 --> 00:05:14.846 A:middle
你可能会选择暂停

00:05:15.846 --> 00:05:17.766 A:middle
对于你的用户

00:05:17.766 --> 00:05:19.286 A:middle
他们中的一些人可能正在使用 3G 网络

00:05:20.186 --> 00:05:21.786 A:middle
如果他们的现实情况确实如此

00:05:21.786 --> 00:05:23.096 A:middle
那么即使下载需要更长的时间

00:05:23.096 --> 00:05:25.306 A:middle
他们也会很乐意等待下载完成

00:05:26.436 --> 00:05:28.046 A:middle
但你对于暂停的决定

00:05:28.756 --> 00:05:30.546 A:middle
并没有尊重他们的意愿

00:05:31.126 --> 00:05:32.236 A:middle
即使他们很乐意等待

00:05:32.236 --> 00:05:33.776 A:middle
但当他们发现 App 没有任何进展时

00:05:33.776 --> 00:05:34.736 A:middle
他们肯定会感到惊讶

00:05:35.246 --> 00:05:37.066 A:middle
这些决定累积起来

00:05:37.116 --> 00:05:39.066 A:middle
就会成为用户体验的一部分

00:05:42.836 --> 00:05:45.416 A:middle
当用户启动你的 App 时

00:05:45.416 --> 00:05:48.026 A:middle
他们不希望看到网络微调器

00:05:48.026 --> 00:05:50.116 A:middle
不是持续稳定地下载

00:05:50.116 --> 00:05:51.236 A:middle
就是完全地停止下载

00:05:52.206 --> 00:05:55.406 A:middle
这可能是你在 App 启动期间

00:05:55.406 --> 00:05:56.686 A:middle
进行网络调用时提供的体验

00:05:56.936 --> 00:05:58.586 A:middle
但如果你在 LTE 上

00:05:58.586 --> 00:06:00.416 A:middle
或者高速 Wi-Fi 上运行 App 时

00:06:00.416 --> 00:06:01.906 A:middle
即使是在进行性能测试

00:06:01.906 --> 00:06:02.816 A:middle
你也会觉得结果不错

00:06:03.296 --> 00:06:04.796 A:middle
一段时间后

00:06:04.796 --> 00:06:06.296 A:middle
特别是如果有其他的 App

00:06:06.296 --> 00:06:08.166 A:middle
能够在相同的条件下正常运行

00:06:08.376 --> 00:06:09.766 A:middle
那么你的用户可能会对这个界面十分厌倦

00:06:09.766 --> 00:06:11.976 A:middle
甚至完全放弃你的 App

00:06:12.796 --> 00:06:13.916 A:middle
你的 App 应该

00:06:13.916 --> 00:06:15.416 A:middle
在即使没有网络连接的条件下

00:06:15.416 --> 00:06:16.206 A:middle
依然可以正常启动

00:06:16.746 --> 00:06:19.266 A:middle
如果我想用一个

00:06:19.316 --> 00:06:21.126 A:middle
提前关闭的 App

00:06:21.126 --> 00:06:22.966 A:middle
获取重要新闻

00:06:22.966 --> 00:06:24.636 A:middle
我可能会注意到

00:06:24.636 --> 00:06:25.916 A:middle
在较慢的网络连接上 内容无法加载

00:06:26.426 --> 00:06:28.086 A:middle
如果我使用其他 App

00:06:28.086 --> 00:06:29.546 A:middle
并注意到它们不会在

00:06:29.546 --> 00:06:31.236 A:middle
同样的情况下失败 那么我会认为

00:06:31.236 --> 00:06:33.566 A:middle
这个 App 很难使用 或者有 Bug

00:06:34.406 --> 00:06:35.926 A:middle
如果你在测试中

00:06:35.926 --> 00:06:37.726 A:middle
标记出网络调用

00:06:37.726 --> 00:06:39.486 A:middle
或显式跳过它们

00:06:39.486 --> 00:06:41.376 A:middle
那么你的开发或测试就有可能跳过这种情况

00:06:42.556 --> 00:06:43.756 A:middle
因此 你应该查看一下

00:06:43.756 --> 00:06:45.236 A:middle
Xcode 的 Scheme 编辑器

00:06:45.556 --> 00:06:46.526 A:middle
看看是否设置了

00:06:46.526 --> 00:06:48.906 A:middle
用于单元测试的环境变量

00:06:50.106 --> 00:06:51.066 A:middle
当你将 App 作为单元

00:06:51.066 --> 00:06:52.886 A:middle
测试主机运行时

00:06:52.886 --> 00:06:54.506 A:middle
你可能会使用它来防止在

00:06:54.506 --> 00:06:56.226 A:middle
App 启动期间发生不必要的工作

00:06:56.816 --> 00:06:58.656 A:middle
对于单元测试

00:06:58.656 --> 00:06:59.976 A:middle
为了优化执行速度

00:06:59.976 --> 00:07:01.716 A:middle
你可以跳过一些工作

00:07:01.716 --> 00:07:03.206 A:middle
比如启动后台网络请求

00:07:03.206 --> 00:07:05.006 A:middle
但是你需要确保

00:07:05.006 --> 00:07:05.966 A:middle
你仍然在其他地方

00:07:05.966 --> 00:07:06.886 A:middle
处理这些情况

00:07:08.196 --> 00:07:11.196 A:middle
XC 测试将等到 App 委托

00:07:11.196 --> 00:07:12.756 A:middle
完成启动方法返回后

00:07:13.046 --> 00:07:14.666 A:middle
才开始运行测试

00:07:15.336 --> 00:07:16.386 A:middle
如果你在这里

00:07:16.386 --> 00:07:18.066 A:middle
使用环境变量

00:07:18.066 --> 00:07:19.356 A:middle
你需要检查你跳过的代码

00:07:19.356 --> 00:07:21.016 A:middle
对于单元测试的正常运行

00:07:21.076 --> 00:07:21.926 A:middle
是否确实不是必需的

00:07:22.796 --> 00:07:23.666 A:middle
如果你正在标记

00:07:23.666 --> 00:07:25.166 A:middle
或完全跳过网络调用

00:07:25.486 --> 00:07:26.306 A:middle
那么你需要确保

00:07:26.306 --> 00:07:27.966 A:middle
在开发过程的

00:07:27.966 --> 00:07:30.406 A:middle
其他地方包含了这些情况

00:07:30.406 --> 00:07:32.226 A:middle
以及实际的网络类型

00:07:32.226 --> 00:07:33.776 A:middle
为此 我们需要考虑

00:07:33.776 --> 00:07:35.196 A:middle
什么才是一个好的测试模型

00:07:35.596 --> 00:07:39.436 A:middle
在本周早些时候的

00:07:39.436 --> 00:07:40.966 A:middle
测试和 Xcode 会议上

00:07:40.966 --> 00:07:42.336 A:middle
我们介绍了 Pyramid 模型

00:07:42.336 --> 00:07:43.956 A:middle
以及它是如何构建

00:07:43.956 --> 00:07:45.856 A:middle
可维护的自动化测试套件

00:07:46.966 --> 00:07:48.596 A:middle
一个好的测试模型平衡了

00:07:48.676 --> 00:07:50.596 A:middle
完整性 质量和执行速度

00:07:50.596 --> 00:07:52.886 A:middle
并由大量集中的

00:07:52.886 --> 00:07:55.766 A:middle
单元测试组成

00:07:56.146 --> 00:07:57.406 A:middle
这些地方可以进行优化

00:07:57.406 --> 00:07:58.936 A:middle
以获得快速的执行时间

00:07:58.936 --> 00:08:00.566 A:middle
因为我们想在这里隔离特性

00:08:00.566 --> 00:08:02.796 A:middle
所以在净室条件下

00:08:02.796 --> 00:08:04.516 A:middle
运行这些是没有问题的

00:08:05.346 --> 00:08:06.416 A:middle
你可能正在使用这些

00:08:06.416 --> 00:08:07.526 A:middle
来寻找函数回归

00:08:08.876 --> 00:08:10.196 A:middle
还有一些

00:08:10.196 --> 00:08:13.606 A:middle
针对 App 中离散类集的

00:08:13.606 --> 00:08:15.676 A:middle
集成测试

00:08:15.846 --> 00:08:17.706 A:middle
集成测试检查

00:08:17.706 --> 00:08:19.146 A:middle
App 的子系统

00:08:19.146 --> 00:08:21.176 A:middle
是否从用户的角度协同工作

00:08:22.176 --> 00:08:23.556 A:middle
由于这些测试结果

00:08:23.556 --> 00:08:25.026 A:middle
更紧密地反映实际的使用情况

00:08:25.026 --> 00:08:27.876 A:middle
因此它们可能会增加方差

00:08:28.196 --> 00:08:29.356 A:middle
因此 你应该准备好

00:08:29.356 --> 00:08:30.736 A:middle
更深入地分类失败原因

00:08:30.736 --> 00:08:32.596 A:middle
而不是仅仅认为

00:08:32.596 --> 00:08:34.166 A:middle
这些测试是不可靠的

00:08:34.746 --> 00:08:38.976 A:middle
最后 该套件还附带了

00:08:38.976 --> 00:08:40.775 A:middle
用户界面测试或 UI 测试

00:08:40.775 --> 00:08:42.876 A:middle
这些测试以一种

00:08:42.946 --> 00:08:44.256 A:middle
非常类似于用户与 App

00:08:44.256 --> 00:08:46.176 A:middle
交互的方式运行 App

00:08:46.396 --> 00:08:48.226 A:middle
在这里 你可以验证

00:08:48.226 --> 00:08:49.586 A:middle
App 的所有部分

00:08:49.586 --> 00:08:51.346 A:middle
都已连接起来

00:08:51.346 --> 00:08:52.496 A:middle
并与诸如网络的外部资源

00:08:52.496 --> 00:08:53.696 A:middle
进行了正确的交互

00:08:54.336 --> 00:08:56.916 A:middle
这就是最有代表性的测试

00:08:57.856 --> 00:09:00.526 A:middle
与此同时 这可能是你在结果中

00:09:00.526 --> 00:09:02.456 A:middle
看到最大方差的地方

00:09:02.456 --> 00:09:04.106 A:middle
正因为这样

00:09:04.226 --> 00:09:06.246 A:middle
你可能会更倾向于关注单元测试

00:09:06.246 --> 00:09:08.826 A:middle
这可能会导致

00:09:08.826 --> 00:09:10.086 A:middle
你对 App 的行为

00:09:10.086 --> 00:09:11.636 A:middle
产生错误的安全感

00:09:12.726 --> 00:09:14.406 A:middle
如果应用得当

00:09:14.406 --> 00:09:17.026 A:middle
这个测试模型可以让你全面地了解

00:09:17.026 --> 00:09:18.556 A:middle
App 的代码库是如何工作的

00:09:19.656 --> 00:09:20.896 A:middle
这对于测试覆盖率非常好

00:09:20.896 --> 00:09:22.376 A:middle
但是你需要注意

00:09:22.596 --> 00:09:25.356 A:middle
在集成和 UI 套件中

00:09:25.646 --> 00:09:27.526 A:middle
可能遗漏的测试

00:09:28.676 --> 00:09:30.026 A:middle
将你的注意力

00:09:30.026 --> 00:09:31.286 A:middle
完全放在单元测试上

00:09:31.286 --> 00:09:32.886 A:middle
意味着在净室条件下测试

00:09:32.886 --> 00:09:34.766 A:middle
虽然这有助于你找到回归

00:09:34.766 --> 00:09:36.046 A:middle
但是也可能导致你忽略了

00:09:36.046 --> 00:09:37.316 A:middle
你可以为用户的实际行为

00:09:37.356 --> 00:09:39.016 A:middle
所进行的改进

00:09:39.636 --> 00:09:44.556 A:middle
人们很容易养成

00:09:44.556 --> 00:09:46.106 A:middle
净室测试的习惯

00:09:46.356 --> 00:09:47.416 A:middle
因为它给了我们许多

00:09:47.416 --> 00:09:48.746 A:middle
我们喜欢看到的测试品质

00:09:48.996 --> 00:09:51.586 A:middle
可重复的结果 低方差

00:09:51.966 --> 00:09:53.296 A:middle
这些都意味着

00:09:53.376 --> 00:09:54.416 A:middle
测试片的减少

00:09:55.276 --> 00:09:56.586 A:middle
我们希望你的 App 的

00:09:56.586 --> 00:09:57.496 A:middle
功能和性能优势

00:09:57.496 --> 00:09:58.866 A:middle
能够转化为现实的情况

00:09:58.866 --> 00:10:00.016 A:middle
因此你将需要

00:10:00.056 --> 00:10:01.216 A:middle
具有这些特性的

00:10:01.216 --> 00:10:01.966 A:middle
正确的开发工具

00:10:04.216 --> 00:10:05.946 A:middle
方差可能是反映现实的一个结果

00:10:05.946 --> 00:10:07.476 A:middle
与你在测试和分类

00:10:07.476 --> 00:10:09.176 A:middle
源代码中那些

00:10:09.176 --> 00:10:10.876 A:middle
棘手的边界情况时相比

00:10:10.876 --> 00:10:12.096 A:middle
它应该得到同样的关注

00:10:13.216 --> 00:10:14.636 A:middle
当你将 Pyramid 模型

00:10:14.816 --> 00:10:17.416 A:middle
应用于开发工作流的不同部分时

00:10:17.416 --> 00:10:19.246 A:middle
你将找到正确的位置

00:10:19.246 --> 00:10:22.636 A:middle
创建为你和你的团队工作的质量检查点

00:10:22.636 --> 00:10:24.106 A:middle
比如确保在你合并之前通过

00:10:24.156 --> 00:10:25.766 A:middle
所有的单元测试

00:10:25.766 --> 00:10:26.946 A:middle
这样你就可以尽早找到回归

00:10:28.016 --> 00:10:29.386 A:middle
尽管集成测试和 UI 测试

00:10:29.386 --> 00:10:32.286 A:middle
可能不适合作为早期检查点

00:10:32.286 --> 00:10:33.556 A:middle
因为在实际环境中

00:10:33.906 --> 00:10:35.066 A:middle
会产生方差

00:10:35.066 --> 00:10:36.856 A:middle
但它们必须在你的进程中

00:10:36.856 --> 00:10:38.086 A:middle
存有一席之地

00:10:38.906 --> 00:10:40.006 A:middle
如果你确保

00:10:40.006 --> 00:10:41.226 A:middle
你在适当的时间运行它们

00:10:41.556 --> 00:10:42.896 A:middle
你将能够描述

00:10:42.896 --> 00:10:44.356 A:middle
你的 App 的行为

00:10:44.356 --> 00:10:45.916 A:middle
并找到你可以

00:10:45.916 --> 00:10:47.976 A:middle
进行的改进和行为进步

00:10:48.876 --> 00:10:50.266 A:middle
现在 我们已经为

00:10:50.266 --> 00:10:51.656 A:middle
实际情况测试腾出了空间

00:10:51.656 --> 00:10:53.016 A:middle
你可以回头继续并将注意力集中在

00:10:53.016 --> 00:10:54.186 A:middle
你之前可能跳过的测试上

00:10:54.186 --> 00:10:56.546 A:middle
比如网络测试

00:10:57.916 --> 00:10:59.376 A:middle
我们已经看到了一些

00:10:59.376 --> 00:11:02.276 A:middle
实现这一点的方法

00:11:02.276 --> 00:11:03.446 A:middle
比如使用定制路由器来调节网络基础设施

00:11:03.446 --> 00:11:05.166 A:middle
如果处理得当

00:11:05.166 --> 00:11:07.156 A:middle
这确实可以取得成功

00:11:08.076 --> 00:11:09.416 A:middle
但是这也很难操作

00:11:09.416 --> 00:11:11.036 A:middle
尤其如果你是一个

00:11:11.036 --> 00:11:12.476 A:middle
刚刚开始起步的开发者

00:11:13.406 --> 00:11:14.676 A:middle
即使你有一个良好的测试模型

00:11:14.736 --> 00:11:16.636 A:middle
和对分流的强烈关注

00:11:16.636 --> 00:11:18.086 A:middle
为了进行现实情况的测试

00:11:18.336 --> 00:11:20.536 A:middle
你也需要优秀 可靠的开发工具

00:11:21.526 --> 00:11:23.666 A:middle
因此 如果你使用 macOS

00:11:23.666 --> 00:11:24.886 A:middle
开发你的 App

00:11:24.886 --> 00:11:26.316 A:middle
我们建议你下载和使用

00:11:26.316 --> 00:11:27.866 A:middle
Network Link Conditioner.prefPane

00:11:28.476 --> 00:11:29.636 A:middle
你可以使用它

00:11:29.636 --> 00:11:31.356 A:middle
来改变网络类型

00:11:31.356 --> 00:11:32.976 A:middle
并查看你的 App 在

00:11:33.056 --> 00:11:34.766 A:middle
3G 或 EDGE 等网络下的行为

00:11:37.636 --> 00:11:39.386 A:middle
在 iOS 上

00:11:39.386 --> 00:11:41.226 A:middle
Network Link Conditioner 可以在

00:11:41.226 --> 00:11:43.116 A:middle
你的用于开发的设备中的

00:11:43.116 --> 00:11:44.746 A:middle
开发者设置菜单中找到

00:11:45.336 --> 00:11:46.856 A:middle
从这里开始

00:11:46.856 --> 00:11:48.796 A:middle
你可以在争用预置

00:11:48.796 --> 00:11:50.516 A:middle
或更具代表性的预置之间更改网络类型

00:11:50.936 --> 00:11:52.196 A:middle
并为它们设计 App

00:11:52.336 --> 00:11:53.756 A:middle
而不需要设置或更改

00:11:53.756 --> 00:11:55.236 A:middle
网络基础设施

00:11:56.176 --> 00:11:57.446 A:middle
这是一个可靠

00:11:57.446 --> 00:11:59.226 A:middle
且可重复的设备支持的方式

00:11:59.486 --> 00:12:01.316 A:middle
从而在不同的网络环境中运行你的 App

00:12:02.406 --> 00:12:03.716 A:middle
如果你有自定义需求

00:12:03.926 --> 00:12:05.356 A:middle
还可以为你想要设计的

00:12:05.356 --> 00:12:07.236 A:middle
特定类型的带宽

00:12:07.296 --> 00:12:09.206 A:middle
包丢失和延迟

00:12:09.206 --> 00:12:10.966 A:middle
创建自定义预置

00:12:11.836 --> 00:12:13.146 A:middle
这对于检查 App

00:12:13.146 --> 00:12:15.316 A:middle
在特定环境中的行为非常有用

00:12:15.856 --> 00:12:18.686 A:middle
在 Xcode 11 中

00:12:18.686 --> 00:12:20.506 A:middle
我们为设备和模拟器窗口

00:12:20.506 --> 00:12:21.856 A:middle
提供了在各种不同的网络类型中

00:12:21.856 --> 00:12:23.806 A:middle
激活的功能

00:12:23.806 --> 00:12:25.316 A:middle
这样你就可以轻松可靠地启动

00:12:25.316 --> 00:12:27.226 A:middle
并在设计过程中

00:12:27.226 --> 00:12:28.316 A:middle
考虑到现实情况

00:12:28.796 --> 00:12:31.066 A:middle
你将在窗口的下方

00:12:31.066 --> 00:12:33.606 A:middle
看到一个新的设备状态部分

00:12:34.256 --> 00:12:36.736 A:middle
在这里 你可以让你的设备处在

00:12:36.736 --> 00:12:37.636 A:middle
更具代表性的状态

00:12:38.846 --> 00:12:40.046 A:middle
如果你想要一个网络链接

00:12:40.256 --> 00:12:41.306 A:middle
你将看到以往的所有网络类型

00:12:41.306 --> 00:12:42.636 A:middle
以及新的配置文件

00:12:42.636 --> 00:12:45.076 A:middle
以便你改变网络质量

00:12:46.436 --> 00:12:47.786 A:middle
这意味着你可以

00:12:47.786 --> 00:12:49.706 A:middle
让你的设备和 App

00:12:49.706 --> 00:12:51.686 A:middle
在 2G 或 EDGE 3G 或 LTE

00:12:51.686 --> 00:12:55.356 A:middle
或者不同类型的 Wi-Fi 网络上运行

00:12:56.046 --> 00:12:57.396 A:middle
你甚至可以选择

00:12:57.396 --> 00:12:58.896 A:middle
网络类型的质量

00:12:58.896 --> 00:13:01.166 A:middle
比如好的 EDGE 网络
或普通的 3G 网络

00:13:01.846 --> 00:13:03.486 A:middle
人们确实在使用这样的网络连接

00:13:03.486 --> 00:13:05.176 A:middle
所以我希望你能发现

00:13:05.176 --> 00:13:06.866 A:middle
能帮助你查看 App

00:13:06.866 --> 00:13:08.606 A:middle
如何与用户交互

00:13:08.606 --> 00:13:10.296 A:middle
并寻找可以改进行为的地方

00:13:11.466 --> 00:13:12.546 A:middle
一旦选择了

00:13:12.546 --> 00:13:13.826 A:middle
要激活的条件

00:13:13.826 --> 00:13:15.176 A:middle
轻点 “设备” 窗口中的 “开始”

00:13:16.116 --> 00:13:18.256 A:middle
这些条件是系统范围内的

00:13:18.256 --> 00:13:19.946 A:middle
所以你会发下

00:13:19.946 --> 00:13:21.156 A:middle
一切都开始做出不同的反应

00:13:21.156 --> 00:13:23.346 A:middle
包括你的 App

00:13:24.386 --> 00:13:26.246 A:middle
在具有激活条件的设备上

00:13:26.246 --> 00:13:28.186 A:middle
你将看到一个新的

00:13:28.186 --> 00:13:29.266 A:middle
灰色状态指示器

00:13:31.056 --> 00:13:32.626 A:middle
尽管激活一个网络类型

00:13:32.626 --> 00:13:34.186 A:middle
会影响整个系统

00:13:34.396 --> 00:13:35.656 A:middle
但是网络的 UI 指示器

00:13:35.656 --> 00:13:37.126 A:middle
将保持不变

00:13:38.276 --> 00:13:39.316 A:middle
你还应该知道

00:13:39.316 --> 00:13:41.106 A:middle
激活的网络条件

00:13:41.106 --> 00:13:43.456 A:middle
将是你的网络类型的上限

00:13:43.556 --> 00:13:45.166 A:middle
你的网络性能将与现实情况下

00:13:45.166 --> 00:13:46.376 A:middle
同等网络类型的性能持平

00:13:46.376 --> 00:13:47.816 A:middle
并无法得到提升

00:13:49.516 --> 00:13:52.706 A:middle
在设备中 如果你点按灰色状态图标

00:13:52.706 --> 00:13:54.046 A:middle
你将看到一个提示符

00:13:54.046 --> 00:13:55.726 A:middle
指示活动条件

00:13:55.726 --> 00:13:57.756 A:middle
以及一个选项来停止该条件

00:13:57.756 --> 00:13:59.496 A:middle
如果你的设备

00:13:59.496 --> 00:14:00.716 A:middle
与 Xcode 断开连接

00:14:00.716 --> 00:14:01.756 A:middle
则该条件将自动停止

00:14:03.076 --> 00:14:04.426 A:middle
为了向你展示

00:14:04.426 --> 00:14:06.026 A:middle
如何使用网络连接设备条件

00:14:06.246 --> 00:14:07.696 A:middle
来查找 App 中可以改进的地方

00:14:07.696 --> 00:14:09.976 A:middle
我将请 Ilya 回到舞台

00:14:10.516 --> 00:14:12.656 A:middle
[掌声]

00:14:13.156 --> 00:14:14.406 A:middle
&gt;&gt; 我们经常预期我们的 App

00:14:14.406 --> 00:14:16.006 A:middle
会在一个略差的网络连接中

00:14:16.006 --> 00:14:17.026 A:middle
表现失常

00:14:17.056 --> 00:14:18.656 A:middle
但重要的是

00:14:18.656 --> 00:14:19.716 A:middle
你要问问自己

00:14:19.716 --> 00:14:21.606 A:middle
这种行为是否真的有必要那么糟糕

00:14:22.156 --> 00:14:23.266 A:middle
它能得到改善吗

00:14:23.626 --> 00:14:25.876 A:middle
在不利或不同的网络环境下

00:14:25.876 --> 00:14:27.246 A:middle
我们是否能取得一些进步

00:14:28.436 --> 00:14:30.676 A:middle
这里有一个令人兴奋的示例 App

00:14:30.936 --> 00:14:31.876 A:middle
我们可以启动它

00:14:31.876 --> 00:14:33.066 A:middle
来查看在理想的实验室条件下

00:14:33.066 --> 00:14:34.856 A:middle
网络连接的基本行为

00:14:36.016 --> 00:14:38.006 A:middle
这个 App 探测

00:14:38.006 --> 00:14:39.636 A:middle
我们为这个演示设置的端点

00:14:39.636 --> 00:14:40.866 A:middle
从而查看连接需要的时间

00:14:41.646 --> 00:14:43.956 A:middle
我们看到这个连接

00:14:43.956 --> 00:14:45.786 A:middle
平均需要 150 毫秒

00:14:46.346 --> 00:14:48.506 A:middle
我们可以把这想象成类似于

00:14:48.576 --> 00:14:49.756 A:middle
要求安全登录

00:14:49.756 --> 00:14:50.866 A:middle
或从网站上传输内容

00:14:51.606 --> 00:14:52.636 A:middle
这看起来很棒

00:14:52.636 --> 00:14:54.516 A:middle
如果我们在实验室做 UI 测试

00:14:54.516 --> 00:14:56.826 A:middle
我们会假设一切都很顺利

00:14:56.826 --> 00:14:57.846 A:middle
没有问题

00:14:58.716 --> 00:15:00.656 A:middle
现在 让我们看看

00:15:00.656 --> 00:15:01.416 A:middle
如果从 Xcode 设备窗口中打开

00:15:01.416 --> 00:15:02.466 A:middle
Network Link Conditioner

00:15:02.466 --> 00:15:03.116 A:middle
会发生什么

00:15:04.616 --> 00:15:07.856 A:middle
在本例中

00:15:07.856 --> 00:15:08.846 A:middle
这是一个普通的 3G 网络连接

00:15:10.266 --> 00:15:11.856 A:middle
让我们看看现在发生了什么

00:15:13.436 --> 00:15:15.886 A:middle
当我们再次运行探测器时

00:15:15.886 --> 00:15:17.746 A:middle
我们看到它花费的时间更长

00:15:17.746 --> 00:15:19.766 A:middle
在本例中

00:15:19.766 --> 00:15:21.476 A:middle
平均超过 750 毫秒

00:15:22.406 --> 00:15:23.226 A:middle
这并不令人惊讶

00:15:23.226 --> 00:15:24.676 A:middle
毕竟 3G 网络

00:15:24.676 --> 00:15:26.326 A:middle
比 LTE 或 Wi-Fi

00:15:26.326 --> 00:15:28.156 A:middle
等网络要慢

00:15:29.156 --> 00:15:30.456 A:middle
要注意的重要一点是

00:15:30.456 --> 00:15:32.436 A:middle
正如我们之前所说

00:15:32.536 --> 00:15:34.826 A:middle
这是许多用户将看到的实际网络

00:15:35.526 --> 00:15:36.916 A:middle
我们能做些什么

00:15:36.916 --> 00:15:38.236 A:middle
来改善他们的这种体验呢

00:15:39.216 --> 00:15:41.156 A:middle
你可能注意到

00:15:41.156 --> 00:15:42.406 A:middle
在运行探测器按钮上面有两个开关

00:15:42.406 --> 00:15:43.526 A:middle
在 Optima 60NS 和

00:15:43.526 --> 00:15:46.206 A:middle
TLS 1.3 中是禁用的

00:15:46.886 --> 00:15:48.426 A:middle
让我们打开它们 看看会发生什么

00:15:48.916 --> 00:15:53.106 A:middle
当我们打开它们

00:15:53.106 --> 00:15:54.426 A:middle
并再次运行探测器时

00:15:54.426 --> 00:15:56.166 A:middle
我们看到了一个立即的改善

00:15:56.166 --> 00:15:58.776 A:middle
大约快了 33%

00:15:58.876 --> 00:16:00.826 A:middle
在激活 Network Link Conditioner 后

00:16:00.826 --> 00:16:01.666 A:middle
简单地测试这个 App

00:16:01.666 --> 00:16:03.876 A:middle
我们明确地看到

00:16:03.876 --> 00:16:04.816 A:middle
当我们使用 3G 等

00:16:04.816 --> 00:16:06.036 A:middle
速度较慢的网络

00:16:06.036 --> 00:16:08.266 A:middle
且与 Wi-Fi 或 LTE 等速度较快的网络相比时

00:16:08.266 --> 00:16:10.366 A:middle
出现了显著的性能损失

00:16:11.716 --> 00:16:13.006 A:middle
这告诉我们

00:16:13.006 --> 00:16:14.386 A:middle
我们应该考虑这些新特性

00:16:14.716 --> 00:16:15.956 A:middle
并使用它们

00:16:16.046 --> 00:16:17.646 A:middle
来主动地提高

00:16:17.816 --> 00:16:18.966 A:middle
在现实的网络条件下的性能

00:16:21.756 --> 00:16:24.296 A:middle
在运行 Network Link Conditioner 之后

00:16:24.296 --> 00:16:25.306 A:middle
我们注意到一些

00:16:25.306 --> 00:16:26.966 A:middle
以前并没有发现过的

00:16:26.966 --> 00:16:27.536 A:middle
低于预期的性能

00:16:28.246 --> 00:16:29.426 A:middle
你可以做出一些设置

00:16:29.426 --> 00:16:31.656 A:middle
来积极改善整体的体验

00:16:32.756 --> 00:16:34.806 A:middle
首先 设定合理的超时

00:16:35.726 --> 00:16:38.876 A:middle
也就是说 当你停止进程时超时

00:16:38.876 --> 00:16:39.776 A:middle
而不仅是当进程需要太长时间时超时

00:16:40.366 --> 00:16:42.576 A:middle
正如我们之前所说的

00:16:42.576 --> 00:16:44.056 A:middle
如果你的用户使用 3G 网络

00:16:44.056 --> 00:16:45.676 A:middle
你愿意等待更长的时间来加载内容

00:16:46.356 --> 00:16:47.576 A:middle
对他们来说

00:16:47.576 --> 00:16:49.516 A:middle
任意的超时将是更糟糕的用户体验

00:16:49.786 --> 00:16:52.786 A:middle
除此之外

00:16:52.786 --> 00:16:54.796 A:middle
一定要使用 HTTP/2 并尽可能避免可达性检查

00:16:55.306 --> 00:16:56.556 A:middle
相反 只要尝试使用网络

00:16:56.556 --> 00:16:57.956 A:middle
并尽你所能确保你的 App

00:16:57.956 --> 00:16:59.366 A:middle
在尽可能多的网络条件下

00:16:59.366 --> 00:17:00.946 A:middle
运行良好

00:17:01.636 --> 00:17:03.096 A:middle
要了解更多关于相关的改进

00:17:03.096 --> 00:17:06.646 A:middle
请参见去年 WWDC 的这两个会议

00:17:06.646 --> 00:17:07.846 A:middle
以及本周早些时候

00:17:07.846 --> 00:17:09.776 A:middle
“网络进展”的 1 和 2 两部分内容

00:17:11.876 --> 00:17:14.096 A:middle
&gt;&gt; 接下来 调节

00:17:14.126 --> 00:17:16.665 A:middle
你需要开始考虑你的 App 中

00:17:16.665 --> 00:17:18.713 A:middle
实际的网络使用情况

00:17:18.906 --> 00:17:20.076 A:middle
你需要使用

00:17:20.076 --> 00:17:21.226 A:middle
网络连接设备条件

00:17:21.226 --> 00:17:22.915 A:middle
来描述你的 App

00:17:23.026 --> 00:17:24.626 A:middle
在这种使用情况下的行为

00:17:24.626 --> 00:17:26.346 A:middle
并问问自己

00:17:26.346 --> 00:17:28.336 A:middle
这种性能是不是可接受的
是否有机会更好

00:17:29.066 --> 00:17:30.456 A:middle
我们建议你至少使用

00:17:30.456 --> 00:17:32.206 A:middle
3G 网络进行测试

00:17:32.206 --> 00:17:33.566 A:middle
并寻找你可以进行的改进

00:17:34.216 --> 00:17:37.246 A:middle
你需要改变网络类型和它的质量

00:17:37.246 --> 00:17:38.626 A:middle
来查看你是否仍然

00:17:38.626 --> 00:17:40.326 A:middle
提供了良好的体验

00:17:40.326 --> 00:17:41.666 A:middle
然后通过将此作为

00:17:41.876 --> 00:17:43.196 A:middle
集成和 UI 测试运行的一部分

00:17:43.196 --> 00:17:45.146 A:middle
来锁定这些性能优势

00:17:45.506 --> 00:17:49.426 A:middle
现在 我想谈谈

00:17:49.966 --> 00:17:51.136 A:middle
温度的变化

00:17:52.216 --> 00:17:53.946 A:middle
人们喜欢在阳光明媚的日子里

00:17:53.946 --> 00:17:55.476 A:middle
在户外使用电子设备

00:17:56.216 --> 00:17:57.636 A:middle
他们可能会在咖啡店

00:17:57.636 --> 00:17:59.106 A:middle
当 iPhone 进行无线充电时

00:17:59.106 --> 00:18:00.546 A:middle
使用个人热点

00:18:01.546 --> 00:18:03.366 A:middle
在这些情况下

00:18:03.366 --> 00:18:05.056 A:middle
设备会开始升温

00:18:05.056 --> 00:18:05.976 A:middle
这是正常的行为

00:18:06.536 --> 00:18:08.056 A:middle
一些热能的情况

00:18:08.056 --> 00:18:09.996 A:middle
会导致 iOS 设备

00:18:09.996 --> 00:18:12.016 A:middle
为了调节温度

00:18:12.016 --> 00:18:13.476 A:middle
而改变其行为或性能

00:18:14.006 --> 00:18:16.786 A:middle
温度的变化有

00:18:16.786 --> 00:18:18.336 A:middle
很多原因 无论是

00:18:18.336 --> 00:18:19.846 A:middle
设备做了更多的工作

00:18:19.846 --> 00:18:22.396 A:middle
还是直接暴露在阳光下

00:18:22.616 --> 00:18:25.756 A:middle
等环境影响

00:18:25.086 --> 00:18:25.756 A:middle
抑或是其他因素

00:18:27.156 --> 00:18:28.246 A:middle
所有这些都是正常的场景

00:18:28.246 --> 00:18:30.846 A:middle
iOS 子系统

00:18:30.846 --> 00:18:32.546 A:middle
会对温度变化做出反应

00:18:32.836 --> 00:18:34.816 A:middle
以调节这些变化造成的影响

00:18:35.366 --> 00:18:37.406 A:middle
然而 你的 App 却不能

00:18:37.406 --> 00:18:38.716 A:middle
在不断变化的温度下

00:18:38.716 --> 00:18:40.706 A:middle
正常地运行

00:18:40.706 --> 00:18:41.296 A:middle
你也并未解决这个问题

00:18:42.836 --> 00:18:44.356 A:middle
当某些阈值

00:18:44.356 --> 00:18:45.746 A:middle
被超过时 例如

00:18:45.746 --> 00:18:47.436 A:middle
如果设备长时间

00:18:47.436 --> 00:18:49.376 A:middle
被留在炎热的汽车中

00:18:49.376 --> 00:18:50.956 A:middle
用户可能会看到这个温度警告界面

00:18:51.916 --> 00:18:53.546 A:middle
此时它们就不能再

00:18:53.546 --> 00:18:55.066 A:middle
与你的 App 交互了

00:18:55.946 --> 00:18:57.496 A:middle
发生这种情况的部分原因是

00:18:57.776 --> 00:18:58.986 A:middle
为用户提供

00:18:58.986 --> 00:19:00.676 A:middle
必要时拨打

00:19:00.676 --> 00:19:02.636 A:middle
紧急电话的关键能力

00:19:04.076 --> 00:19:05.856 A:middle
系统正在竭尽所能

00:19:05.856 --> 00:19:07.596 A:middle
来限制它的能量作用

00:19:07.856 --> 00:19:09.606 A:middle
这将影响热量和电池寿命

00:19:09.606 --> 00:19:11.796 A:middle
你的 App 也是系统的

00:19:11.796 --> 00:19:13.316 A:middle
后台常驻 App

00:19:13.316 --> 00:19:14.576 A:middle
你也同样需要考虑它的能量作用

00:19:14.576 --> 00:19:16.396 A:middle
这是很重要的

00:19:17.416 --> 00:19:18.886 A:middle
为此 当你

00:19:18.886 --> 00:19:20.076 A:middle
处于不同的热状态时

00:19:20.076 --> 00:19:21.446 A:middle
你可以开始动态地改变

00:19:21.446 --> 00:19:23.106 A:middle
你的 App 的行为

00:19:23.916 --> 00:19:25.846 A:middle
通过防御性的设计

00:19:25.846 --> 00:19:27.396 A:middle
你可以通过关闭后台工作

00:19:27.396 --> 00:19:29.156 A:middle
来减少你的 App 的能量作用

00:19:32.446 --> 00:19:33.936 A:middle
你可以注册

00:19:33.936 --> 00:19:35.906 A:middle
热状态变化通知

00:19:35.906 --> 00:19:37.256 A:middle
查看设备

00:19:37.256 --> 00:19:39.916 A:middle
向你的 App 报告的状态

00:19:39.916 --> 00:19:41.646 A:middle
并考虑正常的场景

00:19:41.646 --> 00:19:44.246 A:middle
比如设备升温

00:19:44.246 --> 00:19:45.596 A:middle
因为系统知道它应该

00:19:45.696 --> 00:19:46.836 A:middle
如何应对温度升高

00:19:47.696 --> 00:19:49.056 A:middle
但你的 App 知道

00:19:49.056 --> 00:19:50.546 A:middle
更多关于它正在做的工作的细节

00:19:50.546 --> 00:19:52.366 A:middle
以及这些工作应该如何

00:19:52.366 --> 00:19:53.726 A:middle
在保持良好体验的同时

00:19:53.726 --> 00:19:55.266 A:middle
对更高的热状态做出反应

00:19:56.916 --> 00:19:57.886 A:middle
那么 让我们来看看

00:19:57.886 --> 00:19:58.976 A:middle
你们可能会看到的这些热状态

00:20:02.706 --> 00:20:03.676 A:middle
设备处于正常的工作温度

00:20:03.676 --> 00:20:04.886 A:middle
不需要你的 App

00:20:04.886 --> 00:20:07.246 A:middle
采取任何纠正措施

00:20:07.906 --> 00:20:09.966 A:middle
在第一种状态下

00:20:10.006 --> 00:20:11.516 A:middle
我们建议你主动

00:20:11.516 --> 00:20:13.116 A:middle
启动一些节能措施

00:20:13.116 --> 00:20:14.226 A:middle
这样你就不会显著造成

00:20:14.356 --> 00:20:16.216 A:middle
继续的能量整体增长

00:20:17.216 --> 00:20:18.896 A:middle
当 iOS 看到热状态处于 Fair 时

00:20:18.896 --> 00:20:20.446 A:middle
我们开始暂停

00:20:20.446 --> 00:20:23.256 A:middle
照片分析等可自由支配的后台工作

00:20:23.726 --> 00:20:26.406 A:middle
当设备报告了

00:20:26.406 --> 00:20:28.146 A:middle
Serious 的热状态时

00:20:28.146 --> 00:20:29.566 A:middle
系统性能将受到影响

00:20:29.906 --> 00:20:30.946 A:middle
你的 App 应该开始采取

00:20:30.946 --> 00:20:32.446 A:middle
更强的节能措施

00:20:32.656 --> 00:20:34.546 A:middle
减少 CPU 使用

00:20:34.846 --> 00:20:36.316 A:middle
图形和 I/O

00:20:37.056 --> 00:20:38.546 A:middle
这时 你应该使用

00:20:38.546 --> 00:20:40.816 A:middle
低质量的视觉效果

00:20:41.536 --> 00:20:43.016 A:middle
我们对系统采取的一些措施

00:20:43.016 --> 00:20:44.366 A:middle
包括降低 ARKit App

00:20:44.366 --> 00:20:46.126 A:middle
和 FaceTime 的帧率

00:20:46.126 --> 00:20:48.306 A:middle
以降低它们的整体强度

00:20:48.956 --> 00:20:50.456 A:middle
如果用户正在

00:20:50.456 --> 00:20:52.096 A:middle
从 iCloud 备份中恢复

00:20:52.096 --> 00:20:53.166 A:middle
他们会发现 iCloud 会暂停到这个状态

00:20:53.166 --> 00:20:54.816 A:middle
直到设备冷却下来

00:20:55.906 --> 00:20:57.706 A:middle
在热状态 Critical 时

00:20:58.076 --> 00:20:59.246 A:middle
你的 App 应该停止使用

00:20:59.246 --> 00:21:00.536 A:middle
相机等外部设备

00:21:01.236 --> 00:21:02.696 A:middle
如果你的 App 出现在

00:21:02.696 --> 00:21:03.886 A:middle
电池用量列表的首位

00:21:03.886 --> 00:21:05.636 A:middle
用户甚至可能会

00:21:05.636 --> 00:21:08.036 A:middle
考虑删除你的 App

00:21:08.096 --> 00:21:09.886 A:middle
你的 App 应该与系统一起

00:21:09.886 --> 00:21:11.556 A:middle
对这些变化做出动态反应

00:21:11.556 --> 00:21:13.116 A:middle
这样你就可以

00:21:13.116 --> 00:21:14.446 A:middle
在保持低能耗的同时

00:21:14.446 --> 00:21:17.776 A:middle
继续保持良好的体验

00:21:18.796 --> 00:21:20.276 A:middle
要了解更多状态案例

00:21:20.276 --> 00:21:21.706 A:middle
以及我们的建议

00:21:22.076 --> 00:21:23.716 A:middle
你可以查看我们的文档

00:21:24.266 --> 00:21:27.276 A:middle
Ilya 现在将为给你们展示一个例子

00:21:27.276 --> 00:21:28.426 A:middle
如何对这些状态

00:21:28.426 --> 00:21:30.116 A:middle
做出动态反应

00:21:30.776 --> 00:21:34.106 A:middle
&gt;&gt; 我将向你们展示

00:21:34.106 --> 00:21:35.936 A:middle
一个示例 ARKit App

00:21:35.936 --> 00:21:37.256 A:middle
它基于我们现有的

00:21:37.256 --> 00:21:38.836 A:middle
示例代码的修改版本

00:21:38.836 --> 00:21:40.326 A:middle
能够在增强现实中处理 3D 交互

00:21:40.366 --> 00:21:41.126 A:middle
和 UI 控件

00:21:41.126 --> 00:21:43.666 A:middle
当我在 Apple Park 散步时

00:21:43.666 --> 00:21:44.986 A:middle
它也在做一些

00:21:44.986 --> 00:21:47.116 A:middle
繁复的后台工作

00:21:47.346 --> 00:21:48.376 A:middle
在这里 你可以看到 App

00:21:48.376 --> 00:21:49.506 A:middle
正在 Nominal 热状态下运行

00:21:49.506 --> 00:21:51.146 A:middle
你可以看到

00:21:51.216 --> 00:21:52.906 A:middle
红色的焦点方块

00:21:52.906 --> 00:21:54.966 A:middle
变成了实体 找到一个表面

00:21:54.966 --> 00:21:56.706 A:middle
让我放下一把漂亮的椅子和一盏灯

00:21:56.706 --> 00:21:57.796 A:middle
然后坐在椅子上面看书

00:21:58.676 --> 00:22:01.346 A:middle
现在你可以看到

00:22:01.346 --> 00:22:02.856 A:middle
相机的移动非常平稳

00:22:02.926 --> 00:22:04.456 A:middle
一切都十分正常

00:22:04.616 --> 00:22:08.426 A:middle
一切都如常地运转

00:22:08.686 --> 00:22:09.656 A:middle
让我们再看一下这个 App

00:22:09.656 --> 00:22:11.656 A:middle
但是现在我已经在外面

00:22:11.706 --> 00:22:12.796 A:middle
待了很长时间了

00:22:12.796 --> 00:22:13.856 A:middle
我一直坐在阳光下

00:22:13.996 --> 00:22:15.406 A:middle
外面很炎热

00:22:15.406 --> 00:22:15.876 A:middle
设备也开始升温

00:22:17.356 --> 00:22:18.346 A:middle
你会注意到两件事

00:22:18.656 --> 00:22:20.446 A:middle
首先 帧率不如

00:22:20.446 --> 00:22:22.146 A:middle
以前那么好了

00:22:22.146 --> 00:22:25.216 A:middle
其次 尽管我几乎是直接对准地面

00:22:25.216 --> 00:22:26.756 A:middle
但焦点方块

00:22:26.756 --> 00:22:28.246 A:middle
却没能找到一个表面

00:22:28.936 --> 00:22:30.136 A:middle
这对你的用户来说

00:22:30.136 --> 00:22:31.596 A:middle
不是一个很好的体验

00:22:31.596 --> 00:22:33.926 A:middle
而且可能会让他们感到有点沮丧

00:22:34.096 --> 00:22:35.156 A:middle
那么 我们能做些什么呢

00:22:36.446 --> 00:22:39.216 A:middle
首先 你需要注册

00:22:39.216 --> 00:22:41.356 A:middle
ProcessInfo.theremalStateDidChangeNotification

00:22:42.476 --> 00:22:46.386 A:middle
当你收到热状态更改通知时

00:22:46.386 --> 00:22:48.576 A:middle
读取实际的热状态

00:22:48.576 --> 00:22:49.396 A:middle
然后做出相应的反应

00:22:50.156 --> 00:22:51.246 A:middle
根据你的状态

00:22:51.246 --> 00:22:53.156 A:middle
你应该启用或禁用某些特性

00:22:53.156 --> 00:22:54.996 A:middle
以确保平滑的性能

00:22:54.996 --> 00:22:58.586 A:middle
或者你认为重要的任何度量

00:22:59.046 --> 00:23:03.096 A:middle
这是一个如何注册热状态

00:23:03.096 --> 00:23:04.516 A:middle
然后读取热状态的例子

00:23:04.516 --> 00:23:07.736 A:middle
你应该如何选择

00:23:07.796 --> 00:23:08.876 A:middle
对热状态作出反应

00:23:10.156 --> 00:23:11.946 A:middle
在这个场景中

00:23:11.946 --> 00:23:13.996 A:middle
我在 Nornimal 和 Fair 热状态下
启用了所有特性

00:23:14.616 --> 00:23:16.106 A:middle
在这个例子中

00:23:16.106 --> 00:23:18.046 A:middle
我打开了人脸跟踪 人物分割

00:23:18.176 --> 00:23:19.606 A:middle
和运动模糊

00:23:19.606 --> 00:23:23.196 A:middle
当热状态增加 Serious 时

00:23:23.196 --> 00:23:26.306 A:middle
我禁用人脸跟踪和帧语义

00:23:26.826 --> 00:23:27.736 A:middle
但我留下了运动模糊

00:23:27.736 --> 00:23:31.396 A:middle
在 Critical 时

00:23:31.396 --> 00:23:31.716 A:middle
我会关掉所有特性

00:23:32.566 --> 00:23:34.996 A:middle
现在我们已经

00:23:34.996 --> 00:23:36.246 A:middle
对热状态做出了反应

00:23:36.246 --> 00:23:37.766 A:middle
让我们再看看这个 App

00:23:37.766 --> 00:23:38.836 A:middle
在同样的场景下工作得怎样

00:23:38.836 --> 00:23:41.926 A:middle
我们同样在外面待了很长时间

00:23:41.926 --> 00:23:42.746 A:middle
但是能看到它现在好多了

00:23:43.496 --> 00:23:44.886 A:middle
焦点方块能够找到一个表面

00:23:45.016 --> 00:23:46.916 A:middle
我可以像以前一样

00:23:46.916 --> 00:23:48.486 A:middle
放下我的椅子和台灯

00:23:48.486 --> 00:23:48.996 A:middle
我也可以读一会书

00:23:49.706 --> 00:23:52.496 A:middle
编写防御代码

00:23:52.496 --> 00:23:53.986 A:middle
以及对热状态变化做出反应

00:23:53.986 --> 00:23:55.606 A:middle
确实很有帮助

00:23:55.606 --> 00:23:57.036 A:middle
但是你想提前知道

00:23:57.036 --> 00:23:58.016 A:middle
它是否像你预期的那样工作

00:23:59.666 --> 00:24:01.826 A:middle
一般来说

00:24:01.826 --> 00:24:05.266 A:middle
我们可以提前测试 App 在不同温度下的性能

00:24:06.056 --> 00:24:08.656 A:middle
换句话说 你应该测试你的防御代码

00:24:10.096 --> 00:24:12.096 A:middle
但是为了做到这一点

00:24:12.096 --> 00:24:13.726 A:middle
我们应该怎么处理呢

00:24:15.076 --> 00:24:15.966 A:middle
&gt;&gt; 谢谢你 Ilya

00:24:15.966 --> 00:24:19.416 A:middle
问题是 不是所有人都能获得热成像

00:24:20.616 --> 00:24:22.286 A:middle
就像网络条件一样

00:24:22.286 --> 00:24:23.716 A:middle
我们认识到

00:24:23.716 --> 00:24:25.386 A:middle
对于验证 App 行为的挑战

00:24:25.386 --> 00:24:26.926 A:middle
以及现有方法中

00:24:26.926 --> 00:24:29.766 A:middle
存在很大的方差

00:24:30.656 --> 00:24:32.106 A:middle
我们注意到

00:24:32.106 --> 00:24:33.346 A:middle
人们正在使用一些

00:24:33.346 --> 00:24:34.996 A:middle
我们不推荐的方法

00:24:34.996 --> 00:24:36.456 A:middle
比如运行一个虚拟 CPU 负载

00:24:36.456 --> 00:24:38.226 A:middle
使设备升温

00:24:38.226 --> 00:24:39.566 A:middle
扔掉第一个小时的结果

00:24:39.566 --> 00:24:42.126 A:middle
然后在设备高温的时候分析 App 行为

00:24:42.776 --> 00:24:44.526 A:middle
我们一直在努力为此

00:24:44.526 --> 00:24:45.816 A:middle
提供一个开发工具

00:24:45.816 --> 00:24:47.536 A:middle
我们提出了一种可靠的方法

00:24:47.536 --> 00:24:49.306 A:middle
来改变设备上报告的热状态

00:24:49.336 --> 00:24:50.676 A:middle
而不需要对设备

00:24:51.056 --> 00:24:52.396 A:middle
进行物理加热

00:24:52.566 --> 00:24:54.216 A:middle
同时仍能保证其安全使用

00:24:54.786 --> 00:24:56.206 A:middle
我们在 Xcode 11 中

00:24:56.206 --> 00:24:58.136 A:middle
将这种方式构建到设备条件中

00:24:59.346 --> 00:25:00.806 A:middle
从相同的设备

00:25:00.806 --> 00:25:02.346 A:middle
和模拟器窗口中

00:25:02.346 --> 00:25:03.986 A:middle
你可以激活高温条件

00:25:03.986 --> 00:25:05.806 A:middle
使你的设备

00:25:05.806 --> 00:25:07.416 A:middle
达到不同的热状态

00:25:07.646 --> 00:25:08.626 A:middle
而不需要达到

00:25:08.626 --> 00:25:09.406 A:middle
物理意义上的温度条件

00:25:10.346 --> 00:25:11.816 A:middle
现在 你可以快速 轻松地

00:25:11.816 --> 00:25:13.436 A:middle
让你的设备报告

00:25:13.436 --> 00:25:15.056 A:middle
处于 Fair 的状态

00:25:15.056 --> 00:25:16.516 A:middle
来测试你的主动节能措施

00:25:17.346 --> 00:25:19.156 A:middle
热状态 Serious

00:25:19.156 --> 00:25:20.386 A:middle
来检查你是否可靠地

00:25:20.386 --> 00:25:21.776 A:middle
降低了你的资源使用和能量作用

00:25:21.776 --> 00:25:23.886 A:middle
热状态 Critical

00:25:23.886 --> 00:25:25.586 A:middle
来查看你对外部设备的使用

00:25:25.586 --> 00:25:27.526 A:middle
是否真的停止

00:25:28.546 --> 00:25:29.876 A:middle
运行其中一个

00:25:29.876 --> 00:25:31.676 A:middle
会使设备的行为完全像

00:25:31.676 --> 00:25:32.906 A:middle
它真的处于那个热状态一样

00:25:32.906 --> 00:25:34.986 A:middle
但在你开始使用这些之前

00:25:34.986 --> 00:25:36.256 A:middle
你需要知道

00:25:36.256 --> 00:25:39.016 A:middle
它们在你的设备上是如何工作的 Ilya

00:25:39.566 --> 00:25:40.416 A:middle
&gt;&gt; 谢谢你 Alex

00:25:40.646 --> 00:25:43.426 A:middle
我将向你展示

00:25:43.426 --> 00:25:45.196 A:middle
更多关于底层的情况

00:25:45.196 --> 00:25:47.026 A:middle
你可以在这里看到一个图表

00:25:47.026 --> 00:25:48.246 A:middle
它代表了设备的

00:25:48.246 --> 00:25:50.396 A:middle
实际热状态

00:25:50.396 --> 00:25:52.656 A:middle
如果有的话 活动状态

00:25:52.656 --> 00:25:53.836 A:middle
以及设备的

00:25:53.836 --> 00:25:55.356 A:middle
实际触觉温度

00:25:55.356 --> 00:25:57.116 A:middle
它用右上角的温度计表示

00:25:57.116 --> 00:26:00.186 A:middle
想象一下你桌上的基准设备

00:26:00.726 --> 00:26:01.776 A:middle
它处在室温条件下

00:26:01.776 --> 00:26:03.126 A:middle
你没有任何激活条件

00:26:03.126 --> 00:26:04.396 A:middle
并且你已经有一段时间没有使用它了

00:26:05.096 --> 00:26:06.946 A:middle
在这里 热状态是 Nominal

00:26:07.556 --> 00:26:10.796 A:middle
如果你现在

00:26:10.796 --> 00:26:12.686 A:middle
激活 Serious 热配置

00:26:12.686 --> 00:26:14.366 A:middle
设备将随着时间的推移

00:26:14.366 --> 00:26:16.956 A:middle
从 Nominal

00:26:16.956 --> 00:26:19.926 A:middle
经过 Fair 最终达到 Serious

00:26:20.676 --> 00:26:22.056 A:middle
这个过程需要几秒钟

00:26:22.876 --> 00:26:24.166 A:middle
就像在现实生活中

00:26:24.166 --> 00:26:25.256 A:middle
如果你订阅了热状态通知

00:26:25.256 --> 00:26:26.976 A:middle
你会在达到 Fair 和 Serious 状态时

00:26:26.976 --> 00:26:28.816 A:middle
收到通知

00:26:29.396 --> 00:26:30.646 A:middle
现在 有两件重要的

00:26:30.646 --> 00:26:31.986 A:middle
事情需要注意

00:26:32.896 --> 00:26:34.506 A:middle
首先 你的设备实际上

00:26:34.506 --> 00:26:35.796 A:middle
并没有因此而升温

00:26:35.796 --> 00:26:37.106 A:middle
或改变温度

00:26:37.106 --> 00:26:39.746 A:middle
其次 这并不能

00:26:39.936 --> 00:26:41.606 A:middle
固定你的热状态

00:26:41.606 --> 00:26:42.456 A:middle
它的作用就像基准板一样

00:26:42.496 --> 00:26:44.776 A:middle
让我来解释一下这是什么意思

00:26:45.626 --> 00:26:47.586 A:middle
假设你的设备

00:26:47.586 --> 00:26:49.606 A:middle
处于这种状态

00:26:49.606 --> 00:26:51.376 A:middle
你运行了一些繁重的计算

00:26:51.376 --> 00:26:52.836 A:middle
或者你只是把它放在太阳下一段时间

00:26:53.956 --> 00:26:56.916 A:middle
基础温度实际上升高了

00:26:57.016 --> 00:26:58.096 A:middle
这台设备摸起来升温了

00:26:59.146 --> 00:27:00.786 A:middle
不管原因是什么

00:27:00.786 --> 00:27:02.456 A:middle
热状态也会从 Serious

00:27:02.456 --> 00:27:04.276 A:middle
增加到 Critical

00:27:06.176 --> 00:27:08.026 A:middle
这是一种预防措施

00:27:08.026 --> 00:27:09.496 A:middle
以确保你的系统仍然安全运行

00:27:09.976 --> 00:27:10.986 A:middle
即使你在这个热条件下

00:27:10.986 --> 00:27:12.396 A:middle
进行非常繁重的测试

00:27:13.046 --> 00:27:14.226 A:middle
如果你停止使用你的设备

00:27:14.226 --> 00:27:18.796 A:middle
或让它冷却下来

00:27:18.796 --> 00:27:20.006 A:middle
热状态将回到 Serious

00:27:20.006 --> 00:27:22.936 A:middle
并保持在那里

00:27:23.386 --> 00:27:24.246 A:middle
直到你撤销设置的条件

00:27:24.246 --> 00:27:28.246 A:middle
在这之后 设备将从 Serious

00:27:28.246 --> 00:27:30.116 A:middle
经过 Fair 最终降到 Nornimal

00:27:30.966 --> 00:27:32.136 A:middle
在所有这些情况下

00:27:32.276 --> 00:27:34.546 A:middle
你都将收到热状态用户通知

00:27:35.076 --> 00:27:38.656 A:middle
在 Xcode 11 中

00:27:38.656 --> 00:27:40.326 A:middle
这个热状态信息

00:27:40.326 --> 00:27:41.946 A:middle
在调试导航器中的能量计中是可见的

00:27:43.196 --> 00:27:44.826 A:middle
这里有两条热状态轨道

00:27:44.826 --> 00:27:48.106 A:middle
都位于能量作用区域的底部

00:27:48.596 --> 00:27:50.206 A:middle
最底部的轨道

00:27:50.286 --> 00:27:51.206 A:middle
显示设备的实际热状态

00:27:51.206 --> 00:27:53.596 A:middle
颜色编码便于分辨

00:27:54.526 --> 00:27:55.596 A:middle
在这里 你可以看到热状态

00:27:55.596 --> 00:27:57.186 A:middle
随着激活条件的变化

00:27:57.236 --> 00:27:59.506 A:middle
先上升然后下降

00:27:59.506 --> 00:28:01.536 A:middle
你可以看到 在这个场景中

00:28:01.536 --> 00:28:03.486 A:middle
每个方向都花费了大约 10 秒的时间

00:28:04.616 --> 00:28:06.796 A:middle
如果存在

00:28:06.796 --> 00:28:08.536 A:middle
则顶部轨道显示活跃的热设备状态

00:28:09.766 --> 00:28:11.816 A:middle
为了向你展示

00:28:11.816 --> 00:28:13.196 A:middle
更多关于 Xcode 的调试和优化

00:28:13.196 --> 00:28:13.876 A:middle
以及可以使用的工具

00:28:13.876 --> 00:28:15.836 A:middle
我将有请 Jay 上台

00:28:17.516 --> 00:28:25.036 A:middle
[掌声]

00:28:25.536 --> 00:28:26.626 A:middle
&gt;&gt; 大家好

00:28:27.136 --> 00:28:29.006 A:middle
我是 Jay 我是 Core OS 中

00:28:29.006 --> 00:28:31.136 A:middle
能量技术团队的一员

00:28:31.136 --> 00:28:32.446 A:middle
我将向你展示

00:28:32.446 --> 00:28:33.906 A:middle
在设备受到温度限制时

00:28:33.906 --> 00:28:35.336 A:middle
App 的行为

00:28:35.336 --> 00:28:36.166 A:middle
以及你可以对此做些什么

00:28:37.496 --> 00:28:38.706 A:middle
作为演示

00:28:38.706 --> 00:28:40.036 A:middle
我们将使用一个

00:28:40.036 --> 00:28:41.926 A:middle
Fox 2 App 的修改版

00:28:41.926 --> 00:28:43.226 A:middle
它是几年前为 SceneKit

00:28:43.226 --> 00:28:44.606 A:middle
公开发布的示例

00:28:45.816 --> 00:28:46.646 A:middle
让我们开始吧

00:28:47.056 --> 00:28:48.656 A:middle
我有一个设备

00:28:48.656 --> 00:28:49.966 A:middle
在没有任何活跃的热条件下

00:28:49.966 --> 00:28:50.786 A:middle
运行这个 App

00:28:51.356 --> 00:28:52.236 A:middle
让我们看看它是如何加载的

00:28:53.346 --> 00:28:55.106 A:middle
这是这个 App 的样子

00:28:56.346 --> 00:28:57.616 A:middle
首先 让我们看看

00:28:57.616 --> 00:28:58.706 A:middle
屏幕的左下角

00:29:01.356 --> 00:29:02.256 A:middle
我们可以看到

00:29:02.256 --> 00:29:04.316 A:middle
FPS 一直保持超过 30

00:29:04.766 --> 00:29:08.366 A:middle
让我们看看这个 App 的细节

00:29:09.296 --> 00:29:12.286 A:middle
这款 App 的动画效果十分不错

00:29:12.476 --> 00:29:15.756 A:middle
让我们看看 App 内部的所有细节

00:29:15.756 --> 00:29:17.016 A:middle
细节十分丰富

00:29:18.406 --> 00:29:19.466 A:middle
如果你看

00:29:19.466 --> 00:29:20.226 A:middle
右边的绿色宝石

00:29:20.706 --> 00:29:21.896 A:middle
它上面有一个光源

00:29:21.946 --> 00:29:23.626 A:middle
阴影很大

00:29:24.906 --> 00:29:25.676 A:middle
如果你观察运动的物体

00:29:25.676 --> 00:29:27.286 A:middle
它们有光源从里面发光

00:29:27.286 --> 00:29:28.776 A:middle
它们投影在狐狸身上

00:29:28.776 --> 00:29:30.356 A:middle
也有很大的阴影

00:29:30.996 --> 00:29:33.116 A:middle
让我们看看熔岩

00:29:33.236 --> 00:29:34.586 A:middle
烟雾从里面冒出来

00:29:34.586 --> 00:29:35.516 A:middle
GPU 在背景融合方面

00:29:35.516 --> 00:29:37.716 A:middle
处理得很好

00:29:38.556 --> 00:29:39.856 A:middle
同时 还有很多

00:29:39.856 --> 00:29:42.466 A:middle
微小的火粒子迸射出来

00:29:42.666 --> 00:29:44.416 A:middle
这是一个很好的用户体验

00:29:45.276 --> 00:29:47.206 A:middle
用户非常喜欢使用这样的 App

00:29:48.116 --> 00:29:49.116 A:middle
如果你在运行性能测试

00:29:49.146 --> 00:29:52.666 A:middle
它们都是绿色的

00:29:52.866 --> 00:29:54.176 A:middle
让我们调整到一个热条件

00:29:54.176 --> 00:29:55.836 A:middle
看看会发生什么

00:29:56.406 --> 00:29:59.096 A:middle
我有另一台设备

00:29:59.096 --> 00:30:00.596 A:middle
在运行同样的 App

00:30:00.646 --> 00:30:02.296 A:middle
但处在 Serious 热条件下

00:30:02.296 --> 00:30:03.016 A:middle
我们看看会发生什么

00:30:03.736 --> 00:30:06.506 A:middle
我要切换到这个设备

00:30:06.506 --> 00:30:12.396 A:middle
现在 如果你

00:30:12.396 --> 00:30:14.636 A:middle
看屏幕的左下角

00:30:14.886 --> 00:30:16.436 A:middle
FPS 已经降到 17

00:30:16.966 --> 00:30:19.136 A:middle
我们几乎损失了一半的性能

00:30:19.696 --> 00:30:21.096 A:middle
如果你观察移动的物体

00:30:21.096 --> 00:30:23.056 A:middle
就会发现它们

00:30:23.056 --> 00:30:24.016 A:middle
不像以前那么顺滑了

00:30:24.336 --> 00:30:25.086 A:middle
如果你观察移动的平台

00:30:25.086 --> 00:30:26.626 A:middle
或移动的岩石

00:30:27.166 --> 00:30:28.636 A:middle
它们也不像以前那么顺滑了

00:30:29.206 --> 00:30:32.316 A:middle
我们能做些什么来解决这个问题呢

00:30:33.606 --> 00:30:34.876 A:middle
我们继续修改了 App

00:30:34.876 --> 00:30:36.706 A:middle
来监听热状态的变化

00:30:37.826 --> 00:30:40.236 A:middle
当热状态发生变化时

00:30:40.236 --> 00:30:41.876 A:middle
App 将动态地响应

00:30:41.876 --> 00:30:43.106 A:middle
并减少它所支持的功能

00:30:43.566 --> 00:30:45.626 A:middle
让我们看看它是如何工作的

00:30:45.946 --> 00:30:48.156 A:middle
我在顶部

00:30:48.156 --> 00:30:49.656 A:middle
有一个小的调试 UI

00:30:49.656 --> 00:30:51.256 A:middle
可以将它切换成静态或动态

00:30:51.256 --> 00:30:52.756 A:middle
现在我要将它切换为动态

00:30:59.356 --> 00:31:00.416 A:middle
如果你现在看屏幕底部

00:31:00.416 --> 00:31:04.636 A:middle
我们又接近了 20 FPS

00:31:04.816 --> 00:31:06.196 A:middle
场景看起来很像

00:31:06.196 --> 00:31:07.526 A:middle
但是我们去掉了一些细节

00:31:07.806 --> 00:31:09.706 A:middle
我们去掉了从熔岩中冒出的烟

00:31:10.256 --> 00:31:11.486 A:middle
我们减少了一些火粒子

00:31:11.486 --> 00:31:13.906 A:middle
但是正如你看到的

00:31:13.906 --> 00:31:15.986 A:middle
App 的响应仍然很好

00:31:17.216 --> 00:31:18.136 A:middle
这就是我们要找的

00:31:18.136 --> 00:31:23.176 A:middle
现在 让我们来看看

00:31:23.176 --> 00:31:24.966 A:middle
为了实现这一点我们必须做的代码更改

00:31:31.466 --> 00:31:33.046 A:middle
当你处于 Nominal 或者 Fair 状态时

00:31:33.046 --> 00:31:34.086 A:middle
我们不需要做任何事情

00:31:34.906 --> 00:31:35.786 A:middle
你可以在 App 上

00:31:35.786 --> 00:31:36.556 A:middle
启用所有功能

00:31:37.096 --> 00:31:37.436 A:middle
我们有 HDR

00:31:37.436 --> 00:31:39.096 A:middle
我们有景深

00:31:39.286 --> 00:31:40.546 A:middle
我们有柔和的阴影

00:31:40.546 --> 00:31:41.976 A:middle
我们也将后期处理设置为高

00:31:45.836 --> 00:31:47.936 A:middle
但如果达到了 Serious 状态

00:31:47.936 --> 00:31:48.836 A:middle
我们就要有所行动了

00:31:48.836 --> 00:31:51.146 A:middle
我们需要禁用 HDR

00:31:51.936 --> 00:31:54.256 A:middle
我们还将阴影从柔化变为斑点

00:31:54.796 --> 00:31:56.746 A:middle
我们还将后期处理设置为中等

00:31:57.246 --> 00:32:00.356 A:middle
当我们处在 Critical 状态时

00:32:00.356 --> 00:32:01.026 A:middle
还要进一步设置

00:32:01.026 --> 00:32:02.236 A:middle
Critical 是一种非常高的热状态

00:32:02.236 --> 00:32:04.426 A:middle
我们禁用了尽可能多的功能

00:32:04.956 --> 00:32:05.756 A:middle
我们禁用了 HDR

00:32:05.846 --> 00:32:06.936 A:middle
禁用景深

00:32:06.936 --> 00:32:08.576 A:middle
我们禁用了阴影

00:32:08.576 --> 00:32:09.736 A:middle
以及后期处理

00:32:10.946 --> 00:32:13.456 A:middle
所有这些都将有助于

00:32:13.456 --> 00:32:15.416 A:middle
保持 App 随时响应

00:32:15.936 --> 00:32:18.946 A:middle
现在 让我们看看一些

00:32:18.946 --> 00:32:21.006 A:middle
用来调节温度的工具

00:32:23.876 --> 00:32:25.506 A:middle
这是一个采取在

00:32:25.816 --> 00:32:28.196 A:middle
同一 App 上的 Instrument 堆栈

00:32:28.196 --> 00:32:29.426 A:middle
分为带有和不带有优化

00:32:29.966 --> 00:32:31.346 A:middle
它们都是在

00:32:31.346 --> 00:32:32.546 A:middle
Serious 热条件下被捕获的

00:32:32.606 --> 00:32:36.176 A:middle
让我们看看 FPS 轨道

00:32:36.176 --> 00:32:40.596 A:middle
这是显示在同一帧中的时间

00:32:41.366 --> 00:32:42.396 A:middle
我们来解码一下

00:32:42.886 --> 00:32:43.916 A:middle
当显示器显示一个帧时

00:32:43.916 --> 00:32:47.136 A:middle
GP 正在绘制下一个帧

00:32:47.136 --> 00:32:52.276 A:middle
CP 正在为后面的帧创建指令

00:32:52.276 --> 00:32:57.506 A:middle
如果不进行任何优化

00:32:57.506 --> 00:32:58.576 A:middle
GP 就无法

00:32:58.576 --> 00:32:59.796 A:middle
及时交付帧

00:33:02.816 --> 00:33:04.096 A:middle
这就是卡顿的样子

00:33:04.236 --> 00:33:05.566 A:middle
这时你的 App 开始滞后

00:33:05.846 --> 00:33:06.576 A:middle
如果你注意到

00:33:06.576 --> 00:33:08.756 A:middle
在优化之后

00:33:08.756 --> 00:33:09.926 A:middle
帧之间的间隔是一致的

00:33:10.156 --> 00:33:11.516 A:middle
除了使用 Instrument

00:33:11.986 --> 00:33:14.166 A:middle
你还应该使用 Xcode 能量计

00:33:14.346 --> 00:33:15.916 A:middle
你应该把注意力集中在

00:33:15.916 --> 00:33:17.856 A:middle
你的 App 的平均能量作用上

00:33:18.766 --> 00:33:20.176 A:middle
能量作用越大

00:33:20.286 --> 00:33:21.806 A:middle
电池损耗越高

00:33:21.806 --> 00:33:22.966 A:middle
你的 App 导致

00:33:22.966 --> 00:33:24.526 A:middle
热状态上升的可能性就越大

00:33:24.966 --> 00:33:26.306 A:middle
如果你看没有优化的情况

00:33:26.306 --> 00:33:27.456 A:middle
我们有一个

00:33:27.456 --> 00:33:31.196 A:middle
非常高的能量作用

00:33:31.196 --> 00:33:32.476 A:middle
但伴随着优化的启用

00:33:32.476 --> 00:33:34.126 A:middle
我们就能够降低能量作用

00:33:34.286 --> 00:33:35.496 A:middle
这意味着

00:33:35.496 --> 00:33:36.656 A:middle
当设备运行该 App 时

00:33:36.656 --> 00:33:38.036 A:middle
该 App 不会导致

00:33:38.036 --> 00:33:39.746 A:middle
热状态上升

00:33:42.676 --> 00:33:44.576 A:middle
有请 Alex 和 Ilya 进行总结

00:33:45.516 --> 00:33:49.500 A:middle
[掌声]

00:33:52.256 --> 00:33:53.566 A:middle
&gt;&gt; 谢谢你 Jay

00:33:56.056 --> 00:33:57.806 A:middle
如果你想了解更多

00:33:57.806 --> 00:33:59.396 A:middle
关于 Xcode 中的调试

00:33:59.396 --> 00:34:00.896 A:middle
以及其他

00:34:00.896 --> 00:34:01.836 A:middle
可以为你的开发过程

00:34:01.836 --> 00:34:03.266 A:middle
带来真实场景的内容

00:34:03.266 --> 00:34:04.946 A:middle
例如环境覆盖

00:34:04.946 --> 00:34:06.806 A:middle
请查看本周早些时候的这个会议

00:34:08.096 --> 00:34:10.656 A:middle
&gt;&gt; 我们了解了

00:34:10.656 --> 00:34:11.936 A:middle
人们会在真实的环境下

00:34:11.936 --> 00:34:13.985 A:middle
使用你的 App

00:34:13.985 --> 00:34:16.485 A:middle
比如 3G 网络或高温状态

00:34:16.686 --> 00:34:17.795 A:middle
也了解了在这些情况下

00:34:17.795 --> 00:34:19.275 A:middle
提供真正可能的

00:34:19.275 --> 00:34:21.666 A:middle
最佳体验的重要性

00:34:22.686 --> 00:34:24.235 A:middle
以及一个典型的开发

00:34:24.235 --> 00:34:25.815 A:middle
和测试工作流

00:34:26.045 --> 00:34:27.775 A:middle
如何自然地引导你

00:34:27.775 --> 00:34:29.516 A:middle
进入净室条件

00:34:29.516 --> 00:34:31.516 A:middle
以避免片状的测试和高方差

00:34:31.686 --> 00:34:33.616 A:middle
我们了解了

00:34:33.616 --> 00:34:35.536 A:middle
在 Xcode 11 中新的设备条件

00:34:35.896 --> 00:34:37.156 A:middle
可以让你快速轻松地将

00:34:37.156 --> 00:34:39.346 A:middle
测试设备置于

00:34:39.346 --> 00:34:41.216 A:middle
不佳的网络或温度状态

00:34:41.985 --> 00:34:43.396 A:middle
这意味着你不再需要

00:34:43.396 --> 00:34:44.966 A:middle
等待一个小时让设备真正升温

00:34:44.966 --> 00:34:46.196 A:middle
也不再需要

00:34:46.196 --> 00:34:47.186 A:middle
扔掉某些测试结果

00:34:47.565 --> 00:34:49.376 A:middle
这是一种很好的方式

00:34:49.376 --> 00:34:50.516 A:middle
确保你正在设计的代码

00:34:50.686 --> 00:34:52.266 A:middle
以及它所带来的

00:34:52.326 --> 00:34:53.565 A:middle
所有优秀性能和特性

00:34:53.775 --> 00:34:55.275 A:middle
都能够转化为现实情况中

00:34:55.275 --> 00:34:56.996 A:middle
用户的实际体验

00:34:58.416 --> 00:35:00.666 A:middle
为了总结

00:35:00.666 --> 00:35:02.096 A:middle
请使用 Test Pyramid 模型

00:35:02.096 --> 00:35:03.896 A:middle
来组织你的自动化测试套件

00:35:03.896 --> 00:35:05.286 A:middle
并准备在你

00:35:05.286 --> 00:35:06.906 A:middle
将实际情况引入测试时

00:35:06.956 --> 00:35:10.666 A:middle
对结果进行分类

00:35:11.156 --> 00:35:13.246 A:middle
只跳过单元测试中

00:35:13.246 --> 00:35:14.216 A:middle
真正不必要的代码

00:35:14.746 --> 00:35:17.576 A:middle
这里有一个行动的号召

00:35:18.926 --> 00:35:19.856 A:middle
别忘了使用

00:35:19.856 --> 00:35:20.686 A:middle
Network Link Conditioner

00:35:21.316 --> 00:35:22.796 A:middle
一定要激活设备条件

00:35:22.986 --> 00:35:24.766 A:middle
查看 App 的行为

00:35:24.766 --> 00:35:26.196 A:middle
并添加测试运行

00:35:26.196 --> 00:35:28.256 A:middle
从而发现你可能错过的异常行为

00:35:29.416 --> 00:35:31.056 A:middle
我们再次建议你

00:35:31.056 --> 00:35:32.426 A:middle
至少使用不同质量的

00:35:32.426 --> 00:35:34.066 A:middle
3G 网络类型进行测试

00:35:34.446 --> 00:35:36.126 A:middle
查看你的 App 在 Serious 的

00:35:36.126 --> 00:35:37.406 A:middle
热状态下是如何工作的

00:35:38.396 --> 00:35:39.816 A:middle
我们非常兴奋地看到那些

00:35:39.816 --> 00:35:41.076 A:middle
你使用我们提供的设备条件

00:35:41.276 --> 00:35:43.096 A:middle
所进行的改进

00:35:43.756 --> 00:35:45.686 A:middle
我们也很想听听你的意见

00:35:46.126 --> 00:35:47.656 A:middle
联系开发者支持

00:35:47.656 --> 00:35:49.126 A:middle
或者在此会议之后

00:35:49.126 --> 00:35:49.966 A:middle
访问 Xcode 实验室

00:35:50.356 --> 00:35:52.876 A:middle
获取更多信息 请参见我们的会议链接

00:35:53.526 --> 00:35:54.826 A:middle
非常感谢你

00:35:54.826 --> 00:35:55.966 A:middle
我们希望你有一个开心的 WWDC 之旅

00:35:56.516 --> 00:36:03.500 A:middle
[掌声]

