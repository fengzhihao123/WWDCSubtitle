WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:04.500 A:middle
[音乐]

00:00:09.516 --> 00:00:13.766 A:middle
[掌声]

00:00:14.266 --> 00:00:16.026 A:middle
&gt;&gt; 早上好 欢迎来到

00:00:16.026 --> 00:00:17.326 A:middle
Instruments 入门指南

00:00:17.936 --> 00:00:19.356 A:middle
我的名字叫 Tibet Rooney-Rabdau

00:00:19.356 --> 00:00:20.296 A:middle
今天和我一起的是我的同事

00:00:20.436 --> 00:00:21.976 A:middle
Ben Mitchell 和 Anand Subramanian

00:00:25.926 --> 00:00:27.376 A:middle
要打造优秀的

00:00:27.376 --> 00:00:29.266 A:middle
用户体验

00:00:29.266 --> 00:00:30.966 A:middle
我第一个想到的就是性能

00:00:32.106 --> 00:00:33.786 A:middle
灵敏的响应能让你的用户

00:00:34.436 --> 00:00:37.466 A:middle
更加信任你的 App

00:00:37.656 --> 00:00:39.056 A:middle
无论我多么喜欢某个 App 的 UI

00:00:39.056 --> 00:00:40.616 A:middle
如果我不断看到加载动画

00:00:40.616 --> 00:00:43.126 A:middle
或是电量掉得很快

00:00:43.126 --> 00:00:45.476 A:middle
我获得的体验

00:00:45.476 --> 00:00:46.616 A:middle
都变得不理想了

00:00:47.526 --> 00:00:49.156 A:middle
如果你想在你的 App 中创造

00:00:49.156 --> 00:00:50.566 A:middle
很棒的用户体验

00:00:50.566 --> 00:00:54.206 A:middle
就要时刻注意这些问题

00:00:54.206 --> 00:00:55.256 A:middle
在今天的会议中

00:00:55.256 --> 00:00:56.886 A:middle
我们会与你分享我们

00:00:56.886 --> 00:00:58.016 A:middle
最爱的性能分析工具

00:00:58.746 --> 00:00:59.366 A:middle
Instruments

00:00:59.996 --> 00:01:01.956 A:middle
这对于刚刚接触 Instruments

00:01:01.956 --> 00:01:03.226 A:middle
并且想要在他们的

00:01:03.226 --> 00:01:04.096 A:middle
工作流程中集成

00:01:04.096 --> 00:01:05.406 A:middle
更好的 Instruments 的开发者来说

00:01:05.446 --> 00:01:06.456 A:middle
是非常有帮助的

00:01:07.786 --> 00:01:08.916 A:middle
性能分析不仅要趁早

00:01:08.916 --> 00:01:10.836 A:middle
还要经常进行

00:01:11.046 --> 00:01:12.226 A:middle
因为在开发过程中的

00:01:12.226 --> 00:01:13.166 A:middle
任意阶段都可能

00:01:13.166 --> 00:01:14.486 A:middle
引入回归 并且产生

00:01:14.486 --> 00:01:17.036 A:middle
复合作用

00:01:17.036 --> 00:01:18.046 A:middle
事实上 我把 Xcode Instruments

00:01:18.046 --> 00:01:19.616 A:middle
当成我最好的帮手

00:01:19.616 --> 00:01:21.396 A:middle
所以我会把它放在程序坞

00:01:21.396 --> 00:01:23.386 A:middle
Xcode 的旁边

00:01:23.386 --> 00:01:25.076 A:middle
提醒我从编程早期开始

00:01:25.076 --> 00:01:27.786 A:middle
就要经常进行性能分析

00:01:28.516 --> 00:01:30.336 A:middle
今天我们会从一个简单的介绍开始

00:01:30.336 --> 00:01:32.216 A:middle
了解一下 Instruments 的功能与特性

00:01:32.216 --> 00:01:34.366 A:middle
以及它的用户界面

00:01:35.286 --> 00:01:36.176 A:middle
然后我们会向你展示

00:01:36.176 --> 00:01:37.816 A:middle
如何用多种方式剖析你的 App

00:01:37.816 --> 00:01:39.836 A:middle
来分析它的运行耗时

00:01:40.546 --> 00:01:41.786 A:middle
我们会用一个

00:01:41.786 --> 00:01:43.586 A:middle
叫做 Time Profiler 的工具

00:01:43.586 --> 00:01:45.586 A:middle
来分析你的 App 在做什么

00:01:45.586 --> 00:01:46.506 A:middle
以及做了多少

00:01:46.506 --> 00:01:49.126 A:middle
最后 我们会讨论

00:01:49.126 --> 00:01:50.576 A:middle
在你 App 中添加 Signpost

00:01:50.576 --> 00:01:53.486 A:middle
来获取 App 行为的深度信息

00:01:54.136 --> 00:01:55.556 A:middle
让我们先简要地

00:01:55.556 --> 00:01:57.146 A:middle
了解一下 Instruments

00:01:57.686 --> 00:02:00.596 A:middle
Instruments 是在 Xcode 工具集中的

00:02:00.596 --> 00:02:02.336 A:middle
一个强大的性能分析

00:02:02.336 --> 00:02:04.596 A:middle
与测试工具

00:02:05.306 --> 00:02:06.616 A:middle
Instruments 可以帮助你

00:02:06.616 --> 00:02:08.166 A:middle
在所有平台上分析你的 App

00:02:08.566 --> 00:02:10.866 A:middle
包括 iOS macOS watchOS 和 tvOS

00:02:11.516 --> 00:02:13.326 A:middle
这能让你更好地理解

00:02:13.326 --> 00:02:15.006 A:middle
并优化它们的行为和性能

00:02:16.156 --> 00:02:17.356 A:middle
你可以在开发 测试和调试

00:02:17.356 --> 00:02:19.216 A:middle
过程中使用 Instruments

00:02:19.966 --> 00:02:21.176 A:middle
另外 我有个好消息

00:02:21.646 --> 00:02:23.366 A:middle
如果你有 Xcode 那么你就已经

00:02:23.416 --> 00:02:24.816 A:middle
有 Instruments 了

00:02:25.426 --> 00:02:28.096 A:middle
在 Xcode 的“Product”菜单中选择“Profile”

00:02:28.096 --> 00:02:30.406 A:middle
尽管 Instruments 是内嵌在 Xcode 中

00:02:30.436 --> 00:02:32.306 A:middle
且经常和 Xcode 一起使用的

00:02:32.546 --> 00:02:33.856 A:middle
它还是一个单独的 App

00:02:34.046 --> 00:02:34.756 A:middle
可以在有需要的时候

00:02:34.756 --> 00:02:35.956 A:middle
单独使用

00:02:36.496 --> 00:02:37.716 A:middle
你可以自由选择

00:02:37.776 --> 00:02:40.586 A:middle
如何开始性能分析工作

00:02:40.896 --> 00:02:43.196 A:middle
现在开始 我所说的“Instruments”

00:02:43.376 --> 00:02:45.026 A:middle
会有两种不同的含义

00:02:45.886 --> 00:02:48.226 A:middle
我们已经讨论过 Instruments App 了

00:02:48.226 --> 00:02:49.706 A:middle
为什么取了个这样的名字呢

00:02:49.986 --> 00:02:51.576 A:middle
因为它提供了一系列

00:02:51.576 --> 00:02:52.856 A:middle
被称为 Instrument 的工具

00:02:52.856 --> 00:02:54.726 A:middle
帮助你分析 App 中的错误

00:02:55.546 --> 00:02:56.826 A:middle
在不容易理解

00:02:56.826 --> 00:02:58.046 A:middle
我指的到底是什么的地方

00:02:58.046 --> 00:02:59.516 A:middle
我会用“Instruments App”

00:02:59.516 --> 00:03:01.563 A:middle
来指代这个 App

00:03:02.486 --> 00:03:03.846 A:middle
Instrument 会从插入在

00:03:03.846 --> 00:03:05.356 A:middle
App 进程和操作系统的

00:03:05.356 --> 00:03:06.656 A:middle
重要内部架构中

00:03:06.656 --> 00:03:10.596 A:middle
收集时间序列追踪数据

00:03:11.466 --> 00:03:12.766 A:middle
我们有时候会称

00:03:12.766 --> 00:03:14.606 A:middle
Instrument 收集到的数据为“Treat”

00:03:15.766 --> 00:03:17.836 A:middle
这里展示的是我最喜欢的几个 Instrument

00:03:18.436 --> 00:03:19.746 A:middle
左边的 Time Profiler Instrument

00:03:19.746 --> 00:03:21.506 A:middle
使用操作系统提供的内部架构

00:03:21.506 --> 00:03:23.156 A:middle
以固定的时间间隔

00:03:23.156 --> 00:03:24.656 A:middle
来收集相关线程的

00:03:24.656 --> 00:03:26.406 A:middle
所有呼叫栈

00:03:27.276 --> 00:03:28.186 A:middle
右边的 Points of Interest Instrument

00:03:28.186 --> 00:03:29.656 A:middle
从你 App 中重要的区域收集数据

00:03:29.686 --> 00:03:30.886 A:middle
让你能用多种 API

00:03:30.886 --> 00:03:32.406 A:middle
对其加以强调

00:03:32.766 --> 00:03:37.056 A:middle
比如 Signpost API

00:03:37.376 --> 00:03:38.986 A:middle
当你一开始打开 Instruments 的时候

00:03:38.986 --> 00:03:40.196 A:middle
你会看到一个模板列表

00:03:40.196 --> 00:03:41.896 A:middle
就像在“Pages 文稿”或

00:03:41.896 --> 00:03:44.246 A:middle
“Numbers 表格”中一样

00:03:44.646 --> 00:03:46.086 A:middle
模板会提供一个

00:03:46.156 --> 00:03:47.526 A:middle
预配置的 Instrument 集合

00:03:47.526 --> 00:03:49.186 A:middle
帮你解决特定的性能问题

00:03:49.186 --> 00:03:51.536 A:middle
就像“Pages 文稿”中的

00:03:51.536 --> 00:03:52.826 A:middle
生日贺卡模板一样

00:03:52.826 --> 00:03:54.166 A:middle
它会提供一个文档结构

00:03:54.166 --> 00:03:55.786 A:middle
来帮助你创建生日贺卡

00:03:56.106 --> 00:03:57.846 A:middle
Instruments 中有海量的模板

00:03:57.846 --> 00:03:59.336 A:middle
我们无法再这个短暂的会议中一一介绍

00:03:59.336 --> 00:04:00.446 A:middle
所以我们今天会着重讲讲

00:04:00.446 --> 00:04:01.986 A:middle
Time Profiler 这个模板

00:04:01.986 --> 00:04:03.066 A:middle
它包括我刚刚提到的

00:04:03.066 --> 00:04:04.666 A:middle
Time Profiler 和 Points of Interest

00:04:04.666 --> 00:04:06.216 A:middle
这两个 Instrument 以及其他

00:04:07.296 --> 00:04:08.546 A:middle
这些 Instrument 是

00:04:08.546 --> 00:04:09.466 A:middle
了解响应程度和

00:04:09.466 --> 00:04:12.476 A:middle
你 App 的占用程度的绝佳工具

00:04:12.476 --> 00:04:15.106 A:middle
当你第一次打开 Time Profiler 模板的时候

00:04:15.106 --> 00:04:16.586 A:middle
你会看到这样的

00:04:16.586 --> 00:04:17.916 A:middle
一个空白文档

00:04:17.916 --> 00:04:19.586 A:middle
等着你去进行分析工作

00:04:19.646 --> 00:04:22.136 A:middle
你可以通过点按

00:04:22.136 --> 00:04:23.336 A:middle
右上角的添加 Instrument 按钮

00:04:23.336 --> 00:04:26.106 A:middle
来为你的文档添加额外的 Instrument

00:04:27.186 --> 00:04:28.286 A:middle
然后 Instruments App 就会

00:04:28.286 --> 00:04:29.236 A:middle
展现它的资源库面板

00:04:29.236 --> 00:04:30.446 A:middle
包括了可用 Instrument

00:04:30.446 --> 00:04:32.436 A:middle
的完整清单

00:04:33.706 --> 00:04:35.216 A:middle
从这里 你可以找到新的 Instrument

00:04:35.216 --> 00:04:36.506 A:middle
并将其拖到文档中

00:04:36.506 --> 00:04:37.976 A:middle
来获取更多数据

00:04:39.356 --> 00:04:40.916 A:middle
界面的左上角是

00:04:40.916 --> 00:04:42.036 A:middle
分析控件

00:04:42.496 --> 00:04:43.816 A:middle
这让你能够记录

00:04:43.816 --> 00:04:45.746 A:middle
暂停 或者停止数据收集

00:04:46.516 --> 00:04:48.746 A:middle
分析控件旁边是目标区域

00:04:49.416 --> 00:04:50.506 A:middle
左边的目标设备列表

00:04:50.506 --> 00:04:52.166 A:middle
让你能够选择

00:04:52.166 --> 00:04:53.716 A:middle
你在分析时想用的设备

00:04:54.446 --> 00:04:56.216 A:middle
这与 Xcode 中的目标区域很像

00:04:56.216 --> 00:04:57.426 A:middle
你在那里可以选择

00:04:57.426 --> 00:04:59.326 A:middle
在设备上进行分析时

00:04:59.326 --> 00:05:00.226 A:middle
所用的设备和进程

00:05:01.316 --> 00:05:02.666 A:middle
通常来说 你都会选择

00:05:02.666 --> 00:05:04.046 A:middle
你 App 的进程做为目标进程

00:05:04.046 --> 00:05:05.846 A:middle
但是 举个例子

00:05:05.846 --> 00:05:06.836 A:middle
如果你在分析一个共享的扩展

00:05:06.836 --> 00:05:08.236 A:middle
你可能会选择扩展进程

00:05:08.236 --> 00:05:09.846 A:middle
作为目标进程 

00:05:09.846 --> 00:05:12.146 A:middle
而它和你的 App 是相互独立的

00:05:12.406 --> 00:05:13.786 A:middle
当我在 Time Profiler 模板中

00:05:13.786 --> 00:05:15.306 A:middle
开始记录的时候

00:05:15.306 --> 00:05:16.226 A:middle
文档会逐渐被

00:05:16.226 --> 00:05:18.326 A:middle
追踪数据填充

00:05:18.326 --> 00:05:20.036 A:middle
另外 使用 Instruments 记录

00:05:20.036 --> 00:05:21.136 A:middle
会占用系统资源

00:05:21.136 --> 00:05:23.086 A:middle
像你的 App 一样

00:05:23.826 --> 00:05:25.386 A:middle
为了最小化对你的 App 的影响

00:05:25.696 --> 00:05:26.956 A:middle
Instruments 还提供了一个叫做

00:05:26.956 --> 00:05:28.346 A:middle
Last Few Seconds Mode（最后几秒模式）的功能

00:05:28.406 --> 00:05:30.586 A:middle
有时候也叫做 Windowed Mode（窗口模式）

00:05:31.836 --> 00:05:33.436 A:middle
Windowed Mode 会在记录结束之前

00:05:33.436 --> 00:05:34.886 A:middle
阻止 Instruments 

00:05:34.886 --> 00:05:36.566 A:middle
分析或显示结果

00:05:36.916 --> 00:05:38.326 A:middle
它还会无视记录最后几秒之前

00:05:38.366 --> 00:05:39.466 A:middle
发生的事件

00:05:40.256 --> 00:05:41.176 A:middle
在你想要记录数据

00:05:41.176 --> 00:05:42.416 A:middle
并在发现问题时停止时

00:05:42.466 --> 00:05:43.966 A:middle
这个模式十分实用

00:05:44.676 --> 00:05:45.956 A:middle
有些模板默认使用这个模式

00:05:45.956 --> 00:05:47.286 A:middle
因为它们会在短时间内

00:05:47.286 --> 00:05:49.866 A:middle
收集大量的数据

00:05:51.426 --> 00:05:52.406 A:middle
现在我已经在 Time Profiler 模板中

00:05:52.406 --> 00:05:53.576 A:middle
完成了一次记录

00:05:53.676 --> 00:05:55.336 A:middle
大量的追踪数据

00:05:55.336 --> 00:05:56.686 A:middle
布满了这个窗口的

00:05:56.686 --> 00:05:57.416 A:middle
各个角落

00:05:58.096 --> 00:05:59.656 A:middle
这可能看起来很复杂

00:05:59.656 --> 00:06:00.736 A:middle
所以我们来分别看看

00:06:00.736 --> 00:06:01.866 A:middle
每个部分都在做什么

00:06:03.226 --> 00:06:04.786 A:middle
在窗口顶端的部分

00:06:04.786 --> 00:06:06.266 A:middle
包含了 Track Viewer（轨道查看器）

00:06:06.836 --> 00:06:08.516 A:middle
一个 Track 会展示与某个事件源相关的

00:06:08.516 --> 00:06:10.166 A:middle
时间序列追踪数据

00:06:10.166 --> 00:06:13.496 A:middle
比如进程 线程 或者 CPU 核心

00:06:14.126 --> 00:06:15.696 A:middle
单个的 Instrument

00:06:15.696 --> 00:06:16.716 A:middle
可能会为多个轨道

00:06:16.816 --> 00:06:17.896 A:middle
提供追踪数据

00:06:18.396 --> 00:06:20.806 A:middle
在这个例子中 我们可以看到三个轨道

00:06:21.476 --> 00:06:22.846 A:middle
最上面的轨道是

00:06:22.846 --> 00:06:23.846 A:middle
Time Profiler Instrument 提供的

00:06:23.846 --> 00:06:26.796 A:middle
一份关于我们 App 系统占用的总结

00:06:27.626 --> 00:06:29.166 A:middle
第二个轨道展示了

00:06:29.166 --> 00:06:30.376 A:middle
从 Points of Interest Instrument

00:06:30.456 --> 00:06:31.996 A:middle
收集来的信息 这一点 Anand 稍后

00:06:31.996 --> 00:06:32.956 A:middle
会为大家讲解

00:06:33.266 --> 00:06:34.406 A:middle
下面的额外轨道

00:06:34.406 --> 00:06:36.006 A:middle
把数据进行进一步的细分

00:06:36.726 --> 00:06:39.236 A:middle
一个 Instrument 的追踪会生成

00:06:39.236 --> 00:06:40.466 A:middle
数十个轨道

00:06:41.326 --> 00:06:42.876 A:middle
你可以用 Track Filter

00:06:42.876 --> 00:06:44.296 A:middle
来让它只显示 Instrument

00:06:44.296 --> 00:06:46.576 A:middle
或者按线程或 CPU 核心细分

00:06:47.356 --> 00:06:48.636 A:middle
你也可以获得更详细的数据

00:06:48.636 --> 00:06:51.646 A:middle
或者按名称来搜索轨道

00:06:51.646 --> 00:06:52.886 A:middle
在窗口的底部

00:06:52.886 --> 00:06:54.186 A:middle
详细视图让你能够

00:06:54.286 --> 00:06:56.376 A:middle
探索选定轨道的追踪信息

00:06:56.896 --> 00:06:58.546 A:middle
在这个例子中

00:06:58.546 --> 00:07:00.436 A:middle
我们选中了 Time Profiler 轨道

00:07:00.436 --> 00:07:01.826 A:middle
我们可以探索追踪过程中

00:07:01.826 --> 00:07:02.986 A:middle
每个线程调用的函数

00:07:03.726 --> 00:07:06.026 A:middle
详细视图的右半部分

00:07:06.026 --> 00:07:07.526 A:middle
你可以在检视器中

00:07:07.526 --> 00:07:09.016 A:middle
找到扩展的详细视图

00:07:09.836 --> 00:07:11.506 A:middle
这个视图可能会提供

00:07:11.506 --> 00:07:12.586 A:middle
来自正在使用的 Instrument 的

00:07:12.586 --> 00:07:14.186 A:middle
更详细的信息

00:07:14.186 --> 00:07:15.716 A:middle
取决于当前情境以及所选项

00:07:16.416 --> 00:07:17.886 A:middle
在这个例子中 由于我

00:07:17.886 --> 00:07:19.386 A:middle
在使用 Time Profiler

00:07:19.386 --> 00:07:22.266 A:middle
我会获得一个最“厚”调用栈的总结

00:07:22.746 --> 00:07:24.046 A:middle
另一个及时监控

00:07:24.046 --> 00:07:25.806 A:middle
当前情况的方式是

00:07:25.806 --> 00:07:26.886 A:middle
通过 Inspection Head（探头）

00:07:27.686 --> 00:07:28.586 A:middle
Inspection Head 是一个

00:07:28.586 --> 00:07:30.416 A:middle
可以被放置在追踪中的

00:07:30.556 --> 00:07:32.616 A:middle
一个特定时间点上的选择器

00:07:32.616 --> 00:07:33.646 A:middle
以此来选中所有

00:07:33.646 --> 00:07:36.916 A:middle
在那个时刻正在发生的事件或间隔

00:07:37.256 --> 00:07:38.486 A:middle
被选中事件的额外细节

00:07:38.486 --> 00:07:40.686 A:middle
会在悬浮标签上显示

00:07:41.116 --> 00:07:42.976 A:middle
详细视图和额外详细视图

00:07:42.976 --> 00:07:44.856 A:middle
会持续更新

00:07:44.856 --> 00:07:46.156 A:middle
来在可用时跟踪

00:07:46.156 --> 00:07:47.406 A:middle
选定事件的信息

00:07:48.566 --> 00:07:49.976 A:middle
我们已经把每个部分过了一遍

00:07:49.976 --> 00:07:51.296 A:middle
现在我们对 Instruments 的

00:07:51.296 --> 00:07:53.286 A:middle
用户界面更加了解了

00:07:53.336 --> 00:07:54.866 A:middle
窗口中展示的所有内容都是

00:07:55.116 --> 00:07:56.566 A:middle
追踪文档的一部分

00:07:57.286 --> 00:07:59.046 A:middle
追踪文档包括

00:07:59.046 --> 00:08:00.196 A:middle
任何为分析工作配置好的 Instruments 

00:08:00.196 --> 00:08:01.786 A:middle
也包括收集到的数据

00:08:01.786 --> 00:08:04.656 A:middle
以及你用于分析结果的视图

00:08:05.616 --> 00:08:07.746 A:middle
Instruments App 能存储

00:08:07.746 --> 00:08:08.976 A:middle
并重新打开这些追踪文档

00:08:09.226 --> 00:08:10.536 A:middle
让你能够探索之前的结果

00:08:10.536 --> 00:08:12.216 A:middle
或者把它们分享给同事

00:08:12.216 --> 00:08:13.446 A:middle
以供研究

00:08:13.446 --> 00:08:15.926 A:middle
接下来 我想邀请

00:08:15.926 --> 00:08:16.896 A:middle
我的同事 Ben Mitchell

00:08:16.896 --> 00:08:18.056 A:middle
来到舞台 他会通过实际操作

00:08:18.056 --> 00:08:19.616 A:middle
来向各位展示一下

00:08:19.966 --> 00:08:25.416 A:middle
谢谢 [掌声]

00:08:25.916 --> 00:08:26.446 A:middle
&gt;&gt; 谢谢 Tibet

00:08:26.946 --> 00:08:27.536 A:middle
Hello World

00:08:27.536 --> 00:08:29.036 A:middle
我的名字是 Ben Mitchell

00:08:29.036 --> 00:08:29.926 A:middle
正如 Tibet 所说 我会

00:08:29.926 --> 00:08:31.006 A:middle
向各位展示如何使用

00:08:31.006 --> 00:08:32.405 A:middle
Instruments 来分析你的 App

00:08:33.015 --> 00:08:33.686 A:middle
我们开始吧

00:08:37.275 --> 00:08:38.506 A:middle
对于你们中部分

00:08:38.506 --> 00:08:39.666 A:middle
看过去年的大会

00:08:39.666 --> 00:08:42.176 A:middle
WWDC2018 的人来说

00:08:42.176 --> 00:08:43.496 A:middle
可能会觉得《Solar System》App 很熟悉

00:08:44.145 --> 00:08:45.286 A:middle
我们大概在一年前上架了它

00:08:45.286 --> 00:08:46.036 A:middle
并从我们的顾客那里收获了

00:08:46.036 --> 00:08:47.096 A:middle
一些正面的反馈

00:08:47.636 --> 00:08:49.356 A:middle
但是 也有一些没那么好的反馈

00:08:49.356 --> 00:08:51.606 A:middle
具体来说 是在性能方面的

00:08:51.916 --> 00:08:53.676 A:middle
我们的顾客报告了一些

00:08:53.676 --> 00:08:54.716 A:middle
响应问题

00:08:55.436 --> 00:08:57.086 A:middle
尤其是在较早的设备上

00:08:57.406 --> 00:08:59.036 A:middle
在会议前 我重现了

00:08:59.036 --> 00:09:00.376 A:middle
其中的一个问题

00:09:00.376 --> 00:09:01.606 A:middle
我想要用 Instruments 向各位展示一下

00:09:01.606 --> 00:09:02.716 A:middle
来看看我们是不是

00:09:02.756 --> 00:09:03.466 A:middle
能够修复它

00:09:04.096 --> 00:09:04.846 A:middle
我们现在就开始吧

00:09:06.266 --> 00:09:07.166 A:middle
现在 App 已经在运行了

00:09:07.166 --> 00:09:08.676 A:middle
我们就直接打开 Instruments 吧

00:09:10.616 --> 00:09:11.756 A:middle
Instruments 的模板选择器

00:09:11.756 --> 00:09:13.056 A:middle
默认选中了 Time Profiler

00:09:13.056 --> 00:09:15.406 A:middle
因为我在之前用过它

00:09:15.776 --> 00:09:17.006 A:middle
Time Profiler 是一个

00:09:17.076 --> 00:09:18.336 A:middle
分析在某个时间窗

00:09:18.336 --> 00:09:20.166 A:middle
发生的问题的绝佳工具

00:09:20.596 --> 00:09:22.476 A:middle
我选择 Time Profiler

00:09:22.476 --> 00:09:23.916 A:middle
然后点按“Choose”按钮

00:09:23.916 --> 00:09:24.876 A:middle
打开一个新的追踪文档

00:09:25.406 --> 00:09:27.366 A:middle
由于我没有从 Xcode 打开它

00:09:27.366 --> 00:09:28.326 A:middle
我要做的第一件事情就是

00:09:28.326 --> 00:09:30.826 A:middle
选择我要追踪的进程

00:09:31.656 --> 00:09:32.906 A:middle
使用目标选取区域

00:09:33.436 --> 00:09:36.046 A:middle
我选择“All Processes”

00:09:36.046 --> 00:09:37.146 A:middle
然后选择正在运行的

00:09:37.146 --> 00:09:38.286 A:middle
“Solar System Mac”App

00:09:39.076 --> 00:09:40.796 A:middle
你可以在右边看到一个数字

00:09:40.796 --> 00:09:42.136 A:middle
那是进程标识符

00:09:42.136 --> 00:09:44.006 A:middle
它会在“活动监视器”中显示

00:09:44.176 --> 00:09:47.426 A:middle
我们已经选中了 App

00:09:47.426 --> 00:09:49.356 A:middle
现在我们点按窗口左上角的

00:09:49.356 --> 00:09:50.246 A:middle
记录按钮

00:09:52.336 --> 00:09:53.586 A:middle
来吧 Instruments 开始记录了

00:09:54.606 --> 00:09:55.646 A:middle
切换到 App 界面

00:09:56.796 --> 00:09:58.566 A:middle
《Solar System》App 支持一系列

00:09:58.566 --> 00:10:00.516 A:middle
触控板上的手势

00:10:00.606 --> 00:10:01.986 A:middle
包括点按拖动

00:10:02.346 --> 00:10:04.676 A:middle
平移 缩放 等等

00:10:04.676 --> 00:10:06.696 A:middle
我们的顾客报告说

00:10:06.696 --> 00:10:07.406 A:middle
他们在使用这些操作时

00:10:07.406 --> 00:10:09.156 A:middle
或者使用 Command-R 

00:10:09.156 --> 00:10:11.086 A:middle
重载数据时

00:10:11.286 --> 00:10:12.666 A:middle
用户界面会卡住

00:10:12.666 --> 00:10:14.436 A:middle
并且会出现一个加载动画

00:10:15.036 --> 00:10:16.316 A:middle
它或者有别的叫法

00:10:16.646 --> 00:10:17.616 A:middle
这并不理想

00:10:18.126 --> 00:10:20.576 A:middle
我们能再现这个问题

00:10:20.576 --> 00:10:21.666 A:middle
所以我们切换回 Instruments

00:10:21.726 --> 00:10:22.566 A:middle
然后看看我们能找到什么

00:10:23.416 --> 00:10:24.686 A:middle
当我退出 App

00:10:24.686 --> 00:10:26.426 A:middle
Instruments 会自动停止记录

00:10:26.656 --> 00:10:30.416 A:middle
我们可以看到这里的追踪数据

00:10:30.416 --> 00:10:31.576 A:middle
我要做的第一件事就是

00:10:31.576 --> 00:10:33.046 A:middle
让它变大一点

00:10:33.046 --> 00:10:33.946 A:middle
这样我们就能看到更多细节了

00:10:35.236 --> 00:10:36.296 A:middle
当光标在跟踪区域上时

00:10:36.296 --> 00:10:37.816 A:middle
用一个缩放手势

00:10:37.816 --> 00:10:39.736 A:middle
就可以放大它

00:10:39.736 --> 00:10:40.926 A:middle
让我们更清楚地看到细节

00:10:42.376 --> 00:10:43.786 A:middle
在跟踪区域的左侧

00:10:43.786 --> 00:10:45.386 A:middle
我们能看到几个 Instrument

00:10:45.386 --> 00:10:47.546 A:middle
向我们提供了轨道

00:10:47.956 --> 00:10:49.046 A:middle
Time Profiler 显示着

00:10:49.046 --> 00:10:50.626 A:middle
CPU 占用的总结

00:10:50.986 --> 00:10:51.716 A:middle
Points of Interest Instrument

00:10:51.716 --> 00:10:53.076 A:middle
目前是空的

00:10:53.246 --> 00:10:54.256 A:middle
Anand 稍后会为你展示这一点

00:10:54.366 --> 00:10:55.566 A:middle
还有很多其他的 Instrument

00:10:55.566 --> 00:10:56.796 A:middle
包括 Thermal State

00:10:56.796 --> 00:10:58.436 A:middle
其他细分信息可以在滚动视图

00:10:58.436 --> 00:10:59.066 A:middle
下方看到 

00:11:01.986 --> 00:11:04.146 A:middle
CPU 用量总结轨道

00:11:04.146 --> 00:11:05.566 A:middle
我们可以看到一个悬浮的标签

00:11:05.566 --> 00:11:07.126 A:middle
展示当前的占用状态

00:11:08.196 --> 00:11:09.716 A:middle
当我移动到这个大区域时

00:11:09.746 --> 00:11:12.526 A:middle
会发现占用率超过了 100%

00:11:13.206 --> 00:11:13.956 A:middle
这看起来很可疑

00:11:13.956 --> 00:11:15.956 A:middle
我怀疑这就是重新加载操作

00:11:15.956 --> 00:11:17.516 A:middle
发生的时间

00:11:18.076 --> 00:11:19.946 A:middle
我想把它和一些其他的轨道

00:11:19.946 --> 00:11:20.806 A:middle
放到一起比较

00:11:21.026 --> 00:11:21.976 A:middle
我们要用到一个叫做

00:11:21.976 --> 00:11:22.786 A:middle
Track Pinning 的功能

00:11:23.336 --> 00:11:25.956 A:middle
在窗口左侧

00:11:25.956 --> 00:11:27.436 A:middle
当我把鼠标移动到

00:11:27.436 --> 00:11:29.516 A:middle
某个轨道条目上方时

00:11:29.516 --> 00:11:30.666 A:middle
会出现一个加号按钮

00:11:31.956 --> 00:11:34.586 A:middle
点按它 就可以把它固定到

00:11:34.586 --> 00:11:35.866 A:middle
轨道区域底部

00:11:36.646 --> 00:11:37.956 A:middle
现在我们可以

00:11:37.956 --> 00:11:39.536 A:middle
滚动其他轨道

00:11:39.536 --> 00:11:41.016 A:middle
并排看着我们感兴趣的这条轨道

00:11:41.496 --> 00:11:42.846 A:middle
你可以固定多条轨道

00:11:44.246 --> 00:11:45.706 A:middle
在我们向下滚动的同时

00:11:45.706 --> 00:11:46.956 A:middle
我们可以看到系统中的

00:11:46.956 --> 00:11:47.746 A:middle
每个 CPU 核心都在这里出问题了

00:11:48.236 --> 00:11:50.716 A:middle
我们在这里还有一个

00:11:51.046 --> 00:11:52.566 A:middle
针对进程本身的轨道条目

00:11:52.566 --> 00:11:54.006 A:middle
Solar System Mac

00:11:54.006 --> 00:11:55.236 A:middle
除了 CPU 用量总结

00:11:55.236 --> 00:11:56.576 A:middle
这也向我们展示了

00:11:56.576 --> 00:11:57.486 A:middle
App 生命周期事件

00:11:57.816 --> 00:11:58.616 A:middle
我们可以看到在这里

00:11:58.616 --> 00:11:59.486 A:middle
App 来到了前台

00:11:59.486 --> 00:12:01.646 A:middle
因为那时我在程序坞点按了它

00:12:02.516 --> 00:12:04.266 A:middle
还有一个可疑的红色区域

00:12:04.266 --> 00:12:06.926 A:middle
就在 CPU 用量峰值附近这里

00:12:07.836 --> 00:12:09.026 A:middle
把鼠标移动到上面

00:12:09.026 --> 00:12:10.416 A:middle
可以看到标签上写着“Spinning”

00:12:11.756 --> 00:12:12.876 A:middle
“Spinning”在 Instruments 中

00:12:12.876 --> 00:12:14.946 A:middle
指的是 你的主线程卡住了

00:12:15.246 --> 00:12:16.266 A:middle
在 Mac 上 这就是导致出现

00:12:16.266 --> 00:12:17.406 A:middle
加载动画的原因

00:12:17.726 --> 00:12:19.496 A:middle
主线程只有几个

00:12:19.496 --> 00:12:20.626 A:middle
特别的用处

00:12:20.886 --> 00:12:21.806 A:middle
它应该被用来处理

00:12:21.806 --> 00:12:24.316 A:middle
用户的输入或者更新用户界面

00:12:24.766 --> 00:12:25.946 A:middle
显然 这里有点不太对劲

00:12:29.186 --> 00:12:30.896 A:middle
我想看看主线程

00:12:32.286 --> 00:12:35.026 A:middle
我把 Solar System Mac 这个线程展开

00:12:35.866 --> 00:12:37.036 A:middle
现在可以看到 有好多

00:12:37.036 --> 00:12:38.846 A:middle
其他的轨道

00:12:38.846 --> 00:12:40.346 A:middle
分别代表 App 中的每个线程

00:12:40.816 --> 00:12:42.776 A:middle
一直向下滚动

00:12:43.406 --> 00:12:44.196 A:middle
这就是主线程

00:12:44.196 --> 00:12:46.856 A:middle
主线程出现了一个峰

00:12:47.466 --> 00:12:51.746 A:middle
这看起来就是我想要仔细看看的事件

00:12:51.746 --> 00:12:52.886 A:middle
接下来我们要用到的

00:12:52.886 --> 00:12:54.296 A:middle
Instruments 的功能让我们能够

00:12:54.296 --> 00:12:56.166 A:middle
通过在轨道区域点按和拖动

00:12:56.166 --> 00:12:57.616 A:middle
来过滤事件

00:12:58.726 --> 00:12:59.576 A:middle
现在 底部的详细视图

00:12:59.576 --> 00:13:00.826 A:middle
只显示选定时间窗中

00:13:00.866 --> 00:13:02.016 A:middle
发生的事件

00:13:02.896 --> 00:13:03.936 A:middle
我们来深入看看详细视图

00:13:04.066 --> 00:13:05.286 A:middle
来了解更多

00:13:05.856 --> 00:13:09.186 A:middle
详细视图为我们展现了一个调用图

00:13:09.186 --> 00:13:10.266 A:middle
这些都是我们在

00:13:10.266 --> 00:13:12.476 A:middle
分析时所调用的函数

00:13:12.636 --> 00:13:13.586 A:middle
或者 在这个例子中

00:13:13.586 --> 00:13:15.106 A:middle
是在我们从过滤器选中的时间中

00:13:15.796 --> 00:13:18.316 A:middle
理解这是在做什么很重要

00:13:18.316 --> 00:13:21.326 A:middle
我们并不是在追踪

00:13:21.326 --> 00:13:22.776 A:middle
每个函数的进入和推出

00:13:23.366 --> 00:13:24.946 A:middle
其实 Time Profiler 每秒

00:13:24.946 --> 00:13:26.526 A:middle
会捕获许多次快照

00:13:26.706 --> 00:13:28.336 A:middle
并且记录你的进程中

00:13:28.336 --> 00:13:29.726 A:middle
所有正在运行的函数

00:13:30.886 --> 00:13:32.536 A:middle
所以在左侧

00:13:32.536 --> 00:13:33.216 A:middle
我们有一个等待列

00:13:34.476 --> 00:13:37.126 A:middle
Solar System Mac 在 100% 时间都有出现

00:13:37.406 --> 00:13:38.726 A:middle
这意味着 在每次采样中

00:13:38.726 --> 00:13:40.016 A:middle
Solar System Mac 都出现了

00:13:40.356 --> 00:13:41.276 A:middle
这很好 因为这正是我们

00:13:41.276 --> 00:13:42.406 A:middle
要分析的 App

00:13:43.266 --> 00:13:44.336 A:middle
我们向下继续看

00:13:44.336 --> 00:13:47.376 A:middle
可以看到主线程的出现率为 96.7% 等等

00:13:47.826 --> 00:13:49.126 A:middle
我们继续展开这些线程

00:13:49.126 --> 00:13:50.476 A:middle
来看看我们调用的

00:13:50.476 --> 00:13:51.436 A:middle
更深的函数

00:13:52.376 --> 00:13:53.356 A:middle
但是这里有很多函数

00:13:53.596 --> 00:13:54.966 A:middle
我必须点按很多次

00:13:54.966 --> 00:13:56.186 A:middle
才能找到一些有趣的东西

00:13:56.726 --> 00:13:58.736 A:middle
为此 Instruments 提供了另一个实用的技巧

00:13:58.736 --> 00:14:00.606 A:middle
如果你按住 Option 键

00:14:00.846 --> 00:14:01.646 A:middle
在点按关闭三角形

00:14:01.646 --> 00:14:03.096 A:middle
Instruments 就会自动

00:14:03.096 --> 00:14:04.696 A:middle
展开轨道列表

00:14:04.696 --> 00:14:06.166 A:middle
知道出现控制流分支

00:14:06.236 --> 00:14:08.506 A:middle
因为这可能会是我们想要找的事件

00:14:08.506 --> 00:14:10.956 A:middle
可以看到 这里有非常多

00:14:10.956 --> 00:14:12.696 A:middle
要一直深挖并且精确地

00:14:12.696 --> 00:14:14.706 A:middle
找到你的问题 会十分困难

00:14:15.016 --> 00:14:16.866 A:middle
所以 Instruments 也在

00:14:17.216 --> 00:14:18.676 A:middle
Time Profiler 的扩展详细视图

00:14:18.676 --> 00:14:20.466 A:middle
提供了最厚栈追踪

00:14:21.746 --> 00:14:23.266 A:middle
最厚栈追踪是一个

00:14:23.676 --> 00:14:24.496 A:middle
我们在分析过程中

00:14:24.496 --> 00:14:26.836 A:middle
最常调用的函数集合

00:14:27.706 --> 00:14:28.756 A:middle
所以 在最上方

00:14:28.756 --> 00:14:30.396 A:middle
我们可以看到 Solar System Mac

00:14:30.396 --> 00:14:31.536 A:middle
并且部分帧被

00:14:31.536 --> 00:14:32.506 A:middle
高亮为白色了

00:14:33.466 --> 00:14:35.606 A:middle
这些就是你自己的进程的帧

00:14:37.636 --> 00:14:38.616 A:middle
系统框架或库中的帧

00:14:38.616 --> 00:14:40.656 A:middle
会显示为灰色

00:14:41.686 --> 00:14:43.186 A:middle
所以 主线程执行主函数

00:14:43.186 --> 00:14:44.506 A:middle
然后这里有一块是

00:14:44.506 --> 00:14:46.706 A:middle
系统框架提供的函数

00:14:47.276 --> 00:14:50.356 A:middle
在更下面的这里 我们发现了

00:14:50.356 --> 00:14:52.636 A:middle
另一个高亮函数区域

00:14:53.656 --> 00:14:55.416 A:middle
这里的第一项被标记为“thunk”

00:14:56.526 --> 00:14:57.206 A:middle
那么“thunk”是什么呢

00:14:58.136 --> 00:15:00.396 A:middle
这是一段由编译器生成的帮助代码

00:15:00.706 --> 00:15:01.876 A:middle
它与你 App 中的任何代码

00:15:01.876 --> 00:15:03.206 A:middle
都没有关联

00:15:03.656 --> 00:15:05.536 A:middle
所以在这个例子中 我们可以无视它

00:15:06.036 --> 00:15:07.666 A:middle
我们想要看的是这一个

00:15:07.666 --> 00:15:09.466 A:middle
在网络请求调度程序中的

00:15:09.466 --> 00:15:10.906 A:middle
某个方法中的第一个闭包

00:15:12.346 --> 00:15:13.996 A:middle
如果我点按这一行

00:15:13.996 --> 00:15:15.046 A:middle
它就在详细视图中杯选中了

00:15:15.966 --> 00:15:17.576 A:middle
双击它就会直接在这里

00:15:17.576 --> 00:15:18.486 A:middle
显示它的源代码

00:15:19.836 --> 00:15:20.586 A:middle
所以 可以看到我们有

00:15:20.586 --> 00:15:22.226 A:middle
一个方法叫做 scheduleParsingTask

00:15:22.766 --> 00:15:24.056 A:middle
它在主分发队列中做一些事情

00:15:24.056 --> 00:15:26.506 A:middle
包括数据解析 

00:15:26.506 --> 00:15:29.506 A:middle
它看起来很有问题

00:15:29.506 --> 00:15:30.576 A:middle
之前我们提到过

00:15:30.576 --> 00:15:31.516 A:middle
主线程只应该在

00:15:31.516 --> 00:15:33.936 A:middle
用户输入或更新用户界面的时候使用

00:15:34.366 --> 00:15:35.476 A:middle
所以 我想要修复一下这里

00:15:36.006 --> 00:15:37.586 A:middle
在详细视图的右上角

00:15:37.586 --> 00:15:39.636 A:middle
有一个“在 Xcode 中打开”的按钮

00:15:40.286 --> 00:15:40.926 A:middle
我来点一下

00:15:45.576 --> 00:15:47.096 A:middle
然后 Xcode 就出现了

00:15:48.126 --> 00:15:49.976 A:middle
我想要把这个移动到

00:15:49.976 --> 00:15:51.226 A:middle
它自己的分发队列中

00:15:51.226 --> 00:15:52.276 A:middle
这样它就不会阻碍主线程了

00:15:53.276 --> 00:15:54.056 A:middle
我们首先要做的事情是

00:15:54.056 --> 00:15:55.226 A:middle
创建这个分发队列

00:15:55.766 --> 00:15:58.406 A:middle
我们称之为 parsingQueue

00:15:58.616 --> 00:16:00.766 A:middle
然后 我们把工作移到 parsingQueue 中

00:16:00.766 --> 00:16:04.106 A:middle
通过一个异步闭包来实现

00:16:05.226 --> 00:16:06.646 A:middle
把 workItem() 移上来

00:16:07.486 --> 00:16:08.536 A:middle
我们还想在解析完成之后

00:16:08.536 --> 00:16:11.406 A:middle
通知用户界面

00:16:11.886 --> 00:16:13.256 A:middle
所以 我们把这个调用后面接上

00:16:13.256 --> 00:16:16.286 A:middle
DispatchQueue.main

00:16:16.836 --> 00:16:18.486 A:middle
存储 然后试试再一次

00:16:18.486 --> 00:16:19.766 A:middle
复现我们的 Bug

00:16:20.606 --> 00:16:22.256 A:middle
这一次 我在“Product”菜单中

00:16:22.256 --> 00:16:24.576 A:middle
选择“Profile” 就像 Tibet 之前演示的那样

00:16:25.136 --> 00:16:28.726 A:middle
Xcode 开始构建 App

00:16:28.726 --> 00:16:29.776 A:middle
并唤起 Instruments

00:16:30.706 --> 00:16:31.466 A:middle
模板选择器再一次弹出来了

00:16:31.466 --> 00:16:33.036 A:middle
因为这一次我们不是在测试

00:16:33.066 --> 00:16:34.196 A:middle
这个 App 的下载好的副本

00:16:34.196 --> 00:16:35.636 A:middle
我们在测试

00:16:35.636 --> 00:16:36.796 A:middle
Xcode 已经放到硬盘的

00:16:36.846 --> 00:16:38.226 A:middle
数据路径里的那个

00:16:39.526 --> 00:16:41.176 A:middle
选择“Time Profiler” 

00:16:41.326 --> 00:16:42.076 A:middle
然后点按“Choose”

00:16:42.586 --> 00:16:45.956 A:middle
这一次 我们不用选取目标

00:16:45.956 --> 00:16:47.536 A:middle
因为 Xcode 已经通知了 Instruments

00:16:47.536 --> 00:16:48.696 A:middle
我们想要测试的 App

00:16:48.696 --> 00:16:50.116 A:middle
是哪一个

00:16:51.306 --> 00:16:52.976 A:middle
然后 点按左上角的记录按钮

00:16:52.976 --> 00:16:58.756 A:middle
会让它自动开始运行

00:16:58.786 --> 00:17:00.426 A:middle
切换到 App 我们来试试

00:17:00.426 --> 00:17:02.856 A:middle
那个有问题的用户输入序列

00:17:03.716 --> 00:17:07.036 A:middle
点按 拖动 Command-R

00:17:07.386 --> 00:17:10.226 A:middle
看 这一次没有加载动画了

00:17:10.945 --> 00:17:12.366 A:middle
我们再试一次来确认一下

00:17:13.356 --> 00:17:15.425 A:middle
点按 拖动 Command-R

00:17:16.106 --> 00:17:17.996 A:middle
没有加载动画

00:17:18.476 --> 00:17:20.266 A:middle
所以 我们已经处理了响应问题

00:17:21.205 --> 00:17:23.986 A:middle
停止记录 再次用缩放手势

00:17:23.986 --> 00:17:25.626 A:middle
来展开轨道视图

00:17:26.376 --> 00:17:27.746 A:middle
我想要确认这个工作

00:17:27.786 --> 00:17:28.766 A:middle
已经从主线程移除了

00:17:28.766 --> 00:17:30.456 A:middle
所以我会用轨道过滤器区域

00:17:30.456 --> 00:17:32.646 A:middle
在界面的左上角

00:17:33.306 --> 00:17:35.436 A:middle
然后我们搜索主线程

00:17:36.956 --> 00:17:37.896 A:middle
只出现了一个条目

00:17:37.896 --> 00:17:39.706 A:middle
是 Solar System Mac 的

00:17:39.706 --> 00:17:41.516 A:middle
如果我展开它

00:17:41.516 --> 00:17:42.366 A:middle
可以看到主线程是可见的

00:17:43.836 --> 00:17:45.716 A:middle
在这里 我们 CPU 用量到达峰值的地方

00:17:45.716 --> 00:17:47.486 A:middle
主线程做的事情相对较少

00:17:47.486 --> 00:17:48.826 A:middle
并且在第二个时间区间

00:17:49.316 --> 00:17:51.966 A:middle
也是相同的情况

00:17:52.806 --> 00:17:54.076 A:middle
这样看来 我们似乎已经解决了

00:17:54.076 --> 00:17:55.206 A:middle
响应问题 并且把这个工作

00:17:55.206 --> 00:17:56.496 A:middle
从主线程移除了

00:17:57.516 --> 00:18:02.026 A:middle
[掌声]

00:18:02.526 --> 00:18:04.956 A:middle
我想再谈谈几个分析注意事项

00:18:05.616 --> 00:18:07.086 A:middle
首先 Time Profiler 是一个

00:18:07.086 --> 00:18:08.376 A:middle
理解你的 App 是如何使用时间的

00:18:08.376 --> 00:18:09.406 A:middle
绝佳工具

00:18:10.456 --> 00:18:11.846 A:middle
可能会在有响应问题的时候用的上

00:18:11.846 --> 00:18:13.216 A:middle
比如 加载动画

00:18:13.486 --> 00:18:14.566 A:middle
也可能在你想要

00:18:14.566 --> 00:18:15.756 A:middle
加速 App 的启动

00:18:15.806 --> 00:18:16.836 A:middle
来让它更快地显示在

00:18:16.836 --> 00:18:18.156 A:middle
用户眼前的时候用得上

00:18:18.756 --> 00:18:20.266 A:middle
在这些情况中 请使用 Time Profiler

00:18:22.296 --> 00:18:23.386 A:middle
第二点 如果你遇到了响应问题

00:18:23.386 --> 00:18:25.086 A:middle
看看你的主线程

00:18:25.646 --> 00:18:26.636 A:middle
主线程真的只应该被用来

00:18:26.636 --> 00:18:27.936 A:middle
更新用户界面

00:18:27.936 --> 00:18:29.366 A:middle
或者处理用户输入事件

00:18:29.616 --> 00:18:31.656 A:middle
比如 Mac 上的鼠标点按

00:18:31.656 --> 00:18:32.996 A:middle
或是 iOS 设备上的屏幕轻点

00:18:34.516 --> 00:18:36.566 A:middle
第三点 是我之前没有提到过的

00:18:37.286 --> 00:18:38.766 A:middle
你应该在发布模式中进行分析

00:18:39.676 --> 00:18:40.846 A:middle
编译器支持一系列

00:18:40.846 --> 00:18:42.156 A:middle
不同的优化等级

00:18:42.286 --> 00:18:43.116 A:middle
当你在 Xcode 中进行

00:18:43.116 --> 00:18:45.436 A:middle
构建-运行循环的时候

00:18:45.436 --> 00:18:46.766 A:middle
我们会用一个低等级的优化

00:18:46.766 --> 00:18:47.866 A:middle
来让这个过程更快一些

00:18:48.446 --> 00:18:49.666 A:middle
但这个优化等级

00:18:49.666 --> 00:18:50.686 A:middle
并不是当你用 App Store

00:18:50.686 --> 00:18:52.526 A:middle
或 Xcode 的存档功能

00:18:52.526 --> 00:18:54.316 A:middle
把 App 递交给用户时所用的

00:18:54.766 --> 00:18:57.736 A:middle
如果你在使用 Xcode 的默认配置

00:18:57.736 --> 00:18:59.756 A:middle
在你的方法下的分析 

00:18:59.756 --> 00:19:02.646 A:middle
会被设置为发布配置

00:19:03.286 --> 00:19:04.316 A:middle
然而 如果你在用

00:19:04.316 --> 00:19:05.936 A:middle
自定义编译选项 请确保

00:19:05.936 --> 00:19:07.476 A:middle
你在分析的 App 正在使用

00:19:07.476 --> 00:19:08.916 A:middle
编译选项的发布工具集

00:19:10.596 --> 00:19:12.116 A:middle
最后 使用不同负荷

00:19:12.116 --> 00:19:13.426 A:middle
或在较早设备上进行分析

00:19:13.426 --> 00:19:14.416 A:middle
十分重要

00:19:14.876 --> 00:19:16.236 A:middle
在这个例子中

00:19:16.236 --> 00:19:18.566 A:middle
我们没有在我们的设备上发现这个 Bug

00:19:18.566 --> 00:19:19.766 A:middle
但是拥有不同性能特征设备的用户

00:19:19.766 --> 00:19:22.226 A:middle
确实遇到了这个 Bug

00:19:22.866 --> 00:19:24.216 A:middle
所以 如果你有较早的设备

00:19:24.216 --> 00:19:27.226 A:middle
请确保在它们上面也进行测试

00:19:27.916 --> 00:19:29.696 A:middle
Tibet 之前提到过

00:19:29.816 --> 00:19:31.456 A:middle
Instruments 支持所有平台

00:19:31.776 --> 00:19:33.396 A:middle
我们用 Mac 进行了展示

00:19:33.396 --> 00:19:35.496 A:middle
但是在 iOS watchOS 和 tvOS 上

00:19:35.626 --> 00:19:37.016 A:middle
也同样可以使用它

00:19:37.766 --> 00:19:39.496 A:middle
它也支持模拟器

00:19:39.686 --> 00:19:41.116 A:middle
但是说到模拟器

00:19:41.116 --> 00:19:42.256 A:middle
有一点请大家务必了解

00:19:43.266 --> 00:19:45.596 A:middle
它是在你的 Mac 上运行的

00:19:45.596 --> 00:19:47.906 A:middle
这意味着它有着你的 Mac 的资源

00:19:48.856 --> 00:19:51.636 A:middle
它有你 Mac 的 CPU 和内存的性能特征

00:19:51.926 --> 00:19:54.876 A:middle
它有着你 Mac 的文件系统行为和硬盘行为

00:19:55.216 --> 00:19:56.776 A:middle
它还有这你 Mac 的散热限制

00:19:57.046 --> 00:19:58.186 A:middle
这一点当然会和

00:19:58.186 --> 00:19:59.326 A:middle
轻巧的一体化设备

00:19:59.326 --> 00:20:00.996 A:middle
有重大差异

00:20:01.956 --> 00:20:03.066 A:middle
在这个例子中 Instruments 非常适合用来

00:20:03.066 --> 00:20:04.276 A:middle
观测趋势 比如

00:20:04.366 --> 00:20:06.256 A:middle
有没有什么东西变快了或者变慢了

00:20:06.876 --> 00:20:08.306 A:middle
但是它不会给你提供

00:20:08.306 --> 00:20:10.106 A:middle
精确到秒的模拟

00:20:10.106 --> 00:20:11.836 A:middle
来告诉你 App 会怎样运行

00:20:12.366 --> 00:20:13.626 A:middle
在把 App 递交到你顾客手上之前

00:20:13.626 --> 00:20:15.406 A:middle
请确保在实体硬件上进行测试

00:20:16.516 --> 00:20:17.866 A:middle
所以 我们刚刚解决了响应问题

00:20:17.866 --> 00:20:20.206 A:middle
但是这并不是全部的问题

00:20:20.526 --> 00:20:21.646 A:middle
我们的 CPU 用量还有一个很大的峰

00:20:21.686 --> 00:20:24.326 A:middle
看起来是我们应该能削减它

00:20:25.536 --> 00:20:27.186 A:middle
CPU 用量会榨干电池容量

00:20:27.526 --> 00:20:29.106 A:middle
它会升高设备的温度

00:20:29.106 --> 00:20:30.766 A:middle
在很多 Mac 上 会导致

00:20:30.766 --> 00:20:32.406 A:middle
风扇加速运转 让你的用户感到烦躁

00:20:33.206 --> 00:20:34.856 A:middle
所以 现在我想邀请

00:20:34.956 --> 00:20:36.836 A:middle
Anand 用 Signpost 功能

00:20:36.836 --> 00:20:38.206 A:middle
来帮助我们深入了解

00:20:38.206 --> 00:20:39.326 A:middle
我们的 App 到底在做什么

00:20:41.516 --> 00:20:44.376 A:middle
[掌声]

00:20:44.876 --> 00:20:45.376 A:middle
&gt;&gt; 谢谢 Ben

00:20:46.446 --> 00:20:47.186 A:middle
大家早上好

00:20:48.236 --> 00:20:49.786 A:middle
今天我想向你们展示如何在

00:20:49.786 --> 00:20:52.496 A:middle
代码中使用 Signpost 

00:20:52.496 --> 00:20:53.786 A:middle
来增强 Instruments

00:20:53.786 --> 00:20:55.706 A:middle
从中收集的追踪 并更好地理解

00:20:55.816 --> 00:20:58.626 A:middle
你的代码时如何使用系统资源的

00:21:03.206 --> 00:21:05.776 A:middle
我们用 Time Profiler 所做的事情

00:21:05.806 --> 00:21:07.916 A:middle
进行对比 来更好地理解 Signpost

00:21:08.836 --> 00:21:10.176 A:middle
Time Profiler 构建了一个

00:21:10.506 --> 00:21:12.686 A:middle
你的代码的统计分析

00:21:12.686 --> 00:21:15.396 A:middle
它是通过在一个固定时间间隔内

00:21:15.396 --> 00:21:16.786 A:middle
观测你的 App 中所有的线程

00:21:16.786 --> 00:21:18.756 A:middle
并且构建出时间和调用栈的相关分析

00:21:18.756 --> 00:21:21.526 A:middle
来实现这一点的

00:21:22.336 --> 00:21:23.796 A:middle
但是 相关分析并不能

00:21:23.796 --> 00:21:25.636 A:middle
取代精准评估

00:21:25.746 --> 00:21:26.876 A:middle
告诉你你的代码

00:21:26.986 --> 00:21:28.946 A:middle
是怎样执行的 以及为什么会执行

00:21:30.116 --> 00:21:31.326 A:middle
可能会有一块代码

00:21:31.636 --> 00:21:33.746 A:middle
在几个时间点爆发性地执行

00:21:34.456 --> 00:21:37.066 A:middle
或者 它在几个更长的时间段内

00:21:37.066 --> 00:21:37.916 A:middle
持续执行

00:21:38.736 --> 00:21:39.986 A:middle
在某些特定 Argument 上

00:21:39.986 --> 00:21:41.636 A:middle
调用的某个函数

00:21:42.056 --> 00:21:44.096 A:middle
也可能会让 CPU 持续繁忙

00:21:45.136 --> 00:21:46.386 A:middle
为了区分这几种

00:21:46.386 --> 00:21:48.326 A:middle
执行模式 你需要记录

00:21:48.326 --> 00:21:50.686 A:middle
代码的精确评估

00:21:50.896 --> 00:21:53.316 A:middle
这就引出了一个问题

00:21:53.856 --> 00:21:55.276 A:middle
你能操作的

00:21:55.276 --> 00:21:57.156 A:middle
记录性能测量的最好方式是什么

00:21:58.236 --> 00:21:59.946 A:middle
我很开心地告诉你

00:21:59.946 --> 00:22:00.906 A:middle
你不需要担心

00:22:00.906 --> 00:22:02.496 A:middle
要去打印代码

00:22:02.496 --> 00:22:04.506 A:middle
并教会 Instruments 如何读取你的打印命令

00:22:05.096 --> 00:22:06.736 A:middle
你只需要使用 Signpost

00:22:08.236 --> 00:22:10.036 A:middle
Signpost 有大量在这个用例下

00:22:10.036 --> 00:22:12.166 A:middle
十分理想的功能

00:22:12.646 --> 00:22:17.346 A:middle
它是专门为记录有结构的性能数据打造的

00:22:17.766 --> 00:22:19.286 A:middle
所以 在这种情况下

00:22:19.286 --> 00:22:21.136 A:middle
它甚至比打印还要简单高效

00:22:21.716 --> 00:22:25.706 A:middle
它提供了对评估时间的内建支持

00:22:26.036 --> 00:22:26.966 A:middle
所以 你不需要担心

00:22:26.966 --> 00:22:28.516 A:middle
你在读取的时钟源

00:22:28.516 --> 00:22:30.016 A:middle
或是你正在使用什么时钟基准

00:22:30.016 --> 00:22:30.596 A:middle
来进行评估

00:22:31.546 --> 00:22:33.666 A:middle
关于 Signpost 我最喜欢的部分是

00:22:33.776 --> 00:22:36.656 A:middle
Instruments 知道如何追踪它

00:22:37.056 --> 00:22:38.186 A:middle
让我来给你一个简单的预览

00:22:38.186 --> 00:22:39.706 A:middle
看看在代码中加入 Signpost 间隔后

00:22:39.706 --> 00:22:41.666 A:middle
我收集到的 Instruments 的追踪

00:22:41.666 --> 00:22:44.756 A:middle
是什么样子的

00:22:44.946 --> 00:22:46.236 A:middle
这里高亮的是

00:22:46.236 --> 00:22:47.836 A:middle
“Points of Interest”轨道

00:22:47.836 --> 00:22:49.516 A:middle
它展示了与某个

00:22:49.516 --> 00:22:52.076 A:middle
我在代码中加入的 Signpost

00:22:52.076 --> 00:22:53.226 A:middle
相关的重点区域

00:22:54.226 --> 00:22:55.736 A:middle
让我来给你们

00:22:55.736 --> 00:22:57.996 A:middle
具体演示一下 接着刚刚

00:22:57.996 --> 00:23:03.686 A:middle
Ben 对《Solar System》App 的研究

00:23:04.056 --> 00:23:06.996 A:middle
这是刚才的 Instruments 追踪

00:23:06.996 --> 00:23:11.036 A:middle
我们看到了这一块

00:23:14.176 --> 00:23:17.086 A:middle
熟悉的高 CPU 占用区域

00:23:17.656 --> 00:23:20.536 A:middle
我们想弄清楚为什么

00:23:20.596 --> 00:23:22.566 A:middle
我们用了这么多 CPU 时间

00:23:22.566 --> 00:23:23.976 A:middle
所以我们来向代码中使用最多

00:23:24.056 --> 00:23:26.066 A:middle
CPU 时间的部分添加一些 Signpost

00:23:26.856 --> 00:23:28.726 A:middle
让我来看看厚栈的追踪

00:23:32.576 --> 00:23:34.676 A:middle
之前 Ben 从上往下

00:23:34.676 --> 00:23:36.676 A:middle
看了这个厚栈

00:23:36.676 --> 00:23:39.746 A:middle
所以我们发现了

00:23:39.746 --> 00:23:41.896 A:middle
代码是如何在主线程开始执行的

00:23:42.826 --> 00:23:44.276 A:middle
这一次 我想要从

00:23:44.276 --> 00:23:45.716 A:middle
叶级函数开始

00:23:45.716 --> 00:23:51.046 A:middle
来了解这个负载中最耗资源

00:23:51.046 --> 00:23:53.416 A:middle
或是最常被调用的函数是什么

00:23:54.366 --> 00:23:55.366 A:middle
这里有一个叫做 setupScene() 的东西

00:23:55.366 --> 00:23:58.416 A:middle
看起来在处理很多数组

00:23:58.736 --> 00:24:00.236 A:middle
它是这个重新加载的操作中的一部分

00:24:00.566 --> 00:24:02.636 A:middle
我想要看看

00:24:02.636 --> 00:24:05.246 A:middle
它究竟使用了多少时间

00:24:05.926 --> 00:24:11.906 A:middle
所以我们去 Xcode 里看看这段代码吧

00:24:12.086 --> 00:24:13.306 A:middle
这里是 setupScene() 函数

00:24:13.956 --> 00:24:15.466 A:middle
你可以在这里看到

00:24:15.466 --> 00:24:17.326 A:middle
我之前尝试记录

00:24:17.326 --> 00:24:18.456 A:middle
性能评估的痕迹

00:24:18.786 --> 00:24:19.806 A:middle
这里有一个打印命令

00:24:20.056 --> 00:24:21.606 A:middle
在函数的开始发出

00:24:21.606 --> 00:24:22.816 A:middle
mach_absolute_time()

00:24:23.376 --> 00:24:24.806 A:middle
我们滚动到函数底部

00:24:24.806 --> 00:24:25.796 A:middle
可以看到另一个打印命令

00:24:26.546 --> 00:24:28.086 A:middle
在结束的时候

00:24:28.086 --> 00:24:30.836 A:middle
再一次显示 mach_absolute_time()

00:24:31.526 --> 00:24:32.726 A:middle
正如我之前提到过的

00:24:33.416 --> 00:24:35.366 A:middle
Instruments 并不知道如何

00:24:35.366 --> 00:24:36.156 A:middle
读取打印命令

00:24:36.346 --> 00:24:40.136 A:middle
所以我们首先需要创建一个

00:24:40.136 --> 00:24:41.226 A:middle
记录句柄 让我们能够

00:24:41.226 --> 00:24:42.386 A:middle
与 Instruments 进行通讯

00:24:43.106 --> 00:24:45.046 A:middle
我们来创建吧

00:24:46.316 --> 00:24:48.026 A:middle
我用一个叫做

00:24:48.026 --> 00:24:49.326 A:middle
pointsOfInterest 的类别

00:24:49.326 --> 00:24:49.726 A:middle
创建这个记录句柄

00:24:50.186 --> 00:24:51.826 A:middle
这个名字与

00:24:51.826 --> 00:24:53.546 A:middle
Points of Interest 这个 Instrument 相关

00:24:55.166 --> 00:24:58.306 A:middle
我们来用一个对

00:24:58.306 --> 00:25:00.046 A:middle
os_signpost API 的调用

00:25:00.046 --> 00:25:03.106 A:middle
来取代我们的第一个打印命令

00:25:03.106 --> 00:25:03.536 A:middle
它会开启一个间隔

00:25:04.556 --> 00:25:05.616 A:middle
每次你开启一个间隔的时候

00:25:05.616 --> 00:25:07.686 A:middle
都要记得结束它

00:25:08.876 --> 00:25:10.196 A:middle
与其一直向下滚动到

00:25:10.196 --> 00:25:11.706 A:middle
函数的结尾

00:25:11.986 --> 00:25:13.376 A:middle
我会选择利用 Swift 的 defer 代码块

00:25:13.486 --> 00:25:16.166 A:middle
来结束这个间隔

00:25:16.756 --> 00:25:17.876 A:middle
defer 代码块中的内容

00:25:17.876 --> 00:25:23.026 A:middle
会在当前函数结尾执行

00:25:23.226 --> 00:25:24.716 A:middle
在进行了这些修改之后

00:25:24.716 --> 00:25:26.196 A:middle
我们来构建我们的 App

00:25:26.196 --> 00:25:27.606 A:middle
并在菜单中使用“Profile”命令

00:25:27.606 --> 00:25:28.466 A:middle
在 Instruments 中对它进行分析

00:25:33.056 --> 00:25:34.666 A:middle
我们再一次选择

00:25:34.666 --> 00:25:37.736 A:middle
Time Profiler 模板

00:25:37.896 --> 00:25:39.096 A:middle
目标选择区域

00:25:39.096 --> 00:25:40.726 A:middle
已经被 Xcode 用当前的

00:25:40.726 --> 00:25:41.486 A:middle
《Solar System》App 的

00:25:41.486 --> 00:25:42.826 A:middle
构建版本填充了

00:25:43.106 --> 00:25:43.966 A:middle
我们开始记录吧

00:25:48.856 --> 00:25:51.256 A:middle
我会和 App 进行交互

00:25:51.476 --> 00:25:52.716 A:middle
并且再一次采用那个

00:25:52.716 --> 00:25:54.236 A:middle
会引发问题的操作序列

00:25:54.236 --> 00:25:54.826 A:middle
重新加载

00:25:57.766 --> 00:25:59.646 A:middle
然后我们收集到了一些数据

00:25:59.686 --> 00:26:00.746 A:middle
停止记录

00:26:01.266 --> 00:26:04.676 A:middle
我们来放大看看那个

00:26:04.676 --> 00:26:06.856 A:middle
高 CPU 占用区域

00:26:10.186 --> 00:26:11.756 A:middle
在 Time Profiler 下面

00:26:12.136 --> 00:26:13.656 A:middle
Points of Interest 轨道

00:26:13.956 --> 00:26:16.156 A:middle
现在已经被

00:26:16.156 --> 00:26:17.546 A:middle
我们在代码中加入的

00:26:17.546 --> 00:26:18.346 A:middle
重点区域填充了

00:26:18.856 --> 00:26:20.096 A:middle
有一行叫做 setupScene

00:26:20.096 --> 00:26:21.836 A:middle
这与我们的 Signpost 间隔相关

00:26:21.836 --> 00:26:23.596 A:middle
并且这里还有几个

00:26:23.596 --> 00:26:25.976 A:middle
相邻的重点区域

00:26:25.976 --> 00:26:28.286 A:middle
在轨道中被记录了下来

00:26:29.486 --> 00:26:32.016 A:middle
我预期不会有这么多 而是几个

00:26:32.886 --> 00:26:34.926 A:middle
我可以把鼠标悬浮在它们上面

00:26:34.926 --> 00:26:37.086 A:middle
并且数一数有多少个重点区域

00:26:37.456 --> 00:26:39.486 A:middle
或者我可以利用详细视图

00:26:40.876 --> 00:26:41.966 A:middle
让我来点按并拖动来

00:26:41.966 --> 00:26:43.836 A:middle
选择这一个区域

00:26:44.656 --> 00:26:45.906 A:middle
然后在 Points of Interest 轨道中

00:26:45.906 --> 00:26:47.766 A:middle
点按来重新以

00:26:47.766 --> 00:26:50.646 A:middle
Points of Interest 轨道的总结

00:26:50.646 --> 00:26:54.186 A:middle
填充详细视图

00:26:54.376 --> 00:26:55.966 A:middle
仔细看看 我发现

00:26:55.966 --> 00:26:57.406 A:middle
setupScene 在这个区域

00:26:57.406 --> 00:26:59.596 A:middle
一共发生了 8 次

00:27:05.806 --> 00:27:07.726 A:middle
详细视图中有更多可用的信息

00:27:08.006 --> 00:27:09.956 A:middle
我们来点按跳转栏

00:27:09.956 --> 00:27:12.226 A:middle
并选择一个重点区域的列表

00:27:12.226 --> 00:27:13.946 A:middle
来看看在这个追踪中

00:27:13.946 --> 00:27:15.706 A:middle
录制的每个重点区域的

00:27:15.706 --> 00:27:17.466 A:middle
完整时间序列

00:27:18.016 --> 00:27:21.446 A:middle
“Duration”列展示了

00:27:21.446 --> 00:27:24.216 A:middle
它们中每一个的持续时间

00:27:24.216 --> 00:27:27.776 A:middle
我可以看到每一个间隔

00:27:27.776 --> 00:27:28.986 A:middle
都花费了差不多的时间来完成

00:27:28.986 --> 00:27:34.756 A:middle
大概 210 到 220 毫秒

00:27:35.576 --> 00:27:37.046 A:middle
这有些让人头大

00:27:37.196 --> 00:27:39.306 A:middle
难道我们在不断重复一个

00:27:39.306 --> 00:27:43.336 A:middle
工作量差不多的事情

00:27:43.526 --> 00:27:45.306 A:middle
我们看看是谁在调用 setupScene

00:27:45.306 --> 00:27:46.596 A:middle
判断一下是不是出于某种原因

00:27:46.596 --> 00:27:48.296 A:middle
它被多余地调用了

00:27:48.436 --> 00:27:50.726 A:middle
做这件事情最好的方式就是

00:27:50.726 --> 00:27:51.926 A:middle
查看 Time Profiler

00:27:51.926 --> 00:27:53.716 A:middle
记录的调用图中的信息

00:27:54.266 --> 00:27:57.216 A:middle
我们再来看看窗口右下角的

00:27:57.216 --> 00:27:59.476 A:middle
厚栈的视图

00:27:59.476 --> 00:28:01.446 A:middle
这一次我们要关注

00:28:01.446 --> 00:28:03.156 A:middle
setupScene() 的调用者

00:28:03.156 --> 00:28:04.476 A:middle
是一个叫做 prepareScene() 的函数

00:28:05.486 --> 00:28:07.536 A:middle
双击它来显示源代码

00:28:08.946 --> 00:28:10.946 A:middle
看起来 prepareScene()

00:28:10.946 --> 00:28:12.776 A:middle
Scene called Setup Scene

00:28:12.776 --> 00:28:13.276 A:middle
只调用了 setupScene() 一次

00:28:13.476 --> 00:28:15.786 A:middle
所以这不是造成重复调用的根本原因

00:28:16.626 --> 00:28:17.996 A:middle
要复现完成的调用图

00:28:17.996 --> 00:28:20.746 A:middle
我们来点按跳转区域的“Root”

00:28:20.746 --> 00:28:22.956 A:middle
这会把我们带到调用图的根

00:28:24.326 --> 00:28:28.506 A:middle
我们继续在厚栈上向上看

00:28:29.096 --> 00:28:34.086 A:middle
选择下一个调用者

00:28:34.266 --> 00:28:35.766 A:middle
这里我们可以看到一个 for 循环

00:28:35.766 --> 00:28:37.136 A:middle
它很可能就是我们看到的

00:28:37.136 --> 00:28:38.336 A:middle
重复调用的罪魁祸首

00:28:39.176 --> 00:28:40.296 A:middle
我们在 Xcode 中打开这段代码

00:28:40.326 --> 00:28:43.176 A:middle
仔细看看

00:28:43.526 --> 00:28:47.006 A:middle
点按这个按钮来跳转到 Xcode 中的文件

00:28:51.716 --> 00:28:55.366 A:middle
现在我们能在 Xcode 中看到这个 for 循环了

00:28:56.486 --> 00:28:57.526 A:middle
我记得这个函数

00:28:58.116 --> 00:28:59.306 A:middle
updateWithPlanets() 的目的是

00:28:59.366 --> 00:29:03.166 A:middle
接受服务器发送给我们的数据

00:29:03.166 --> 00:29:04.516 A:middle
它是重新加载操作的一部分

00:29:05.156 --> 00:29:07.516 A:middle
然后 当有更新需求的时候

00:29:07.516 --> 00:29:12.246 A:middle
对于每个有新数据的行星

00:29:12.246 --> 00:29:14.026 A:middle
在 App 中更新它的内部模型

00:29:15.486 --> 00:29:17.816 A:middle
然而 我们可能会收到

00:29:17.816 --> 00:29:19.246 A:middle
一包对于多个行星的

00:29:19.246 --> 00:29:20.526 A:middle
更新信息数据

00:29:20.526 --> 00:29:22.596 A:middle
看起来我们在

00:29:22.596 --> 00:29:24.266 A:middle
遇到每个需要更新的行星时

00:29:24.266 --> 00:29:26.156 A:middle
都会调用 prepareScene()

00:29:26.156 --> 00:29:28.726 A:middle
来重绘整个视图

00:29:30.256 --> 00:29:32.586 A:middle
追踪向我们展示了

00:29:32.776 --> 00:29:35.316 A:middle
如果我们只更新

00:29:35.316 --> 00:29:39.326 A:middle
行星的内部模型

00:29:39.326 --> 00:29:40.576 A:middle
那么消耗的资源会大大降低

00:29:40.986 --> 00:29:42.606 A:middle
所以 我们在这里应该做的事情是

00:29:42.866 --> 00:29:44.316 A:middle
把我们所有的更新打包

00:29:44.316 --> 00:29:46.806 A:middle
放到内部模型中

00:29:47.136 --> 00:29:49.016 A:middle
并且只在所有更新完成后

00:29:49.206 --> 00:29:50.846 A:middle
重绘一次场景

00:29:51.976 --> 00:29:53.266 A:middle
这看起来是一个非常简单的修复

00:29:53.266 --> 00:29:56.076 A:middle
但是以我们的经验来看

00:29:56.076 --> 00:29:57.616 A:middle
在我们添加新功能

00:29:57.616 --> 00:29:59.166 A:middle
或者修复不相关的 Bug 的时候

00:29:59.376 --> 00:30:01.166 A:middle
大量这种类型的性能问题

00:30:01.166 --> 00:30:03.146 A:middle
都可能会溜进我们的代码中

00:30:03.606 --> 00:30:05.536 A:middle
要避免这种 Bug

00:30:05.536 --> 00:30:07.016 A:middle
呈现在我们的顾客面前

00:30:07.016 --> 00:30:09.156 A:middle
一个很好的办法是写一个

00:30:09.156 --> 00:30:10.856 A:middle
能够周期性地检查它们的功能的测试

00:30:11.846 --> 00:30:12.836 A:middle
为了节约时间

00:30:12.836 --> 00:30:15.406 A:middle
我已经写好了一个 XCTest

00:30:15.406 --> 00:30:17.206 A:middle
它会检查 App 的重新加载功能

00:30:18.666 --> 00:30:19.926 A:middle
如果我们点按测试左边的这个按钮

00:30:19.926 --> 00:30:23.296 A:middle
通常它会直接运行测试

00:30:23.416 --> 00:30:24.886 A:middle
但是我想通过辅助点按

00:30:24.886 --> 00:30:26.526 A:middle
来显示 Profile 动作

00:30:27.266 --> 00:30:29.106 A:middle
这会命令 Xcode 去在

00:30:29.106 --> 00:30:31.326 A:middle
Instruments 中构建并运行测试

00:30:36.256 --> 00:30:37.746 A:middle
我们来选择 Time Profiler 模板

00:30:37.746 --> 00:30:40.456 A:middle
并开始记录追踪

00:30:41.016 --> 00:30:45.706 A:middle
在这个测试中 我已经把重新加载操作

00:30:45.706 --> 00:30:48.946 A:middle
放到了一个对 Measure API 的调用各种

00:30:49.706 --> 00:30:51.566 A:middle
Measure API 会多次运行工作负载

00:30:51.566 --> 00:30:55.376 A:middle
来收集一些重复的评估

00:30:56.186 --> 00:30:57.356 A:middle
这非常有帮助

00:30:57.356 --> 00:30:58.866 A:middle
可以让你知道你的评估

00:30:58.866 --> 00:31:00.296 A:middle
是可重复且一致的

00:31:00.296 --> 00:31:02.996 A:middle
还是每次运行都会得到不同的结果

00:31:04.466 --> 00:31:05.496 A:middle
看起来所有的重复都停止了

00:31:05.496 --> 00:31:08.396 A:middle
所以我可以停止追踪了

00:31:08.936 --> 00:31:11.926 A:middle
我来放大看看

00:31:11.926 --> 00:31:13.616 A:middle
重点轨道的内容

00:31:14.256 --> 00:31:17.446 A:middle
我们可以看到这里有一个额外的行

00:31:21.046 --> 00:31:21.976 A:middle
最底下是我之前在代码中加入的

00:31:21.976 --> 00:31:24.056 A:middle
setupScene 间隔

00:31:24.106 --> 00:31:27.386 A:middle
在它上面是

00:31:27.386 --> 00:31:28.516 A:middle
另一个我们感兴趣的部分

00:31:28.516 --> 00:31:30.056 A:middle
由 Measure API 提供

00:31:30.676 --> 00:31:32.976 A:middle
这向我们展示了

00:31:32.976 --> 00:31:34.526 A:middle
与每次运行工作负载的迭代

00:31:34.906 --> 00:31:36.106 A:middle
相关联的间隔

00:31:38.146 --> 00:31:39.246 A:middle
一眼扫过去

00:31:39.246 --> 00:31:41.606 A:middle
我觉得工作负载

00:31:41.606 --> 00:31:42.976 A:middle
在每次运行时的行为

00:31:42.976 --> 00:31:44.226 A:middle
都差不多

00:31:44.626 --> 00:31:45.806 A:middle
所以 我只想知道

00:31:45.806 --> 00:31:49.136 A:middle
每次测试的迭代都发生了什么

00:31:50.146 --> 00:31:51.186 A:middle
除了点按并拖动

00:31:51.186 --> 00:31:52.616 A:middle
其实还有一个方便的快捷键

00:31:52.616 --> 00:31:53.746 A:middle
让你能够精确地选中

00:31:53.746 --> 00:31:55.606 A:middle
与一个轨道中的事件或间隔

00:31:55.606 --> 00:31:58.246 A:middle
相关的区域

00:31:58.716 --> 00:31:59.546 A:middle
只需要三次点按即可

00:32:02.456 --> 00:32:04.396 A:middle
用选中的特定信息填充

00:32:06.156 --> 00:32:09.336 A:middle
仔细看看 现在似乎

00:32:09.936 --> 00:32:13.566 A:middle
只有一次对 setupScene() 的调用了

00:32:13.566 --> 00:32:14.256 A:middle
这意味着什么呢？

00:32:14.726 --> 00:32:19.276 A:middle
我们使用从 Signpost 获取的信息

00:32:19.276 --> 00:32:21.876 A:middle
把我们所用的 CPU 时间减少了几个数量级

00:32:23.516 --> 00:32:27.500 A:middle
[掌声]

00:32:31.796 --> 00:32:32.926 A:middle
让我们来复习一下

00:32:32.926 --> 00:32:34.176 A:middle
我们刚刚遇到的概念

00:32:34.766 --> 00:32:38.496 A:middle
从 Time Profiler 或者其他地方

00:32:38.496 --> 00:32:41.556 A:middle
收集到的统计分析十分有用

00:32:41.556 --> 00:32:43.936 A:middle
它能展示那些代码被最频繁地执行

00:32:44.496 --> 00:32:46.286 A:middle
但是这并不能替代

00:32:46.286 --> 00:32:48.756 A:middle
类似我们用 Signpost API 记录的评估

00:32:48.756 --> 00:32:51.746 A:middle
因为它能告诉你 你的代码

00:32:51.746 --> 00:32:53.756 A:middle
是怎样被执行的 以及为什么会被执行

00:32:54.946 --> 00:32:56.546 A:middle
我们还看到了

00:32:56.546 --> 00:32:59.456 A:middle
运行测试是多么有帮助

00:32:59.456 --> 00:33:00.906 A:middle
它能稳定且反复地复现

00:33:00.906 --> 00:33:03.156 A:middle
我们的工作负载

00:33:03.446 --> 00:33:04.646 A:middle
并在开发循环的早期

00:33:04.646 --> 00:33:05.456 A:middle
就经常分析它

00:33:07.256 --> 00:33:09.076 A:middle
今天 我们深入探索了

00:33:09.076 --> 00:33:10.656 A:middle
会导致很高

00:33:10.656 --> 00:33:12.036 A:middle
或不合理的系统占用的

00:33:12.036 --> 00:33:15.276 A:middle
性能问题

00:33:16.016 --> 00:33:17.506 A:middle
Instruments 还有大量的模板

00:33:17.506 --> 00:33:19.276 A:middle
可以解决其他

00:33:19.276 --> 00:33:20.516 A:middle
关于资源占用的

00:33:20.516 --> 00:33:22.016 A:middle
性能问题

00:33:22.746 --> 00:33:25.456 A:middle
我们有为文件和磁盘占用而设计的模板

00:33:26.286 --> 00:33:29.106 A:middle
我们还有为网络占用设计的模板

00:33:29.306 --> 00:33:30.336 A:middle
还有一个模板

00:33:30.826 --> 00:33:32.036 A:middle
可以帮助你理解

00:33:32.036 --> 00:33:33.006 A:middle
你的 App 和操作系统或

00:33:33.006 --> 00:33:34.506 A:middle
其他系统中运行的进程

00:33:34.506 --> 00:33:37.136 A:middle
之间的关系

00:33:37.796 --> 00:33:38.876 A:middle
这还不是全部

00:33:39.806 --> 00:33:40.776 A:middle
Instruments 还有一些

00:33:40.776 --> 00:33:42.726 A:middle
十分高级的功能

00:33:42.726 --> 00:33:43.176 A:middle
自定义 Instruments

00:33:43.426 --> 00:33:45.076 A:middle
如果你是一个框架开发者

00:33:45.076 --> 00:33:46.386 A:middle
想要你使用你 API 的客户

00:33:46.956 --> 00:33:49.006 A:middle
能够解决关于性能问题

00:33:49.006 --> 00:33:50.116 A:middle
他们使用你的框架时的

00:33:50.116 --> 00:33:51.126 A:middle
性能问题

00:33:51.126 --> 00:33:53.946 A:middle
那么你可以向他们

00:33:53.946 --> 00:33:57.176 A:middle
提供一个自定义 Instruments 包

00:33:57.716 --> 00:34:00.566 A:middle
你也可以创建自定义 Instruments 模板

00:34:00.606 --> 00:34:03.806 A:middle
来在 Instruments App 中构造

00:34:03.806 --> 00:34:08.436 A:middle
一个独特的 Instruments 集合

00:34:08.436 --> 00:34:10.326 A:middle
来帮助解决某个特定的性能问题

00:34:12.456 --> 00:34:13.966 A:middle
在这个演示之后

00:34:14.326 --> 00:34:15.556 A:middle
我真的希望你们开始

00:34:15.556 --> 00:34:17.676 A:middle
在开发循环的早期

00:34:17.676 --> 00:34:19.176 A:middle
就经常分析你的代码

00:34:19.716 --> 00:34:22.476 A:middle
请在今天就去试试我们的 Instruments 11 吧

00:34:22.835 --> 00:34:24.235 A:middle
它附带了一些很棒的新功能

00:34:24.235 --> 00:34:26.496 A:middle
比如轨道固定

00:34:26.775 --> 00:34:28.255 A:middle
和结构视图

00:34:28.255 --> 00:34:29.835 A:middle
我相信它们用起来会十分有趣

00:34:30.416 --> 00:34:33.306 A:middle
在会议笔记中

00:34:33.306 --> 00:34:34.516 A:middle
我们有关于进阶功能和

00:34:34.516 --> 00:34:36.025 A:middle
针对特定事件的

00:34:36.025 --> 00:34:38.116 A:middle
Instruments 工作流的详细文档

00:34:38.116 --> 00:34:39.706 A:middle
还有一些前几年大会中的

00:34:39.706 --> 00:34:42.735 A:middle
很棒的讲解 非常感谢

00:34:43.516 --> 00:34:49.505 A:middle
[掌声]

