WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:01.516 --> 00:00:06.546 A:middle
[音乐]

00:00:07.046 --> 00:00:07.966 A:middle 
&gt;&gt; 下午好 女士们先生们

00:00:08.786 --> 00:00:10.206 A:middle
让我们欢迎主管软件开发的

00:00:10.206 --> 00:00:12.366 A:middle
副总裁 Sebastien Marineau-Mes

00:00:13.516 --> 00:00:23.756 A:middle
[掌声]

00:00:24.256 --> 00:00:25.626 A:middle
&gt;&gt; 大家下午好

00:00:25.626 --> 00:00:28.046 A:middle
欢迎来到 WWDC

00:00:28.046 --> 00:00:29.536 A:middle
大家喜欢上午的 Keynote 讲演吗

00:00:30.161 --> 00:00:32.161 A:middle
[掌声]

00:00:32.305 --> 00:00:34.556 A:middle
那就好 [掌声]

00:00:34.556 --> 00:00:36.206 A:middle
今年是我们对开发者

00:00:36.256 --> 00:00:38.156 A:middle
投入非常大的一年

00:00:38.156 --> 00:00:39.366 A:middle
我们非常期待向你们展示

00:00:39.366 --> 00:00:40.926 A:middle
我们的工作

00:00:40.926 --> 00:00:41.816 A:middle
并且希望了解你们的想法

00:00:42.636 --> 00:00:44.126 A:middle
上午的 Keynote 讲演只是

00:00:44.176 --> 00:00:45.986 A:middle
今年一个小小的前瞻

00:00:46.406 --> 00:00:47.836 A:middle
我们想要分享的还有很多

00:00:47.836 --> 00:00:49.026 A:middle
今天下午

00:00:49.026 --> 00:00:50.076 A:middle
我们将聚焦于和你们

00:00:50.116 --> 00:00:51.506 A:middle
也就是各位开发者们

00:00:51.586 --> 00:00:52.956 A:middle
关系最密切的领域

00:00:53.516 --> 00:00:54.586 A:middle
准备好了解更多了吗

00:00:55.016 --> 00:00:56.386 A:middle
[掌声]

00:00:56.386 --> 00:00:59.616 A:middle
太好了 我们今年已经在开发者的体验

00:00:59.616 --> 00:01:01.036 A:middle
方面向前迈进了一大步

00:01:01.036 --> 00:01:03.136 A:middle
这要归功于新的 SwiftUI

00:01:03.416 --> 00:01:05.096 A:middle
框架 以及在 Xcode 中

00:01:05.146 --> 00:01:07.176 A:middle
出色的交互工具

00:01:08.316 --> 00:01:09.696 A:middle
我们真切地见证了

00:01:09.696 --> 00:01:11.976 A:middle
我们的每一个平台在各自擅长的领域

00:01:11.976 --> 00:01:12.916 A:middle
取得了更深层次的进展

00:01:13.326 --> 00:01:14.366 A:middle
我们在 Mac 上有了

00:01:14.366 --> 00:01:16.326 A:middle
新的更强大的专业功能

00:01:16.326 --> 00:01:18.256 A:middle
全新的深色模式以及大量更新

00:01:18.836 --> 00:01:20.526 A:middle
不好意思 更加独立的 watchOS

00:01:21.546 --> 00:01:23.776 A:middle
在 iOS 上 有新的深色模式和

00:01:23.776 --> 00:01:24.636 A:middle
许多很棒的 App 更新

00:01:25.906 --> 00:01:27.806 A:middle
最后 还推出了 iPadOS

00:01:27.806 --> 00:01:29.476 A:middle
这个强大的操作系统

00:01:29.476 --> 00:01:30.626 A:middle
现在已经独立出来了

00:01:31.176 --> 00:01:33.576 A:middle
不好意思 这边这个提词器出了点问题

00:01:34.516 --> 00:01:36.856 A:middle
[笑声]

00:01:37.356 --> 00:01:38.986 A:middle
好了 那边有一个还能用

00:01:38.986 --> 00:01:39.866 A:middle
所以我还是到左边来吧

00:01:40.606 --> 00:01:42.096 A:middle
这些平台也展现出了

00:01:42.276 --> 00:01:44.246 A:middle
我们的设备的多样性

00:01:44.246 --> 00:01:45.416 A:middle
为其提供良好的支持也是很容易的一件事

00:01:45.416 --> 00:01:47.176 A:middle
这都要归功于

00:01:47.176 --> 00:01:48.666 A:middle
大量的工具和 API 的支撑

00:01:49.166 --> 00:01:52.076 A:middle 
如 AutoLayout Size Classes 和 SwiftUI

00:01:53.026 --> 00:01:54.416 A:middle
现在不会再有黑边问题了

00:01:54.416 --> 00:01:55.606 A:middle
只有你们开发出来的 App 能够适应

00:01:55.606 --> 00:01:57.266 A:middle
各种设备的尺寸时

00:01:57.386 --> 00:01:59.626 A:middle 
你们的用户才能得到最佳体验

00:02:01.676 --> 00:02:03.126 A:middle
App Store 将要求

00:02:03.126 --> 00:02:05.196 A:middle
UI 必须适应

00:02:05.196 --> 00:02:06.126 A:middle
不同屏幕大小

00:02:06.706 --> 00:02:10.316 A:middle 
现在 tvOS 提供了许多很酷的新功能

00:02:12.016 --> 00:02:14.016 A:middle
[笑声]

00:02:14.016 --> 00:02:15.566 A:middle
[掌声]

00:02:15.566 --> 00:02:20.776 A:middle
你们也看到了 [掌声]

00:02:21.276 --> 00:02:22.646 A:middle
今年 tvOS 为开发者们

00:02:22.646 --> 00:02:24.126 A:middle
提供了许多很酷的新功能

00:02:24.226 --> 00:02:25.946 A:middle
包括对第三方 App 的

00:02:26.016 --> 00:02:27.726 A:middle
多用户支持

00:02:27.856 --> 00:02:29.316 A:middle
新的 UI 元素及选项

00:02:29.716 --> 00:02:31.946 A:middle
SwiftUI 当然还有

00:02:31.946 --> 00:02:34.936 A:middle
对 Xbox 和 PlayStation 游戏手柄的支持

00:02:35.191 --> 00:02:37.191 A:middle
[掌声]

00:02:37.366 --> 00:02:39.146 A:middle
今天上午我们宣布了

00:02:39.146 --> 00:02:41.196 A:middle
一个无与伦比的新硬件平台

00:02:41.196 --> 00:02:42.336 A:middle
那就是新 Mac Pro

00:02:42.336 --> 00:02:45.546 A:middle
你们喜欢吗 [掌声]

00:02:46.046 --> 00:02:47.346 A:middle
它非常强大

00:02:47.346 --> 00:02:49.396 A:middle
可以解锁很多惊艳的新种类 App 

00:02:50.846 --> 00:02:52.316 A:middle
在我们的各个平台上面

00:02:52.626 --> 00:02:54.436 A:middle
我们也构建了很多技术

00:02:54.436 --> 00:02:56.006 A:middle
我们今天就来看一看

00:02:56.006 --> 00:02:58.066 A:middle
在其中一些领域中这些技术的应用

00:02:58.066 --> 00:03:00.646 A:middle
这些领域包括 辅助功能 隐私

00:03:00.646 --> 00:03:02.666 A:middle
机器学习 Siri

00:03:02.666 --> 00:03:04.756 A:middle
增强现实 以及 Metal

00:03:06.166 --> 00:03:07.576 A:middle
我们今天下午主要讲

00:03:07.576 --> 00:03:08.986 A:middle
三个大的主题

00:03:08.986 --> 00:03:09.926 A:middle
首先让我们来看

00:03:09.926 --> 00:03:11.046 A:middle
开发者的生产力

00:03:11.956 --> 00:03:13.836 A:middle
这个房间里的所有人都知道

00:03:13.836 --> 00:03:15.186 A:middle
强大的工具能够

00:03:15.186 --> 00:03:17.036 A:middle
大幅提升生产力

00:03:17.596 --> 00:03:19.466 A:middle
强大的工具能给你们

00:03:19.516 --> 00:03:21.136 A:middle
更多发挥创意的时间

00:03:21.136 --> 00:03:22.376 A:middle
让你们开发更好的 App

00:03:23.296 --> 00:03:24.316 A:middle
这种体验的基础

00:03:24.316 --> 00:03:26.606 A:middle
就是程序设计语言

00:03:27.256 --> 00:03:29.226 A:middle
在过去五年中 Swift

00:03:29.226 --> 00:03:31.326 A:middle
已经变得更加完善

00:03:31.326 --> 00:03:32.706 A:middle
并被植入了所有的 Apple 平台

00:03:33.256 --> 00:03:34.386 A:middle
Swift 本身就是

00:03:34.386 --> 00:03:36.156 A:middle
SwiftUI 的基础

00:03:37.226 --> 00:03:39.446 A:middle
Xcode 不仅是

00:03:39.446 --> 00:03:41.456 A:middle
一个代码的调试工具 不好意思

00:03:41.456 --> 00:03:42.646 A:middle
代码编辑和调试的工具

00:03:43.176 --> 00:03:44.456 A:middle
它包括了你开发 App 时

00:03:44.456 --> 00:03:46.736 A:middle
所需要的一切

00:03:47.036 --> 00:03:48.186 A:middle
它支持你对你的 App 进行

00:03:48.186 --> 00:03:49.486 A:middle
持续的集成及测试

00:03:49.736 --> 00:03:52.166 A:middle
还为你们带来了

00:03:52.166 --> 00:03:54.026 A:middle
探索新技术的工具

00:03:54.396 --> 00:03:56.826 A:middle
比如机器学习和增强现实

00:03:57.766 --> 00:03:59.536 A:middle
最后 以我们的平台

00:03:59.606 --> 00:04:01.416 A:middle
为坚实的基础

00:04:01.516 --> 00:04:02.826 A:middle
SwiftUI 框架会革新

00:04:02.826 --> 00:04:05.656 A:middle
你们构建用户交互界面的方式

00:04:05.836 --> 00:04:07.116 A:middle
这三大元素一起

00:04:07.116 --> 00:04:08.716 A:middle
会把生产力提升到

00:04:08.716 --> 00:04:10.486 A:middle
全新的境界

00:04:10.486 --> 00:04:12.546 A:middle
它们将会深刻地改变

00:04:12.546 --> 00:04:14.006 A:middle
各位开 App 的方式

00:04:14.926 --> 00:04:16.755 A:middle
你们准备好深入了解

00:04:16.755 --> 00:04:17.446 A:middle
SwiftUI 了吗

00:04:18.036 --> 00:04:20.036 A:middle
[掌声]

00:04:20.055 --> 00:04:22.186 A:middle
我们有请 Josh 上台 来进行进一步讲解

00:04:22.266 --> 00:04:25.806 A:middle
Josh [掌声]

00:04:26.306 --> 00:04:27.116 A:middle
&gt;&gt; 谢谢 Sebastien

00:04:27.916 --> 00:04:31.336 A:middle
好了 说到 SwiftUI 

00:04:31.336 --> 00:04:32.536 A:middle
正如大家今天上午所见

00:04:32.536 --> 00:04:33.926 A:middle
它是一个全新的用户交互框架

00:04:34.016 --> 00:04:36.876 A:middle
从 Swift 语言的底层进行革新 
并回归 Swift

00:04:37.756 --> 00:04:38.816 A:middle
我们设计它是为了让你们

00:04:38.976 --> 00:04:40.696 A:middle
写可以少写一点代码

00:04:40.696 --> 00:04:42.346 A:middle
并且让你们写的代码更有价值

00:04:42.886 --> 00:04:44.186 A:middle
同时还让你们能在

00:04:44.186 --> 00:04:46.576 A:middle
全部的 Apple 平台上使用这些代码

00:04:47.646 --> 00:04:49.086 A:middle
首先 你们写下的

00:04:49.086 --> 00:04:50.436 A:middle
每一行代码

00:04:50.436 --> 00:04:52.056 A:middle
都具备了更多的功能

00:04:52.106 --> 00:04:53.286 A:middle
这就意味着你们

00:04:53.286 --> 00:04:54.636 A:middle
需要写的代码大大减少了

00:04:55.516 --> 00:04:56.356 A:middle
我们就以这款

00:04:56.466 --> 00:04:57.806 A:middle
为 macOS 选择新的发布名称的 App 为例

00:04:57.806 --> 00:04:58.796 A:middle
我们上午已经见过它了

00:04:59.246 --> 00:05:00.556 A:middle
不过现在先省去动态转场效果

00:05:01.476 --> 00:05:02.376 A:middle
如果你以前曾使用

00:05:02.376 --> 00:05:04.276 A:middle
UIKit 写过 App 你就会知道

00:05:04.276 --> 00:05:05.896 A:middle
需要多少种代码段才能

00:05:05.896 --> 00:05:06.786 A:middle
构建出这个交互界面

00:05:07.606 --> 00:05:09.476 A:middle
其实这个界面上并没有多少视图

00:05:09.476 --> 00:05:10.686 A:middle
但是有许多独立的细节

00:05:10.686 --> 00:05:12.016 A:middle
必须保证它们不能出错

00:05:12.886 --> 00:05:15.536 A:middle
使用 SwiftUI 所需的代码就少多了

00:05:16.156 --> 00:05:18.256 A:middle
不到 20 行代码 集中在

00:05:18.256 --> 00:05:19.706 A:middle
三个关键问题上

00:05:20.666 --> 00:05:22.636 A:middle
首先 用几行代码来定义

00:05:22.696 --> 00:05:24.126 A:middle
视图的结构与布局

00:05:24.766 --> 00:05:27.456 A:middle
然后用一些图像与文字视图

00:05:27.866 --> 00:05:28.836 A:middle
来呈现你的内容

00:05:30.346 --> 00:05:31.726 A:middle
最后 用参数和修饰语句

00:05:31.726 --> 00:05:33.506 A:middle
来调调整体的外观

00:05:34.636 --> 00:05:35.706 A:middle
现在我们来更仔细地

00:05:35.706 --> 00:05:37.456 A:middle
看看其中的几行代码

00:05:38.456 --> 00:05:39.726 A:middle
滚动列表本身

00:05:39.786 --> 00:05:41.536 A:middle
几乎没用什么代码

00:05:41.846 --> 00:05:43.556 A:middle
你只需声明出来这个列表

00:05:43.666 --> 00:05:45.076 A:middle
然后描述表中的每一行

00:05:45.076 --> 00:05:46.476 A:middle
所用到的对象的模型就可以了

00:05:46.796 --> 00:05:48.146 A:middle
省掉了创建

00:05:48.146 --> 00:05:50.116 A:middle
设置 以及 回调 这样的繁琐步骤

00:05:50.116 --> 00:05:53.106 A:middle
界面顶部的图像也可以非常简单地就被呈现出来

00:05:53.456 --> 00:05:54.896 A:middle
你只需放进来一张图片

00:05:54.896 --> 00:05:56.416 A:middle
把它剪成圆形 再添加阴影

00:05:56.416 --> 00:05:59.846 A:middle
不但代码更少了 而且代码更好了

00:06:02.716 --> 00:06:04.846 A:middle
让众望所归的方法成为最佳方法

00:06:05.796 --> 00:06:07.096 A:middle
就好比 创建这个“标签”的

00:06:07.096 --> 00:06:09.036 A:middle
正确代码就是

00:06:09.086 --> 00:06:10.186 A:middle
你不假思索就可以想到的那行代码

00:06:10.786 --> 00:06:13.216 A:middle
它还支持动态字体 深色模式等等

00:06:13.856 --> 00:06:15.006 A:middle
实际上 就连这里用到的

00:06:15.006 --> 00:06:17.516 A:middle
字符串插值也是可以被完全定位的

00:06:18.706 --> 00:06:19.906 A:middle
这种简洁彻底消除了

00:06:19.906 --> 00:06:21.576 A:middle
许多可能会出现的错误

00:06:22.436 --> 00:06:23.646 A:middle
再看看我们的列表

00:06:23.646 --> 00:06:25.476 A:middle
它的每一行会在模型变化时

00:06:25.476 --> 00:06:27.256 A:middle
自动更新 以保证

00:06:27.256 --> 00:06:28.996 A:middle
你的 UI 总是最新的

00:06:28.996 --> 00:06:30.396 A:middle
永远不会以某种老旧的视觉效果呈现给用户

00:06:30.526 --> 00:06:33.496 A:middle
而且它也更易读了

00:06:33.596 --> 00:06:34.676 A:middle
这张圆角半径值为 3 的图片的代码

00:06:34.676 --> 00:06:37.226 A:middle
就证明了这一点

00:06:38.296 --> 00:06:39.946 A:middle
阅读 SwiftUI 代码

00:06:39.976 --> 00:06:41.776 A:middle
你会感觉有人在为你描述这个界面一样

00:06:42.556 --> 00:06:44.296 A:middle
SwiftUI 的代码随处可用

00:06:44.296 --> 00:06:46.626 A:middle
能帮你在所有 Apple 平台上

00:06:46.626 --> 00:06:48.886 A:middle
重复使用更多代码

00:06:48.886 --> 00:06:50.586 A:middle
一直以来

00:06:50.586 --> 00:06:52.116 A:middle
开发者们都可以分享模型以及

00:06:52.196 --> 00:06:53.556 A:middle
底层的绘图和合成代码

00:06:54.256 --> 00:06:55.596 A:middle
但更高层面的 UI 代码

00:06:55.596 --> 00:06:57.106 A:middle
大部分仍然是专属于特定平台的

00:06:57.926 --> 00:06:59.306 A:middle
我们利用 SwiftUI 打破了这一壁垒

00:06:59.336 --> 00:07:01.416 A:middle
让你们能够分享更多

00:07:02.046 --> 00:07:03.116 A:middle
当然你们仍然需要

00:07:03.116 --> 00:07:05.776 A:middle
为每一个独立的平台定制界面

00:07:05.776 --> 00:07:07.606 A:middle
以保证你们的 App

00:07:07.606 --> 00:07:10.436 A:middle
在各平台上都呈现出最佳的效果

00:07:10.556 --> 00:07:12.106 A:middle
但是利用 SwiftUI 的一组

00:07:12.106 --> 00:07:13.756 A:middle
基本的 API 模式 

00:07:13.756 --> 00:07:15.636 A:middle
你们只需学习一次这些工具的使用方法

00:07:15.636 --> 00:07:17.326 A:middle
之后就可以在所有地方应用它们

00:07:17.326 --> 00:07:18.896 A:middle
在部署到的每一个平台上

00:07:18.956 --> 00:07:19.926 A:middle
呈现出原生的界面效果

00:07:20.946 --> 00:07:22.206 A:middle
SwiftUI 的设计遵循

00:07:22.446 --> 00:07:24.566 A:middle
四个核心原则

00:07:25.346 --> 00:07:27.336 A:middle
首先是用声明性语法

00:07:27.336 --> 00:07:29.146 A:middle
让 UI 编程从

00:07:29.296 --> 00:07:31.096 A:middle
如何更新屏幕内容

00:07:31.096 --> 00:07:32.556 A:middle
变成了如何描述

00:07:32.556 --> 00:07:33.466 A:middle
你想显示的东西

00:07:34.566 --> 00:07:35.626 A:middle
比如 假设你想要

00:07:35.626 --> 00:07:36.586 A:middle
制作一个标志

00:07:36.626 --> 00:07:38.366 A:middle
它显示为灰色标题型字体

00:07:39.096 --> 00:07:40.856 A:middle
描述这样一个东西

00:07:40.856 --> 00:07:42.816 A:middle
需要许多步骤

00:07:42.816 --> 00:07:44.916 A:middle
这些步骤还需要以特定顺序来编写

00:07:45.646 --> 00:07:48.146 A:middle
但描述你想要的东西

00:07:48.236 --> 00:07:49.466 A:middle
是无需翻译的

00:07:50.046 --> 00:07:52.776 A:middle
比如说 我想要一个 Done 的文本

00:07:52.776 --> 00:07:54.506 A:middle
采用标题型字体 颜色用灰色

00:07:55.316 --> 00:07:57.106 A:middle
SwiftUI 能让你使用

00:07:57.106 --> 00:07:58.606 A:middle
新的声明性语法

00:07:58.606 --> 00:07:59.616 A:middle
进行完全一样的描述

00:07:59.616 --> 00:08:01.326 A:middle
你可以用最少的代码

00:08:01.326 --> 00:08:03.616 A:middle
就描述出你的想法

00:08:03.616 --> 00:08:05.396 A:middle
迭代也变得

00:08:05.396 --> 00:08:06.846 A:middle
比以前快多了

00:08:07.316 --> 00:08:08.776 A:middle
如果你稍后要把这个标志

00:08:08.826 --> 00:08:10.516 A:middle
变成一个按键

00:08:10.516 --> 00:08:11.536 A:middle
只要改动一行就够了

00:08:12.081 --> 00:08:14.081 A:middle
[掌声]

00:08:14.146 --> 00:08:15.026 A:middle
我知道 这很棒

00:08:16.516 --> 00:08:19.546 A:middle
[掌声]

00:08:20.046 --> 00:08:21.846 A:middle
好了 我们的第二条原则 就是我们应该

00:08:21.846 --> 00:08:23.246 A:middle
尽可能地提供

00:08:23.246 --> 00:08:24.316 A:middle
自动功能

00:08:24.816 --> 00:08:25.996 A:middle
这就消除了

00:08:26.126 --> 00:08:27.106 A:middle
大量你曾经需要

00:08:27.166 --> 00:08:28.456 A:middle
手写的代码

00:08:29.316 --> 00:08:30.456 A:middle
我们这个为 macOS 选择新的发布名称的

00:08:30.456 --> 00:08:32.066 A:middle
App 很简单

00:08:32.066 --> 00:08:34.015 A:middle
但它也包括了大量

00:08:34.015 --> 00:08:35.186 A:middle
自动功能

00:08:35.885 --> 00:08:37.645 A:middle
它会自动处理

00:08:37.706 --> 00:08:39.756 A:middle
空格与安全区嵌入

00:08:40.186 --> 00:08:41.826 A:middle
可定位功能以及

00:08:41.895 --> 00:08:43.676 A:middle
从右至左显示语言的布局调整

00:08:44.226 --> 00:08:47.206 A:middle
动态字体与深色模式等等

00:08:47.206 --> 00:08:48.986 A:middle
全部来自一句

00:08:48.986 --> 00:08:49.776 A:middle
最简单的描述

00:08:50.376 --> 00:08:51.796 A:middle
对于一小段代码来说

00:08:51.796 --> 00:08:53.106 A:middle
这配备了相当多的自动功能

00:08:53.216 --> 00:08:54.776 A:middle
但是 还有另外一件事

00:08:54.776 --> 00:08:56.476 A:middle
它非常的重要

00:08:56.716 --> 00:08:57.936 A:middle
需要我们进行

00:08:57.936 --> 00:08:59.106 A:middle
特别地关注

00:09:01.396 --> 00:09:03.146 A:middle
都是互动式的动画界面

00:09:03.506 --> 00:09:05.026 A:middle
在 SwiftUI 中 同样的

00:09:05.026 --> 00:09:06.936 A:middle
界面在被声明的时候

00:09:06.936 --> 00:09:08.776 A:middle
就被自动地全面地赋予了动画效果

00:09:09.876 --> 00:09:11.106 A:middle
只要一行代码

00:09:11.106 --> 00:09:13.786 A:middle
就可以为所有层级实现动画

00:09:14.406 --> 00:09:15.906 A:middle
无需注记

00:09:15.906 --> 00:09:18.006 A:middle
无需准备 也无需清理

00:09:18.636 --> 00:09:19.876 A:middle
如果你用过

00:09:19.876 --> 00:09:21.766 A:middle
Keynote Magic Move 动画  SwiftUI 动画

00:09:21.906 --> 00:09:24.126 A:middle
和它们一样简单

00:09:24.126 --> 00:09:25.036 A:middle
而且更加强大

00:09:26.556 --> 00:09:27.706 A:middle
至于添加与删除视图

00:09:27.706 --> 00:09:29.726 A:middle
只需要再一行代码

00:09:29.726 --> 00:09:31.166 A:middle
就能描述它们如何

00:09:31.166 --> 00:09:34.086 A:middle
转入和转出了

00:09:34.306 --> 00:09:36.866 A:middle
在动画进行的过程中你的 App 仍然保持

00:09:36.866 --> 00:09:38.386 A:middle
互动与响应

00:09:38.386 --> 00:09:40.366 A:middle
可以随时处理用户输入

00:09:40.816 --> 00:09:41.996 A:middle
如果用户打断了

00:09:41.996 --> 00:09:43.546 A:middle
这些动画 或者

00:09:43.546 --> 00:09:44.716 A:middle
你需要定位到新地点

00:09:44.716 --> 00:09:46.846 A:middle
SwiftUI 也可以自动地

00:09:46.846 --> 00:09:47.986 A:middle
处理这些问题

00:09:49.506 --> 00:09:51.956 A:middle
我们的第三个原则

00:09:51.956 --> 00:09:53.906 A:middle
就是让你可以更容易地学习这种合成型 API

00:09:53.906 --> 00:09:56.236 A:middle
并且可以让开发者能更快地迭代更新

00:09:57.276 --> 00:09:59.526 A:middle
我们已经看到了该如何声明一个独立视图

00:09:59.526 --> 00:10:02.146 A:middle
就像这个文字标签 但其实声明更复杂的视图

00:10:02.146 --> 00:10:04.336 A:middle
也是一样简单 你只需把多个小的代码段

00:10:04.426 --> 00:10:05.466 A:middle
合成在一起就行

00:10:06.386 --> 00:10:07.716 A:middle
我们有水平或是垂直的堆叠型容器

00:10:07.716 --> 00:10:09.516 A:middle
运用这样的容器

00:10:09.516 --> 00:10:11.006 A:middle
只需把几个简单的代码段结合在一起

00:10:11.006 --> 00:10:13.256 A:middle
就可以构建出强大的布局

00:10:14.286 --> 00:10:16.196 A:middle
SwiftUI 还支持视图的属性使用

00:10:16.196 --> 00:10:17.596 A:middle
和成型的语法结构

00:10:17.906 --> 00:10:19.596 A:middle
它使用的是标准的修饰符语法

00:10:20.186 --> 00:10:21.636 A:middle
一组基本的修饰语句

00:10:21.696 --> 00:10:23.886 A:middle
可以应用到任意视图

00:10:23.886 --> 00:10:25.416 A:middle
比如在这里的颜色语句 让文字变成了灰色

00:10:26.446 --> 00:10:27.786 A:middle
使用这种合成型的方式以后

00:10:27.786 --> 00:10:29.696 A:middle
让你只需学习一小组视图与修饰符的

00:10:29.696 --> 00:10:31.436 A:middle
关键词的用法

00:10:31.436 --> 00:10:32.536 A:middle
然后把它们合起来

00:10:32.536 --> 00:10:34.486 A:middle
就可以创建更加强大的界面

00:10:35.466 --> 00:10:37.456 A:middle
我们的最后一个原则

00:10:37.456 --> 00:10:39.306 A:middle
就是你们的界面应该

00:10:39.306 --> 00:10:40.406 A:middle
始终处于前后台一致的状态

00:10:41.266 --> 00:10:42.556 A:middle
你们的 UI 是

00:10:42.866 --> 00:10:44.136 A:middle
App 数据的反映 因此这两者

00:10:44.136 --> 00:10:45.856 A:middle
应该始终保持同步

00:10:46.666 --> 00:10:49.026 A:middle
传统的 API 在这一点上容易出错

00:10:49.026 --> 00:10:51.216 A:middle
但使用 SwiftUI 你们的界面

00:10:51.216 --> 00:10:53.996 A:middle
会在任意时刻随着数据变化而自动更新

00:10:55.196 --> 00:10:56.696 A:middle
你们的数据最可能

00:10:56.696 --> 00:10:58.106 A:middle
从两个地方来

00:10:58.496 --> 00:11:00.246 A:middle
第一种就是来自于模型对象

00:11:00.616 --> 00:11:01.856 A:middle
你可以直接使用已有的

00:11:01.856 --> 00:11:03.706 A:middle
模型对象 只要让它们

00:11:03.706 --> 00:11:04.746 A:middle
遵从新的

00:11:04.746 --> 00:11:06.266 A:middle
可绑定对象协议

00:11:06.776 --> 00:11:08.206 A:middle
唯一的要求就是

00:11:08.256 --> 00:11:10.116 A:middle
你必须指明模型数据何时发生变化

00:11:10.116 --> 00:11:12.016 A:middle
第二个地方就是

00:11:12.016 --> 00:11:13.786 A:middle
临时 UI 状态

00:11:13.786 --> 00:11:15.256 A:middle
比如视图目前是否正处于编辑模式

00:11:15.876 --> 00:11:16.816 A:middle
通过使用

00:11:16.916 --> 00:11:18.806 A:middle
应用于视图上任一属性的简单状态包装器

00:11:18.806 --> 00:11:19.956 A:middle
就可以声明它们

00:11:20.816 --> 00:11:22.406 A:middle
我们都习惯了每个视图上的

00:11:22.406 --> 00:11:24.586 A:middle
每个属性都是可变的

00:11:25.096 --> 00:11:26.156 A:middle
但你一旦开始使用 SwiftUI

00:11:26.156 --> 00:11:27.886 A:middle
就会很震惊地意识到

00:11:27.886 --> 00:11:29.616 A:middle
你的 App 其实只需要

00:11:29.616 --> 00:11:31.596 A:middle
非常少的可变属性

00:11:32.356 --> 00:11:34.586 A:middle
无论你的模型或状态

00:11:34.586 --> 00:11:36.616 A:middle
如何变化 UI 都会

00:11:36.616 --> 00:11:37.696 A:middle
自动更新

00:11:38.226 --> 00:11:39.456 A:middle
因为它都是 Swift 代码

00:11:39.696 --> 00:11:40.696 A:middle
你在获得此行为时

00:11:40.766 --> 00:11:41.856 A:middle
仍然可以直接在

00:11:41.856 --> 00:11:43.746 A:middle
界面声明中使用

00:11:43.746 --> 00:11:44.866 A:middle
模型对象

00:11:45.776 --> 00:11:46.886 A:middle
你甚至能改变并

00:11:46.946 --> 00:11:48.936 A:middle
规定代码行中具体值的格式

00:11:48.936 --> 00:11:50.136 A:middle
而无需额外的中间层

00:11:51.026 --> 00:11:53.016 A:middle
比如 这个字符串插值可以用于

00:11:53.016 --> 00:11:54.546 A:middle
规定日期的格式

00:11:54.706 --> 00:11:58.256 A:middle
成为完全本地化的格式文字

00:11:58.416 --> 00:11:59.466 A:middle
这一切意味着

00:11:59.536 --> 00:12:01.116 A:middle
SwiftUI 能让你写

00:12:01.116 --> 00:12:02.566 A:middle
更少的代码 并获得

00:12:02.566 --> 00:12:03.216 A:middle
更一致的 UI

00:12:04.616 --> 00:12:05.666 A:middle
这就是 SwiftUI 的

00:12:05.666 --> 00:12:06.666 A:middle
四大核心原则

00:12:07.296 --> 00:12:08.946 A:middle
强大的声明性语法

00:12:09.306 --> 00:12:10.506 A:middle
激活了大量

00:12:10.506 --> 00:12:12.336 A:middle
自动功能

00:12:12.336 --> 00:12:14.086 A:middle
合成型的 API 又同时确保了

00:12:14.086 --> 00:12:15.636 A:middle
你的界面始终处于

00:12:15.636 --> 00:12:16.536 A:middle
前后台一致的状态

00:12:17.806 --> 00:12:19.006 A:middle
这个出色的新框架

00:12:19.086 --> 00:12:20.906 A:middle
值得拥有一个优秀的开发工具

00:12:21.196 --> 00:12:22.306 A:middle
我们使用 Xcode

00:12:22.306 --> 00:12:23.726 A:middle
为 SwiftUI 从零开始设计了

00:12:23.726 --> 00:12:25.956 A:middle
全新的工作流

00:12:26.946 --> 00:12:27.966 A:middle
你将获得代码的强大功能

00:12:28.006 --> 00:12:29.946 A:middle
与灵活性

00:12:30.036 --> 00:12:31.676 A:middle
同时还有 UI 工具的易用性

00:12:31.676 --> 00:12:33.346 A:middle
与快速迭代

00:12:34.266 --> 00:12:35.346 A:middle
你将随时获得

00:12:35.346 --> 00:12:36.796 A:middle
两者的好处 而且永远不必

00:12:36.796 --> 00:12:38.086 A:middle
再二选一了

00:12:39.026 --> 00:12:40.346 A:middle
因为这些工具可以有效地运用在

00:12:40.346 --> 00:12:41.676 A:middle
你已有的源代码上面

00:12:41.676 --> 00:12:44.936 A:middle
你将拥有一个美好的开发体验

00:12:45.796 --> 00:12:47.196 A:middle
要真正地了解这个工作流

00:12:47.196 --> 00:12:48.456 A:middle
有多么美妙

00:12:48.456 --> 00:12:49.826 A:middle
你们必须亲眼看一看

00:12:49.826 --> 00:12:51.516 A:middle
我现在邀请 Kevin 上台

00:12:51.516 --> 00:12:52.796 A:middle
为大家做展示

00:12:53.516 --> 00:12:58.696 A:middle
[掌声]

00:12:59.196 --> 00:12:59.816 A:middle
&gt;&gt; 多谢 Josh

00:13:02.376 --> 00:13:03.446 A:middle
那么我们开始吧 现在我我想

00:13:03.446 --> 00:13:04.736 A:middle
搭建一个关于远足的 App

00:13:04.856 --> 00:13:06.586 A:middle
并且我想在我的表格视图内

00:13:06.586 --> 00:13:08.566 A:middle
添加另一个视图 来告诉我某条远足线路的难度

00:13:08.626 --> 00:13:11.206 A:middle
所以我们先从总的路线表开始构建

00:13:11.206 --> 00:13:12.196 A:middle
首先我们需要写文本

00:13:12.196 --> 00:13:14.206 A:middle
当我往过拖拽控件的时候

00:13:14.206 --> 00:13:15.986 A:middle
Xcode 会给我一个建议的布局位置

00:13:16.336 --> 00:13:17.446 A:middle
我只需告诉 Xcode

00:13:17.446 --> 00:13:19.056 A:middle
我希望把它放在哪儿

00:13:19.116 --> 00:13:20.476 A:middle
之后 Xcode 会自动地为我建立出这个布局

00:13:21.336 --> 00:13:22.226 A:middle
现在我们需要编辑

00:13:22.226 --> 00:13:23.226 A:middle
这个视图的属性

00:13:23.226 --> 00:13:24.556 A:middle
所以 我只需要在画布的这个位置

00:13:24.556 --> 00:13:26.156 A:middle
单击一下 之后就可以在这儿得到一个

00:13:26.226 --> 00:13:28.456 A:middle
为这个控件定制的 inspector 检查器

00:13:28.926 --> 00:13:30.616 A:middle
让我们把文本缩小一点

00:13:30.616 --> 00:13:32.256 A:middle
现在 看这个位置

00:13:32.256 --> 00:13:33.296 A:middle
看好在我做这个操作的时候代码部分的变化

00:13:33.476 --> 00:13:35.556 A:middle
你可以看到 代码自动地就给我写好了

00:13:37.136 --> 00:13:39.086 A:middle
我们也可以在这边进行同样的操作

00:13:39.086 --> 00:13:40.706 A:middle
在源编辑器里通过编辑代码

00:13:40.706 --> 00:13:42.656 A:middle
来进行更改

00:13:42.656 --> 00:13:44.406 A:middle
你可以看到 Xcode 会

00:13:44.406 --> 00:13:45.906 A:middle
在构建的同时运行我的代码

00:13:45.906 --> 00:13:47.236 A:middle
并更新了右侧的画布

00:13:48.726 --> 00:13:50.046 A:middle
现在不论我在左右哪一侧进行操作

00:13:50.326 --> 00:13:52.616 A:middle
我都可以使用我所有的设计工具

00:13:53.116 --> 00:13:54.046 A:middle
现在我点击一下这个 VStack

00:13:54.046 --> 00:13:56.586 A:middle
之后打开它的 inspector

00:13:56.826 --> 00:13:58.326 A:middle
我可以在这儿接着

00:13:58.326 --> 00:13:59.576 A:middle
调整我想调整的属性

00:13:59.826 --> 00:14:02.046 A:middle
属性更新起来十分快捷

00:14:02.726 --> 00:14:05.116 A:middle
你可能发现这个视图

00:14:05.116 --> 00:14:06.656 A:middle
有几个输入

00:14:06.706 --> 00:14:08.756 A:middle
比如这个标题还有路线的难度

00:14:08.996 --> 00:14:11.396 A:middle
那么 Xcode 怎么样才能知道

00:14:11.716 --> 00:14:13.066 A:middle
在预览中要显示哪些数据呢

00:14:13.066 --> 00:14:15.286 A:middle
这一直是 UI 开发的过程中的一个挑战

00:14:15.366 --> 00:14:17.826 A:middle
在设计的过程中我们究竟要在前台显示什么数据

00:14:18.166 --> 00:14:19.906 A:middle
为解决这个问题

00:14:20.046 --> 00:14:21.296 A:middle
我们开发了 Xcode 预览功能

00:14:21.296 --> 00:14:22.346 A:middle
怎么来预览呢

00:14:22.346 --> 00:14:24.676 A:middle
我来展示给你们我下滑到这个位置

00:14:25.866 --> 00:14:27.256 A:middle
来看这一小段代码

00:14:27.336 --> 00:14:28.846 A:middle
一个预览其实只是

00:14:28.846 --> 00:14:30.506 A:middle
我的 App 中的一段代码

00:14:30.506 --> 00:14:32.306 A:middle
我在设计的过程中配置上这段代码

00:14:32.846 --> 00:14:34.216 A:middle
因为这段代码就在我的 App 里面

00:14:34.216 --> 00:14:36.926 A:middle
所以在整个项目内我都可以用这段代码来预览

00:14:37.056 --> 00:14:38.296 A:middle
并且因为这段代码就在我的项目里

00:14:38.296 --> 00:14:40.266 A:middle
我可以检查并且可以把这段用作预览的代码

00:14:40.266 --> 00:14:41.146 A:middle
分享给我的团队成员们

00:14:41.646 --> 00:14:42.696 A:middle
并且 如果想用不同的数据来调试

00:14:42.696 --> 00:14:43.526 A:middle
也非常容易的

00:14:43.526 --> 00:14:45.546 A:middle
实际上这里的这个 Half Dome 路线难度很高

00:14:45.546 --> 00:14:47.456 A:middle
我们看下把它的难度调成 hard 是个什么效果

00:14:47.456 --> 00:14:49.156 A:middle
而且它是 16 英里

00:14:49.156 --> 00:14:50.466 A:middle
不是 6 英里 这里也改一下

00:14:50.566 --> 00:14:52.516 A:middle
它实际上是在编译我的代码

00:14:53.806 --> 00:14:54.956 A:middle
因为这是 SwiftUI 的代码

00:14:54.956 --> 00:14:57.276 A:middle
所以我可以使用所有的

00:14:57.276 --> 00:14:58.736 A:middle
在其余 UI 开发过程当中的

00:14:58.736 --> 00:15:00.436 A:middle
修饰语句

00:15:01.056 --> 00:15:02.276 A:middle
比如 我们可以看下在

00:15:02.426 --> 00:15:03.436 A:middle
深色模式下效果

00:15:04.406 --> 00:15:05.886 A:middle
而且 我们还有一些

00:15:05.886 --> 00:15:06.796 A:middle
只有预览模块可以使用的修饰语句

00:15:06.796 --> 00:15:08.636 A:middle
默认的预览是

00:15:08.726 --> 00:15:10.596 A:middle
基于设备的显示效果的

00:15:10.596 --> 00:15:11.546 A:middle
当我们在设计表格视图的时候

00:15:11.546 --> 00:15:13.846 A:middle
我们可以只关注表格里的内容

00:15:13.846 --> 00:15:15.746 A:middle
我就这样调一下 可以让尺寸适应这种需求

00:15:17.326 --> 00:15:19.496 A:middle
好了 预览就是这么出色 可以做到很多事情

00:15:19.846 --> 00:15:21.846 A:middle
多到你无法想象

00:15:22.546 --> 00:15:24.156 A:middle
现在 我们用完全不同的数据

00:15:24.696 --> 00:15:26.216 A:middle
来做第二个预览

00:15:26.216 --> 00:15:28.346 A:middle
但我们不能止步于此

00:15:28.936 --> 00:15:31.146 A:middle
我们就这么单击

00:15:31.146 --> 00:15:31.886 A:middle
之后重复操作几次

00:15:32.526 --> 00:15:34.786 A:middle
我们调出来一些常见的

00:15:34.836 --> 00:15:36.756 A:middle
动态类型尺寸

00:15:36.756 --> 00:15:38.606 A:middle
然后配置给单元格

00:15:38.606 --> 00:15:39.536 A:middle
来适用这些动态类型尺寸

00:15:39.536 --> 00:15:41.106 A:middle
就这样 我们就可以同时看到

00:15:41.106 --> 00:15:42.726 A:middle
我的单元格的亮模式

00:15:42.726 --> 00:15:44.186 A:middle
深色模式 以及多种不同动态类型的尺寸下的

00:15:44.186 --> 00:15:55.566 A:middle
显示效果 [掌声]

00:15:56.066 --> 00:15:57.256 A:middle
现在 当我点击这个单元格时

00:15:57.256 --> 00:15:58.666 A:middle
希望进入到的是远足路线细节部分的视图

00:15:59.186 --> 00:16:00.106 A:middle
现在我们转换到细节部分

00:16:00.106 --> 00:16:02.146 A:middle
看一看

00:16:02.796 --> 00:16:05.966 A:middle
通过多年的远足经历 我意识到

00:16:05.966 --> 00:16:08.896 A:middle
永远不要通过一条路线的名字来判断路线的难度

00:16:08.896 --> 00:16:10.276 A:middle
所以对于我来说

00:16:10.276 --> 00:16:12.726 A:middle
能够在详细视图这里面

00:16:12.726 --> 00:16:15.036 A:middle
把图像放大以便查看细节是十分重要的

00:16:15.036 --> 00:16:16.356 A:middle
我已经在这儿事先写好了一些

00:16:16.356 --> 00:16:18.056 A:middle
SwiftUI 的代码

00:16:18.056 --> 00:16:19.566 A:middle
当我们点击上方的横幅图片的时候

00:16:19.856 --> 00:16:21.986 A:middle
我们希望图片可以被扩展放大

00:16:22.546 --> 00:16:24.206 A:middle
我可以在 UI 中测试一下

00:16:24.206 --> 00:16:26.676 A:middle
只需点击开这个播放的按钮

00:16:27.446 --> 00:16:28.666 A:middle
它可以把所有的预览都给呈现出来

00:16:28.746 --> 00:16:30.946 A:middle
而且它是是完全可交互的

00:16:31.856 --> 00:16:33.406 A:middle
我可以点击

00:16:33.986 --> 00:16:35.436 A:middle
并且测试这些不同的放大效果

00:16:36.056 --> 00:16:38.956 A:middle
现在我可以用动画来完善它

00:16:38.956 --> 00:16:39.866 A:middle
这个操作非常简单

00:16:40.416 --> 00:16:41.726 A:middle
我就把我的这段代码

00:16:41.726 --> 00:16:43.706 A:middle
封装进一个 whip animation 的代码段里

00:16:43.706 --> 00:16:46.896 A:middle
现在我就得到了一个

00:16:46.896 --> 00:16:47.936 A:middle
漂亮的默认动画

00:16:50.516 --> 00:16:56.546 A:middle
[掌声]

00:16:57.046 --> 00:16:58.346 A:middle
如果你先要定制这个动画

00:16:58.346 --> 00:16:59.346 A:middle
同样非常容易

00:16:59.566 --> 00:17:01.126 A:middle
现在我们让动画速度变慢

00:17:01.126 --> 00:17:03.806 A:middle
再加一些因热瞩目的效果

00:17:03.806 --> 00:17:05.306 A:middle
这样一来 我们就有了一个炫酷的效果来放大这张图

00:17:05.955 --> 00:17:07.296 A:middle
SwiftUI 的神奇之处在于

00:17:07.406 --> 00:17:09.036 A:middle
每一个动画都是

00:17:09.066 --> 00:17:10.546 A:middle
可取消以及可逆的

00:17:10.675 --> 00:17:13.356 A:middle
并且 App 将始终响应着这些动画效果

00:17:14.766 --> 00:17:16.205 A:middle
好了 现在我们有了一个表格视图内的单元格

00:17:16.236 --> 00:17:17.996 A:middle
并且也给这个单元格建立好了它的详细视图

00:17:18.175 --> 00:17:19.816 A:middle
现在我们把它们放到一起

00:17:19.816 --> 00:17:21.656 A:middle
所以现在我切换到

00:17:21.656 --> 00:17:23.876 A:middle
我最后一次创建出来的一个实例

00:17:23.876 --> 00:17:25.746 A:middle
它有包含了很多不同的线路 并且构成了一个列表

00:17:26.736 --> 00:17:27.996 A:middle
我想做的是

00:17:27.996 --> 00:17:29.066 A:middle
看看我设计完的视图

00:17:29.126 --> 00:17:30.476 A:middle
在真实的设备上是一个什么样的效果

00:17:31.166 --> 00:17:32.346 A:middle
所以只需要点一个按钮

00:17:32.346 --> 00:17:33.466 A:middle
我们点下它之后

00:17:33.466 --> 00:17:35.246 A:middle
Xcode 会自动把我的项目建立到模拟设备上

00:17:35.246 --> 00:17:36.476 A:middle
我把它安上去

00:17:36.476 --> 00:17:38.906 A:middle
之后就会在这个设备上启动我的预览

00:17:38.906 --> 00:17:39.996 A:middle
而且你可以看到

00:17:39.996 --> 00:17:41.316 A:middle
在这边是完全可交互的

00:17:41.796 --> 00:17:44.296 A:middle
那么首先 我们应用一下我们之前写好的单元格样式

00:17:44.876 --> 00:17:46.376 A:middle
我把这个文本

00:17:46.376 --> 00:17:48.596 A:middle
改成路线单元格的样式

00:17:49.366 --> 00:17:50.446 A:middle
现在你可以看到 我们的路线

00:17:50.446 --> 00:17:51.596 A:middle
已经变成之前写好的单元格的样子了

00:17:51.596 --> 00:17:53.496 A:middle
现在我点一下这里

00:17:53.496 --> 00:17:54.646 A:middle
希望能够打开到

00:17:54.646 --> 00:17:55.096 A:middle
我们之前写好的细节视图里

00:17:55.396 --> 00:17:56.796 A:middle
有了 SwiftUI 这一切都非常容易

00:17:56.796 --> 00:17:58.836 A:middle
它会把这件事封装进

00:17:58.836 --> 00:18:00.816 A:middle
一个 navigation button 里

00:18:00.816 --> 00:18:02.396 A:middle
以此来进入到详细视图里面

00:18:02.396 --> 00:18:04.186 A:middle
现在你可以看到 代码部分的 chevron 已经被显示出来

00:18:04.186 --> 00:18:05.486 A:middle
现在我们来具体的看下这个 Snow Creek 线路

00:18:05.486 --> 00:18:07.766 A:middle
我们来看先这个图片部分

00:18:07.766 --> 00:18:10.346 A:middle
这么一看就会发现这条路线布满积雪还很难

00:18:10.346 --> 00:18:11.896 A:middle
看起来不是一条轻松的远足路线

00:18:12.476 --> 00:18:13.546 A:middle
下面我要做的就是用

00:18:13.546 --> 00:18:15.516 A:middle
一行 SwiftUI 代码

00:18:15.516 --> 00:18:16.816 A:middle
来实现“滑动以删除”这个功能

00:18:16.816 --> 00:18:19.266 A:middle
现在 我们这么一滑

00:18:19.266 --> 00:18:20.636 A:middle
就删掉这条线路了

00:18:20.636 --> 00:18:23.476 A:middle
最后呢 我们来看一下

00:18:23.476 --> 00:18:24.756 A:middle
在深色模式内的呈现效果

00:18:24.946 --> 00:18:27.026 A:middle
无需任何多于操作

00:18:27.026 --> 00:18:28.406 A:middle
就会直接把我的预览放进深色模式里

00:18:28.406 --> 00:18:29.916 A:middle
你可以看到 它看起来很漂亮

00:18:30.516 --> 00:18:38.696 A:middle
[掌声]

00:18:39.196 --> 00:18:41.226 A:middle
我们可以点进 Valley floor 这条线路里

00:18:41.226 --> 00:18:44.056 A:middle
进行放大 看起来这个周末

00:18:44.106 --> 00:18:44.876 A:middle
去这儿是个不错的选择

00:18:45.036 --> 00:18:46.176 A:middle
所以就刚这么一会儿 我们就搭建了一个 App

00:18:46.176 --> 00:18:47.836 A:middle
它具备导航功能 动态类型的尺寸

00:18:47.916 --> 00:18:49.386 A:middle
亮模式 深色模式

00:18:49.386 --> 00:18:51.126 A:middle
包含了多个不同的数据

00:18:51.206 --> 00:18:53.246 A:middle
而且可以看到它在真实设备上的效果

00:18:53.246 --> 00:18:54.006 A:middle
并且不需要构建什么或者反复运行来查看效果

00:18:54.346 --> 00:18:56.746 A:middle
这真的非常有趣 好了 Josh 该你继续了

00:18:57.516 --> 00:19:04.706 A:middle
[掌声]

00:19:05.206 --> 00:19:07.266 A:middle
&gt;&gt; 谢谢 Kevin 好了 我们可以发现

00:19:07.266 --> 00:19:08.626 A:middle
对于原生代码而言

00:19:08.706 --> 00:19:09.476 A:middle
这是一种令人难以置信的全新的工作流

00:19:10.016 --> 00:19:12.596 A:middle
你在这个工具当中所做的一切都是可调式 可扩展

00:19:12.796 --> 00:19:14.556 A:middle
可搜索 以及可理解的

00:19:15.036 --> 00:19:17.726 A:middle
并且由于开发者可以直接编辑代码

00:19:17.726 --> 00:19:19.776 A:middle
会使你的工作流具备不可思议的灵活性

00:19:20.116 --> 00:19:21.786 A:middle
并且 SwiftUI 已经深度集成到

00:19:21.786 --> 00:19:23.076 A:middle
我们所有的操作系统当中

00:19:23.136 --> 00:19:25.046 A:middle
所以使用它 可以为你的目标平台

00:19:25.046 --> 00:19:27.226 A:middle
生成一个完全匹配该平台的 App

00:19:27.756 --> 00:19:28.756 A:middle
你可以获得与其他原生 App

00:19:28.996 --> 00:19:30.596 A:middle
相同的效果 相同的性能

00:19:30.596 --> 00:19:32.596 A:middle
以及相同的控件

00:19:33.056 --> 00:19:35.296 A:middle
你可以按照你自己的节奏来熟悉 SwiftUI

00:19:35.846 --> 00:19:36.776 A:middle
你可以用它做任何事情

00:19:36.776 --> 00:19:38.576 A:middle
从编写 App 中的单个视图

00:19:38.576 --> 00:19:40.546 A:middle
到构建整个 App

00:19:41.066 --> 00:19:42.416 A:middle
它可以与现有的

00:19:42.416 --> 00:19:44.146 A:middle
UIKit AppKit 以及

00:19:44.146 --> 00:19:45.906 A:middle
WatchKit 代码无缝衔接

00:19:45.906 --> 00:19:47.116 A:middle
所以 你无需重写任何东西

00:19:47.116 --> 00:19:48.856 A:middle
为了能让开发者们更快的跟上我们的革新

00:19:48.856 --> 00:19:50.346 A:middle
我们的文档团队

00:19:50.346 --> 00:19:51.926 A:middle
开发了一种全新的

00:19:51.926 --> 00:19:53.296 A:middle
可交互文档

00:19:53.816 --> 00:19:54.616 A:middle
它可以很快地教你

00:19:54.686 --> 00:19:56.596 A:middle
一步一步地从建立项目

00:19:56.596 --> 00:19:57.846 A:middle
一直到构建一个

00:19:57.846 --> 00:19:59.516 A:middle
完全可交互的界面

00:20:01.516 --> 00:20:07.946 A:middle
[掌声]

00:20:08.446 --> 00:20:09.856 A:middle
以上就是 SwiftUI 和 Xcode 

00:20:09.856 --> 00:20:11.086 A:middle
里的一些新工具

00:20:11.526 --> 00:20:13.166 A:middle
当然 对于 Swift 和 Xcode 来说

00:20:13.166 --> 00:20:15.116 A:middle
今年是非常重要的一年

00:20:15.116 --> 00:20:16.166 A:middle
所以还有很多内容可以分享给各位

00:20:16.436 --> 00:20:17.416 A:middle
为了告诉你们更多内容

00:20:17.416 --> 00:20:19.296 A:middle
下面我将邀请 Matthew 上台 谢谢

00:20:20.516 --> 00:20:24.866 A:middle
[掌声]

00:20:25.366 --> 00:20:28.106 A:middle
&gt;&gt; 谢谢 Josh 我们今年发布的工具

00:20:28.106 --> 00:20:29.526 A:middle
结合了 Swift 和 Xcode

00:20:29.636 --> 00:20:32.966 A:middle
二者的创新 并且创造出了一些令人惊叹的结果

00:20:33.876 --> 00:20:34.796 A:middle
我们先来说说 Swift

00:20:36.106 --> 00:20:38.016 A:middle
今年是 Swift 发布的第五年

00:20:38.016 --> 00:20:39.686 A:middle
它已经非常成熟了

00:20:39.686 --> 00:20:40.326 A:middle
并且在持续向前飞跃

00:20:40.696 --> 00:20:42.096 A:middle
作为我们最新的旗舰级技术

00:20:42.176 --> 00:20:43.636 A:middle
Swift 可以支撑从机器学习到

00:20:43.636 --> 00:20:45.116 A:middle
增强现实等各个领域

00:20:45.496 --> 00:20:46.906 A:middle
现在 Swift 已经是

00:20:46.906 --> 00:20:49.126 A:middle
我们操作系统的一部分了

00:20:50.446 --> 00:20:51.576 A:middle
为了实现这些

00:20:51.576 --> 00:20:53.226 A:middle
在今年春天的早些时候

00:20:53.536 --> 00:20:55.356 A:middle
我们引入了 ABI Stability

00:20:55.356 --> 00:20:56.956 A:middle
ABI Stability 通过共用 Swift 运行时间

00:20:57.106 --> 00:21:04.546 A:middle
来缩小你的 App 的大小 [掌声]

00:21:05.046 --> 00:21:05.836 A:middle
今天 我们再继续讨论一下

00:21:05.836 --> 00:21:07.936 A:middle
模块的稳定性

00:21:08.006 --> 00:21:09.146 A:middle
模块的稳定性是确保兼容性的前提

00:21:09.196 --> 00:21:14.046 A:middle
是的 [掌声]

00:21:14.546 --> 00:21:15.626 A:middle
想要保证兼容性

00:21:15.626 --> 00:21:17.266 A:middle
就需要确保二进制文件

00:21:17.266 --> 00:21:18.846 A:middle
与当前的以及未来的

00:21:18.846 --> 00:21:20.626 A:middle
Swift 编译器可以兼容

00:21:21.656 --> 00:21:22.726 A:middle
此外 Swift 还提供了

00:21:22.726 --> 00:21:24.066 A:middle
许多其它语言的特性

00:21:24.066 --> 00:21:26.116 A:middle
工具版本 性能

00:21:26.116 --> 00:21:27.706 A:middle
以及代码规模方面的改进

00:21:27.776 --> 00:21:29.236 A:middle
这些改进都能进一步扩展

00:21:29.236 --> 00:21:30.566 A:middle
Swift 为你的项目

00:21:30.566 --> 00:21:31.936 A:middle
所带来的潜力

00:21:33.436 --> 00:21:35.276 A:middle
所以 现在 Swift 已经

00:21:35.276 --> 00:21:37.106 A:middle
成为了你开发 App 的首选语言

00:21:37.106 --> 00:21:38.836 A:middle
而且 现在比以往任何时候

00:21:38.836 --> 00:21:40.416 A:middle
都更适合在所有的 Apple 平台上共享公共代码

00:21:41.616 --> 00:21:42.906 A:middle
实际上 共享正是我们开发

00:21:42.906 --> 00:21:45.016 A:middle
Swift 包的原因

00:21:45.016 --> 00:21:46.426 A:middle
它是开发和共享你自己的代码

00:21:46.426 --> 00:21:49.096 A:middle
以及重用他人代码的最佳方式

00:21:49.776 --> 00:21:51.776 A:middle
今天 我们要宣布两件大事

00:21:53.636 --> 00:21:54.896 A:middle
GitHub 将会在

00:21:54.896 --> 00:21:56.556 A:middle
GitHub 包库注册表中

00:21:56.556 --> 00:21:57.876 A:middle
添加对 Swift 包的支持

00:21:58.516 --> 00:22:05.546 A:middle
[掌声]

00:22:06.046 --> 00:22:07.396 A:middle
这种支持真的是相当的完美

00:22:07.396 --> 00:22:08.946 A:middle
因为 Xcode 现在可以无缝地

00:22:09.066 --> 00:22:10.216 A:middle
支持 Swift 包 用它开发出的 App

00:22:10.216 --> 00:22:11.876 A:middle
应用在 iOS iPadOS 以及我们所有平台上面

00:22:12.516 --> 00:22:19.736 A:middle
[掌声]

00:22:20.236 --> 00:22:21.446 A:middle
Swift 包是你的 Workspace 中的

00:22:21.446 --> 00:22:23.346 A:middle
顶层部分 而且它

00:22:23.346 --> 00:22:25.576 A:middle
总是可见的 可理解的

00:22:25.576 --> 00:22:26.556 A:middle
并且是深度集成的

00:22:27.386 --> 00:22:28.796 A:middle
来自社区的包

00:22:28.796 --> 00:22:30.376 A:middle
以及你自己创建的包

00:22:30.376 --> 00:22:32.176 A:middle
可以接入所有的 Xcode 的

00:22:32.176 --> 00:22:33.716 A:middle
工作流当中 并且可以用于

00:22:33.766 --> 00:22:35.836 A:middle
控制源代码 调试 测试

00:22:36.806 --> 00:22:38.176 A:middle
所以内置在 Xcode 当中的

00:22:38.176 --> 00:22:41.436 A:middle
Swift 包 可以以开发者所期待的方式来共享代码

00:22:43.076 --> 00:22:44.386 A:middle
今年仅仅是是 Xcode

00:22:44.486 --> 00:22:45.846 A:middle
的一个新的开端

00:22:45.846 --> 00:22:48.326 A:middle
它的目标就是最大化你的生产力

00:22:48.956 --> 00:22:50.796 A:middle
今天 我们将与各位开发者分享一些改进

00:22:50.826 --> 00:22:53.396 A:middle
因为我们将 Xcode 升级到了第 11 代

00:22:54.506 --> 00:22:56.896 A:middle
让我们从最大的

00:22:56.896 --> 00:22:58.556 A:middle
变化之一开始吧

00:22:58.556 --> 00:22:59.356 A:middle
它就是 Xcode 的 Workspace

00:23:02.826 --> 00:23:04.106 A:middle
你现在可以以任何你喜爱的方式

00:23:04.106 --> 00:23:05.996 A:middle
来创建和管理你的编辑器的布局

00:23:06.896 --> 00:23:08.296 A:middle
无论你喜欢什么样的

00:23:08.296 --> 00:23:09.716 A:middle
风格和布局

00:23:09.716 --> 00:23:11.676 A:middle
你可以随意地添加或

00:23:11.816 --> 00:23:13.476 A:middle
删除编辑器内的模块

00:23:14.516 --> 00:23:19.826 A:middle
[掌声]

00:23:20.326 --> 00:23:22.886 A:middle
而且更棒的是 你的 Workspace

00:23:22.886 --> 00:23:24.246 A:middle
现在也可以聚焦了

00:23:24.246 --> 00:23:28.116 A:middle
你可以挑任意一个编辑器

00:23:28.166 --> 00:23:33.136 A:middle
把它最大化当你用完以后

00:23:33.136 --> 00:23:34.936 A:middle
直接把它放回去 它就会回到它一开始在的地方

00:23:35.516 --> 00:23:41.916 A:middle
[掌声] 所以现在 不论你是用的是

00:23:41.976 --> 00:23:43.766 A:middle
最小的笔记本电脑

00:23:43.766 --> 00:23:45.436 A:middle
还是用着最大的显示器

00:23:45.436 --> 00:23:47.176 A:middle
你的 Workspace 都可以良好的配合你

00:23:49.396 --> 00:23:50.886 A:middle
现在我们编辑器中的 Related Content 部分

00:23:50.886 --> 00:23:53.146 A:middle
的智能选择 像是 counterparts 功能

00:23:53.146 --> 00:23:54.676 A:middle
就是根据编辑器内容呈现对应效果的功能

00:23:54.676 --> 00:23:55.866 A:middle
现在也得到了巨大的进步

00:23:57.246 --> 00:23:58.536 A:middle
现在有了新的选项

00:23:58.646 --> 00:24:01.476 A:middle
可以选择查看代码对应的预览 画布 实时视图等

00:24:02.356 --> 00:24:03.736 A:middle
你可以给 Workspace 中的

00:24:03.736 --> 00:24:05.586 A:middle
任意编辑器使用 Related Content 功能

00:24:06.546 --> 00:24:07.996 A:middle
我猜你们会相当喜欢这个功能的

00:24:08.126 --> 00:24:09.596 A:middle
当没有内容时

00:24:09.596 --> 00:24:11.466 A:middle
这些呈现相关内容的效果的窗口就会自动消失

00:24:11.466 --> 00:24:13.276 A:middle
你们再也不需要管理它们的可见性

00:24:14.516 --> 00:24:18.686 A:middle
[掌声]

00:24:19.186 --> 00:24:20.446 A:middle
当你弄好 Workspace 之后

00:24:20.506 --> 00:24:22.146 A:middle
剩下的关注点就都在编辑上了

00:24:22.146 --> 00:24:23.306 A:middle
接下来我想向你们快速演示一下

00:24:23.306 --> 00:24:24.596 A:middle
今年我们为各位开发者

00:24:24.596 --> 00:24:25.626 A:middle
提供的一些

00:24:25.626 --> 00:24:26.846 A:middle
源代码编辑方面的特色功能

00:24:39.046 --> 00:24:39.956 A:middle
为了让开发者可以

00:24:39.956 --> 00:24:41.596 A:middle
按照自己喜欢的方式配置每个编辑器

00:24:41.596 --> 00:24:43.106 A:middle
在右上角有一个新的选项菜单

00:24:44.186 --> 00:24:45.426 A:middle
你可以看到 在这个位置

00:24:45.426 --> 00:24:46.456 A:middle
我能够启用 Assistant 或者是任意

00:24:46.456 --> 00:24:47.226 A:middle
Related Content

00:24:47.856 --> 00:24:49.076 A:middle
我可以打开 Code Coverage

00:24:49.126 --> 00:24:50.106 A:middle
或者 Source Control Authors

00:24:50.106 --> 00:24:51.616 A:middle
我打算打开我们的最新的

00:24:51.616 --> 00:24:52.806 A:middle
Mini map 功能

00:24:54.676 --> 00:24:55.646 A:middle
Mini map 这个功能

00:24:55.646 --> 00:24:57.776 A:middle
可以为你展示文件的结构概览

00:24:57.926 --> 00:24:58.726 A:middle
来帮助你定位内容

00:24:59.326 --> 00:25:00.586 A:middle
你可以看到 文本

00:25:00.586 --> 00:25:01.656 A:middle
方法和函数

00:25:02.226 --> 00:25:03.256 A:middle
它使得你在这个文件上的移动

00:25:03.256 --> 00:25:04.176 A:middle
变得非常容易

00:25:05.216 --> 00:25:06.216 A:middle
如果你想在这个文件上

00:25:06.256 --> 00:25:07.476 A:middle
留下一些其他的位置标记

00:25:07.476 --> 00:25:09.216 A:middle
你可以使用 mark 语句段

00:25:09.216 --> 00:25:10.826 A:middle
来添加标签和水平分割符

00:25:11.126 --> 00:25:12.586 A:middle
它会同时显示在你的源文件

00:25:12.586 --> 00:25:13.496 A:middle
和 Mini map 当中

00:25:15.516 --> 00:25:19.756 A:middle
[掌声]

00:25:20.256 --> 00:25:21.536 A:middle
现在我悬停在 Mini map 上

00:25:21.536 --> 00:25:22.806 A:middle
你可以看到文件的

00:25:22.806 --> 00:25:24.256 A:middle
符号化的位置标记

00:25:24.996 --> 00:25:26.606 A:middle
接下来我想给你们一个专业的小提示

00:25:26.606 --> 00:25:28.166 A:middle
按住 command 键 你就能看到

00:25:28.166 --> 00:25:29.646 A:middle
这个文件的所有的位置标记

00:25:29.676 --> 00:25:30.846 A:middle
这可以帮助你非常容易的

00:25:30.846 --> 00:25:31.826 A:middle
到你想要的确切的位置

00:25:32.516 --> 00:25:36.546 A:middle
[掌声]

00:25:37.046 --> 00:25:37.836 A:middle
并且 Mini map 会为告诉你

00:25:37.876 --> 00:25:39.736 A:middle
问题 测试失败的部分

00:25:39.736 --> 00:25:40.836 A:middle
甚至是文件内部发现的结果

00:25:41.396 --> 00:25:42.846 A:middle
我们已经让这些功能触手可及了

00:25:44.366 --> 00:25:45.366 A:middle
你可以发现在 Source Editor 里面

00:25:45.366 --> 00:25:46.756 A:middle
随着我们凸显了基于语法的着色效果

00:25:46.756 --> 00:25:48.686 A:middle
你的代码看起来更加的清晰生动了

00:25:49.506 --> 00:25:51.386 A:middle
你还可以看到我们在这里面

00:25:51.426 --> 00:25:53.766 A:middle
增加了对 斜体 粗体 以及

00:25:53.766 --> 00:25:55.416 A:middle
代码语音上的支持

00:25:56.326 --> 00:25:57.296 A:middle
你还将发现

00:25:57.296 --> 00:25:58.646 A:middle
当你添加文本的时候

00:25:58.646 --> 00:26:00.856 A:middle
他会自动地在你添加完成后

00:26:00.856 --> 00:26:02.976 A:middle
补上可能缺少的参数

00:26:03.516 --> 00:26:09.556 A:middle
[掌声]

00:26:10.056 --> 00:26:10.926 A:middle
更好的是帮助你

00:26:10.926 --> 00:26:12.826 A:middle
保持你的备注文本部分和代码部分可以同步

00:26:13.066 --> 00:26:14.126 A:middle
你会发现当我改了这儿以后

00:26:14.126 --> 00:26:15.676 A:middle
在这个参数应用的范围内同时地都进行了修改

00:26:16.516 --> 00:26:21.626 A:middle
[掌声]

00:26:22.126 --> 00:26:23.206 A:middle
现在 我们还想

00:26:23.206 --> 00:26:24.336 A:middle
提供更多的功能

00:26:24.336 --> 00:26:25.376 A:middle
去帮助你追踪你的修改

00:26:26.166 --> 00:26:27.476 A:middle
如果我想查看

00:26:27.476 --> 00:26:29.286 A:middle
这个文件所有的修改

00:26:29.286 --> 00:26:30.596 A:middle
可以打开这个全新的

00:26:30.596 --> 00:26:32.126 A:middle
Source Control History Inspector

00:26:32.156 --> 00:26:33.196 A:middle
这里可以显示所有

00:26:33.196 --> 00:26:34.406 A:middle
我对这个文件进行的修改

00:26:34.406 --> 00:26:35.626 A:middle
而且我可以快速的跳到任一个提交位置

00:26:35.626 --> 00:26:37.066 A:middle
并且 由于它在检查器里

00:26:37.066 --> 00:26:38.336 A:middle
所以它适用于你项目中的

00:26:38.336 --> 00:26:39.816 A:middle
任何一种文件类型

00:26:40.866 --> 00:26:42.776 A:middle
为了帮助你查看

00:26:42.776 --> 00:26:44.376 A:middle
在本地发生的修改操作

00:26:44.376 --> 00:26:45.076 A:middle
我们还改进了 change bar 这个部分

00:26:45.846 --> 00:26:46.746 A:middle
当我悬停在 change bar 上面

00:26:46.746 --> 00:26:48.356 A:middle
它会显示出在本地发生的修改

00:26:48.666 --> 00:26:49.756 A:middle
但是更进一步的是

00:26:49.756 --> 00:26:51.626 A:middle
现在我可以让显示出我修改前的代码

00:26:51.626 --> 00:26:52.926 A:middle
这是一种快速片段式呈现

00:26:53.516 --> 00:26:58.916 A:middle
[掌声]

00:26:59.416 --> 00:27:01.176 A:middle
因为这是实时动态的

00:27:01.266 --> 00:27:04.976 A:middle
所以当我输入的时候它会还原到最新的状态

00:27:05.796 --> 00:27:07.006 A:middle
上述这些只是

00:27:07.006 --> 00:27:08.286 A:middle
Xcode 11 当中的

00:27:08.286 --> 00:27:09.696 A:middle
Source Editor 的特色功能的一部分

00:27:11.516 --> 00:27:17.836 A:middle
[掌声]

00:27:18.336 --> 00:27:20.106 A:middle
我们继续 测试是开发工作流当中的

00:27:20.106 --> 00:27:21.046 A:middle
另一个关键部分

00:27:21.536 --> 00:27:23.346 A:middle
并且 Xcode 当中已经

00:27:23.346 --> 00:27:25.086 A:middle
为各位开发者编写测试提供了很强大的支持

00:27:25.086 --> 00:27:26.716 A:middle
我想你们都知道的 对吧

00:27:26.976 --> 00:27:28.346 A:middle
因为想必你们已经编写过很多的测试了

00:27:28.346 --> 00:27:28.546 A:middle
&gt;&gt; 是的

00:27:28.816 --> 00:27:28.976 A:middle
&gt;&gt; 的确

00:27:30.046 --> 00:27:30.686 A:middle
&gt;&gt; 太棒了

00:27:30.686 --> 00:27:31.886 A:middle
我想听到的就是这个

00:27:32.536 --> 00:27:33.846 A:middle
现在 你可能不知道的是

00:27:33.846 --> 00:27:35.356 A:middle
Xcode 现在可以为你的测试做到更多

00:27:35.356 --> 00:27:37.016 A:middle
它通过使用 Runtime Issues

00:27:37.016 --> 00:27:38.386 A:middle
Runtime Sanitizers 和 Location Simulation

00:27:38.776 --> 00:27:40.846 A:middle
等出色的工具来做更多的工作

00:27:41.246 --> 00:27:42.566 A:middle
我们每年都在增加更多的功能

00:27:43.486 --> 00:27:44.886 A:middle
有了这么多的选择后

00:27:44.886 --> 00:27:46.296 A:middle
我们缺失的是

00:27:46.296 --> 00:27:49.176 A:middle
一种把他们集合在一起并行使用的方法

00:27:49.906 --> 00:27:51.736 A:middle
为了实现这件事 我们添加了 Test Plans

00:27:53.486 --> 00:27:54.526 A:middle
Test Plans 的强大之处在于

00:27:54.626 --> 00:27:56.396 A:middle
它可以让你在许多配置中

00:27:56.396 --> 00:27:57.496 A:middle
运行你的测试

00:27:58.556 --> 00:27:59.876 A:middle
只需要一些简单的选择

00:27:59.876 --> 00:28:02.266 A:middle
你就可以快速地给全世界的使用者开展测试

00:28:03.266 --> 00:28:04.386 A:middle
而且这些配置对于

00:28:04.456 --> 00:28:05.596 A:middle
捕捉 App Store 内的屏幕快照

00:28:05.596 --> 00:28:07.266 A:middle
或者收集你的定位器中的详细信息而言

00:28:07.266 --> 00:28:09.036 A:middle
都是非常完美的

00:28:10.056 --> 00:28:11.886 A:middle
为这个消息鼓掌吧 这的确是一件大事

00:28:12.516 --> 00:28:16.706 A:middle
[掌声]

00:28:17.206 --> 00:28:18.566 A:middle
通过添加

00:28:18.566 --> 00:28:20.196 A:middle
其他的诊断 工具和参数

00:28:20.196 --> 00:28:22.356 A:middle
你就可以从各个角度来查看你的 App

00:28:23.356 --> 00:28:24.786 A:middle
现在你的测试的覆盖率更广了

00:28:24.856 --> 00:28:25.986 A:middle
当你在很多的硬件设备

00:28:26.086 --> 00:28:28.066 A:middle
以及操作系统上进行组合测试时

00:28:28.066 --> 00:28:30.036 A:middle
你可以得到一个全面的综合的视图

00:28:30.036 --> 00:28:32.006 A:middle
来告诉你 你的 App 的运行情况

00:28:32.006 --> 00:28:34.576 A:middle
现在 对于这种规模的测试

00:28:34.616 --> 00:28:36.196 A:middle
Test Plans 可以与

00:28:36.196 --> 00:28:38.026 A:middle
Xcode Server 完美地协调工作

00:28:38.026 --> 00:28:40.366 A:middle
充分利用新 Mac Pro 的优点

00:28:40.366 --> 00:28:41.226 A:middle
来进行 Xcode 在模拟器和

00:28:41.316 --> 00:28:43.356 A:middle
设备上的新的并行测试

00:28:44.436 --> 00:28:45.756 A:middle
Test Plans 带来的效果是

00:28:45.756 --> 00:28:47.326 A:middle
现在你可以用一个指令

00:28:47.326 --> 00:28:49.196 A:middle
来为 App 执行所有测试

00:28:49.896 --> 00:28:51.096 A:middle
这是一个很大的进步

00:28:52.516 --> 00:28:58.556 A:middle
[掌声]

00:28:59.056 --> 00:29:01.376 A:middle
现在 经常做测试和调试的时候

00:29:01.376 --> 00:29:02.696 A:middle
都是有必要复制用户场景的

00:29:03.106 --> 00:29:04.286 A:middle
现在我们全新的 Device Conditions

00:29:04.676 --> 00:29:07.276 A:middle
可以回应这一需求 现在 你可以为设备上的

00:29:07.276 --> 00:29:08.426 A:middle
网络吞吐量和发热状态

00:29:08.426 --> 00:29:10.046 A:middle
设置不同的状态

00:29:10.046 --> 00:29:12.316 A:middle
并查看你的 App 是如何响应的

00:29:13.216 --> 00:29:14.226 A:middle
不过请放心

00:29:14.226 --> 00:29:15.636 A:middle
这些实际上都是模拟的

00:29:15.816 --> 00:29:16.696 A:middle
我们并不会

00:29:16.696 --> 00:29:17.856 A:middle
让你的硬件设备跑出一个超高的温度

00:29:19.006 --> 00:29:20.726 A:middle
你可以在 Xcode 的 Devices 窗口里

00:29:20.726 --> 00:29:21.926 A:middle
启用这些条件

00:29:22.276 --> 00:29:23.376 A:middle
当条件激活时

00:29:23.376 --> 00:29:24.946 A:middle
设备上会显示出一个横幅

00:29:25.816 --> 00:29:26.766 A:middle
你可以点击横幅

00:29:26.766 --> 00:29:28.976 A:middle
来禁用这些条件

00:29:28.976 --> 00:29:30.166 A:middle
当你断开设备连接时

00:29:30.166 --> 00:29:32.076 A:middle
Xcode 将自动终止这些条件

00:29:33.976 --> 00:29:34.976 A:middle
现在对于你将要

00:29:34.976 --> 00:29:36.576 A:middle
进行的所有测试我们还改良提升了

00:29:36.576 --> 00:29:37.776 A:middle
我们还改良提升了 Result Bundles

00:29:37.866 --> 00:29:39.256 A:middle
现在它已经独立了出来

00:29:39.826 --> 00:29:41.066 A:middle
无论是在 Xcode 中创建的测试

00:29:41.066 --> 00:29:42.416 A:middle
还是用命令行中创建的测试

00:29:42.416 --> 00:29:43.786 A:middle
你现在都可以通过邮件来分享它们

00:29:43.786 --> 00:29:45.056 A:middle
把它们附到 Bug 上

00:29:45.056 --> 00:29:46.236 A:middle
然后双击它们

00:29:46.236 --> 00:29:48.706 A:middle
就能在 Xcode 中打开它们并查看细节

00:29:49.516 --> 00:29:56.176 A:middle
[掌声]

00:29:56.676 --> 00:29:59.176 A:middle
现在 为了帮助你进一步改进你的 App

00:29:59.176 --> 00:30:01.276 A:middle
我们引入了两个新的反馈工具

00:30:02.246 --> 00:30:04.336 A:middle
首先是为 iOS 和 iPadOS 中的

00:30:04.366 --> 00:30:06.966 A:middle
App 引入了 App Metrics 即 App 性能指标

00:30:08.426 --> 00:30:09.766 A:middle
当用户选择共享分析时

00:30:09.766 --> 00:30:11.176 A:middle
你会收到匿名的

00:30:11.176 --> 00:30:13.226 A:middle
电池寿命 启动时间

00:30:13.226 --> 00:30:15.886 A:middle
内存占用等各项指标的数据

00:30:16.806 --> 00:30:18.106 A:middle
这些指标与

00:30:18.106 --> 00:30:19.376 A:middle
崩溃和能量日志

00:30:19.656 --> 00:30:21.436 A:middle
一起聚合并显示在 Organizer 里面

00:30:21.536 --> 00:30:22.706 A:middle
这是一种很好的方法

00:30:22.706 --> 00:30:23.916 A:middle
可以助你监视和改进每次构建出来的

00:30:23.916 --> 00:30:25.726 A:middle
App 的性能

00:30:27.226 --> 00:30:28.776 A:middle
这些打包在一起的度量数据

00:30:28.776 --> 00:30:29.876 A:middle
我们从春天的

00:30:29.966 --> 00:30:32.396 A:middle
iOS 12.2 版本就开始收集了

00:30:32.506 --> 00:30:33.556 A:middle
所以你的很多 App

00:30:33.556 --> 00:30:35.136 A:middle
现在应该已经有数据可供你查看了

00:30:36.626 --> 00:30:37.636 A:middle
另外一个重要的

00:30:37.636 --> 00:30:39.016 A:middle
反馈来源就是

00:30:39.016 --> 00:30:40.816 A:middle
直接来自于你的用户

00:30:40.816 --> 00:30:42.416 A:middle
现在 TestFlight App 允许用户分享他们的想法

00:30:43.936 --> 00:30:45.286 A:middle
TestFlight App 将自动地

00:30:45.286 --> 00:30:46.756 A:middle
启用用户反馈功能

00:30:47.796 --> 00:30:49.316 A:middle
当用户在你的 App 中弄了一个屏幕快照后

00:30:49.316 --> 00:30:50.156 A:middle
他们现在有了一个新的选项

00:30:50.156 --> 00:30:52.066 A:middle
来分享他对 beta 版的反馈

00:30:52.066 --> 00:30:53.976 A:middle
还可以添加评论

00:30:54.516 --> 00:31:00.876 A:middle
[掌声]

00:31:01.376 --> 00:31:02.866 A:middle
现在 你可以在

00:31:02.866 --> 00:31:04.286 A:middle
App Store Connect 当中

00:31:04.286 --> 00:31:05.616 A:middle
查看所有的反馈

00:31:05.616 --> 00:31:06.526 A:middle
并为 Bug 追踪系统下载所有的细节

00:31:08.746 --> 00:31:10.286 A:middle
今天讲到的所有的特性

00:31:10.366 --> 00:31:12.086 A:middle
都只是这一版 Xcode

00:31:12.086 --> 00:31:13.326 A:middle
中的一小部分

00:31:13.326 --> 00:31:14.966 A:middle
它集合了 Swift 和 SDK

00:31:14.966 --> 00:31:16.756 A:middle
以及我们所有工具的创新

00:31:17.546 --> 00:31:18.646 A:middle
所有这些都能帮助你

00:31:18.646 --> 00:31:20.296 A:middle
比以往更快地做好工作

00:31:20.996 --> 00:31:21.976 A:middle
这就是 Xcode 11

00:31:22.516 --> 00:31:30.906 A:middle
[掌声]

00:31:31.406 --> 00:31:32.086 A:middle
&gt;&gt; 现在我想再把

00:31:32.156 --> 00:31:33.476 A:middle
Sebastien 邀请请上台

00:31:33.476 --> 00:31:34.406 A:middle
来告诉我们更多关于 Apple 平台的东西

00:31:34.876 --> 00:31:35.276 A:middle
Sebastien

00:31:36.121 --> 00:31:38.121 A:middle
[掌声]

00:31:38.226 --> 00:31:39.096 A:middle
&gt;&gt; 谢谢 Matthew

00:31:39.796 --> 00:31:41.106 A:middle
是不是十分的振奋人心

00:31:42.436 --> 00:31:43.956 A:middle
这些功能的确非常非常棒

00:31:43.956 --> 00:31:46.556 A:middle
可以帮助你们构建更好的 App

00:31:46.906 --> 00:31:48.446 A:middle
现在我们把话题转回到我们的平台

00:31:48.866 --> 00:31:49.886 A:middle
当然 我们的平台

00:31:49.886 --> 00:31:51.356 A:middle
本身就是为提供良好的体验

00:31:51.356 --> 00:31:53.276 A:middle
而量身定制的 并且

00:31:53.276 --> 00:31:54.536 A:middle
平台本身就能体现出来

00:31:54.536 --> 00:31:56.306 A:middle
它们独一无二的使用方式

00:31:56.946 --> 00:31:58.186 A:middle
我们今年想要做的

00:31:58.186 --> 00:31:59.536 A:middle
就是让每个平台可以更加独一无二

00:31:59.896 --> 00:32:00.836 A:middle
我们接下来就深入到

00:32:01.186 --> 00:32:03.366 A:middle
macOS 当中 并且给各位开发者展示下

00:32:03.366 --> 00:32:05.226 A:middle
我们在其中做了些什么革新

00:32:05.786 --> 00:32:09.126 A:middle
macOS Catalina 是一款很棒的桌面操作系统

00:32:09.126 --> 00:32:10.616 A:middle
它拥有一系列

00:32:10.616 --> 00:32:12.476 A:middle
令人瞩目的新功能

00:32:12.536 --> 00:32:14.386 A:middle
比如说屏幕使用时间功能以及全新的音乐 App

00:32:14.386 --> 00:32:16.616 A:middle
并且 Mac 还有了

00:32:16.716 --> 00:32:17.986 A:middle
一个很大生产力方面的特性的提升

00:32:18.086 --> 00:32:20.936 A:middle
那就是加入了 Sidecar 功能 

00:32:20.936 --> 00:32:22.976 A:middle
我相信我们都会喜欢上 Sidecar 的 对吧

00:32:23.516 --> 00:32:26.566 A:middle
[掌声]

00:32:27.066 --> 00:32:28.696 A:middle
谢谢大家 好了 Mac 拥有超过 1 亿的

00:32:28.726 --> 00:32:30.916 A:middle
活跃用户

00:32:31.256 --> 00:32:33.176 A:middle
它是一个充满活力的平台

00:32:33.276 --> 00:32:34.636 A:middle
拥有丰富的 App 生态系统

00:32:34.746 --> 00:32:37.006 A:middle
Mac 生态系统中充满了

00:32:37.006 --> 00:32:38.646 A:middle
很多强大的专有的 App

00:32:38.646 --> 00:32:40.856 A:middle
这些 App 是你们使用 AppKit 框架创建的

00:32:40.856 --> 00:32:43.876 A:middle
一个很好的例子就是这款 Pixelmator Pro

00:32:44.946 --> 00:32:46.076 A:middle
现如今 AppKit 已经成为了一个非常

00:32:46.186 --> 00:32:47.716 A:middle
强大的框架 它的存在使得

00:32:47.716 --> 00:32:48.626 A:middle
各位可以调动起 Mac 的全部功能

00:32:48.896 --> 00:32:50.766 A:middle
但是我们还发现

00:32:50.766 --> 00:32:52.146 A:middle
有许多为 iPad 提供的 App

00:32:52.146 --> 00:32:53.906 A:middle
如果把它们放到 Mac 上

00:32:53.986 --> 00:32:55.886 A:middle
去运行的话 将会是相当好的一件事

00:32:55.886 --> 00:32:57.786 A:middle
但是 开发者并不是总有时间

00:32:57.786 --> 00:32:58.476 A:middle
运用 AppKit 去把这些 App 移植到 Mac 上

00:32:59.226 --> 00:33:01.096 A:middle
所以今年 我们引入了

00:33:01.096 --> 00:33:02.826 A:middle
一项新的技术手段

00:33:02.826 --> 00:33:04.426 A:middle
可以让你用最小的代价

00:33:04.426 --> 00:33:05.756 A:middle
就把 iPadOS 上的 App

00:33:05.756 --> 00:33:07.116 A:middle
带到 Mac 上 成为

00:33:07.116 --> 00:33:08.696 A:middle
一款 Mac 上的原生

00:33:09.736 --> 00:33:16.256 A:middle
我们—— 你能把幻灯片往回退两页么

00:33:16.446 --> 00:33:16.646 A:middle
不好意思啊

00:33:20.046 --> 00:33:21.506 A:middle
再退回去一张 好了

00:33:22.466 --> 00:33:23.936 A:middle
对于 Mac 来说

00:33:23.936 --> 00:33:26.086 A:middle
这是进入全球最大的

00:33:26.086 --> 00:33:27.556 A:middle
App 生态当中的的一个巨大机遇

00:33:28.186 --> 00:33:29.716 A:middle
iPad 上有

00:33:29.716 --> 00:33:31.806 A:middle
超过 100 万个 App

00:33:31.806 --> 00:33:33.386 A:middle
我们认为其中很多移植到 Mac 上也会有

00:33:33.386 --> 00:33:34.306 A:middle
很出色的表现

00:33:35.606 --> 00:33:37.176 A:middle
现在为了实现这件事

00:33:37.176 --> 00:33:38.566 A:middle
我们已经将超过 40 个框架和库

00:33:38.566 --> 00:33:40.176 A:middle
从 iOS 上移植到了 Mac 上

00:33:40.346 --> 00:33:42.556 A:middle
如果你现在是一名 iOS 开发人员

00:33:42.666 --> 00:33:43.876 A:middle
并且从未开发过 Mac 上的 App

00:33:44.136 --> 00:33:45.376 A:middle
想必你将会非常喜欢现在

00:33:45.376 --> 00:33:47.006 A:middle
两个平台上面

00:33:47.246 --> 00:33:48.946 A:middle
都有了相同的 API

00:33:49.496 --> 00:33:50.426 A:middle
事实上 我们已经

00:33:50.426 --> 00:33:53.516 A:middle
提供了几乎所有的 iOS 上的 API

00:33:53.516 --> 00:33:54.686 A:middle
只有少数例外的独特的移动方面的功能

00:33:54.686 --> 00:33:57.066 A:middle
没有被移植上去

00:33:58.066 --> 00:34:00.016 A:middle
现在 我们通过将

00:34:00.016 --> 00:34:01.556 A:middle
UIKit 适配成一个本地框架来实现这一点

00:34:01.896 --> 00:34:03.596 A:middle
这使得 iPad App 可以在 Mac 上运行

00:34:03.596 --> 00:34:05.746 A:middle
而且感觉就像平台上的其他 App

00:34:05.746 --> 00:34:08.065 A:middle
一样快速流畅

00:34:09.335 --> 00:34:10.795 A:middle
通过将 UIKit 直接

00:34:10.795 --> 00:34:13.085 A:middle
集成到 macOS 当中

00:34:13.085 --> 00:34:14.835 A:middle
许多基本功能都会是自动的

00:34:15.585 --> 00:34:16.775 A:middle
你不需要多做任何额外的操作

00:34:16.775 --> 00:34:18.386 A:middle
很多的 Mac 桌面以及窗口方面的功能

00:34:18.656 --> 00:34:20.156 A:middle
都会自动帮你适配

00:34:21.096 --> 00:34:22.335 A:middle
并且 我们还为你适配了

00:34:22.335 --> 00:34:24.275 A:middle
许多 Mac 平台独有的功能

00:34:24.275 --> 00:34:26.326 A:middle
像是键盘触控以及鼠标输入等等

00:34:26.326 --> 00:34:28.166 A:middle
这样可以节省下相当巨大的工作量

00:34:28.166 --> 00:34:29.846 A:middle
并且给你的开发提供了一个无与伦比的开端

00:34:30.505 --> 00:34:32.326 A:middle
我们已经花了很多年

00:34:32.396 --> 00:34:33.815 A:middle
来研究这项技术

00:34:33.815 --> 00:34:35.065 A:middle
并且我们把他用在了

00:34:35.065 --> 00:34:36.666 A:middle
我们自己的 App 上

00:34:36.766 --> 00:34:37.826 A:middle
这样 在今年

00:34:37.876 --> 00:34:39.565 A:middle
我们为你们提供 macOS Catalina 版本之前

00:34:39.565 --> 00:34:42.295 A:middle
就可以完善这项技术并证明它的效果了

00:34:43.376 --> 00:34:45.266 A:middle
如果你有一个 iPadOS 上的 App

00:34:45.266 --> 00:34:47.186 A:middle
想要移植到 Mac 平台上将会非常的容易

00:34:47.656 --> 00:34:49.346 A:middle
基本上就需要 3 个步骤

00:34:50.525 --> 00:34:52.916 A:middle
第一步 在 Xcode 里勾选上这个复选框

00:34:52.916 --> 00:34:56.031 A:middle
好了 [笑声]

00:34:56.045 --> 00:34:56.286 A:middle
这个步骤很简单

00:34:56.946 --> 00:34:58.556 A:middle
之后在 Xcode 的 Project Editor 里

00:34:58.556 --> 00:35:00.306 A:middle
为你的项目打开对 Mac 的支持

00:35:00.406 --> 00:35:00.786 A:middle
这样就可以了

00:35:00.876 --> 00:35:02.036 A:middle
就是这么简单

00:35:02.146 --> 00:35:02.916 A:middle
这就是它的神奇之处

00:35:03.376 --> 00:35:04.786 A:middle
这样一来 一个项目及它所构建出来的 App

00:35:04.786 --> 00:35:07.176 A:middle
就可以同时应用到三个平台上面了

00:35:07.736 --> 00:35:08.716 A:middle
当你在源代码中进行修改的时候

00:35:08.716 --> 00:35:12.056 A:middle
所有为三个平台搭建的 App 将自动更新

00:35:13.446 --> 00:35:14.766 A:middle
第二步 就是确保你的 App

00:35:14.766 --> 00:35:17.296 A:middle
在 iPad 上运行良好

00:35:18.196 --> 00:35:20.546 A:middle
更好的 iPad App

00:35:20.586 --> 00:35:21.076 A:middle
也会造就更好的 Mac App

00:35:21.076 --> 00:35:23.056 A:middle
因此 各位开发者为适配基于最新技术及优化的

00:35:23.056 --> 00:35:24.616 A:middle
iPad 的大尺寸屏幕

00:35:24.946 --> 00:35:26.756 A:middle
而做出的努力

00:35:26.806 --> 00:35:29.016 A:middle
可以很好地应用到 Mac 之上

00:35:31.316 --> 00:35:32.816 A:middle
只要你遵循着最佳操作

00:35:33.216 --> 00:35:34.376 A:middle
比如说让你的 iPadOS App 可以支持外接键盘

00:35:34.466 --> 00:35:36.496 A:middle
这样的实践也会带来

00:35:36.496 --> 00:35:38.036 A:middle
更丰富的 Mac 上的体验

00:35:39.596 --> 00:35:41.146 A:middle
第三步 就是利用

00:35:41.146 --> 00:35:43.356 A:middle
Mac 上的特定的功能

00:35:44.186 --> 00:35:45.036 A:middle
这一点也是你为 Mac 进行单独定制

00:35:45.036 --> 00:35:47.026 A:middle
并且最大化利用 Mac 上

00:35:47.066 --> 00:35:48.166 A:middle
典型的特有的优点的一个步骤

00:35:49.086 --> 00:35:50.436 A:middle
你可以利用特有的用户交互元素

00:35:50.436 --> 00:35:52.626 A:middle
像是完整的菜单栏以及工具栏等

00:35:52.626 --> 00:35:55.306 A:middle
并且如果适用于你的 App 的话

00:35:55.306 --> 00:35:56.326 A:middle
你还可以利用上侧边栏及其特殊的素材等等

00:35:56.996 --> 00:35:58.196 A:middle
现在为了给你们展示下这个有多简单

00:35:58.266 --> 00:35:59.806 A:middle
我想再一次把 Matthew

00:35:59.806 --> 00:36:01.356 A:middle
请上台来做一个 demo

00:36:01.666 --> 00:36:07.946 A:middle
Matthew [掌声]

00:36:08.446 --> 00:36:09.106 A:middle
&gt;&gt; 谢谢 Sebastien

00:36:10.246 --> 00:36:11.186 A:middle
现在我们在 iPad 模拟器里

00:36:11.186 --> 00:36:13.306 A:middle
运行着一个 旅行相关的 App

00:36:13.886 --> 00:36:15.306 A:middle
左侧这边有一个位置的列表视图

00:36:15.886 --> 00:36:17.846 A:middle
当我选择一个地点时地球会旋转

00:36:18.646 --> 00:36:19.866 A:middle
我们有一个日志记录的部分

00:36:19.866 --> 00:36:21.006 A:middle
我可以开始在日志上

00:36:21.116 --> 00:36:22.246 A:middle
记录我的旅行

00:36:23.266 --> 00:36:24.336 A:middle
现在 我们就按照刚 Sebastien 所说的

00:36:24.336 --> 00:36:25.756 A:middle
三个步骤 把这个 App 移植到 Mac 上吧

00:36:26.756 --> 00:36:28.416 A:middle
第一步 勾选复选框

00:36:29.436 --> 00:36:31.236 A:middle
我先退出一下这个模拟器

00:36:31.236 --> 00:36:32.976 A:middle
之后在对应的编辑器里面

00:36:32.976 --> 00:36:35.216 A:middle
勾选上 Mac 支持来启用它

00:36:36.756 --> 00:36:37.686 A:middle
就是这样

00:36:37.686 --> 00:36:38.836 A:middle
现在我就可以为 Mac 构建

00:36:38.836 --> 00:36:39.616 A:middle
并运行我的 App 了

00:36:40.626 --> 00:36:41.846 A:middle
通过勾选复选框

00:36:41.846 --> 00:36:43.156 A:middle
我们把 Mac 添加成了一个目的平台

00:36:43.606 --> 00:36:44.786 A:middle
就像我可以为我的 App

00:36:44.786 --> 00:36:46.286 A:middle
在硬件设备和模拟器之间进行选择一样

00:36:46.286 --> 00:36:47.706 A:middle
现在我可以选择 Mac 来运行它了

00:36:48.816 --> 00:36:49.546 A:middle
现在他就是一款 Mac App 了

00:36:50.346 --> 00:36:52.486 A:middle
左面是列表视图

00:36:52.486 --> 00:36:54.536 A:middle
点击选择一个目的地 之后从这儿登录

00:36:55.516 --> 00:37:02.066 A:middle
[掌声]

00:37:02.566 --> 00:37:03.716 A:middle
我知道 这个复选框提供的功能真的很强大

00:37:03.716 --> 00:37:06.826 A:middle
好了 下面我们进入到第二个步骤

00:37:06.886 --> 00:37:08.266 A:middle
制作一个良好的 iPad App

00:37:09.376 --> 00:37:10.786 A:middle
我还没有为我的列表视图

00:37:10.786 --> 00:37:12.426 A:middle
实现任何操作

00:37:12.426 --> 00:37:13.776 A:middle
比如说添加到收藏或者是分享之类的

00:37:14.686 --> 00:37:15.636 A:middle
当我在 iPad 上实现这些功能时

00:37:15.846 --> 00:37:16.656 A:middle
它们会在 Mac 上

00:37:16.736 --> 00:37:17.896 A:middle
显示成一个 context menu

00:37:18.666 --> 00:37:19.326 A:middle
这将会是一个双赢的交互方式

00:37:20.376 --> 00:37:22.076 A:middle
所以我退出这个 Mac App

00:37:22.076 --> 00:37:23.606 A:middle
切换到侧边栏控制器

00:37:23.606 --> 00:37:25.246 A:middle
之后我就添加一个

00:37:25.246 --> 00:37:26.676 A:middle
表格视图委托的方法

00:37:26.676 --> 00:37:27.796 A:middle
好为表中每个项目都设置好菜单的格式

00:37:29.216 --> 00:37:30.846 A:middle
好了 我们进入到第三步

00:37:31.956 --> 00:37:33.556 A:middle
我希望我的 Mac App 的

00:37:33.556 --> 00:37:34.676 A:middle
侧边栏可以是活力动态的

00:37:35.586 --> 00:37:36.626 A:middle
这个变化不会自动地被配置上去

00:37:36.666 --> 00:37:37.666 A:middle
因为这件事需要

00:37:37.666 --> 00:37:38.926 A:middle
开发者去检查

00:37:38.926 --> 00:37:39.886 A:middle
以确保效果是合适的

00:37:40.746 --> 00:37:41.856 A:middle
当你发现它是想要的

00:37:41.856 --> 00:37:43.526 A:middle
只需要一行简单的代码

00:37:43.526 --> 00:37:45.906 A:middle
就可以设置上侧边栏的背景样式了

00:37:47.536 --> 00:37:48.916 A:middle
好了 对于我们最后要做的更改

00:37:48.916 --> 00:37:50.906 A:middle
就是添加一个菜单栏

00:37:51.806 --> 00:37:53.706 A:middle
现在在 storyboard 这里

00:37:53.706 --> 00:37:56.376 A:middle
我打开库之后找一下菜单

00:37:57.246 --> 00:37:58.516 A:middle
我将抓取一个主菜单

00:37:58.516 --> 00:38:00.036 A:middle
之后把它拖到 storyboard 里

00:38:00.716 --> 00:38:01.966 A:middle
之后点开 File 菜单

00:38:03.306 --> 00:38:04.476 A:middle
我想在这里面添加一个菜单指令

00:38:04.476 --> 00:38:06.126 A:middle
是用于登录操作的

00:38:06.746 --> 00:38:07.626 A:middle
我们就给它起名叫 Login 吧

00:38:08.366 --> 00:38:09.416 A:middle
再给他配上一个快捷键组合

00:38:09.416 --> 00:38:10.046 A:middle
就是同时按下 Command 和 L

00:38:10.856 --> 00:38:12.066 A:middle
现在我只需要将

00:38:12.146 --> 00:38:14.156 A:middle
菜单项连接到

00:38:14.426 --> 00:38:15.836 A:middle
我的登录操作上就行了

00:38:16.886 --> 00:38:18.146 A:middle
好的 这样就可以了

00:38:18.436 --> 00:38:19.726 A:middle
让我们构建并运行我们刚做的修改吧

00:38:20.656 --> 00:38:22.006 A:middle
我将暂时隐藏下 Xcode

00:38:22.246 --> 00:38:23.696 A:middle
这样我们就能

00:38:23.806 --> 00:38:24.906 A:middle
看到我们的 App 了

00:38:25.936 --> 00:38:28.116 A:middle
现在我们有了动态的侧边栏

00:38:28.656 --> 00:38:29.856 A:middle
当我选中一项以后

00:38:29.856 --> 00:38:32.026 A:middle
我可以打开一个 context menu

00:38:32.056 --> 00:38:34.216 A:middle
在 File 菜单里

00:38:34.496 --> 00:38:35.186 A:middle
现在也有了登录的操作

00:38:36.046 --> 00:38:37.806 A:middle
所以就这样 三个简单的步骤

00:38:38.516 --> 00:38:45.266 A:middle
[掌声]

00:38:45.766 --> 00:38:46.856 A:middle
只需三个简单的步骤就可以

00:38:46.856 --> 00:38:48.666 A:middle
把我们的 App 带到 Mac 平台上

00:38:48.666 --> 00:38:49.996 A:middle
并且可以为我们的用户提供良好的用户体验

00:38:50.446 --> 00:38:51.206 A:middle
你来继续吧 Sebastien

00:38:52.041 --> 00:38:54.041 A:middle
[掌声]

00:38:54.066 --> 00:38:54.646 A:middle
&gt;&gt; 谢谢 Matthew

00:38:55.266 --> 00:38:56.246 A:middle
这真的是令人难以置信

00:38:56.486 --> 00:38:58.616 A:middle
这难道不会让各位开发者想要去尝试一下么

00:38:59.396 --> 00:39:01.336 A:middle
好吧 实际上

00:39:01.336 --> 00:39:02.786 A:middle
在过去的几周里

00:39:02.786 --> 00:39:05.256 A:middle
我们已经邀请过一些开发人员来进行了尝试

00:39:05.456 --> 00:39:06.576 A:middle
他们在短短几周内取得的成果

00:39:06.636 --> 00:39:09.276 A:middle
真的令人印象深刻

00:39:09.746 --> 00:39:11.116 A:middle
这是他们成功地将 iPad App

00:39:11.116 --> 00:39:13.436 A:middle
运行在 Mac 上的一个例子

00:39:14.606 --> 00:39:17.316 A:middle
每当你做好一个 Mac App

00:39:17.316 --> 00:39:18.456 A:middle
将它分发给你的用户的最好方式

00:39:18.456 --> 00:39:20.346 A:middle
就是把它挂到 Mac 的 App Store 里

00:39:21.216 --> 00:39:23.686 A:middle
这里面拥有最大的 Mac App 的目录

00:39:23.846 --> 00:39:25.986 A:middle
它在全球 155 个国家

00:39:26.146 --> 00:39:28.186 A:middle
提供着服务

00:39:28.246 --> 00:39:29.486 A:middle
并且 Mac App Store 可以让你

00:39:29.646 --> 00:39:31.206 A:middle
触及到每一个 Mac 用户

00:39:31.906 --> 00:39:34.156 A:middle
现在我们还让用户

00:39:34.156 --> 00:39:35.556 A:middle
可以灵活地选择

00:39:35.556 --> 00:39:36.726 A:middle
以什么样的方式来

00:39:36.726 --> 00:39:38.336 A:middle
下载他们想要的 App

00:39:38.336 --> 00:39:39.336 A:middle
并且还能同时帮助他们免受恶意软件的攻击

00:39:39.856 --> 00:39:41.056 A:middle
在 macOS Catalina 这一版本中

00:39:41.526 --> 00:39:42.656 A:middle
Gatekeeper 会验证你从网上

00:39:42.656 --> 00:39:43.576 A:middle
下载下来并运行的 App

00:39:43.576 --> 00:39:45.426 A:middle
就在你初次运行 App 的时候

00:39:45.656 --> 00:39:47.496 A:middle
并且后期会定期验证它们

00:39:47.496 --> 00:39:49.596 A:middle
以此来确定它不是已知的恶意软件

00:39:50.556 --> 00:39:51.536 A:middle
这是通过要求开发者们

00:39:51.536 --> 00:39:52.816 A:middle
使用我们去年发布的

00:39:52.816 --> 00:39:54.556 A:middle
新 App 以及 App 升级的公证服务

00:39:54.556 --> 00:39:57.716 A:middle
公证服务来实现的

00:39:58.286 --> 00:40:00.336 A:middle
这样你和你的用户

00:40:00.336 --> 00:40:01.816 A:middle
就可以安全地从

00:40:01.816 --> 00:40:03.716 A:middle
Mac App Store 以及网络上下载 App 了

00:40:04.736 --> 00:40:07.076 A:middle
公证已经被广泛的采用于多个方面

00:40:07.636 --> 00:40:09.416 A:middle
它既简单又高速 超过 98% 的提交申请

00:40:09.416 --> 00:40:12.936 A:middle
会在 15 分钟内就给出结果

00:40:13.956 --> 00:40:15.656 A:middle
现在说到安全

00:40:15.656 --> 00:40:16.836 A:middle
我们还在持续投资着 macOS

00:40:16.896 --> 00:40:18.726 A:middle
的基础建设

00:40:18.726 --> 00:40:20.486 A:middle
并且我们主要着眼于三个领域

00:40:21.696 --> 00:40:23.106 A:middle
首先是一项新的技术

00:40:23.106 --> 00:40:24.746 A:middle
名为 DriverKit 

00:40:24.746 --> 00:40:26.106 A:middle
它允许你将内核的扩展部分

00:40:26.106 --> 00:40:28.056 A:middle
从内核里转移到用户存储空间之中

00:40:28.666 --> 00:40:31.116 A:middle
通过将这些驱动

00:40:31.116 --> 00:40:33.336 A:middle
和拓展程序转换成用户进程来运行

00:40:33.336 --> 00:40:35.256 A:middle
我们可以为所有的 macOS 用户

00:40:35.256 --> 00:40:36.156 A:middle
提高系统的稳定性

00:40:37.266 --> 00:40:38.586 A:middle
我们确定了过去

00:40:38.586 --> 00:40:39.976 A:middle
最常见的需要进行

00:40:39.976 --> 00:40:41.206 A:middle
内核扩展的用例

00:40:41.206 --> 00:40:42.756 A:middle
现在 我们在

00:40:42.786 --> 00:40:45.376 A:middle
macOS Catalina 中为其中超过

00:40:45.626 --> 00:40:46.706 A:middle
75% 的用例提供了一个用户空间替代方案

00:40:47.616 --> 00:40:48.926 A:middle
我们鼓励你采用 DriverKit

00:40:49.006 --> 00:40:50.746 A:middle
因为 macOS 的未来版本

00:40:50.746 --> 00:40:53.716 A:middle
将不再运行这些类型的内核扩展了

00:40:54.216 --> 00:40:57.106 A:middle
接下来 我们将通过把

00:40:57.106 --> 00:40:58.886 A:middle
macOS 的系统卷变成只读的

00:40:58.986 --> 00:41:00.736 A:middle
来提高它的稳定性

00:41:01.596 --> 00:41:02.426 A:middle
它是这样工作的

00:41:03.146 --> 00:41:04.726 A:middle
现在的情况是只用一个单独的卷

00:41:04.726 --> 00:41:06.416 A:middle
其中包含了 用户数据 App

00:41:06.816 --> 00:41:07.836 A:middle
以及操作系统

00:41:08.526 --> 00:41:09.706 A:middle
现在 为了进一步隔离 macOS 的变化

00:41:09.706 --> 00:41:11.726 A:middle
Mac 将会被分为

00:41:11.726 --> 00:41:13.616 A:middle
两个逻辑卷

00:41:14.576 --> 00:41:15.806 A:middle
一个用于只读的

00:41:15.876 --> 00:41:17.746 A:middle
操作系统文件

00:41:18.006 --> 00:41:20.286 A:middle
另一个用于用户数据和 App

00:41:21.051 --> 00:41:23.051 A:middle
[掌声]

00:41:23.086 --> 00:41:23.296 A:middle
就是这样

00:41:24.126 --> 00:41:26.126 A:middle
[掌声]

00:41:26.236 --> 00:41:27.306 A:middle
这将进一步保护

00:41:27.306 --> 00:41:28.736 A:middle
系统不受变化的影响

00:41:29.006 --> 00:41:30.956 A:middle
增加稳定性

00:41:30.956 --> 00:41:32.706 A:middle
并在未来为我们提供安全方面的好处

00:41:33.286 --> 00:41:34.716 A:middle
现在 在座的一些开发者

00:41:34.716 --> 00:41:36.476 A:middle
可能已经在内心底为自己的

00:41:36.476 --> 00:41:37.826 A:middle
App 或者是安装程序做了一个预设

00:41:37.826 --> 00:41:39.786 A:middle
想要检查下自己的 App 是不是可以

00:41:39.786 --> 00:41:40.896 A:middle
在 macOS Catalina 无缝衔接的直接运行

00:41:42.286 --> 00:41:44.436 A:middle
所以 最后呢 我们增强了

00:41:44.436 --> 00:41:45.136 A:middle
App 及其数据保护

00:41:45.816 --> 00:41:47.816 A:middle
我们在过去几年里

00:41:47.816 --> 00:41:48.996 A:middle
添加了一些额外的

00:41:48.996 --> 00:41:50.646 A:middle
数据保护类别

00:41:50.646 --> 00:41:52.186 A:middle
以便用户可以掌控

00:41:52.186 --> 00:41:54.676 A:middle
哪些 App 可以接入他们的重要文件

00:41:54.676 --> 00:41:57.246 A:middle
比如个人照片 或是敏感传感器

00:41:57.336 --> 00:41:59.246 A:middle
像是 Mac 上的

00:41:59.246 --> 00:42:01.046 A:middle
摄像头或是麦克风

00:42:01.596 --> 00:42:03.496 A:middle
在 macOS Catalina 这一版本里

00:42:03.496 --> 00:42:05.116 A:middle
我们继续了这项工作

00:42:05.116 --> 00:42:06.736 A:middle
以确保 App 在捕获

00:42:06.736 --> 00:42:08.356 A:middle
输入事件前获得了用户的许可

00:42:08.356 --> 00:42:10.786 A:middle
就比如像按键或者是屏幕录制这样的事件

00:42:14.046 --> 00:42:15.636 A:middle
我们还将保护好用户

00:42:15.636 --> 00:42:17.266 A:middle
在 Mac 上的数据

00:42:17.266 --> 00:42:18.546 A:middle
所以 App 必须先获得许可

00:42:18.786 --> 00:42:20.116 A:middle
才能访问用户

00:42:20.116 --> 00:42:22.256 A:middle
存放在桌面 下载

00:42:22.256 --> 00:42:24.636 A:middle
文件 iCloud 驱动器

00:42:24.636 --> 00:42:26.316 A:middle
以及外部驱动器等位置的文件

00:42:27.056 --> 00:42:31.576 A:middle
是的 [掌声]

00:42:32.076 --> 00:42:33.196 A:middle
我们真的十分激动

00:42:33.196 --> 00:42:34.116 A:middle
可以把这一系列的增强

00:42:34.116 --> 00:42:35.476 A:middle
带到 macOS Catalina 之上

00:42:36.296 --> 00:42:37.766 A:middle
今年 另一个有很大变化的平台

00:42:37.836 --> 00:42:40.326 A:middle
就是 watchOS 了

00:42:40.886 --> 00:42:42.366 A:middle
下面我想邀请

00:42:42.366 --> 00:42:44.006 A:middle
Lori 上台来为大家介绍更多内容

00:42:44.056 --> 00:42:47.666 A:middle
Lori [掌声]

00:42:48.166 --> 00:42:48.786 A:middle
&gt;&gt; 谢谢 Sebastien

00:42:50.056 --> 00:42:52.056 A:middle
[掌声]

00:42:52.096 --> 00:42:53.126 A:middle
今天早上 我们介绍了一些

00:42:53.186 --> 00:42:54.656 A:middle
watchOS 6 当中的一些很酷的新特性

00:42:54.656 --> 00:42:56.496 A:middle
包括全新的健康类的 App

00:42:56.496 --> 00:42:57.976 A:middle
包括像是 听力健康 经期跟踪

00:42:58.036 --> 00:42:59.436 A:middle
健身记录趋势

00:42:59.606 --> 00:43:00.606 A:middle
以及有声读物等等

00:43:01.286 --> 00:43:03.236 A:middle
但对于 watchOS 6 来说

00:43:03.466 --> 00:43:04.956 A:middle
真正的大事是

00:43:04.956 --> 00:43:07.386 A:middle
它现在就可以宣布从手机中

00:43:07.456 --> 00:43:08.766 A:middle
完全独立出来

00:43:08.766 --> 00:43:10.956 A:middle
打造完全专注于手表的体验

00:43:11.516 --> 00:43:15.606 A:middle
[掌声]

00:43:16.106 --> 00:43:17.186 A:middle
多亏了蜂窝网络的连接性能

00:43:17.186 --> 00:43:18.326 A:middle
用户们现在越来越多的

00:43:18.326 --> 00:43:19.766 A:middle
放下手机

00:43:19.766 --> 00:43:21.366 A:middle
享受着只需携带 Apple Watch

00:43:21.516 --> 00:43:23.006 A:middle
就可以随时保持着通讯连接的自由感

00:43:23.566 --> 00:43:25.116 A:middle
从外出溜达到跑步训练

00:43:25.166 --> 00:43:26.596 A:middle
从听音乐

00:43:26.596 --> 00:43:27.696 A:middle
到和朋友聊天

00:43:28.146 --> 00:43:29.996 A:middle
我们希望所有的用户都能

00:43:29.996 --> 00:43:32.206 A:middle
毫无限制的享受 Apple Watch 带来的绝佳体验

00:43:32.606 --> 00:43:34.956 A:middle
独立的手表专用 App 使这一切成为可能

00:43:36.606 --> 00:43:38.106 A:middle
我们已经

00:43:38.146 --> 00:43:39.326 A:middle
很认真地观察了

00:43:39.456 --> 00:43:41.016 A:middle
开发 Apple Watch App 所面临的挑战

00:43:41.116 --> 00:43:42.916 A:middle
我们希望不仅仅为开发者带来新的 API

00:43:42.916 --> 00:43:44.066 A:middle
来支持独立的体验

00:43:44.066 --> 00:43:46.056 A:middle
我们还希望能够

00:43:46.056 --> 00:43:47.616 A:middle
彻底的改变

00:43:47.666 --> 00:43:49.716 A:middle
Apple Watch 开发者的体验

00:43:52.156 --> 00:43:53.866 A:middle
如果我告诉你 现在你可以

00:43:53.866 --> 00:43:55.786 A:middle
开发一款专门只为手表而做的 App

00:43:56.026 --> 00:43:57.246 A:middle
你会怎么考虑呢

00:43:59.286 --> 00:44:00.316 A:middle
如果你有一个很棒的点子

00:44:00.376 --> 00:44:01.926 A:middle
它是一个仅能在手表上运行的独特体验的话

00:44:02.066 --> 00:44:03.426 A:middle
Xcode 现在让这件事变得轻松可得

00:44:03.426 --> 00:44:05.366 A:middle
就是让开发者可以开发仅用于手表的 App

00:44:05.366 --> 00:44:07.306 A:middle
所以现在你可以直接实现你的想法

00:44:07.336 --> 00:44:09.186 A:middle
而无需先建立一个 iOS App

00:44:11.506 --> 00:44:13.056 A:middle
不过 即便你已经有了一个

00:44:13.176 --> 00:44:14.776 A:middle
iOS App 你仍可以

00:44:14.776 --> 00:44:16.846 A:middle
让你的 App 脱离原有的束缚

00:44:16.846 --> 00:44:18.266 A:middle
建立成一个完全独立的 App

00:44:18.266 --> 00:44:19.836 A:middle
这一切都要归功于

00:44:19.836 --> 00:44:21.506 A:middle
我们在 watchOS 6 上做出的几项关键变化

00:44:21.506 --> 00:44:24.196 A:middle
它们支持了手表上的独立 App

00:44:24.196 --> 00:44:25.626 A:middle
使得 Apple Watch 可以作为一个独立的目标平台

00:44:26.236 --> 00:44:27.306 A:middle
现在 你可以选择

00:44:27.356 --> 00:44:28.536 A:middle
直接向手表发送推送

00:44:28.656 --> 00:44:30.346 A:middle
这样你就能直接

00:44:30.426 --> 00:44:31.866 A:middle
同时一起更新你的用户和你的 App 的数据

00:44:31.946 --> 00:44:34.096 A:middle
并且无需依赖手机来进行调解

00:44:35.516 --> 00:44:39.796 A:middle
[掌声]

00:44:40.296 --> 00:44:41.596 A:middle
我们还支持了 CloudKit 订阅

00:44:41.636 --> 00:44:43.406 A:middle
以及复杂性推送

00:44:43.406 --> 00:44:45.296 A:middle
来帮助你保证你的 App 处于最新状态

00:44:46.576 --> 00:44:48.056 A:middle
在没有 iPhone App 的前提下

00:44:48.056 --> 00:44:49.696 A:middle
而让用户在 iPhone 上进行登录操作

00:44:49.816 --> 00:44:50.716 A:middle
是一个不可取的做法

00:44:50.906 --> 00:44:52.786 A:middle
所以在 watchOS 6 当中

00:44:52.786 --> 00:44:54.386 A:middle
我们给你提供了文本区域

00:44:54.386 --> 00:44:55.746 A:middle
这样一来 你就可以直接在

00:44:55.746 --> 00:44:57.366 A:middle
Apple Watch 上提供创建账户和登录的选项了

00:45:01.836 --> 00:45:03.376 A:middle
变得更加容易的话

00:45:03.376 --> 00:45:04.696 A:middle
你甚至可以直接在你的 App里

00:45:04.696 --> 00:45:05.986 A:middle
添加一个用 Sign in with Apple 的按钮

00:45:05.986 --> 00:45:07.776 A:middle
让你的用户直接用他现有的 Apple ID

00:45:07.776 --> 00:45:09.236 A:middle
来创建一个新的账号

00:45:09.976 --> 00:45:12.226 A:middle
不需要输入任何的文本或是密码

00:45:13.306 --> 00:45:14.536 A:middle
在 watchOS 6 里

00:45:14.536 --> 00:45:15.826 A:middle
我们还通过向其中引入流式音乐传输

00:45:15.866 --> 00:45:18.826 A:middle
解决了一个常见的手表上单独的用例

00:45:19.966 --> 00:45:21.206 A:middle
在 watchOS 5 当中

00:45:21.256 --> 00:45:23.106 A:middle
我们引入了后台音乐重放的功能

00:45:24.226 --> 00:45:26.056 A:middle
现在在 watchOS 6 当中

00:45:26.056 --> 00:45:27.536 A:middle
我们给 Apple Watch 引入了

00:45:27.536 --> 00:45:29.436 A:middle
3 种不同的直接播放流式音频方式

00:45:29.436 --> 00:45:30.636 A:middle
分别是 Network.framework

00:45:31.156 --> 00:45:33.496 A:middle
NSURLSessionStreamTask 以及

00:45:33.496 --> 00:45:35.486 A:middle
AVFoundation

00:45:36.836 --> 00:45:38.046 A:middle
我们还认识到

00:45:38.046 --> 00:45:39.616 A:middle
除了音频播放

00:45:39.916 --> 00:45:41.906 A:middle
锻炼和导航之外

00:45:41.906 --> 00:45:43.336 A:middle
还有一些用例需要让 App

00:45:43.516 --> 00:45:44.436 A:middle
保持运行顺序才能完成任务

00:45:45.046 --> 00:45:46.856 A:middle
就比如说冥想

00:45:47.756 --> 00:45:49.406 A:middle
在 watchOS 6 里

00:45:49.406 --> 00:45:51.406 A:middle
我们引入了一个全新的 Extended Runtime API 

00:45:51.686 --> 00:45:53.416 A:middle
以此来让更多的 App 可以

00:45:53.416 --> 00:45:54.816 A:middle
在用户放下手腕之后继续运行

00:45:56.896 --> 00:45:58.546 A:middle
这可以使用户在

00:45:58.546 --> 00:46:00.586 A:middle
自我护理 专注力

00:46:01.076 --> 00:46:03.406 A:middle
物理治疗 智能提醒

00:46:03.976 --> 00:46:04.936 A:middle
以及健康检测方面获得全新的体验

00:46:05.866 --> 00:46:08.056 A:middle
这需要大量的 API 和功能上的支持

00:46:08.626 --> 00:46:10.446 A:middle
如果开发者能有更多的

00:46:10.506 --> 00:46:11.556 A:middle
选项来创建引人注目的

00:46:11.556 --> 00:46:12.646 A:middle
用户界面就更好了 对吧

00:46:13.946 --> 00:46:15.156 A:middle
我们知道开发者们

00:46:15.156 --> 00:46:17.016 A:middle
多年来一直要求 Apple Watch 提供

00:46:17.016 --> 00:46:17.936 A:middle
更高级的 UI 框架

00:46:18.616 --> 00:46:20.546 A:middle
现在在 watchOS 6 里

00:46:20.616 --> 00:46:21.626 A:middle
利用 SwiftUI 我们有了这样的一款框架

00:46:23.516 --> 00:46:27.546 A:middle
[掌声]

00:46:30.396 --> 00:46:31.876 A:middle
同样的 可以用来定义

00:46:31.876 --> 00:46:33.196 A:middle
好看的用户界面的

00:46:33.196 --> 00:46:34.666 A:middle
声明性语言

00:46:34.666 --> 00:46:36.506 A:middle
也是适用于 watchOS 的 

00:46:36.506 --> 00:46:37.806 A:middle
也扩展了 watchOS 平台的可能性

00:46:38.926 --> 00:46:40.466 A:middle
从列表上的滑动删除

00:46:40.866 --> 00:46:42.836 A:middle
重新排序 再到 走马灯式动效

00:46:43.166 --> 00:46:44.826 A:middle
以及直接访问 数字表冠等等功能

00:46:44.826 --> 00:46:46.626 A:middle
现在比以往任何时候

00:46:46.676 --> 00:46:48.156 A:middle
都更容易打造一种引人注目的手表体验

00:46:50.086 --> 00:46:51.096 A:middle
下面就让我为大家展示一下

00:46:51.096 --> 00:46:52.876 A:middle
如何用 SwiftUI 来

00:46:52.876 --> 00:46:54.916 A:middle
实现一些独立的 App 功能吧
　　
00:47:06.196 --> 00:47:07.826 A:middle
好了 现在我的模拟器里

00:47:08.926 --> 00:47:09.776 A:middle
我已经用 SwiftUI

00:47:09.776 --> 00:47:11.686 A:middle
更新过它了

00:47:11.686 --> 00:47:12.906 A:middle
所以它看起来很不错

00:47:13.246 --> 00:47:14.446 A:middle
但我仍有一些工作需要做

00:47:14.446 --> 00:47:16.306 A:middle
因为这上面的旧版的登录按钮

00:47:16.306 --> 00:47:17.686 A:middle
现在还是会要求用户

00:47:17.716 --> 00:47:18.526 A:middle
在 iPhone 上登录

00:47:19.116 --> 00:47:20.256 A:middle
我的用户告诉我

00:47:20.256 --> 00:47:21.116 A:middle
这不是他们想要的

00:47:21.116 --> 00:47:22.956 A:middle
他们希望所有的事情能够全在他们的手腕上进行

00:47:23.896 --> 00:47:24.436 A:middle
所以我就推出这个模拟器

00:47:24.476 --> 00:47:26.576 A:middle
之后进到我的项目文件里

00:47:27.106 --> 00:47:28.406 A:middle
现在我要移动到我的 Travel Watch

00:47:28.406 --> 00:47:30.436 A:middle
Extension Target 这个目录下

00:47:30.436 --> 00:47:32.356 A:middle
并且通过勾选 Supports Running Without 

00:47:32.426 --> 00:47:33.556 A:middle
iOS App Installation 这个框

00:47:33.646 --> 00:47:35.626 A:middle
来声明这款 App 是独立于手机的

00:47:37.136 --> 00:47:38.406 A:middle
接下来我要进到我已经写好的

00:47:38.406 --> 00:47:39.646 A:middle
登录部分的视图里

00:47:40.346 --> 00:47:41.406 A:middle
我会继续调整我的预览

00:47:42.516 --> 00:47:43.786 A:middle
太好了 你可以看到

00:47:43.846 --> 00:47:45.556 A:middle
我有一个登录按钮 并配上了两个预览

00:47:45.716 --> 00:47:47.266 A:middle
上面这个是为我所用的英语

00:47:47.266 --> 00:47:48.806 A:middle
来设计的

00:47:48.806 --> 00:47:50.006 A:middle
而下面这个是为了

00:47:50.006 --> 00:47:51.466 A:middle
尝试着将我的 App 本地化到

00:47:51.466 --> 00:47:52.666 A:middle
阿拉伯语 因为阿拉伯语是从右往左书写的

00:47:52.666 --> 00:47:53.566 A:middle
需要单独设计一下

00:47:54.736 --> 00:47:55.736 A:middle
所以我要做的第一件事就是

00:47:55.736 --> 00:47:57.616 A:middle
给用户名按钮添加一个用于输入区域

00:47:58.036 --> 00:48:00.936 A:middle
然后我要把这个绑定到

00:48:00.976 --> 00:48:01.126 A:middle
啊

00:48:03.216 --> 00:48:04.726 A:middle
我的用户名状态上

00:48:04.726 --> 00:48:06.606 A:middle
这样的话输入区域会随着值的更新而更新

00:48:07.436 --> 00:48:08.756 A:middle
注意这里我把占位符的

00:48:08.756 --> 00:48:10.086 A:middle
文本设置成了 Username

00:48:10.086 --> 00:48:11.406 A:middle
这样一来 用户就知道

00:48:11.476 --> 00:48:12.226 A:middle
这个区域是做什么的了

00:48:12.596 --> 00:48:13.916 A:middle
我还把内容类型设置成了

00:48:13.966 --> 00:48:15.506 A:middle
Username 类型

00:48:15.616 --> 00:48:17.016 A:middle
这样用户名和密码自动填充功能

00:48:17.216 --> 00:48:19.356 A:middle
就可以在使用 continuity keyboard 的时候

00:48:19.356 --> 00:48:21.906 A:middle
顺利工作了 接下来 我要添加一个

00:48:21.966 --> 00:48:23.206 A:middle
密码区域

00:48:23.206 --> 00:48:24.566 A:middle
为此在这里我要使用一个 SecureField

00:48:24.676 --> 00:48:27.916 A:middle
这样人们就无法窃取我的密码了

00:48:28.016 --> 00:48:28.916 A:middle
重复一下之前的操作

00:48:28.916 --> 00:48:30.676 A:middle
帮这个区域的值绑定到我的密码状态上

00:48:31.756 --> 00:48:34.286 A:middle
我还设了一个 Password 的占位符

00:48:34.286 --> 00:48:35.646 A:middle
之后我把内容类型设置成 Password

00:48:35.706 --> 00:48:37.966 A:middle
来方便进行自动填充

00:48:37.966 --> 00:48:39.826 A:middle
这么一看

00:48:39.826 --> 00:48:40.676 A:middle
不论是英语还是阿拉伯语 它显示起来都很不错

00:48:40.676 --> 00:48:41.806 A:middle
并且对于阿拉伯语来说

00:48:41.806 --> 00:48:42.726 A:middle
它这个位置的字是从我的本地化字符串文件内

00:48:42.726 --> 00:48:43.886 A:middle
取出来的值

00:48:43.946 --> 00:48:45.256 A:middle
这里它并不是用占位符的内容的方式设上去的

00:48:46.626 --> 00:48:48.676 A:middle
好了 完成上面的操作后

00:48:48.676 --> 00:48:50.526 A:middle
接下来我先添加一个 Sign in with Apple

00:48:50.526 --> 00:48:51.486 A:middle
的按钮 因为我觉得

00:48:51.486 --> 00:48:53.036 A:middle
用户会希望设用这样的方式来登录

00:48:54.716 --> 00:48:55.636 A:middle
现在我把它放在顶部

00:48:55.696 --> 00:48:57.356 A:middle
然后添加一个分隔符

00:48:57.356 --> 00:48:58.706 A:middle
这样用户就可以选择

00:48:58.706 --> 00:48:59.606 A:middle
用他们的 Apple ID 来创建账户

00:48:59.606 --> 00:49:01.926 A:middle
或者为我的 App 创建

00:49:01.926 --> 00:49:03.196 A:middle
另外的用户名和密码

00:49:03.716 --> 00:49:04.226 A:middle
看起来很不错

00:49:05.286 --> 00:49:06.396 A:middle
最后一步是

00:49:06.396 --> 00:49:08.826 A:middle
到我的 HostingController 上

00:49:08.826 --> 00:49:10.476 A:middle
将我的 PresentationButton 的目标

00:49:10.546 --> 00:49:13.466 A:middle
更改为我刚创建的 Sign in 视图上

00:49:13.466 --> 00:49:14.526 A:middle
而不是在 iPhone 视图里的

00:49:14.526 --> 00:49:16.136 A:middle
Sign in 部分

00:49:16.136 --> 00:49:19.236 A:middle
好的 一切就都可以运行了

00:49:19.236 --> 00:49:20.996 A:middle
现在 我打开实时预览

00:49:20.996 --> 00:49:22.006 A:middle
我的所有的按钮就都是可以交互的了

00:49:22.076 --> 00:49:24.726 A:middle
然后当我点击注册按钮

00:49:24.726 --> 00:49:26.026 A:middle
我得到了我刚设计的表单

00:49:26.796 --> 00:49:28.426 A:middle
使用 Apple ID 注册 或者是

00:49:28.426 --> 00:49:29.416 A:middle
使用用户名和密码来注册

00:49:29.626 --> 00:49:30.606 A:middle
它看起来非常不错

00:49:31.126 --> 00:49:32.576 A:middle
这就是用 SwiftUI 在 Apple Watch 上

00:49:32.646 --> 00:49:33.976 A:middle
创建一个注册表单的方式

00:49:34.516 --> 00:49:41.546 A:middle
[掌声]

00:49:42.046 --> 00:49:43.906 A:middle
所以 这样一来开发者就有了工具

00:49:43.906 --> 00:49:46.076 A:middle
来建立一个伟大且独立的 Apple Watch 体验了

00:49:46.666 --> 00:49:47.526 A:middle
那么你打算以什么样的方式

00:49:47.526 --> 00:49:50.146 A:middle
把你的 Apple Watch  App 呈现给用户

00:49:51.006 --> 00:49:52.606 A:middle
并且可以容易被用户所接受呢

00:49:54.286 --> 00:49:55.246 A:middle
App Store 和 Apple Watch

00:49:55.386 --> 00:49:56.516 A:middle
将在 App Store 的顶层

00:49:56.516 --> 00:49:58.026 A:middle
通过精选

00:49:58.026 --> 00:49:59.256 A:middle
和编辑推荐的方式

00:49:59.306 --> 00:50:01.456 A:middle
来推荐优秀的独立 App

00:50:02.196 --> 00:50:03.696 A:middle
我们在这里强调是

00:50:03.696 --> 00:50:05.166 A:middle
独立的 App

00:50:05.166 --> 00:50:06.706 A:middle
因为这样用户就可以直接

00:50:06.706 --> 00:50:08.176 A:middle
下载并开始使用

00:50:08.296 --> 00:50:10.376 A:middle
你的优秀的 App

00:50:10.596 --> 00:50:12.926 A:middle
无论他们是否携带了手机

00:50:15.046 --> 00:50:17.016 A:middle
当你深入到单个的产品页面时

00:50:17.086 --> 00:50:19.086 A:middle
你会发现它并不是一个缩减了的体验

00:50:19.496 --> 00:50:21.046 A:middle
用户将看到功能齐全的

00:50:21.226 --> 00:50:23.546 A:middle
App 描述 屏幕快照 评论等等

00:50:25.306 --> 00:50:26.636 A:middle
他们可以搜索带有

00:50:26.636 --> 00:50:27.656 A:middle
Voice Control 和涂鸦功能的 App

00:50:28.956 --> 00:50:30.336 A:middle
用户将能够直接把

00:50:30.536 --> 00:50:32.306 A:middle
你的 App 下载到

00:50:32.306 --> 00:50:34.356 A:middle
他们的手腕上

00:50:34.356 --> 00:50:35.936 A:middle
多亏了 App 及素材方面的细化

00:50:35.936 --> 00:50:37.516 A:middle
才使得可以提供一个小型的捆绑包

00:50:37.516 --> 00:50:39.566 A:middle
并且其中仅包含对手表有意义的

00:50:39.566 --> 00:50:41.276 A:middle
架构及素材

00:50:42.186 --> 00:50:43.776 A:middle
如果你同时拥有 iOS 和 watchOS 的 App

00:50:43.776 --> 00:50:45.266 A:middle
这也可以使你的

00:50:45.406 --> 00:50:47.556 A:middle
iOS App 变得更小

00:50:47.556 --> 00:50:48.666 A:middle
因为我们不需要再把

00:50:48.756 --> 00:50:50.956 A:middle
手表的包下载到你的手机上 也不需要来回移动这个包了

00:50:52.316 --> 00:50:53.846 A:middle
对于 Apple Watch App 来说

00:50:53.996 --> 00:50:55.526 A:middle
这确实是一个全新的时代

00:50:55.596 --> 00:50:57.476 A:middle
它将比以往任何时候都

00:50:57.476 --> 00:50:58.686 A:middle
更实用 更美观 更独立

00:50:59.186 --> 00:51:00.426 A:middle
我们认为你和你的用户

00:51:00.506 --> 00:51:01.806 A:middle
都会喜欢这个改进的

00:51:03.226 --> 00:51:04.386 A:middle
现在既然说起来

00:51:04.386 --> 00:51:05.546 A:middle
手表已经从 iOS 平台当中独立出来了

00:51:05.546 --> 00:51:07.216 A:middle
我想把 Cindy 请上台

00:51:07.216 --> 00:51:08.276 A:middle
来说说 iOS 平台的变化

00:51:09.516 --> 00:51:15.556 A:middle
[掌声]

00:51:16.056 --> 00:51:16.866 A:middle
&gt;&gt; 谢谢 Lori

00:51:17.086 --> 00:51:20.236 A:middle
iOS 13 是一个很大的版本

00:51:21.476 --> 00:51:22.636 A:middle
在今早的发布会上

00:51:22.636 --> 00:51:24.186 A:middle
相信大家也已经看到了

00:51:24.486 --> 00:51:26.946 A:middle
我们更新了大量的功能并作出了很大的增强

00:51:26.946 --> 00:51:28.506 A:middle
比如说重新设计的 share sheet 

00:51:28.646 --> 00:51:31.066 A:middle
新 Quick Type 键盘和全新 CarPlay 体验

00:51:32.426 --> 00:51:34.156 A:middle
除此之外 我们花了很长时间

00:51:34.156 --> 00:51:35.586 A:middle
来研究我们的 UI

00:51:36.216 --> 00:51:38.796 A:middle
并给了 iOS 13 一个全新的外观

00:51:39.956 --> 00:51:41.346 A:middle
其中包括 深色模式

00:51:41.426 --> 00:51:44.856 A:middle
卡片视效 内容上的操作以及符号

00:51:46.056 --> 00:51:47.466 A:middle
首先让我么深入到

00:51:47.576 --> 00:51:48.686 A:middle
全新的深色模式当中吧

00:51:50.456 --> 00:51:51.596 A:middle
深色模式将亮度维持在一个较低的水平

00:51:51.676 --> 00:51:53.436 A:middle
并且让浏览器变得不那么碍事

00:51:53.436 --> 00:51:55.956 A:middle
这样你就可以专注于内容了

00:51:56.786 --> 00:51:58.276 A:middle
整个系统经过了

00:51:58.276 --> 00:51:59.726 A:middle
深思熟虑的更新和完善

00:51:59.726 --> 00:52:00.856 A:middle
并且视觉效果非常的棒

00:52:00.856 --> 00:52:03.876 A:middle
你的用户肯定会需要这个功能的

00:52:04.406 --> 00:52:05.906 A:middle
并且为了帮助开发者

00:52:05.906 --> 00:52:08.106 A:middle
把这项改进带到 App 当中

00:52:08.106 --> 00:52:10.206 A:middle
我们开发了一些专门针对

00:52:10.286 --> 00:52:11.976 A:middle
深色模式的 API

00:52:13.326 --> 00:52:15.266 A:middle
首先是基于语义来赋予颜色

00:52:16.626 --> 00:52:17.646 A:middle
针对背景 填充区域和

00:52:17.646 --> 00:52:19.586 A:middle
文本都有了新的颜色

00:52:20.426 --> 00:52:21.686 A:middle
在深色模式下

00:52:21.686 --> 00:52:23.686 A:middle
它们有多个变体

00:52:23.686 --> 00:52:25.126 A:middle
给你的 App 赋予了一个视觉层次结构

00:52:25.916 --> 00:52:26.806 A:middle
所以这究竟意味着什么呢

00:52:27.626 --> 00:52:28.686 A:middle
当你的 App 是全屏的时候

00:52:28.796 --> 00:52:30.966 A:middle
它的背景是纯黑色的

00:52:31.896 --> 00:52:33.346 A:middle
为了确保足够的对比度

00:52:34.016 --> 00:52:37.166 A:middle
上面的 UI 采用了一个更亮的调色

00:52:38.136 --> 00:52:40.126 A:middle
在 iPad 上进行多任务处理的时候

00:52:40.216 --> 00:52:42.146 A:middle
具有侧边栏的 App 和两个并排 App

00:52:42.356 --> 00:52:43.626 A:middle
也会呈现出

00:52:43.626 --> 00:52:44.976 A:middle
较浅的图层颜色

00:52:46.286 --> 00:52:47.686 A:middle
这个设计有很多的细微之处

00:52:47.786 --> 00:52:49.276 A:middle
但是在整个过程中

00:52:49.356 --> 00:52:50.786 A:middle
你会自动地获得这种语义颜色效果

00:52:52.686 --> 00:52:54.156 A:middle
但你需要凸显某项内容时

00:52:54.156 --> 00:52:55.086 A:middle
会有一个明亮的系统调色板

00:52:55.236 --> 00:52:56.776 A:middle
其中的颜色在增强对比度的模式下

00:52:56.776 --> 00:52:58.106 A:middle
被赋予了不同的效果

00:52:58.106 --> 00:53:00.076 A:middle
并且在深色模式中也

00:53:00.076 --> 00:53:01.706 A:middle
有一个良好的特定的效果

00:53:05.046 --> 00:53:07.326 A:middle
还有一组全新的

00:53:07.326 --> 00:53:09.276 A:middle
材质和动态内容过滤器

00:53:09.366 --> 00:53:10.946 A:middle
并具有不同层次的透明度

00:53:10.946 --> 00:53:12.936 A:middle
这样一来

00:53:12.936 --> 00:53:14.866 A:middle
你就可以创建出比以往都要好的 UI

00:53:15.596 --> 00:53:17.116 A:middle
就和语义颜色一样

00:53:17.586 --> 00:53:19.116 A:middle
这些材质也同时

00:53:19.246 --> 00:53:20.936 A:middle
支持普通的亮模式和深色模式

00:53:21.886 --> 00:53:23.246 A:middle
他们会根据

00:53:23.426 --> 00:53:24.996 A:middle
UIKit 特征集的变化

00:53:25.046 --> 00:53:26.336 A:middle
来自动的更新

00:53:27.676 --> 00:53:29.126 A:middle
采用语义颜色和自适应材料

00:53:29.126 --> 00:53:30.696 A:middle
将帮助你提供一个

00:53:30.696 --> 00:53:32.496 A:middle
统一的外观

00:53:32.496 --> 00:53:34.416 A:middle
自动适应你的环境

00:53:36.826 --> 00:53:38.736 A:middle
iOS 13 新外观的另一个组成部分

00:53:38.736 --> 00:53:39.836 A:middle
是卡片视效

00:53:41.496 --> 00:53:43.196 A:middle
从最原始的 SDK 开始

00:53:43.196 --> 00:53:45.286 A:middle
在 iPhone 上的默认表示效果

00:53:45.286 --> 00:53:46.846 A:middle
就是全屏覆盖式的

00:53:47.696 --> 00:53:49.286 A:middle
我们现在把这种默认的效果

00:53:49.286 --> 00:53:51.286 A:middle
改成了更流畅的卡片表示

00:53:52.326 --> 00:53:54.086 A:middle
卡片视效提供了一个视觉上的堆叠效果

00:53:54.086 --> 00:53:55.416 A:middle
你一眼就可以看出

00:53:55.416 --> 00:53:56.606 A:middle
目前你正运行的东西

00:53:56.926 --> 00:53:58.006 A:middle
并且更好的一点是

00:53:58.006 --> 00:53:59.416 A:middle
你可以用手势来控制 只需向下一刷

00:53:59.416 --> 00:53:59.956 A:middle
就可以关掉当前的卡片了

00:54:05.376 --> 00:54:08.386 A:middle
是啊 刷一下就关了

00:54:08.656 --> 00:54:11.256 A:middle
我们还更新轻瞄和凸显这两个功能的的用户体验

00:54:12.106 --> 00:54:14.196 A:middle
在整个系统中

00:54:14.196 --> 00:54:15.726 A:middle
内容上的操作

00:54:15.816 --> 00:54:16.666 A:middle
变得更快 更容易

00:54:17.306 --> 00:54:18.136 A:middle
它们由一个全新的 API 来支持

00:54:18.196 --> 00:54:21.276 A:middle
这个 API 适用于所有的设备

00:54:21.616 --> 00:54:22.636 A:middle
所以它们不止在

00:54:22.636 --> 00:54:24.616 A:middle
iPhone 上有优于以往的效果

00:54:24.666 --> 00:54:25.816 A:middle
在 iPad 上也是一样的优秀

00:54:26.836 --> 00:54:28.036 A:middle
并且 当你把你的 iPad App

00:54:28.456 --> 00:54:29.976 A:middle
移植到 macOS 上 它们看起来也会很棒

00:54:33.516 --> 00:54:36.506 A:middle
[掌声]

00:54:37.006 --> 00:54:38.146 A:middle
当我们研究这个系统

00:54:38.146 --> 00:54:39.316 A:middle
做所有这些

00:54:39.316 --> 00:54:41.276 A:middle
深思熟虑的改进时

00:54:41.276 --> 00:54:42.496 A:middle
我们开始思考符号

00:54:44.556 --> 00:54:45.756 A:middle
大多数 App 都使用符号

00:54:46.276 --> 00:54:48.626 A:middle
它们是传递信息的一种非常有用的方式

00:54:48.626 --> 00:54:51.286 A:middle
并且符号会经常和文本一起使用

00:54:51.536 --> 00:54:53.176 A:middle
但在 iOS 12 中

00:54:53.256 --> 00:54:54.856 A:middle
文本有一些很棒的属性

00:54:54.976 --> 00:54:55.846 A:middle
我们的符号却并没有什么改进

00:54:57.566 --> 00:54:59.536 A:middle
因此 正如你在这里看到的

00:54:59.796 --> 00:55:01.566 A:middle
随着动态类型的增大

00:55:01.566 --> 00:55:03.316 A:middle
文本可以很好地伸缩

00:55:03.316 --> 00:55:04.436 A:middle
但是符号却保持不变

00:55:05.276 --> 00:55:06.666 A:middle
理想情况下

00:55:06.716 --> 00:55:07.996 A:middle
我们希望符号随文本一起缩放

00:55:09.906 --> 00:55:11.246 A:middle
所以我们开发了 SF Symbols

00:55:12.766 --> 00:55:13.916 A:middle
SF Symbols 具有

00:55:13.916 --> 00:55:15.646 A:middle
字体的所具备的

00:55:15.796 --> 00:55:17.786 A:middle
所有的表现力和行为

00:55:17.996 --> 00:55:19.136 A:middle
但不过它们被打包成了 UI 图像

00:55:19.136 --> 00:55:19.896 A:middle
这样它们在你的 App 里用起来就更容易了

00:55:20.616 --> 00:55:23.326 A:middle
iOS 13 包含了一个

00:55:23.596 --> 00:55:25.966 A:middle
极为庞大的目录

00:55:26.086 --> 00:55:27.076 A:middle
超过 1500 个 SF Symbols 供你使用

00:55:27.076 --> 00:55:29.136 A:middle
并且它们可以很容易地

00:55:29.266 --> 00:55:31.796 A:middle
在 Xcode 中搜索到 你还可以在 Mac 上

00:55:31.796 --> 00:55:33.636 A:middle
使用独立的 SF Symbols App

00:55:35.516 --> 00:55:43.106 A:middle
[掌声]

00:55:43.606 --> 00:55:45.316 A:middle
这就是符号 [笑声] 所以现在你可以

00:55:45.316 --> 00:55:47.206 A:middle
看到这些符号和文字一起缩放

00:55:47.316 --> 00:55:49.576 A:middle
以便在更大的尺寸下

00:55:49.576 --> 00:55:51.906 A:middle
获得更好的可读性和一致性

00:55:51.906 --> 00:55:54.696 A:middle
而且因为现在符号的表现

00:55:54.696 --> 00:55:56.286 A:middle
就和字体一样

00:55:56.286 --> 00:55:57.656 A:middle
所以这些字体上可用的变化对符号也一样适用

00:56:04.086 --> 00:56:05.206 A:middle
所有的这些都只是

00:56:05.286 --> 00:56:07.476 A:middle
iOS 13 中可用功能的一个皮毛

00:56:08.026 --> 00:56:09.786 A:middle
现在有全新的 share sheet API

00:56:09.786 --> 00:56:11.556 A:middle
可以让 App 获得收件人提供的建议

00:56:11.996 --> 00:56:13.596 A:middle
全新的 compositional layout API

00:56:13.896 --> 00:56:15.906 A:middle
使集合视图比以往更容易被使用

00:56:15.906 --> 00:56:17.976 A:middle
还有屏幕快照方面的增强

00:56:18.136 --> 00:56:20.846 A:middle
可以为长的内容提供完整的页面截取

00:56:21.086 --> 00:56:22.046 A:middle
还有很多很多

00:56:24.686 --> 00:56:26.916 A:middle
除了上面提到的这些

00:56:27.556 --> 00:56:29.746 A:middle
今年我们真的很想进一步推进 iOS 的发展

00:56:31.486 --> 00:56:32.716 A:middle
所以我们给了 iPad 它自己的

00:56:32.796 --> 00:56:34.336 A:middle
操作系统并配有包括

00:56:34.336 --> 00:56:36.296 A:middle
对多任务处理的主要增强

00:56:36.296 --> 00:56:38.086 A:middle
一个新的 PencilKit 框架

00:56:38.086 --> 00:56:40.336 A:middle
和一整套提高工作效率的手势

00:56:42.416 --> 00:56:43.926 A:middle
让我们先来说说多任务处理吧

00:56:45.176 --> 00:56:47.586 A:middle
在 iPadOS 中 你的 App

00:56:47.586 --> 00:56:49.346 A:middle
可以在同一时间 在不同位置

00:56:49.346 --> 00:56:50.946 A:middle
被同时打开

00:56:51.006 --> 00:56:52.786 A:middle
甚至可以以侧拉堆叠的方式呈现

00:56:52.786 --> 00:56:54.516 A:middle
并且在不同的位置下可以显示不同的内容

00:56:56.466 --> 00:56:57.726 A:middle
为了实现这件事

00:56:57.726 --> 00:57:00.066 A:middle
我们引入了一个新的 UI window scene API

00:57:01.286 --> 00:57:02.796 A:middle
每个窗口场景

00:57:02.896 --> 00:57:04.536 A:middle
都代表你的 App UI 的一个实例

00:57:06.266 --> 00:57:08.016 A:middle
在 iPadOS 诞生之前

00:57:08.236 --> 00:57:09.656 A:middle
你的 App Delegate 将同时负责

00:57:09.656 --> 00:57:12.236 A:middle
它的进程和 UI 的生命周期

00:57:13.246 --> 00:57:14.136 A:middle
有了 window scene 之后

00:57:14.136 --> 00:57:15.856 A:middle
我们将 UI 部分

00:57:15.856 --> 00:57:17.706 A:middle
拆分为一个新的 Scene Delegate 对象

00:57:17.826 --> 00:57:20.316 A:middle
这样它就可以独立管理了

00:57:21.236 --> 00:57:22.516 A:middle
因为它们是完全独立的了

00:57:22.516 --> 00:57:23.796 A:middle
你的 App 现在就可以

00:57:23.796 --> 00:57:26.526 A:middle
同时管理多个了

00:57:27.056 --> 00:57:30.276 A:middle
你的用户现在甚至看可以靠拖拽

00:57:30.276 --> 00:57:32.156 A:middle
把某个单独的项

00:57:32.156 --> 00:57:33.726 A:middle
从你的 App 中拉出来

00:57:33.726 --> 00:57:35.466 A:middle
比如拉出来一个单独的窗口或一条信息

00:57:35.466 --> 00:57:36.816 A:middle
并在一个全新的 window scene 里打开它

00:57:38.966 --> 00:57:40.866 A:middle
有了这个新功能

00:57:40.866 --> 00:57:42.506 A:middle
用户可以在任何时候

00:57:42.656 --> 00:57:43.806 A:middle
在任何场景中继续他们正在做的任何事情

00:57:43.806 --> 00:57:46.066 A:middle
这一点非常重要

00:57:46.926 --> 00:57:48.226 A:middle
为了简单起见

00:57:48.226 --> 00:57:49.836 A:middle
我们建立了一个基于 NSUserActivity 

00:57:49.946 --> 00:57:51.566 A:middle
的新的状态恢复系统

00:57:52.786 --> 00:57:54.116 A:middle
你可能已经很熟悉

00:57:54.116 --> 00:57:55.386 A:middle
这个通用的 API 了

00:57:55.936 --> 00:57:57.766 A:middle
它被用于 接力 搜索

00:57:57.906 --> 00:58:00.636 A:middle
索引 和 Siri 现在

00:58:00.636 --> 00:58:02.386 A:middle
还将用于 window scene 的状态恢复

00:58:06.326 --> 00:58:07.456 A:middle
其中 很重要的一件事

00:58:07.456 --> 00:58:09.886 A:middle
就是 啊 你们可以鼓掌 没关系的

00:58:10.516 --> 00:58:15.546 A:middle
[掌声]

00:58:16.046 --> 00:58:16.746 A:middle
真正让 iPad 变得与众不同的一点

00:58:16.746 --> 00:58:18.806 A:middle
就是它可以配备 Apple Pencil

00:58:20.136 --> 00:58:21.336 A:middle
我们引入 PencilKit

00:58:21.486 --> 00:58:22.686 A:middle
就是为让你轻松地给你的 App 

00:58:23.076 --> 00:58:25.706 A:middle
添加平滑的低延迟绘图

00:58:26.696 --> 00:58:28.436 A:middle
这与 Apple 的备忘录 Markup

00:58:28.436 --> 00:58:31.476 A:middle
以及屏幕快照 所使用的引擎是相同的

00:58:31.476 --> 00:58:33.106 A:middle
所以你可以在你的 App 中

00:58:33.146 --> 00:58:36.226 A:middle
获得所有这些相同的功能和工具

00:58:36.616 --> 00:58:38.276 A:middle
你甚至可以单独

00:58:38.276 --> 00:58:39.996 A:middle
使用画布和调色板功能

00:58:40.316 --> 00:58:41.476 A:middle
只需要选择哪些部分

00:58:41.516 --> 00:58:44.326 A:middle
适合你的用例就可以了

00:58:45.076 --> 00:58:47.046 A:middle
最后让我们谈一谈

00:58:47.046 --> 00:58:48.396 A:middle
提高效率的方法

00:58:50.266 --> 00:58:52.026 A:middle
我们把文本选择变得更加容易了

00:58:52.506 --> 00:58:53.596 A:middle
现在你可以直接在文本上

00:58:53.656 --> 00:58:55.336 A:middle
用手指一拖来选择它

00:58:56.286 --> 00:58:57.716 A:middle
文本视图和 web 视图里

00:58:57.766 --> 00:58:59.406 A:middle
已经自动地更新了

00:58:59.406 --> 00:59:00.976 A:middle
这种新的选择方式

00:59:03.006 --> 00:59:04.356 A:middle
现在有了新的三指手势

00:59:04.486 --> 00:59:05.646 A:middle
来进行撤销和重做

00:59:07.056 --> 00:59:08.226 A:middle
三指往左滑就是撤销

00:59:08.356 --> 00:59:09.666 A:middle
往右滑就是重做

00:59:10.436 --> 00:59:11.866 A:middle
这些手势使用的都是

00:59:11.956 --> 00:59:13.546 A:middle
现有的 NSUndoManager 

00:59:13.546 --> 00:59:14.976 A:middle
所以你什么也不需要做就能直接采用

00:59:19.046 --> 00:59:20.046 A:middle
如果你希望在文本视图

00:59:20.156 --> 00:59:21.796 A:middle
或者 web 视图之外

00:59:21.796 --> 00:59:23.796 A:middle
能够轻松地选择文本

00:59:23.796 --> 00:59:25.226 A:middle
或者是你的 App 已经添加了

00:59:25.226 --> 00:59:26.906 A:middle
三指手势操作的话

00:59:26.906 --> 00:59:29.756 A:middle
你可以使用 UITexInteraction API 来修复

00:59:32.276 --> 00:59:33.466 A:middle
对于滚动视图来说

00:59:33.466 --> 00:59:35.156 A:middle
现在可以拖动滚动指示器

00:59:35.156 --> 00:59:37.526 A:middle
直接跳转到滚动视图中的某个位置

00:59:38.736 --> 00:59:40.006 A:middle
要启用这种操作的话

00:59:40.046 --> 00:59:41.796 A:middle
只需打开显示滚动指示器就可以了

00:59:42.396 --> 00:59:43.476 A:middle
对于这一点来说

00:59:43.476 --> 00:59:44.676 A:middle
非常重要的是我们可能必须同时加载

00:59:44.766 --> 00:59:46.196 A:middle
一个滚动框架下的所有元素

00:59:46.196 --> 00:59:48.076 A:middle
才能把滚动的性能

00:59:48.076 --> 00:59:50.186 A:middle
给提升上去

00:59:50.956 --> 00:59:52.246 A:middle
我们认为我们的用户

00:59:52.246 --> 00:59:53.796 A:middle
会喜欢 iPadOS 提供给他们的强大的新功能

00:59:53.796 --> 00:59:56.236 A:middle
我们迫不及待地想看看

00:59:56.236 --> 00:59:57.566 A:middle
你会如何使用它

00:59:58.536 --> 01:00:00.576 A:middle
所以我想让 Sebastien 再重新回到舞台上来

01:00:01.516 --> 01:00:06.666 A:middle
[掌声]

01:00:07.166 --> 01:00:10.146 A:middle
&gt;&gt; 谢谢 Cindy 现在 正如你所看到的

01:00:10.146 --> 01:00:11.546 A:middle
我们的每个平台都有

01:00:11.616 --> 01:00:13.036 A:middle
令人难以置信的新功能

01:00:13.036 --> 01:00:14.866 A:middle
这些功能可以改进每个平台提供的体验

01:00:14.866 --> 01:00:16.436 A:middle
并赋予它们强大的新能力

01:00:16.816 --> 01:00:18.336 A:middle
并且在我们的所有平台上

01:00:18.686 --> 01:00:20.226 A:middle
我们建立了一系列的技术

01:00:20.226 --> 01:00:21.186 A:middle
来给你的 App 提供一个

01:00:21.186 --> 01:00:23.746 A:middle
一个良好的开端

01:00:23.746 --> 01:00:24.846 A:middle
这样你就可以直接在

01:00:24.846 --> 01:00:27.206 A:middle
你的 App 上使用最新的技术了

01:00:28.156 --> 01:00:29.946 A:middle
今天下午 我们想着重介绍

01:00:29.986 --> 01:00:31.426 A:middle
其中的几项技术

01:00:31.426 --> 01:00:32.206 A:middle
这几项技术覆盖了很多方面

01:00:32.246 --> 01:00:34.096 A:middle
既包括了我们是如何把我们的平台

01:00:34.096 --> 01:00:36.216 A:middle
以及 App 开放给用户的

01:00:36.216 --> 01:00:37.936 A:middle
还包括了我们如何用 AR

01:00:37.936 --> 01:00:40.296 A:middle
把虚拟世界和现实世界连接在一起

01:00:40.876 --> 01:00:43.026 A:middle
我们先从辅助功能开始讲起把

01:00:43.026 --> 01:00:44.456 A:middle
为此 我想邀请 Eric Seymour

01:00:44.676 --> 01:00:45.586 A:middle
到台上来 Eric

01:00:46.516 --> 01:00:48.596 A:middle
[掌声]

01:00:49.096 --> 01:00:54.156 A:middle
&gt;&gt; 谢谢 Sebastien 我们都知道科技

01:00:54.246 --> 01:00:55.936 A:middle
在人们的生活里扮演着重要的角色

01:00:55.936 --> 01:00:59.696 A:middle
对于残障人士人来说

01:00:59.696 --> 01:01:00.936 A:middle
更是十分的重要

01:01:01.456 --> 01:01:03.126 A:middle
技术在促进他们独立生存

01:01:03.126 --> 01:01:04.456 A:middle
给予他们就业机会 以及赋予平等的权利方面

01:01:04.456 --> 01:01:06.176 A:middle
发挥着不可或缺的作用

01:01:06.176 --> 01:01:08.026 A:middle
Apple 一直遵循着一些关键的原则

01:01:08.026 --> 01:01:09.866 A:middle
来保障辅助功能的实现

01:01:09.866 --> 01:01:12.226 A:middle
首要的就是设备内置的辅助功能

01:01:12.816 --> 01:01:14.066 A:middle
我们的产品应该能让用户

01:01:14.066 --> 01:01:15.926 A:middle
包括健全人和残障人士

01:01:15.926 --> 01:01:17.826 A:middle
都能够开箱即用

01:01:19.276 --> 01:01:20.986 A:middle
辅助功能应该是全面的

01:01:21.366 --> 01:01:23.336 A:middle
应当让用户可以访问

01:01:23.336 --> 01:01:25.836 A:middle
整个平台 以及操作系统的每个地方

01:01:25.836 --> 01:01:27.216 A:middle
以及 App 的每一个角落

01:01:28.006 --> 01:01:30.176 A:middle
也许更重要的是

01:01:30.176 --> 01:01:32.216 A:middle
我们想让用户能够感到惊喜和快乐

01:01:32.216 --> 01:01:34.036 A:middle
不论他们是否健全

01:01:34.136 --> 01:01:35.586 A:middle
所以这不仅仅是

01:01:35.626 --> 01:01:37.426 A:middle
修复辅助功能上的 Bug

01:01:37.466 --> 01:01:39.276 A:middle
这其实要做的是

01:01:39.276 --> 01:01:41.016 A:middle
使用辅助功能的特性

01:01:41.016 --> 01:01:42.366 A:middle
来努力创造一种好的用户体验

01:01:42.366 --> 01:01:43.736 A:middle
这和你们做设计的时候一样

01:01:43.736 --> 01:01:45.386 A:middle
是需要灵感来支撑的

01:01:45.386 --> 01:01:48.366 A:middle
当我们在考虑辅助功能的问题的时候

01:01:49.176 --> 01:01:51.126 A:middle
我们实际上是在探讨

01:01:51.126 --> 01:01:53.886 A:middle
感知能力方面的广泛且连续的整体

01:01:54.646 --> 01:01:57.726 A:middle
包括 听力 视觉 触觉 以及学习能力

01:01:57.836 --> 01:01:59.606 A:middle
在这每个不同的领域中

01:01:59.606 --> 01:02:01.196 A:middle
我们关注的是它们之间的差异

01:02:02.116 --> 01:02:03.796 A:middle
举例来说 对于视觉方面的缺失

01:02:03.836 --> 01:02:05.906 A:middle
我们已经提供了旁白功能

01:02:05.906 --> 01:02:07.846 A:middle
我们为无法看到屏幕的视障人士提供了屏幕阅读器

01:02:07.846 --> 01:02:11.586 A:middle
但是与此同时我们

01:02:11.586 --> 01:02:13.096 A:middle
还有十几个与视觉障碍相关的功能

01:02:13.096 --> 01:02:15.116 A:middle
像是缩放 以及更大字体等等的功能

01:02:15.696 --> 01:02:17.156 A:middle
当我们采用上面说的方法

01:02:17.366 --> 01:02:18.866 A:middle
并把它应用到我们刚说的

01:02:18.866 --> 01:02:20.846 A:middle
感知能力方面的广泛且连续的整体之上时

01:02:20.846 --> 01:02:23.776 A:middle
我们所触及的是会相当多的辅助功能的特性

01:02:23.776 --> 01:02:24.956 A:middle
并且这一点上应着重强调的是

01:02:24.956 --> 01:02:29.006 A:middle
辅助功能是为所有人服务的

01:02:30.456 --> 01:02:32.036 A:middle
也许你们中的大多数人

01:02:32.036 --> 01:02:33.706 A:middle
现在正在至少使用着一个辅助功能

01:02:33.706 --> 01:02:34.666 A:middle
如果现在还没用过

01:02:35.136 --> 01:02:36.786 A:middle
很有可能你最终会用上它的

01:02:37.306 --> 01:02:40.836 A:middle
今年我们引入了

01:02:40.916 --> 01:02:42.076 A:middle
一些新的辅助功能的特性

01:02:42.076 --> 01:02:43.476 A:middle
和一些增强后的功能

01:02:43.476 --> 01:02:44.616 A:middle
今天我想为大家介绍其中的两个

01:02:44.616 --> 01:02:47.466 A:middle
首先是可发现性

01:02:48.026 --> 01:02:49.636 A:middle
本着人人都可以发现的原则

01:02:49.636 --> 01:02:51.116 A:middle
我们希望辅助功能

01:02:51.116 --> 01:02:52.426 A:middle
可以很容易地被人们发现

01:02:52.986 --> 01:02:55.156 A:middle
因此 我们把辅助功能

01:02:55.206 --> 01:02:56.976 A:middle
添加到了 iOS 的 Quick Start 当中

01:02:56.976 --> 01:02:58.646 A:middle
使得开箱即用的体验里

01:02:58.646 --> 01:03:00.886 A:middle
多了辅助功能所带来的便利

01:03:01.686 --> 01:03:04.566 A:middle
并且我们把辅助功能

01:03:04.566 --> 01:03:06.726 A:middle
移动到了设置的顶级目录当中

01:03:07.516 --> 01:03:12.606 A:middle
[掌声]

01:03:13.106 --> 01:03:14.576 A:middle
并且我们把里面的功能进行了重组

01:03:14.576 --> 01:03:15.796 A:middle
使它们可以更容易被发现

01:03:16.236 --> 01:03:17.216 A:middle
我们认为要帮助人们

01:03:17.216 --> 01:03:18.576 A:middle
发现并使用这些强大的功能

01:03:18.576 --> 01:03:19.756 A:middle
其实还有很长的路要走

01:03:19.756 --> 01:03:23.916 A:middle
现在 我们先来看看 Voice Control 吧

01:03:24.026 --> 01:03:25.836 A:middle
在今早的演讲中我们看到了对它的介绍

01:03:26.196 --> 01:03:27.606 A:middle
Voice Control 是

01:03:27.606 --> 01:03:29.556 A:middle
来自 macOS iOS 以及 iPadOS 的

01:03:29.556 --> 01:03:31.476 A:middle
完整的语音体验

01:03:31.476 --> 01:03:33.596 A:middle
我们认为它对

01:03:33.596 --> 01:03:34.856 A:middle
残障人士来说是非常有帮助的

01:03:35.656 --> 01:03:36.596 A:middle
Voice Control 提供着

01:03:36.746 --> 01:03:38.406 A:middle
全面的平台访问

01:03:38.636 --> 01:03:40.556 A:middle
你可以说出名字来打开某项内容

01:03:40.556 --> 01:03:42.266 A:middle
你也可以说出序号来引出某项内容

01:03:42.426 --> 01:03:43.846 A:middle
你甚至可以利用网格

01:03:43.846 --> 01:03:46.306 A:middle
来语音控制屏幕上的某个区域

01:03:46.916 --> 01:03:48.516 A:middle
Voice Control 有着很好的文本编辑功能

01:03:48.516 --> 01:03:50.016 A:middle
我不仅可以用语音来输入文本

01:03:50.276 --> 01:03:51.986 A:middle
我还能用语音来做出选择和更正

01:03:51.986 --> 01:03:54.206 A:middle
只需要用我的声音就能实现这些

01:03:54.926 --> 01:03:56.896 A:middle
它是智能的

01:03:57.296 --> 01:03:59.036 A:middle
所以即使是我在口述文本的时候

01:03:59.166 --> 01:04:00.756 A:middle
它也能有效的听到指令

01:04:00.756 --> 01:04:03.166 A:middle
而不需要让我去区分它们

01:04:03.166 --> 01:04:05.066 A:middle
我只需要和它讲话就可以了

01:04:05.066 --> 01:04:06.646 A:middle
并且利用深度相机

01:04:06.886 --> 01:04:08.926 A:middle
它就我看向别处的时候

01:04:08.926 --> 01:04:09.546 A:middle
他就会忽略掉我的语音

01:04:10.976 --> 01:04:12.516 A:middle
Voice Control 还有很好的

01:04:12.516 --> 01:04:13.506 A:middle
语音手势功能

01:04:13.506 --> 01:04:15.486 A:middle
所以我可以做简单的动作像是轻点或重按

01:04:15.886 --> 01:04:17.906 A:middle
但我也可以预先录制更复杂的手势

01:04:17.906 --> 01:04:19.216 A:middle
比如说我可能会想要在

01:04:19.216 --> 01:04:20.596 A:middle
一个 App 或者游戏中使用这个

01:04:20.596 --> 01:04:21.846 A:middle
旋转的手势

01:04:23.326 --> 01:04:25.196 A:middle
并且 Voice Control

01:04:25.196 --> 01:04:27.486 A:middle
所用的语音识别是完全在设备本地运行的

01:04:28.716 --> 01:04:30.576 A:middle
所以现在 想给大家展示一下

01:04:30.576 --> 01:04:31.596 A:middle
Voice Control 的实际应用

01:04:32.516 --> 01:04:37.786 A:middle
[掌声]

01:04:38.286 --> 01:04:39.476 A:middle
在这个演示中

01:04:39.476 --> 01:04:41.996 A:middle
我要和我的 iPhone 来进行对话

01:04:47.566 --> 01:04:48.446 A:middle
打开信息

01:04:49.016 --> 01:04:55.406 A:middle
嗨 Chris 让我们今晚一起吃晚饭吧

01:04:56.256 --> 01:04:57.976 A:middle
我想吃披萨

01:04:58.086 --> 01:04:59.306 A:middle
Pizza 表情符号

01:05:04.956 --> 01:05:06.286 A:middle
点击发送

01:05:09.516 --> 01:05:10.476 A:middle
撤销

01:05:11.576 --> 01:05:12.486 A:middle
点击发送

01:05:15.016 --> 01:05:16.136 A:middle
[笑声]

01:05:16.136 --> 01:05:17.156 A:middle
撤销

01:05:20.376 --> 01:05:21.436 A:middle
点击发送

01:05:23.516 --> 01:05:25.576 A:middle
[掌声]

01:05:26.076 --> 01:05:31.066 A:middle
打开地图 点击搜索地名或地址

01:05:31.786 --> 01:05:35.366 A:middle
San Pedro Square

01:05:36.826 --> 01:05:37.606 A:middle
显示序号

01:05:39.196 --> 01:05:43.666 A:middle
第 5 个 展示网格

01:05:44.616 --> 01:05:49.516 A:middle
第 15 格 在第 1 个位置放大

01:05:49.716 --> 01:05:50.886 A:middle
重复 4 次

01:05:53.516 --> 01:06:02.546 A:middle
[掌声]

01:06:03.046 --> 01:06:05.916 A:middle
从第 27 个位置往上拉

01:06:05.916 --> 01:06:09.106 A:middle
隐藏网格 点击分享

01:06:09.626 --> 01:06:12.266 A:middle
点击 Chris Adams

01:06:13.026 --> 01:06:18.106 A:middle
这里有很多选择

01:06:18.916 --> 01:06:20.816 A:middle
之后见

01:06:21.476 --> 01:06:22.406 A:middle
Peace 表情符号

01:06:24.286 --> 01:06:26.926 A:middle
啊 看那儿

01:06:27.476 --> 01:06:28.776 A:middle
撤销

01:06:30.076 --> 01:06:30.976 A:middle
Peace 表情符号

01:06:31.706 --> 01:06:32.846 A:middle
点击发送

01:06:35.516 --> 01:06:39.546 A:middle
[笑声]

01:06:40.046 --> 01:06:40.866 A:middle
撤销

01:06:43.016 --> 01:06:43.736 A:middle
点击发送

01:06:46.516 --> 01:06:53.976 A:middle
[掌声]

01:06:54.476 --> 01:06:55.906 A:middle
回到主屏幕 你去睡吧

01:06:56.936 --> 01:06:59.186 A:middle
好了 这就是 Voice Control

01:07:06.046 --> 01:07:07.306 A:middle
现在我们还可以用 Voice Control

01:07:07.306 --> 01:07:09.246 A:middle
来帮助开发者

01:07:09.246 --> 01:07:10.856 A:middle
来测试 App 的辅助功能

01:07:11.036 --> 01:07:12.246 A:middle
我们用你们之前看到的

01:07:12.246 --> 01:07:13.676 A:middle
那个 Travel App 来试验下

01:07:14.406 --> 01:07:17.946 A:middle
醒一醒 打开 Travel

01:07:21.456 --> 01:07:23.006 A:middle
点击 San Francisco

01:07:23.746 --> 01:07:26.526 A:middle
点击 San Francisco

01:07:26.636 --> 01:07:27.666 A:middle
显示名字

01:07:28.956 --> 01:07:33.246 A:middle
好了 这就是问题的所在

01:07:33.576 --> 01:07:35.166 A:middle
当我想要去点击 San Francisco

01:07:35.166 --> 01:07:37.286 A:middle
这个元素的时

01:07:37.286 --> 01:07:38.066 A:middle
但是它没有一个

01:07:38.066 --> 01:07:39.516 A:middle
提供给辅助功能的标签

01:07:39.516 --> 01:07:40.646 A:middle
这是一个很常见的问题

01:07:40.646 --> 01:07:41.906 A:middle
这意味着我无法通过

01:07:41.906 --> 01:07:43.446 A:middle
Voice Control 来和这个标签对话

01:07:43.446 --> 01:07:44.966 A:middle
更糟糕的是

01:07:44.966 --> 01:07:46.516 A:middle
如果我看不到屏幕

01:07:46.516 --> 01:07:48.086 A:middle
并且正利用旁白为我读屏的话

01:07:48.086 --> 01:07:50.056 A:middle
我就完全没有希望了 只能停下脚步了

01:07:50.056 --> 01:07:51.696 A:middle
我将无法使用这个 App 了

01:07:52.046 --> 01:07:55.276 A:middle
幸运的是

01:07:55.326 --> 01:07:56.266 A:middle
这些问题都很容易去解决

01:07:56.266 --> 01:07:57.786 A:middle
下面让我们来聊聊

01:07:57.786 --> 01:07:59.966 A:middle
如何让你的 App 可以更容易地配上辅助功能

01:08:05.596 --> 01:08:07.546 A:middle
辅助功能都是可以工作的

01:08:08.046 --> 01:08:09.056 A:middle
但其中的那些

01:08:09.056 --> 01:08:10.326 A:middle
最具变革性的功能

01:08:10.326 --> 01:08:11.576 A:middle
比如 Voice Control

01:08:11.576 --> 01:08:14.046 A:middle
Switch Control 和旁白功能

01:08:14.046 --> 01:08:14.676 A:middle
它们需要你提供支持

01:08:14.676 --> 01:08:16.345 A:middle
这些是你能够做到的

01:08:16.345 --> 01:08:18.515 A:middle
首先要做的就是我们刚做的

01:08:18.515 --> 01:08:19.265 A:middle
你一定要敢于尝试

01:08:19.395 --> 01:08:21.916 A:middle
在你的 App 上试一试辅助功能

01:08:22.216 --> 01:08:23.426 A:middle
你也许会对已经奏效的这些功能

01:08:23.426 --> 01:08:24.336 A:middle
感到十分的惊讶

01:08:24.406 --> 01:08:25.876 A:middle
但是更重要的是

01:08:25.876 --> 01:08:27.376 A:middle
你将会获得一些见解

01:08:27.376 --> 01:08:30.426 A:middle
了解到你的用户是如何

01:08:30.426 --> 01:08:31.406 A:middle
体验你的 App 的

01:08:31.406 --> 01:08:32.716 A:middle
你很有可能

01:08:32.716 --> 01:08:33.856 A:middle
想要尝试着去做一些改变

01:08:34.725 --> 01:08:37.145 A:middle
所以 下一步就是利用工具

01:08:37.145 --> 01:08:38.716 A:middle
Xcode 为开发人员

01:08:38.716 --> 01:08:40.426 A:middle
提供了强大的内置的辅助功能上的支持

01:08:40.426 --> 01:08:41.636 A:middle
你可以在 Xcode 的

01:08:41.685 --> 01:08:43.845 A:middle
inspector 当中编辑辅助功能的相关属性

01:08:44.036 --> 01:08:45.156 A:middle
并且利用新的 Environment Overrides

01:08:45.156 --> 01:08:47.036 A:middle
你在你 App 的

01:08:47.036 --> 01:08:48.345 A:middle
开发生命周期中

01:08:48.345 --> 01:08:49.456 A:middle
可以方便地预览视觉方面的

01:08:49.456 --> 01:08:52.326 A:middle
辅助功能的运行效果

01:08:52.716 --> 01:08:53.636 A:middle
这真的非常棒

01:08:54.515 --> 01:08:57.786 A:middle
最后要做的就是实现 Accessibility API

01:08:57.786 --> 01:08:59.986 A:middle
这是确保用户体验辅助功能的

01:08:59.986 --> 01:09:01.326 A:middle
最佳方式

01:09:01.326 --> 01:09:02.606 A:middle
也是最基本的方式

01:09:02.966 --> 01:09:04.816 A:middle
做好这些

01:09:04.816 --> 01:09:06.216 A:middle
就像是给你的 App 打开了一扇

01:09:06.506 --> 01:09:08.386 A:middle
欢迎各类人群的大门

01:09:08.526 --> 01:09:09.975 A:middle
前面说的这些

01:09:09.975 --> 01:09:11.316 A:middle
就是如何利用旁白 Switch Control 
以及对话的功能

01:09:11.316 --> 01:09:12.716 A:middle
在你的 App 上

01:09:12.716 --> 01:09:13.456 A:middle
来提供一个更舒适的体验

01:09:14.196 --> 01:09:15.586 A:middle
Accessibility API 可以运行在

01:09:15.586 --> 01:09:17.265 A:middle
全部的平台上

01:09:17.265 --> 01:09:18.796 A:middle
并且它们很容易被实现 他们真的非常强大

01:09:19.326 --> 01:09:20.776 A:middle
因此 即使是在最复杂的

01:09:20.776 --> 01:09:23.765 A:middle
App 和用户体验当中也可以使用它

01:09:24.406 --> 01:09:26.916 A:middle
当然 SwiftUI 中也已经内置了

01:09:26.916 --> 01:09:29.196 A:middle
对辅助功能的良好支持

01:09:29.986 --> 01:09:32.265 A:middle
这就是我们在辅助功能方面的更新

01:09:32.616 --> 01:09:34.416 A:middle
Apple 另一件十分关心的事

01:09:34.416 --> 01:09:35.895 A:middle
就是隐私

01:09:35.996 --> 01:09:37.036 A:middle
下面我把这件事

01:09:37.036 --> 01:09:39.395 A:middle
交给 Katie 来为做进一步讲述

01:09:39.395 --> 01:09:47.046 A:middle
非常感谢 [掌声]

01:09:47.546 --> 01:09:48.456 A:middle
&gt;&gt; 谢谢 Eric

01:09:48.616 --> 01:09:51.046 A:middle
隐私是一个永原不会消失的话题

01:09:51.046 --> 01:09:52.805 A:middle
并且这也是每个人

01:09:52.805 --> 01:09:53.935 A:middle
都需要去注意的事情

01:09:53.935 --> 01:09:56.316 A:middle
它是你从一开始

01:09:56.316 --> 01:09:59.096 A:middle
就必须设计的东西

01:09:59.096 --> 01:10:01.076 A:middle
它决定了你的产品如何工作

01:10:02.086 --> 01:10:03.276 A:middle
在设计新的功能时

01:10:03.276 --> 01:10:05.086 A:middle
可以采取以下几个步骤

01:10:05.086 --> 01:10:08.426 A:middle
来保护隐私

01:10:09.866 --> 01:10:11.366 A:middle
在用户的设备上做处理

01:10:12.096 --> 01:10:14.226 A:middle
只要你能将用户的数据存在设备上

01:10:14.226 --> 01:10:16.136 A:middle
那就该让它存在设备上

01:10:16.946 --> 01:10:19.016 A:middle
这会让你收集

01:10:19.016 --> 01:10:20.586 A:middle
尽可能少的数据

01:10:21.196 --> 01:10:22.996 A:middle
如果你没有数据

01:10:23.446 --> 01:10:25.696 A:middle
它们就不会被滥用或窃取

01:10:26.366 --> 01:10:27.206 A:middle
事先询问用户

01:10:27.416 --> 01:10:32.356 A:middle
一定要询问你的用户来获得许可

01:10:32.536 --> 01:10:34.916 A:middle
并且要告诉他们你将如何使用数据

01:10:35.276 --> 01:10:38.066 A:middle
如果你需要收集数据

01:10:38.116 --> 01:10:39.236 A:middle
要使用随机的标识符

01:10:39.976 --> 01:10:41.466 A:middle
并且把数据的来源信息

01:10:41.686 --> 01:10:43.976 A:middle
从账户缩小到设备

01:10:44.136 --> 01:10:45.506 A:middle
如果可能的话缩小到会话

01:10:46.036 --> 01:10:50.126 A:middle
并且要加密 来保证用户数据的安全

01:10:51.506 --> 01:10:53.266 A:middle
在设计过程中

01:10:53.266 --> 01:10:55.356 A:middle
应用这些原则

01:10:55.356 --> 01:10:58.626 A:middle
将帮助你构建出色的特性和良好的隐私保护

01:10:58.626 --> 01:11:01.676 A:middle
我想从两个方面做介绍

01:11:01.676 --> 01:11:04.026 A:middle
来告诉你们 我们如何帮助你们

01:11:04.026 --> 01:11:06.276 A:middle
更容易地采取上述的这些步骤

01:11:06.456 --> 01:11:08.316 A:middle
第一方面 定位

01:11:10.786 --> 01:11:13.736 A:middle
你去了什么地方可以揭示你生活的很多方面

01:11:14.606 --> 01:11:16.536 A:middle
你住在哪儿 你在哪儿工作

01:11:17.276 --> 01:11:18.576 A:middle
你会去看哪个医生

01:11:18.576 --> 01:11:21.166 A:middle
你去健身房的频率

01:11:21.166 --> 01:11:23.896 A:middle
或者是酒吧的频率

01:11:25.656 --> 01:11:27.356 A:middle
因此 一些用户不愿意

01:11:27.486 --> 01:11:30.866 A:middle
和你还有你的 App 共享位置

01:11:31.846 --> 01:11:33.366 A:middle
因此 他们可能会错过

01:11:33.366 --> 01:11:34.836 A:middle
你的一些关键功能

01:11:35.826 --> 01:11:37.606 A:middle
所以在今年 我们添加了

01:11:37.606 --> 01:11:40.156 A:middle
一个新的选项 单次允许

01:11:41.876 --> 01:11:43.646 A:middle
这将为该会话

01:11:43.646 --> 01:11:45.946 A:middle
提供位置访问

01:11:45.946 --> 01:11:49.516 A:middle
并将在下次再次询问用户

01:11:49.736 --> 01:11:51.986 A:middle
但是现在让我们假设一下

01:11:51.986 --> 01:11:53.546 A:middle
你的 App 被设置成了

01:11:53.546 --> 01:11:54.526 A:middle
总是有权限访问位置信息

01:11:55.456 --> 01:11:57.136 A:middle
但它的运行机制现在变了

01:11:58.506 --> 01:11:59.866 A:middle
首先需要用户选择

01:12:02.586 --> 01:12:05.246 A:middle
之后开发者就可以当 App 在后台运行的时候

01:12:05.246 --> 01:12:06.846 A:middle
请求到地址信息

01:12:07.996 --> 01:12:09.296 A:middle
之后用户将看到一个警告

01:12:09.296 --> 01:12:11.766 A:middle
来让他们知道

01:12:11.766 --> 01:12:16.506 A:middle
你正在后台请求着他们的地址

01:12:16.506 --> 01:12:18.276 A:middle
如果他们选择了始终允许地址被访问

01:12:19.056 --> 01:12:20.446 A:middle
你就可以在用户的移动过程中

01:12:20.776 --> 01:12:22.186 A:middle
从后台获得到地址信息

01:12:22.816 --> 01:12:26.196 A:middle
最后 我们让用户

01:12:26.196 --> 01:12:28.236 A:middle
更清楚地了解

01:12:28.236 --> 01:12:29.576 A:middle
他们的位置是如何被访问的

01:12:30.876 --> 01:12:32.486 A:middle
对于所有具有

01:12:32.486 --> 01:12:34.556 A:middle
后台位置权限的 App

01:12:34.556 --> 01:12:36.356 A:middle
我们会时不时地提醒你的用户

01:12:36.356 --> 01:12:38.606 A:middle
某些 App 正在访问他的位置

01:12:39.516 --> 01:12:47.546 A:middle
[掌声]

01:12:48.046 --> 01:12:48.726 A:middle
通过对权限的这些更改

01:12:48.726 --> 01:12:50.256 A:middle
用户对于把位置

01:12:50.256 --> 01:12:52.456 A:middle
共享给开发者这件事

01:12:52.546 --> 01:12:54.566 A:middle
将会觉得更加的舒适和安心

01:12:55.726 --> 01:12:57.766 A:middle
接下来 我们来聊聊登录这件事

01:13:01.886 --> 01:13:03.416 A:middle
实现过这样的按钮

01:13:03.416 --> 01:13:05.496 A:middle
这些按钮的确很方便

01:13:05.496 --> 01:13:07.186 A:middle
但是这其实是以牺牲

01:13:07.186 --> 01:13:09.326 A:middle
用户的隐私为代价的

01:13:10.586 --> 01:13:11.826 A:middle
它们还会把一些

01:13:11.826 --> 01:13:14.116 A:middle
你不想披露给外界的公司的信息

01:13:14.186 --> 01:13:17.116 A:middle
给提供出去

01:13:18.416 --> 01:13:20.586 A:middle
所以我们想提供给大家一个更好的选择

01:13:20.586 --> 01:13:23.976 A:middle
那就是 Sign in with Apple

01:13:24.516 --> 01:13:31.026 A:middle
[掌声]

01:13:31.526 --> 01:13:33.606 A:middle
它提供了快速 简单的登录方式

01:13:33.816 --> 01:13:35.076 A:middle
并且不会进行任何的追踪

01:13:35.996 --> 01:13:37.936 A:middle
这不仅关系到我们用户的隐私

01:13:37.936 --> 01:13:41.306 A:middle
也关系到你的公司的隐私

01:13:42.456 --> 01:13:44.036 A:middle
了解用户怎么使用你们的 App

01:13:44.036 --> 01:13:45.706 A:middle
不是我们该做的事情

01:13:46.676 --> 01:13:49.806 A:middle
所以 Apple 根本不会进行追踪

01:13:50.516 --> 01:13:56.546 A:middle
[掌声]

01:13:57.046 --> 01:13:58.546 A:middle
只需要一个简单的 API

01:13:58.546 --> 01:14:00.776 A:middle
就可以添加 Sign in with Apple 的按钮

01:14:01.916 --> 01:14:03.986 A:middle
用户可以点击一下

01:14:04.016 --> 01:14:05.676 A:middle
再使用下面容 ID

01:14:06.026 --> 01:14:08.806 A:middle
就能创建账号并登录

01:14:09.036 --> 01:14:13.093 A:middle
为什么这对你们所有人都有好处呢

01:14:13.486 --> 01:14:15.836 A:middle
第一点是更多的信任和更少的摩擦

01:14:15.966 --> 01:14:18.616 A:middle
将为你带来更多的用户

01:14:19.776 --> 01:14:21.246 A:middle
Sign in with Apple

01:14:21.246 --> 01:14:24.366 A:middle
可以缩短用户考虑你的 App

01:14:24.606 --> 01:14:27.686 A:middle
和真正接受你的 App

01:14:27.686 --> 01:14:29.466 A:middle
这两者之间的距离

01:14:31.396 --> 01:14:33.736 A:middle
第二点是核实电子邮箱的地址

01:14:34.836 --> 01:14:36.976 A:middle
Apple 已经为你完成了

01:14:37.436 --> 01:14:40.176 A:middle
验证电子邮件地址的工作

01:14:41.516 --> 01:14:47.596 A:middle
[掌声]

01:14:48.096 --> 01:14:49.046 A:middle
我们还通过提供

01:14:49.046 --> 01:14:51.686 A:middle
私人电子邮件中继服务

01:14:51.796 --> 01:14:54.096 A:middle
消除了用户提供

01:14:54.196 --> 01:14:55.596 A:middle
虚构电子邮件地址的动机

01:14:55.676 --> 01:14:59.436 A:middle
因此 即使用户在

01:14:59.606 --> 01:15:01.406 A:middle
设置账户时选择

01:15:01.406 --> 01:15:03.006 A:middle
隐藏他们的电子邮件地址

01:15:03.006 --> 01:15:04.626 A:middle
你的电子邮件也会送达他们的验证账户

01:15:04.626 --> 01:15:08.346 A:middle
就是他们用来完成验证的电子邮箱的收件箱

01:15:08.836 --> 01:15:12.036 A:middle
另外还有安全方面的问题

01:15:12.036 --> 01:15:14.546 A:middle
有了 Sign in with Apple

01:15:14.546 --> 01:15:15.746 A:middle
你不需要处理存储密码或密码重置问题

01:15:15.746 --> 01:15:19.286 A:middle
或密码重置问题

01:15:19.636 --> 01:15:21.796 A:middle
并且 每一个账户

01:15:21.796 --> 01:15:24.756 A:middle
都会受到两步验证的保护

01:15:27.516 --> 01:15:31.546 A:middle
[掌声]

01:15:32.046 --> 01:15:34.146 A:middle
这真的可以提高你的安全性

01:15:35.536 --> 01:15:36.886 A:middle
们还在反欺诈方面

01:15:36.976 --> 01:15:42.006 A:middle
整合了一些有趣的创新

01:15:42.206 --> 01:15:44.096 A:middle
我们都知道 开发者需要与

01:15:44.096 --> 01:15:46.286 A:middle
一些真正的用户在一起

01:15:46.346 --> 01:15:48.296 A:middle
有时你会得到一些不那么真实的用户

01:15:49.676 --> 01:15:52.016 A:middle
没有人想要机器人用户或者是批量注册的账户

01:15:52.716 --> 01:15:54.326 A:middle
我们努力把它们

01:15:54.396 --> 01:15:55.706 A:middle
从我们的系统中过滤出去

01:15:56.106 --> 01:15:59.066 A:middle
我们也想帮各位开发者做同样的事情

01:15:59.826 --> 01:16:03.136 A:middle
所以 我们构建了一个

01:16:03.216 --> 01:16:04.166 A:middle
我们称之为真实用户指示器的机制

01:16:04.166 --> 01:16:06.516 A:middle
它可以告诉你

01:16:06.516 --> 01:16:09.676 A:middle
一个新的账户是否是真实的用户

01:16:09.676 --> 01:16:12.006 A:middle
或者你也可以做一些额外的验证

01:16:13.286 --> 01:16:15.276 A:middle
所以它是如何运作的呢

01:16:16.396 --> 01:16:17.926 A:middle
首先 整个系统

01:16:17.926 --> 01:16:19.686 A:middle
从头开始构建

01:16:19.686 --> 01:16:21.396 A:middle
以此来维护用户的隐私

01:16:21.396 --> 01:16:24.326 A:middle
它使用了在设备本地运行的智能方法

01:16:24.566 --> 01:16:26.786 A:middle
来确定原始设备的行为

01:16:26.786 --> 01:16:29.973 A:middle
是否是正常的

01:16:30.686 --> 01:16:32.206 A:middle
设备上生成的值

01:16:32.306 --> 01:16:35.026 A:middle
是不会给 Apple 共享任何细节的

01:16:36.126 --> 01:16:38.156 A:middle
这个过程中将结合选择账户信息

01:16:38.156 --> 01:16:39.656 A:middle
之后归并成一个单一的值

01:16:39.656 --> 01:16:41.646 A:middle
之后在账户建立的时候

01:16:42.166 --> 01:16:48.236 A:middle
分享到你的 App 上

01:16:48.236 --> 01:16:49.696 A:middle
再之后 你可以根据你接收到的值

01:16:49.806 --> 01:16:50.866 A:middle
你就可以得到一个信息让你确信

01:16:50.866 --> 01:16:52.596 A:middle
你的用户是一个真实用户

01:16:52.596 --> 01:16:55.166 A:middle
或者根据得到信息

01:16:55.166 --> 01:16:56.826 A:middle
让你觉得你需要再重新判断

01:17:01.916 --> 01:17:03.226 A:middle
强大的跨平台支持

01:17:03.996 --> 01:17:05.796 A:middle
它可以在 iOS iPadOS

01:17:05.966 --> 01:17:12.016 A:middle
macOS watchOS tvOS 甚至是

01:17:12.016 --> 01:17:12.956 A:middle
在 web 当中使用

01:17:14.106 --> 01:17:16.196 A:middle
这样一来 它也可以适用于 Android

01:17:16.196 --> 01:17:17.306 A:middle
和 Windows 设备

01:17:18.516 --> 01:17:26.926 A:middle
[掌声]

01:17:27.426 --> 01:17:31.276 A:middle
好了 这是一个极其高速和简单的方法

01:17:31.276 --> 01:17:33.836 A:middle
可以帮你来吸引新用户

01:17:33.986 --> 01:17:37.406 A:middle
两步验证以及内置的反欺诈

01:17:38.286 --> 01:17:39.686 A:middle
你可以在任何地方实现它

01:17:39.846 --> 01:17:42.266 A:middle
而且最重要的是

01:17:42.936 --> 01:17:45.066 A:middle
它尊重每个人的隐私

01:17:46.286 --> 01:17:48.506 A:middle
所以这是一个你和你的用户

01:17:48.506 --> 01:17:50.706 A:middle
都可以信任的解决方案

01:17:56.046 --> 01:17:57.076 A:middle
已经有许多的

01:17:57.076 --> 01:17:59.016 A:middle
开发人员和我们合作

01:17:59.016 --> 01:18:02.096 A:middle
我们很高兴看到更多的人采用我们的方案

01:18:02.096 --> 01:18:06.346 A:middle
这就是 Sign in with Apple

01:18:07.516 --> 01:18:15.696 A:middle
[掌声]

01:18:16.196 --> 01:18:18.106 A:middle
就像我在前面提到的

01:18:18.106 --> 01:18:20.046 A:middle
一个很好的保护用户隐私的办法

01:18:20.046 --> 01:18:22.376 A:middle
就是仅在设备上使用用户的数据

01:18:22.376 --> 01:18:24.886 A:middle
我们创造了一些很伟大的技术

01:18:24.886 --> 01:18:28.326 A:middle
来实现这一点

01:18:28.486 --> 01:18:30.136 A:middle
为了给大家介绍更多关于

01:18:30.136 --> 01:18:31.816 A:middle
机器学习方面的内容

01:18:31.816 --> 01:18:32.676 A:middle
下面有请 Bill 来讲解

01:18:34.516 --> 01:18:36.546 A:middle
[掌声]

01:18:37.046 --> 01:18:37.516 A:middle
&gt;&gt; 谢谢 Katie

01:18:38.516 --> 01:18:40.906 A:middle
[掌声]

01:18:41.406 --> 01:18:42.696 A:middle
机器学习是

01:18:42.696 --> 01:18:44.356 A:middle
App 体验中的一项

01:18:44.356 --> 01:18:46.316 A:middle
关键技术

01:18:46.746 --> 01:18:48.846 A:middle
Apple 使用基于设备的

01:18:48.946 --> 01:18:50.086 A:middle
机器学习来增强各项功能

01:18:50.086 --> 01:18:52.046 A:middle
包括神奇的相机功能

01:18:52.236 --> 01:18:55.526 A:middle
照片功能以及 ARKit 等等

01:18:55.526 --> 01:18:57.756 A:middle
我们之所以能做到这一点

01:18:57.756 --> 01:18:58.806 A:middle
是源自于我们尖端的硅芯片

01:19:01.926 --> 01:19:04.746 A:middle
专用的 ML 处理器

01:19:04.746 --> 01:19:06.686 A:middle
像是神经引擎

01:19:06.686 --> 01:19:09.196 A:middle
我们可以提供令人难以置信的实时体验

01:19:10.576 --> 01:19:12.276 A:middle
我们对神经引擎进行了优化

01:19:12.366 --> 01:19:13.856 A:middle
以便加速对卷积神经网络的

01:19:13.856 --> 01:19:14.846 A:middle
多精度支持

01:19:14.846 --> 01:19:16.766 A:middle
并且加速

01:19:16.916 --> 01:19:18.036 A:middle
智能计算系统

01:19:19.456 --> 01:19:20.576 A:middle
这意味着什么呢

01:19:21.106 --> 01:19:24.196 A:middle
这意味着它绝对是运算方面的猛兽

01:19:24.876 --> 01:19:27.496 A:middle
事实上 神经引擎

01:19:27.646 --> 01:19:29.646 A:middle
可以进行每秒

01:19:29.696 --> 01:19:31.536 A:middle
5 万亿次的运算

01:19:31.926 --> 01:19:33.346 A:middle
更重要的是

01:19:33.346 --> 01:19:35.106 A:middle
我们在此基础上构建了机器学习的 API

01:19:35.106 --> 01:19:37.976 A:middle
这样 你的 App 就可以充分利用

01:19:38.096 --> 01:19:40.786 A:middle
这些性能了

01:19:41.796 --> 01:19:43.286 A:middle
我们有了一些很棒的更新

01:19:43.466 --> 01:19:45.536 A:middle
以我们开箱即用的 API 为例

01:19:45.536 --> 01:19:47.746 A:middle
我们在上面更新了像是视觉 自然语言

01:19:47.746 --> 01:19:49.156 A:middle
以及语音等多个方面

01:19:50.266 --> 01:19:51.886 A:middle
现在 这些 API 已经提供了丰富的功能

01:19:51.946 --> 01:19:53.766 A:middle
像是人脸检测

01:19:54.156 --> 01:19:56.696 A:middle
目标跟踪 以及已命名实体识别

01:19:57.316 --> 01:19:59.846 A:middle
今年 我们增加了更多功能

01:20:01.446 --> 01:20:03.436 A:middle
首先是图像显著性

01:20:03.436 --> 01:20:05.216 A:middle
它为开发者提供了一个

01:20:05.216 --> 01:20:06.546 A:middle
图像的热图

01:20:06.876 --> 01:20:08.496 A:middle
突出显示重要的对象

01:20:08.496 --> 01:20:11.316 A:middle
以及用户可能集中他们的注意力的地方

01:20:12.416 --> 01:20:14.126 A:middle
我们现在在照片中使用这项技术

01:20:14.126 --> 01:20:16.016 A:middle
来进行智能图片裁剪

01:20:16.016 --> 01:20:17.796 A:middle
并作为内容管理的一部分

01:20:18.486 --> 01:20:20.776 A:middle
我们还发布了文本识别功能

01:20:20.776 --> 01:20:22.606 A:middle
你可以从海报 标识

01:20:22.606 --> 01:20:25.976 A:middle
和文件的图片中搜索文本

01:20:26.516 --> 01:20:33.546 A:middle
[掌声]

01:20:34.046 --> 01:20:35.456 A:middle
其中还利用了我们在

01:20:35.456 --> 01:20:37.706 A:middle
备注当中提供的扫描文稿功能

01:20:38.686 --> 01:20:40.466 A:middle
在自然语言方面

01:20:40.466 --> 01:20:42.156 A:middle
你可以利用 Word embeddings

01:20:42.516 --> 01:20:44.186 A:middle
来帮助你识别具有

01:20:44.296 --> 01:20:46.246 A:middle
相似含义的单词和句子

01:20:47.106 --> 01:20:49.106 A:middle
我们如今在照片搜索中

01:20:49.176 --> 01:20:50.646 A:middle
使用了这项技术

01:20:50.646 --> 01:20:52.326 A:middle
比如说你搜了一个不确定词汇 音乐家

01:20:52.736 --> 01:20:54.386 A:middle
我们可以把其他的相似概念

01:20:54.386 --> 01:20:55.876 A:middle
比如艺人或歌手也搜出来

01:20:57.386 --> 01:20:59.826 A:middle
今年 我们的 Speech API

01:20:59.826 --> 01:21:02.246 A:middle
已经可以在

01:21:02.246 --> 01:21:04.916 A:middle
iPhone iPad 和 Mac 上运行了

01:21:04.986 --> 01:21:06.686 A:middle
并支持 10 种语言

01:21:07.516 --> 01:21:12.546 A:middle
[掌声]

01:21:13.046 --> 01:21:13.946 A:middle
并且利用像是语音显著性功能

01:21:13.986 --> 01:21:15.656 A:middle
就可以理解

01:21:15.656 --> 01:21:19.346 A:middle
语音 音高 以及语言中的抑扬顿挫了

01:21:21.086 --> 01:21:22.206 A:middle
现在 对于那些

01:21:22.206 --> 01:21:23.716 A:middle
想深入使用机器学习的人

01:21:24.266 --> 01:21:26.346 A:middle
你可以使用 Core ML

01:21:26.346 --> 01:21:28.646 A:middle
这是我们设计的在设备上

01:21:28.646 --> 01:21:30.316 A:middle
运行机器学习模型的技术

01:21:30.416 --> 01:21:32.746 A:middle
它具有超高的性能和私密性

01:21:34.266 --> 01:21:36.146 A:middle
现在 Core ML 为许多

01:21:36.146 --> 01:21:37.176 A:middle
机器学习模型提供了强大的支持

01:21:37.176 --> 01:21:39.176 A:middle
它可以支持神经网络

01:21:39.176 --> 01:21:40.866 A:middle
Boosted trees 等模型

01:21:41.836 --> 01:21:42.726 A:middle
但众所周知

01:21:42.726 --> 01:21:45.116 A:middle
机器学习领域正在不断发展

01:21:45.466 --> 01:21:46.756 A:middle
所以 今年我们增加了

01:21:46.756 --> 01:21:48.586 A:middle
比以往更多的神经层类型

01:21:48.586 --> 01:21:50.536 A:middle
以此来支持最先进的

01:21:50.536 --> 01:21:52.136 A:middle
神经网络

01:21:52.976 --> 01:21:55.066 A:middle
事实上 Core ML 现在支持

01:21:55.066 --> 01:21:57.676 A:middle
超过 100 种模型的神经层的类型

01:21:59.006 --> 01:22:00.216 A:middle
这使你能够

01:22:00.216 --> 01:22:01.906 A:middle
在 Apple 设备上运行

01:22:01.906 --> 01:22:03.906 A:middle
一些最先进的机器学习模型

01:22:04.916 --> 01:22:07.526 A:middle
像 ELMO 或 WaveNet 这样的模型

01:22:07.526 --> 01:22:08.886 A:middle
或者像 BERT 这样

01:22:08.886 --> 01:22:11.096 A:middle
最近才发布的模型

01:22:11.096 --> 01:22:12.496 A:middle
为你的 App 实现突破性的

01:22:12.536 --> 01:22:14.236 A:middle
自然语言处理

01:22:16.226 --> 01:22:18.126 A:middle
现在 在 App 中运行这样的模型

01:22:18.126 --> 01:22:20.246 A:middle
只是问题的一部分

01:22:21.166 --> 01:22:22.106 A:middle
有时 你可能希望

01:22:22.106 --> 01:22:23.656 A:middle
基于用户数据来更新设备上

01:22:23.656 --> 01:22:26.776 A:middle
的 App 里的模型

01:22:27.876 --> 01:22:29.056 A:middle
我们现在就在为面容 ID 这样的功能

01:22:29.056 --> 01:22:31.156 A:middle
来做这样的事情

01:22:31.156 --> 01:22:33.286 A:middle
用户的外观可能会随着时间的推移而变化

01:22:33.906 --> 01:22:35.606 A:middle
他们会换发型 戴帽子

01:22:36.436 --> 01:22:37.996 A:middle
或者像是 Siri 表盘 这样的功能

01:22:37.996 --> 01:22:40.096 A:middle
它的推荐集

01:22:40.096 --> 01:22:41.706 A:middle
会不断地改变

01:22:41.706 --> 01:22:42.956 A:middle
来为给每个用户提供

01:22:42.956 --> 01:22:45.006 A:middle
个性化的体验

01:22:45.006 --> 01:22:48.096 A:middle
为了实现这些体验

01:22:48.096 --> 01:22:49.726 A:middle
我们使用了设备上的个性化信息

01:22:50.426 --> 01:22:51.826 A:middle
今年 我们把这一功能

01:22:51.826 --> 01:22:53.766 A:middle
也引入到了 Core ML 当中

01:22:55.466 --> 01:22:56.666 A:middle
这意味着你可以

01:22:56.666 --> 01:22:59.156 A:middle
使用来自单个用户的数据

01:22:59.156 --> 01:23:01.046 A:middle
更新 App 中的 Core ML 模型

01:23:02.106 --> 01:23:07.716 A:middle
这创造 [掌声]

01:23:08.216 --> 01:23:09.736 A:middle
这为用户创造了

01:23:09.786 --> 01:23:11.796 A:middle
一个更新的个性化模型

01:23:12.786 --> 01:23:14.576 A:middle
通过模型的个性化

01:23:14.576 --> 01:23:16.196 A:middle
你的 App 现在可以在

01:23:16.196 --> 01:23:17.586 A:middle
不损害用户隐私的情况下

01:23:17.686 --> 01:23:19.086 A:middle
在后台更新模型

01:23:20.886 --> 01:23:22.206 A:middle
Core ML 为机器学习模型

01:23:22.206 --> 01:23:23.976 A:middle
提供了最先进的平台

01:23:23.976 --> 01:23:25.836 A:middle
用 Create ML

01:23:25.836 --> 01:23:27.386 A:middle
构建 Core ML 模型

01:23:27.386 --> 01:23:30.256 A:middle
从未像现在这样容易

01:23:30.256 --> 01:23:31.956 A:middle
我们的框架旨在帮助所有开发者

01:23:31.956 --> 01:23:35.156 A:middle
只用几行代码就可以构建模型

01:23:36.086 --> 01:23:36.976 A:middle
今年 我们正在

01:23:36.976 --> 01:23:38.506 A:middle
进一步 开发 Create ML

01:23:39.036 --> 01:23:41.026 A:middle
它现在是一个 macOS 的 App 了

01:23:41.026 --> 01:23:42.416 A:middle
可以让你无需敲一行代码

01:23:42.416 --> 01:23:42.926 A:middle
就能从你的 Mac 上构建模型

01:23:45.516 --> 01:23:50.586 A:middle
[掌声]

01:23:51.086 --> 01:23:51.956 A:middle
你可以从许多不同的模型模板中

01:23:51.956 --> 01:23:54.196 A:middle
选择适合你的数据的模型

01:23:54.456 --> 01:23:55.936 A:middle
你可以使用不同的数据集

01:23:55.936 --> 01:23:57.556 A:middle
构建多个模型

01:23:57.556 --> 01:24:00.236 A:middle
并为每个模型定义参数

01:24:00.566 --> 01:24:03.126 A:middle
你可以在模型训练当中得到实时反馈

01:24:04.116 --> 01:24:06.046 A:middle
Create ML 支持图像分类

01:24:06.046 --> 01:24:07.756 A:middle
或文本分析等任务

01:24:07.756 --> 01:24:09.846 A:middle
的迁移学习

01:24:10.496 --> 01:24:12.056 A:middle
这将加快模型的训练

01:24:12.056 --> 01:24:13.646 A:middle
因为你只需要非常小的数据集

01:24:13.646 --> 01:24:15.506 A:middle
而且可以利用 Apple

01:24:15.506 --> 01:24:17.296 A:middle
优化过的经过大量预训练的模型

01:24:18.816 --> 01:24:21.916 A:middle
你可以对模型进行实验和预览

01:24:22.476 --> 01:24:23.626 A:middle
例如 你可以通过在 Mac 上

01:24:23.626 --> 01:24:25.376 A:middle
串流地使用

01:24:25.376 --> 01:24:26.976 A:middle
iPhone 的摄像头

01:24:27.056 --> 01:24:29.826 A:middle
来得到图像的预测结果

01:24:30.116 --> 01:24:31.786 A:middle
或者你可以使用 Mac 上的麦克风

01:24:31.786 --> 01:24:34.216 A:middle
来测试你的声音的分类模型

01:24:35.646 --> 01:24:37.486 A:middle
这是一大堆新功能

01:24:37.486 --> 01:24:39.166 A:middle
我们非常兴奋地想要看看

01:24:39.166 --> 01:24:40.846 A:middle
你们会用这些了不起的新的机器学习的能力

01:24:40.846 --> 01:24:42.676 A:middle
去做些什么

01:24:43.546 --> 01:24:45.046 A:middle
事实上 我们邀请了

01:24:45.046 --> 01:24:46.426 A:middle
一些开发人员来尝试所有的新东西

01:24:46.426 --> 01:24:47.776 A:middle
我们已经看到了一些

01:24:47.776 --> 01:24:49.426 A:middle
令人惊喜的结果

01:24:50.256 --> 01:24:53.686 A:middle
其中有一个结果特别不错

01:24:53.686 --> 01:24:55.096 A:middle
我们决定要和大家来分享

01:24:55.556 --> 01:24:57.386 A:middle
欢迎来自 Lumen Digital 的 Ben Harroway

01:24:57.616 --> 01:24:59.366 A:middle
给大家预览

01:24:59.366 --> 01:25:01.706 A:middle
他的 NoisyBook 这款新 App

01:25:02.516 --> 01:25:06.686 A:middle
[掌声]

01:25:07.186 --> 01:25:07.746 A:middle
&gt;&gt; 谢谢 Bill

01:25:08.296 --> 01:25:10.026 A:middle
大家好 我是来自 Lumen Digital 的 Ben

01:25:10.026 --> 01:25:11.586 A:middle
我正在开发一个全新的 App

01:25:11.586 --> 01:25:14.286 A:middle
NoisyBook

01:25:18.156 --> 01:25:21.116 A:middle
让我先给你们讲个故事

01:25:21.306 --> 01:25:24.856 A:middle
很久很久以前 在一片美丽的草地上

01:25:24.856 --> 01:25:27.536 A:middle
住着一个叫 Jack 的男孩

01:25:27.946 --> 01:25:31.576 A:middle
和他的奶牛 Daisy

01:25:31.756 --> 01:25:35.046 A:middle
Daisy [哞 牛的叫声]

01:25:35.046 --> 01:25:37.006 A:middle
一个神秘的人给了他们一些魔豆

01:25:37.006 --> 01:25:39.116 A:middle
这些魔豆长成了一根巨大的豆茎

01:25:39.116 --> 01:25:41.796 A:middle
高高地长到了云里面

01:25:44.016 --> 01:25:45.286 A:middle
[神秘的音乐声]

01:25:45.286 --> 01:25:47.266 A:middle
好吧 我想每个人都知道这个故事

01:25:47.266 --> 01:25:49.116 A:middle
让我们尝试一些真正不一样的东西吧

01:25:50.306 --> 01:25:53.086 A:middle
突然 一只爆炸的鸡

01:25:55.126 --> 01:25:56.946 A:middle
和它的朋友金色的老虎

01:25:56.946 --> 01:26:00.516 A:middle
[吼 老虎的咆哮声] 跳进了它们的

01:26:00.516 --> 01:26:04.406 A:middle
直升飞机里 [螺旋桨的嗡嗡声] 

01:26:04.406 --> 01:26:06.976 A:middle
飞进了森林里

01:26:07.016 --> 01:26:08.046 A:middle
[蟋蟀和鸟鸣声]

01:26:08.046 --> 01:26:09.376 A:middle
接着 你猜怎么着

01:26:09.886 --> 01:26:12.976 A:middle
它们都过上了幸福的生活

01:26:13.016 --> 01:26:14.193 A:middle
[音乐] &gt;&gt; 耶

01:26:15.086 --> 01:26:16.516 A:middle
&gt;&gt; 你能发出你在故事中

01:26:16.516 --> 01:26:19.056 A:middle
听到的动物的声音吗

01:26:19.146 --> 01:26:20.136 A:middle
&gt;&gt; 好了 我们玩的很开心

01:26:20.326 --> 01:26:22.446 A:middle
现在 NoisyBook 想让我们

01:26:22.446 --> 01:26:23.666 A:middle
重复一些我们在故事中

01:26:23.666 --> 01:26:25.336 A:middle
听到的动物的声音

01:26:25.866 --> 01:26:27.416 A:middle
我想我们在这个故事中

01:26:27.466 --> 01:26:28.536 A:middle
听到了一头牛 让我们试试这个吧

01:26:29.566 --> 01:26:32.336 A:middle
哞 牛出现了

01:26:32.726 --> 01:26:34.076 A:middle
我真不敢相信我站在这里

01:26:34.076 --> 01:26:35.876 A:middle
在这么多人面前

01:26:35.876 --> 01:26:38.306 A:middle
发出动物的叫声

01:26:39.126 --> 01:26:41.016 A:middle
我真是疯了 但令人惊讶的是

01:26:41.206 --> 01:26:43.056 A:middle
这个 App 使用了

01:26:43.056 --> 01:26:45.336 A:middle
一个声音分类模型

01:26:45.336 --> 01:26:46.636 A:middle
来识别声音并且认出了这是牛的声音

01:26:48.326 --> 01:26:49.656 A:middle
你也许还注意到了

01:26:50.036 --> 01:26:51.526 A:middle
NoisyBook 既能够

01:26:51.566 --> 01:26:53.556 A:middle
处理传统的故事

01:26:53.686 --> 01:26:56.396 A:middle
还能处理我们想象的故事

01:26:56.766 --> 01:26:57.716 A:middle
这其实超级的强大

01:26:58.516 --> 01:27:00.026 A:middle
多亏了 iOS 13 和 Create ML 中的

01:27:00.026 --> 01:27:02.906 A:middle
语音 声音以及 Core ML 的新功能

01:27:02.906 --> 01:27:06.516 A:middle
这一切都完全

01:27:06.516 --> 01:27:08.766 A:middle
是在设备上发生并运行的

01:27:09.766 --> 01:27:11.086 A:middle
这一切都是实时的

01:27:11.416 --> 01:27:12.306 A:middle
它运行在一个

01:27:12.306 --> 01:27:13.706 A:middle
自然语言的模型中

01:27:13.866 --> 01:27:16.206 A:middle
我已经训练了九万多行文本

01:27:17.146 --> 01:27:19.886 A:middle
多亏了这些功能

01:27:20.506 --> 01:27:21.716 A:middle
我可以把一个我近两年来

01:27:21.716 --> 01:27:22.866 A:middle
苦苦思索地想法

01:27:22.866 --> 01:27:24.666 A:middle
在短短几天内

01:27:24.666 --> 01:27:26.146 A:middle
就把其中的一些

01:27:26.146 --> 01:27:27.936 A:middle
神奇的新功能给实现出来

01:27:29.136 --> 01:27:30.696 A:middle
我为它感到非常自豪

01:27:30.696 --> 01:27:31.896 A:middle
在今年晚些时候

01:27:31.896 --> 01:27:33.256 A:middle
在 App Store 上线以后

01:27:33.256 --> 01:27:35.706 A:middle
我真心希望你们记得去看看它

01:27:35.706 --> 01:27:43.686 A:middle
谢谢 [掌声]

01:27:44.186 --> 01:27:44.636 A:middle
&gt;&gt; 谢谢 Ben

01:27:45.366 --> 01:27:46.596 A:middle
这真的非常酷

01:27:46.596 --> 01:27:49.493 A:middle
我想我的孩子们会喜欢的

01:27:50.256 --> 01:27:52.266 A:middle
现在 Apple 最大的机器学习应用之一

01:27:52.266 --> 01:27:54.826 A:middle
是 Siri

01:27:55.556 --> 01:27:57.916 A:middle
Siri 是目前为止

01:27:57.916 --> 01:27:59.586 A:middle
世界上最受欢迎的智能助手

01:27:59.976 --> 01:28:02.176 A:middle
每月有超过

01:28:02.176 --> 01:28:05.156 A:middle
5 亿个活跃设备

01:28:05.156 --> 01:28:06.666 A:middle
发出超过 150 亿次请求

01:28:07.286 --> 01:28:09.176 A:middle
这些数字令人震惊

01:28:09.766 --> 01:28:12.686 A:middle
Siri 适用于所有 Apple 设备

01:28:13.396 --> 01:28:15.226 A:middle
有了 Siri 你的用户可以用

01:28:15.226 --> 01:28:17.596 A:middle
新的方式与你的 App 互动

01:28:18.166 --> 01:28:19.566 A:middle
走在路上 佩戴着 AirPods

01:28:20.266 --> 01:28:22.296 A:middle
手里不拿着设备的站在房间的另一头

01:28:22.626 --> 01:28:24.396 A:middle
甚至是在车里

01:28:25.046 --> 01:28:27.066 A:middle
现在 成千上万的 App

01:28:27.116 --> 01:28:30.416 A:middle
通过 Siri 的快捷指令和 Siri 集成在一起

01:28:31.466 --> 01:28:33.196 A:middle
我们创建了 Siri 快捷指令

01:28:33.356 --> 01:28:35.136 A:middle
让你可以用很少的工作量

01:28:35.136 --> 01:28:37.196 A:middle
以一种用户可发现的方式

01:28:37.666 --> 01:28:39.746 A:middle
展示你的 App 中

01:28:39.746 --> 01:28:41.936 A:middle
已有的功能

01:28:43.026 --> 01:28:44.186 A:middle
你可以使用 添加至 Siri 按钮

01:28:44.226 --> 01:28:46.016 A:middle
来让你的快捷指令

01:28:46.106 --> 01:28:48.016 A:middle
可以被用户发现

01:28:48.016 --> 01:28:50.676 A:middle
并且教用户如何利用声音来使用你的 App

01:28:51.766 --> 01:28:52.936 A:middle
这很重要

01:28:52.936 --> 01:28:54.436 A:middle
因为语音功能

01:28:54.436 --> 01:28:55.926 A:middle
很难被用户发现

01:28:56.906 --> 01:28:58.396 A:middle
我们简化了设置

01:28:58.396 --> 01:29:00.216 A:middle
使用户不再需要

01:29:00.216 --> 01:29:01.326 A:middle
录入进去某个短语

01:29:01.326 --> 01:29:03.726 A:middle
你给出一个建议的短语

01:29:03.726 --> 01:29:05.036 A:middle
他们轻轻一点就把它加进去了

01:29:06.516 --> 01:29:11.556 A:middle
[掌声]

01:29:12.056 --> 01:29:12.906 A:middle
今年我们最大的要求

01:29:12.906 --> 01:29:14.236 A:middle
是在快捷指令中

01:29:14.236 --> 01:29:16.016 A:middle
支持参数配置

01:29:16.586 --> 01:29:20.566 A:middle
所以我们让快捷指令具备了

01:29:20.916 --> 01:29:22.906 A:middle
对话的能力 这就可以让你的用户

01:29:22.966 --> 01:29:24.596 A:middle
通过回答 Siri 中的问题

01:29:24.966 --> 01:29:26.766 A:middle
来与你的 App 互动

01:29:27.606 --> 01:29:28.816 A:middle
举例来说 如果我正在

01:29:28.816 --> 01:29:29.986 A:middle
选择做个什么菜 我可以运行

01:29:29.986 --> 01:29:31.936 A:middle
一个 Pana 的快捷指令 Pana 是我的食谱 App

01:29:31.936 --> 01:29:34.296 A:middle
之后看一下我所有的最喜欢吃的菜的列表

01:29:34.946 --> 01:29:36.476 A:middle
当我从列表中选完后

01:29:36.476 --> 01:29:38.746 A:middle
它会打开具体的食谱并且开始播放

01:29:39.386 --> 01:29:42.306 A:middle
今年 快捷指令 App

01:29:42.306 --> 01:29:45.376 A:middle
被内建进了 iOS 和 iPadOS 中

01:29:46.326 --> 01:29:47.896 A:middle
这意味着每个用户

01:29:47.896 --> 01:29:49.466 A:middle
都有机会去尝试它

01:29:49.466 --> 01:29:52.566 A:middle
这款 App 内现在也汇集了

01:29:52.566 --> 01:29:54.446 A:middle
你的 App 提供的快捷指令

01:29:55.816 --> 01:29:57.906 A:middle
根据各方的需求

01:29:57.906 --> 01:29:59.976 A:middle
我们现在正在在里面加入自动化的支持

01:30:06.476 --> 01:30:08.146 A:middle
它允许用户为

01:30:08.146 --> 01:30:09.906 A:middle
在何时运行某个快捷方式

01:30:09.906 --> 01:30:11.286 A:middle
设置特定的触发器

01:30:12.106 --> 01:30:14.536 A:middle
而且有很多选择

01:30:14.806 --> 01:30:16.016 A:middle
你可以根据一天的时间

01:30:16.016 --> 01:30:18.056 A:middle
来设置触发器

01:30:18.056 --> 01:30:19.646 A:middle
当你开始戴上你的 Apple Watch 开始锻炼的时候

01:30:19.956 --> 01:30:22.346 A:middle
当你连上 CarPlay 的时候等等情况

01:30:24.006 --> 01:30:26.086 A:middle
编辑器现在支持对

01:30:26.086 --> 01:30:27.586 A:middle
App 的操作进行完整配置

01:30:27.616 --> 01:30:29.416 A:middle
包括利用参数

01:30:29.416 --> 01:30:32.026 A:middle
将信息传入或是

01:30:32.026 --> 01:30:33.936 A:middle
传出的操作

01:30:34.866 --> 01:30:36.436 A:middle
这样 你的 App 的动作

01:30:36.486 --> 01:30:38.016 A:middle
就可以与其他 App 的动作

01:30:38.016 --> 01:30:40.606 A:middle
通过多步快捷指令给组合起来

01:30:42.726 --> 01:30:44.626 A:middle
现在我们假设你需要为家人订一顿晚餐

01:30:44.946 --> 01:30:47.366 A:middle
孩子们很饿了 你需要快一点

01:30:47.986 --> 01:30:48.996 A:middle
你可以有一个使用

01:30:48.996 --> 01:30:50.666 A:middle
Caviar App 的快捷指令

01:30:50.666 --> 01:30:52.586 A:middle
可以让你选择一家餐厅

01:30:53.516 --> 01:30:59.766 A:middle
选择一顿饭 之后订好菜

01:30:59.766 --> 01:31:02.046 A:middle
再给所有的家人发短信

01:31:02.046 --> 01:31:04.246 A:middle
告诉他们吃什么几点送到

01:31:05.246 --> 01:31:06.786 A:middle
这就是把你的 App 的强大功能

01:31:06.786 --> 01:31:09.106 A:middle
和 Siri 快捷指令结合起来

01:31:09.106 --> 01:31:11.736 A:middle
来让日常任务变得非常简单

01:31:13.466 --> 01:31:18.636 A:middle
当然 [掌声]

01:31:19.136 --> 01:31:20.416 A:middle
当然 快捷指令可以在

01:31:20.416 --> 01:31:23.416 A:middle
iPhone iPad Apple Watch

01:31:23.736 --> 01:31:25.096 A:middle
以及 HomePod 上运行

01:31:25.616 --> 01:31:27.716 A:middle
这些就是我们对 Siri 的更新

01:31:28.516 --> 01:31:34.546 A:middle
[掌声]

01:31:35.046 --> 01:31:36.566 A:middle
现在 我想请 Jeff 上台来为大家讲解

01:31:36.566 --> 01:31:39.316 A:middle
增强现实技术的最新进展 谢谢

01:31:40.516 --> 01:31:42.606 A:middle
[掌声]

01:31:43.106 --> 01:31:43.546 A:middle
&gt;&gt; 谢谢 Bill

01:31:43.546 --> 01:31:44.886 A:middle
我很高兴今天能在这里

01:31:44.886 --> 01:31:46.246 A:middle
谈论增强现实

01:31:47.276 --> 01:31:49.136 A:middle
AR 可以帮助你把

01:31:49.136 --> 01:31:51.496 A:middle
困难 高成本或不可能的事情

01:31:51.496 --> 01:31:53.056 A:middle
进行可视化呈现

01:31:53.686 --> 01:31:55.516 A:middle
自从我们引入 ARKit 之后

01:31:55.836 --> 01:31:58.746 A:middle
我们看到了相关 App 的惊人增长

01:31:59.296 --> 01:32:02.296 A:middle
有人可能认为 AR 只是为了娱乐

01:32:02.336 --> 01:32:04.736 A:middle
但我们已经看到了

01:32:04.736 --> 01:32:06.576 A:middle
它在教育 企业 贸易

01:32:06.986 --> 01:32:09.636 A:middle
等领域的巨大应用

01:32:11.106 --> 01:32:13.026 A:middle
贸易方面的应用

01:32:13.426 --> 01:32:15.546 A:middle
特别令人印象深刻

01:32:15.546 --> 01:32:17.126 A:middle
Home Depot Target 以及 Wayfair

01:32:17.126 --> 01:32:19.856 A:middle
都有成千上万的产品

01:32:19.856 --> 01:32:21.756 A:middle
可以在 AR 中预览

01:32:21.756 --> 01:32:26.206 A:middle
ARKit 将 USDZ 文件格式

01:32:26.306 --> 01:32:28.926 A:middle
和快速查看聚集在一起

01:32:29.846 --> 01:32:31.596 A:middle
成为世界上第一个大众市场的

01:32:31.846 --> 01:32:34.476 A:middle
增强现实的商务解决方案

01:32:34.766 --> 01:32:37.156 A:middle
事实上 当人们可以

01:32:37.156 --> 01:32:39.226 A:middle
在增强现实中查看

01:32:39.276 --> 01:32:41.476 A:middle
他们的产品时

01:32:41.476 --> 01:32:43.486 A:middle
Wayfair 的购买量增长了三倍多

01:32:45.316 --> 01:32:46.806 A:middle
我们非常喜欢这个

01:32:46.806 --> 01:32:47.566 A:middle
真实的商业用例

01:32:47.566 --> 01:32:48.716 A:middle
这是增强现实在商业中的

01:32:48.716 --> 01:32:51.046 A:middle
一个很好的实际业务用例

01:32:52.476 --> 01:32:53.386 A:middle
我们想通过

01:32:53.386 --> 01:32:55.006 A:middle
宣布 Apple Pay 将在今年秋季

01:32:55.166 --> 01:32:56.316 A:middle
与 AR Quick Look 直接集成

01:32:56.316 --> 01:32:59.356 A:middle
来延续这一势头

01:32:59.606 --> 01:33:00.866 A:middle
这使得用户可以更简单地

01:33:00.946 --> 01:33:03.636 A:middle
在增强现实场景下

01:33:04.276 --> 01:33:05.486 A:middle
去试戴像是眼镜这样的商品

01:33:05.976 --> 01:33:07.406 A:middle
并直接购买它

01:33:07.506 --> 01:33:12.366 A:middle
用于 iOS 和 iPadOS 的 ARKit

01:33:12.916 --> 01:33:16.896 A:middle
是世界上最大的增强现实平台

01:33:16.896 --> 01:33:18.746 A:middle
拥有数亿个

01:33:18.746 --> 01:33:20.986 A:middle
可启用的设备

01:33:21.046 --> 01:33:22.946 A:middle
我们从很多开发者那里听到

01:33:22.946 --> 01:33:24.016 A:middle
它们想要来利用

01:33:24.016 --> 01:33:25.196 A:middle
这个大好的机会

01:33:25.196 --> 01:33:27.746 A:middle
但是可能不知道从何开始

01:33:28.376 --> 01:33:29.806 A:middle
或者是你可能从未使用过 3D

01:33:29.806 --> 01:33:31.676 A:middle
觉得它可能有点难以招架

01:33:31.676 --> 01:33:33.646 A:middle
所以 我们听取了大家的意见

01:33:33.816 --> 01:33:35.576 A:middle
我们很兴奋地要宣布三项技术

01:33:36.346 --> 01:33:38.376 A:middle
来帮助你更容易地

01:33:38.376 --> 01:33:41.806 A:middle
开发增强现实 App

01:33:42.846 --> 01:33:45.916 A:middle
ARKit RealityKit 以及 Reality Composer

01:33:45.916 --> 01:33:47.816 A:middle
它们结合在一起提供了

01:33:48.026 --> 01:33:50.336 A:middle
所需的框架和工具

01:33:50.336 --> 01:33:51.646 A:middle
来帮助你快速轻松地来开发

01:33:51.946 --> 01:33:57.136 A:middle
增强现实 App 和体验

01:33:57.136 --> 01:33:58.526 A:middle
以 Reality Composer 为开端

01:33:59.036 --> 01:34:00.656 A:middle
你可以创造引人瞩目的 AR 体验

01:34:00.656 --> 01:34:03.706 A:middle
即便是你从来没用过 3D 相关的技术

01:34:03.966 --> 01:34:05.766 A:middle
它提供了一个直观的页面

01:34:05.766 --> 01:34:06.626 A:middle
你所看到的

01:34:06.626 --> 01:34:08.856 A:middle
和你所得到的

01:34:09.226 --> 01:34:11.166 A:middle
都能在 Xcode 中得到无缝的集成

01:34:12.336 --> 01:34:13.326 A:middle
为了个大家展示 Reality Composer

01:34:13.326 --> 01:34:14.796 A:middle
我想邀请我的同事

01:34:14.796 --> 01:34:16.736 A:middle
Shrudi 到台上来

01:34:17.516 --> 01:34:22.636 A:middle
[掌声]

01:34:23.136 --> 01:34:25.206 A:middle
&gt;&gt; 谢谢你 Jeff 很高兴来到这里

01:34:25.206 --> 01:34:27.656 A:middle
我有这个很棒的旅行 App

01:34:27.656 --> 01:34:29.376 A:middle
上面显示了一些活动

01:34:29.636 --> 01:34:31.326 A:middle
是在夏威夷主岛上举办的

01:34:31.976 --> 01:34:33.696 A:middle
如果客户选择使用直升机旅行

01:34:33.696 --> 01:34:37.136 A:middle
App 将显示直升机的路径

01:34:37.136 --> 01:34:40.226 A:middle
我们如何使用 AR

01:34:40.226 --> 01:34:42.746 A:middle
来为用户提供更好的实际旅行体验

01:34:42.746 --> 01:34:44.846 A:middle
我能通过添加一个按钮

01:34:44.846 --> 01:34:47.396 A:middle
在这个已经存在的 App 上来提高 AR 体验

01:34:47.946 --> 01:34:48.976 A:middle
让我们来看看这是如何实现的

01:34:49.776 --> 01:34:52.566 A:middle
首先我使用 SwiftUI 创建一个按钮

01:34:53.626 --> 01:34:55.616 A:middle
然后将这个按钮添加到

01:34:55.876 --> 01:34:57.016 A:middle
我已经做好的视图上

01:34:58.006 --> 01:35:01.286 A:middle
接着我在 Reality Composer
打开一个空的项目文件

01:35:01.286 --> 01:35:02.946 A:middle
并集成到我的 Xcode 项目中

01:35:03.296 --> 01:35:06.216 A:middle
只需要通过在 Xcode 简单的拖放就能实现

01:35:06.856 --> 01:35:09.946 A:middle
为了把我的 AR 场景加载到

01:35:09.946 --> 01:35:11.886 A:middle
Reality Composer 项目文件

01:35:12.106 --> 01:35:14.796 A:middle
我导入 Reality Composer 

01:35:14.796 --> 01:35:17.526 A:middle
然后为此 AR 创建一个新的视图

01:35:18.016 --> 01:35:22.186 A:middle
哦抱歉 是通过 SwiftUI 创建一个新的视图

01:35:22.356 --> 01:35:25.736 A:middle
这就是你需要的所有代码

01:35:26.206 --> 01:35:31.706 A:middle
用来在你已有的 App 上添加一个 AR 体验

01:35:31.706 --> 01:35:33.166 A:middle
接下来看看还有什么有趣的东西

01:35:33.166 --> 01:35:35.496 A:middle
当我在使用 Reality Composer
创建我的 AR 体验时

01:35:36.106 --> 01:35:37.926 A:middle
我打开一个空的 Reality 项目

01:35:38.986 --> 01:35:40.836 A:middle
首先加载一个定制的

01:35:40.836 --> 01:35:42.536 A:middle
USTZ 夏威夷模型

01:35:47.046 --> 01:35:49.676 A:middle
很好 接着我想标记

01:35:49.676 --> 01:35:51.256 A:middle
我的直升机之旅的开始

01:35:51.506 --> 01:35:53.366 A:middle
为此我可以使用

01:35:53.366 --> 01:35:54.956 A:middle
Reality Composer 的 built-in 内容库

01:35:54.956 --> 01:35:57.536 A:middle
它提供了数百个

01:35:57.536 --> 01:35:59.476 A:middle
专业级 3D 内容给开发者

01:35:59.476 --> 01:36:02.976 A:middle
我将使用一个简单的 sphere

01:36:08.046 --> 01:36:09.356 A:middle
我能改变 内容的外观

01:36:09.776 --> 01:36:12.206 A:middle
通过给它应用一个不同的材质

01:36:14.086 --> 01:36:16.736 A:middle
正如你所见将内容

01:36:16.736 --> 01:36:20.246 A:middle
通过 Reality Composer 放在 3D 中
是非常简单且直观的

01:36:21.616 --> 01:36:24.196 A:middle
我们来看看除此之外我们还能做什么

01:36:24.196 --> 01:36:25.646 A:middle
比如添加一个酷炫的褪色效果

01:36:25.646 --> 01:36:27.446 A:middle
当场景开始的时候显示在场景之上

01:36:27.526 --> 01:36:29.886 A:middle
我可以通过打开

01:36:29.886 --> 01:36:31.986 A:middle
Behaviors panel 且创建一个

01:36:31.986 --> 01:36:34.336 A:middle
自定义的操作

01:36:34.336 --> 01:36:35.956 A:middle
这个操作在场景开始时被触发

01:36:35.956 --> 01:36:39.806 A:middle
首先我添加一个动作去隐藏

01:36:39.806 --> 01:36:41.216 A:middle
场景中所有的内容

01:36:41.706 --> 01:36:45.666 A:middle
然后场景开始

01:36:45.666 --> 01:36:47.316 A:middle
接着添加另一个动作

01:36:47.316 --> 01:36:50.096 A:middle
使场景在经过一定的时间后出现

01:36:50.096 --> 01:36:52.916 A:middle
我们来看看它的效果如何

01:36:53.286 --> 01:36:58.086 A:middle
棒极了 在 Mac 上开发 AR 很方便

01:36:58.086 --> 01:37:02.626 A:middle
但是它也有一些挑战是要去猜测

01:37:02.626 --> 01:37:05.086 A:middle
内容的规模以及

01:37:05.086 --> 01:37:06.176 A:middle
放置在现实中的样子

01:37:06.726 --> 01:37:08.016 A:middle
这也是为什么我们创造 Reality Composer

01:37:08.016 --> 01:37:11.956 A:middle
在 macOS

01:37:11.956 --> 01:37:13.266 A:middle
以及 iPadOS 和 iOS 上去消除

01:37:13.266 --> 01:37:14.186 A:middle
开发中的猜测

01:37:14.186 --> 01:37:17.226 A:middle
所以我会把它交给 Jeff

01:37:17.226 --> 01:37:19.176 A:middle
看看我们到目前为止在 iPad 上有什么

01:37:20.866 --> 01:37:21.896 A:middle
&gt;&gt; 非常感谢 Shrudi

01:37:22.426 --> 01:37:25.386 A:middle
所以这是一个 iPad 上的 Reality Composer 

01:37:27.146 --> 01:37:29.236 A:middle
它同样有着很好的特点

01:37:29.236 --> 01:37:31.256 A:middle
与你在 Mac 上看到的 Reality Composer 一样

01:37:31.426 --> 01:37:32.376 A:middle
我们可以看到

01:37:32.376 --> 01:37:33.936 A:middle
Shrudi 交出并完成了它

01:37:33.936 --> 01:37:34.996 A:middle
通过使用我们的最终作品

01:37:35.466 --> 01:37:37.066 A:middle
所以我们有人用 Adobe Arrow

01:37:37.066 --> 01:37:39.736 A:middle
创建我们的最终文件或

01:37:39.736 --> 01:37:41.986 A:middle
我们的最终作品而且我们将它放到场景中

01:37:41.986 --> 01:37:43.996 A:middle
所以我将采用 Shrudi 所拥有方式的代理艺术

01:37:43.996 --> 01:37:46.846 A:middle
我将用我们的新作品替换它

01:37:46.846 --> 01:37:48.666 A:middle
让我检查一下这是否正确

01:37:48.736 --> 01:37:51.346 A:middle
神奇 这是我们最后的直升机

01:37:51.566 --> 01:37:52.906 A:middle
而且我也希望引入

01:37:52.936 --> 01:37:54.396 A:middle
与之相关的动画

01:37:54.466 --> 01:37:56.266 A:middle
这很简单 如果你记得

01:37:56.266 --> 01:37:57.826 A:middle
她创建了这种行为

01:37:57.826 --> 01:37:58.796 A:middle
所以我们要看一下这种行为

01:37:58.796 --> 01:38:01.406 A:middle
我们要做的就是添加一个额外的动作

01:38:03.136 --> 01:38:05.396 A:middle
所以我们我们找 USDZ 动画

01:38:05.396 --> 01:38:07.466 A:middle
用来引入与文件一起使用的动画

01:38:08.876 --> 01:38:10.286 A:middle
太神奇了 看起来很好

01:38:10.286 --> 01:38:12.226 A:middle
让我们预览一下

01:38:12.956 --> 01:38:15.966 A:middle
棒极了 我们隐藏了行为标签

01:38:16.086 --> 01:38:17.346 A:middle
这就是我们想要的

01:38:19.216 --> 01:38:20.786 A:middle
完美 我们再使用 AR 看看

01:38:20.786 --> 01:38:22.816 A:middle
你可以用 iPad 来做

01:38:25.166 --> 01:38:34.396 A:middle
哇哦 再试一次 太神奇了

01:38:34.396 --> 01:38:36.026 A:middle
这就是我想看到的样子

01:38:36.026 --> 01:38:37.276 A:middle
我们同样可以播放

01:38:39.766 --> 01:38:40.916 A:middle
完美 我们得到了

01:38:40.916 --> 01:38:42.376 A:middle
在直升机上游览岛屿的动画

01:38:42.636 --> 01:38:44.656 A:middle
这在我们的旅行 App 中看起来很棒

01:38:49.456 --> 01:38:50.836 A:middle
这就是 iPad 的 Reality Composer

01:38:51.926 --> 01:38:53.606 A:middle
而且你惊奇的发现

01:38:53.606 --> 01:38:57.466 A:middle
你能够获得同样出色的易用性和无缝体验

01:38:57.606 --> 01:38:59.476 A:middle
无论是在 macOS 或 iPadOS 或者 iOS

01:38:59.616 --> 01:39:00.766 A:middle
使用 Reality Composer

01:39:01.516 --> 01:39:08.576 A:middle
[掌声]

01:39:09.076 --> 01:39:09.836 A:middle
现在来说说 RealityKit

01:39:10.066 --> 01:39:11.146 A:middle
RealityKit 是一个现代的

01:39:11.296 --> 01:39:12.856 A:middle
高性能的 3D 引擎

01:39:12.856 --> 01:39:15.076 A:middle
自上而下设计用于

01:39:15.076 --> 01:39:17.176 A:middle
增强现实渲染和模拟

01:39:18.056 --> 01:39:19.236 A:middle
而且因为它

01:39:19.376 --> 01:39:20.916 A:middle
作为一个框架能够使你

01:39:20.916 --> 01:39:22.606 A:middle
非常容易的将 2D App

01:39:22.606 --> 01:39:24.536 A:middle
延申到 3D 中

01:39:25.546 --> 01:39:26.876 A:middle
RealityKit 使用现代的

01:39:26.966 --> 01:39:28.736 A:middle
基于可见的渲染和材质

01:39:29.536 --> 01:39:30.816 A:middle
它是一个数据驱动的渲染系统和

01:39:30.876 --> 01:39:35.456 A:middle
一个多线程渲染器

01:39:35.456 --> 01:39:37.666 A:middle
它针对 Apple 的 GPU 进行了高度的优化

01:39:39.466 --> 01:39:41.426 A:middle
与此同时还有很重要的一点

01:39:41.466 --> 01:39:45.236 A:middle
我们集成了 ARKit 场景理解到 RealityKit 中

01:39:45.936 --> 01:39:48.486 A:middle
这意味着 ARKit

01:39:48.486 --> 01:39:49.736 A:middle
会更多地关注环境

01:39:49.856 --> 01:39:50.986 A:middle
它会自动的

01:39:50.986 --> 01:39:52.596 A:middle
将你与虚拟场景进行同步

01:39:52.686 --> 01:39:56.366 A:middle
我们今天早晨看到了 RealityKit 的操作

01:39:57.116 --> 01:39:58.166 A:middle
我们来仔细看看

01:39:59.586 --> 01:40:00.676 A:middle
来看看究竟发生了什么

01:40:01.876 --> 01:40:03.996 A:middle
你看到的景象

01:40:03.996 --> 01:40:05.086 A:middle
是基于图像的照明

01:40:05.086 --> 01:40:07.416 A:middle
模糊运动以及相机效果

01:40:07.416 --> 01:40:11.076 A:middle
比如景深和相机噪声之类的东西

01:40:11.076 --> 01:40:14.096 A:middle
它真实地模糊了虚拟与现实之间的界限

01:40:14.876 --> 01:40:17.736 A:middle
并且你可以自动获得 RealityKit 的这些功能

01:40:20.006 --> 01:40:21.546 A:middle
你可以访问 RealityKit 通过使用

01:40:21.546 --> 01:40:23.386 A:middle
一个新的原生 Swift API 框架

01:40:23.386 --> 01:40:25.186 A:middle
它具有很多

01:40:25.186 --> 01:40:26.936 A:middle
Swift 主要功能的有点

01:40:26.936 --> 01:40:28.686 A:middle
允许你编写简洁紧凑的代码

01:40:30.536 --> 01:40:33.766 A:middle
概念日志和集合是直接集成的

01:40:33.916 --> 01:40:35.596 A:middle
打个比方

01:40:35.706 --> 01:40:37.646 A:middle
你可以轻轻松松加载 AR 素材

01:40:38.006 --> 01:40:40.326 A:middle
并将其直接附加到锚点

01:40:40.996 --> 01:40:43.146 A:middle
协议扩展提供了

01:40:43.236 --> 01:40:44.606 A:middle
对实体属性的轻松访问

01:40:44.606 --> 01:40:46.666 A:middle
允许你再这种快速访问

01:40:46.726 --> 01:40:48.696 A:middle
诸如灯光

01:40:48.696 --> 01:40:50.706 A:middle
或阴影之类的组件

01:40:50.706 --> 01:40:51.776 A:middle
并减少运行时检查的需要

01:40:53.296 --> 01:40:54.366 A:middle
这也意味着你可以

01:40:54.366 --> 01:40:57.006 A:middle
使用强类型的方式处理实体

01:40:57.446 --> 01:40:58.856 A:middle
我们在这里

01:40:58.966 --> 01:41:00.966 A:middle
对一个实体 施加一个角度的力

01:41:00.966 --> 01:41:03.976 A:middle
这是你在这个场景中所需要的全部代码

01:41:08.226 --> 01:41:09.496 A:middle
最后但不是最重要的是

01:41:09.566 --> 01:41:14.406 A:middle
今天是我们的增强现实框架 AR 工具包 3 的新版本

01:41:15.666 --> 01:41:18.686 A:middle
我们采用了世界上最大的 AR 平台

01:41:18.686 --> 01:41:22.126 A:middle
并通过新的深入反向功能使其更加强大

01:41:24.036 --> 01:41:26.076 A:middle
自从推出 ARKit 以来

01:41:26.076 --> 01:41:27.306 A:middle
我们已经有很多开发人员

01:41:27.306 --> 01:41:29.896 A:middle
要求能够同时使用前置和后置摄像头

01:41:30.326 --> 01:41:32.346 A:middle
好 在 ARKit 3 中你将可以实现这个功能

01:41:32.436 --> 01:41:34.776 A:middle
所以你可以 没错

01:41:34.776 --> 01:41:35.966 A:middle
同时使用两个摄像头

01:41:36.186 --> 01:41:38.186 A:middle
[掌声]

01:41:38.356 --> 01:41:39.666 A:middle
这使你可以使用面部跟踪

01:41:39.666 --> 01:41:42.936 A:middle
直接驱动增强现实体验

01:41:44.356 --> 01:41:45.416 A:middle
正如 Craig 在今天早晨谈到的那样

01:41:45.416 --> 01:41:47.176 A:middle
正确的识别出

01:41:47.176 --> 01:41:49.506 A:middle
一个人在 AR 场景中

01:41:49.606 --> 01:41:50.846 A:middle
是一个非常困难的问题

01:41:51.076 --> 01:41:52.296 A:middle
你每次都会看到它

01:41:52.296 --> 01:41:53.586 A:middle
就在有人在虚拟物体面前走过时

01:41:55.636 --> 01:41:56.816 A:middle
为了解决这个问题

01:41:56.816 --> 01:41:57.946 A:middle
我们构建了一种先进的机器学习算法

01:41:57.946 --> 01:41:59.726 A:middle
可以确定

01:41:59.796 --> 01:42:01.606 A:middle
哪些像素是一个人

01:42:01.736 --> 01:42:03.326 A:middle
此人在场景中的深度

01:42:03.326 --> 01:42:05.826 A:middle
并使用其信息来允许我们

01:42:05.826 --> 01:42:08.606 A:middle
正确的渲染场景中的虚拟对象

01:42:09.236 --> 01:42:10.546 A:middle
随着人们的遮挡剔除

01:42:10.546 --> 01:42:12.526 A:middle
这种全新的体验像 Minecraft Earth 的演示那样

01:42:12.526 --> 01:42:15.976 A:middle
如你所见是完全有可能的

01:42:16.516 --> 01:42:20.546 A:middle
[掌声]

01:42:21.046 --> 01:42:23.696 A:middle
非常神奇 最后我建立了一个系统

01:42:23.696 --> 01:42:27.066 A:middle
用来使人与虚拟的内容进行交互

01:42:27.066 --> 01:42:28.506 A:middle
ARKit 3 能够实时的捕捉

01:42:28.566 --> 01:42:30.786 A:middle
一个人的动作

01:42:31.256 --> 01:42:34.966 A:middle
而且只需要用 iPad 或 iPhone 上的
RGB 摄像头就可以实现

01:42:35.906 --> 01:42:37.426 A:middle
我们再次使用机器学习算法

01:42:37.846 --> 01:42:39.226 A:middle
去追踪一个人

01:42:39.226 --> 01:42:42.246 A:middle
构建一个二维棒形图

01:42:42.586 --> 01:42:44.706 A:middle
并获取这个图形

01:42:44.706 --> 01:42:48.366 A:middle
然后从中推断出一个三维运动或将其提升到三维

01:42:49.256 --> 01:42:50.796 A:middle
二维骨架和三维骨架

01:42:50.796 --> 01:42:52.146 A:middle
对于开发人员都是可用的

01:42:52.656 --> 01:42:54.436 A:middle
三维具有超过 90 个铰接接头

01:42:54.436 --> 01:42:57.946 A:middle
并提供与 FaceKit 相同的易用性

01:43:02.206 --> 01:43:05.836 A:middle
ARKit 3 RealityKit

01:43:05.836 --> 01:43:08.436 A:middle
以及 Reality Composer 都是工具和框架

01:43:08.486 --> 01:43:10.226 A:middle
它们能够使任何人都可以轻松的

01:43:10.306 --> 01:43:15.226 A:middle
构建令人惊讶的 AR 体验

01:43:15.226 --> 01:43:18.346 A:middle
今天我们想做一些有趣的事情

01:43:18.396 --> 01:43:20.786 A:middle
所以我们在会议上有了一个有趣的 App

01:43:21.396 --> 01:43:22.706 A:middle
你可能会卡看到它 SwiftStrike

01:43:23.696 --> 01:43:25.036 A:middle
我们正在制作一个桌面版本

01:43:25.036 --> 01:43:27.116 A:middle
作为今天的开发人员样例

01:43:27.206 --> 01:43:30.906 A:middle
它使用了 RealityKit ARKit 3

01:43:30.906 --> 01:43:32.206 A:middle
以及 Reality Composer 并且为你的 App

01:43:32.246 --> 01:43:35.476 A:middle
提供了一个良好的起点

01:43:36.516 --> 01:43:39.116 A:middle
[音乐]

01:43:39.616 --> 01:43:40.976 A:middle
太有趣了

01:43:41.516 --> 01:43:44.036 A:middle
[掌声]

01:43:44.536 --> 01:43:47.546 A:middle
谢谢 [掌声]

01:43:48.046 --> 01:43:49.286 A:middle
当然 Metal 在我们的设备上

01:43:49.286 --> 01:43:51.686 A:middle
为 AR 提供了很多功能

01:43:51.686 --> 01:43:52.706 A:middle
为了告诉你更多关于

01:43:52.706 --> 01:43:54.216 A:middle
Metal 的新内容

01:43:54.216 --> 01:43:55.576 A:middle
我想欢迎 Jeremy 到台上来

01:43:56.516 --> 01:43:58.836 A:middle
[掌声]

01:43:59.336 --> 01:44:01.556 A:middle
&gt;&gt; 谢谢你 Jeff

01:44:02.446 --> 01:44:04.096 A:middle
Metal 是 Apple 的一个现代的

01:44:04.346 --> 01:44:06.176 A:middle
高性能 GPU 编程 API

01:44:06.176 --> 01:44:08.056 A:middle
它应用于图形和计算

01:44:08.186 --> 01:44:09.586 A:middle
它非常容易使用

01:44:09.586 --> 01:44:12.106 A:middle
无论是对初学者或专家

01:44:12.106 --> 01:44:15.356 A:middle
它带来了惊人的性能提升

01:44:15.416 --> 01:44:18.896 A:middle
支持比 OpenGL 多 100 倍的绘图调用

01:44:18.896 --> 01:44:20.606 A:middle
并实现一个全新一带的

01:44:20.656 --> 01:44:22.476 A:middle
高级图形性能

01:44:23.696 --> 01:44:25.006 A:middle
这是因为 Metal 使你的 App

01:44:25.186 --> 01:44:30.046 A:middle
可以直接控制作为 Apple 核心产品的 GPU

01:44:30.526 --> 01:44:33.116 A:middle
而且这些 GPU 现在拥有

01:44:33.116 --> 01:44:35.856 A:middle
超过 14 亿个支持 Metal 支持系统

01:44:36.206 --> 01:44:39.786 A:middle
从 iPhone 到 iPad 再到全新的 Mac Pro

01:44:40.536 --> 01:44:41.606 A:middle
事实上所有 Apple 的平台

01:44:41.666 --> 01:44:42.986 A:middle
现在都是在 Metal 上运行的

01:44:43.546 --> 01:44:45.006 A:middle
从我们流畅的用户界面

01:44:45.006 --> 01:44:47.026 A:middle
到 RealityKit 中最新的三维渲染

01:44:47.026 --> 01:44:48.856 A:middle
再到我们先进的

01:44:48.856 --> 01:44:50.126 A:middle
摄像机处理流程

01:44:50.436 --> 01:44:51.906 A:middle
我们无处不在使用 Metal

01:44:52.446 --> 01:44:56.006 A:middle
你也一样 为了帮助你做到这一点

01:44:56.006 --> 01:44:57.946 A:middle
今年我们专注于这三个关键领域

01:44:58.496 --> 01:45:00.446 A:middle
我们让 Metal 使用起来更加方便

01:45:00.996 --> 01:45:02.766 A:middle
我们已经启用了全新级别的

01:45:02.766 --> 01:45:04.986 A:middle
高性能 GPU 计算

01:45:05.256 --> 01:45:07.036 A:middle
与此同时我们增强了 Metal

01:45:07.036 --> 01:45:10.046 A:middle
为最苛刻的专业 App 开发人员以及客户

01:45:10.986 --> 01:45:13.386 A:middle
首先使用 Metal 令人难以置信的

01:45:13.386 --> 01:45:15.606 A:middle
API 和 GPU 着色语言

01:45:15.606 --> 01:45:17.276 A:middle
你可以开始使用

01:45:17.276 --> 01:45:19.866 A:middle
我们强大的开发人员工具

01:45:19.866 --> 01:45:23.156 A:middle
来对 GPU 进行调试 分析以及优化

01:45:23.576 --> 01:45:25.886 A:middle
我们使这些工具变得更好

01:45:26.516 --> 01:45:28.356 A:middle
我们添加了 Metal 的全支持

01:45:28.356 --> 01:45:30.626 A:middle
在 iOS 和 Xcode 上

01:45:31.041 --> 01:45:33.041 A:middle
[掌声]

01:45:33.066 --> 01:45:34.366 A:middle
我们很高兴你对它感到兴奋

01:45:34.366 --> 01:45:35.546 A:middle
我们也感到很兴奋

01:45:35.906 --> 01:45:38.476 A:middle
你现在可以直接在模拟器中使用 Metal

01:45:38.476 --> 01:45:39.736 A:middle
并且自动获取主要的

01:45:39.736 --> 01:45:41.236 A:middle
性能提升

01:45:41.236 --> 01:45:43.726 A:middle
挡在使用 UIKit Maps

01:45:43.726 --> 01:45:45.676 A:middle
以及所有基于 Metal 的框架系统时

01:45:45.676 --> 01:45:46.896 A:middle
这是因为 iOS 系统模拟器

01:45:46.946 --> 01:45:48.436 A:middle
现在得到了

01:45:48.436 --> 01:45:50.836 A:middle
在你的 Mac 中内置的原生 Metal 的支持

01:45:52.506 --> 01:45:53.976 A:middle
我们还添加了一个全新的

01:45:53.976 --> 01:45:55.096 A:middle
Metal 内存调试器

01:45:55.446 --> 01:45:56.966 A:middle
现在你可以准确的识别

01:45:56.966 --> 01:45:58.666 A:middle
有多少内存被你的 App 用于

01:45:58.666 --> 01:46:00.656 A:middle
Metal 纹理 缓冲区以及

01:46:00.656 --> 01:46:02.436 A:middle
散热并且你可以

01:46:02.436 --> 01:46:04.196 A:middle
优化你的游戏和 App

01:46:04.196 --> 01:46:06.516 A:middle
以便使用每最后一个字节来得到更高级的图形

01:46:07.936 --> 01:46:08.986 A:middle
在过去的几年中

01:46:09.026 --> 01:46:10.336 A:middle
Metal 已经发展到可以支持

01:46:10.336 --> 01:46:12.006 A:middle
数十个 GPU 的高级功能

01:46:12.006 --> 01:46:13.566 A:middle
每个 GPU 都有自己的硬件

01:46:13.566 --> 01:46:15.806 A:middle
来自每个主要的 GPU 供应商

01:46:15.806 --> 01:46:19.516 A:middle
以及我们所有的平台和操作系统版本

01:46:19.746 --> 01:46:21.726 A:middle
并且作为一个开发人员 你以前必须自己管理所有这些

01:46:21.726 --> 01:46:24.646 A:middle
不同的硬件功能集所有的复杂性

01:46:26.116 --> 01:46:26.986 A:middle
然而今年我们

01:46:26.986 --> 01:46:29.756 A:middle
只用了三个 Metal GPU 系列就变得更简单了

01:46:30.056 --> 01:46:31.526 A:middle
一个 Metal 常见的 GPU 系列

01:46:31.746 --> 01:46:34.666 A:middle
可以识别绝大多数

01:46:33.586 --> 01:46:36.096 A:middle
你可以在我们所有平台使用的 Metal 功能

01:46:36.546 --> 01:46:38.216 A:middle
第二个系列

01:46:38.216 --> 01:46:40.706 A:middle
是一些高级的独特功能

01:46:40.706 --> 01:46:43.426 A:middle
可以用于 Apple 设计 GPU 和 iOS iPadOS

01:46:43.426 --> 01:46:44.716 A:middle
和 tvOS 产品等

01:46:44.716 --> 01:46:47.216 A:middle
第三个系列用于

01:46:47.216 --> 01:46:49.566 A:middle
Mac 系统上强大的 GPU

01:46:50.326 --> 01:46:51.776 A:middle
它使你的 App 更容易的

01:46:51.776 --> 01:46:54.406 A:middle
从 iOS 到 macOS

01:46:54.406 --> 01:46:56.086 A:middle
或其他方式

01:46:57.486 --> 01:46:59.076 A:middle
现在除了支持

01:46:59.076 --> 01:47:00.426 A:middle
沉浸式游戏和高级图形外

01:47:00.426 --> 01:47:02.046 A:middle
Metal 还为你的 App 提供了

01:47:02.046 --> 01:47:05.366 A:middle
利用 GPU 进行计算的能力

01:47:05.986 --> 01:47:07.516 A:middle
所以 GPU 计算是什么

01:47:08.116 --> 01:47:09.176 A:middle
GPU 最初设计

01:47:09.176 --> 01:47:12.106 A:middle
适用于处理大量的像素

01:47:12.106 --> 01:47:13.466 A:middle
需要以大规模并行方式

01:47:13.466 --> 01:47:16.566 A:middle
进行复杂的数学计算

01:47:16.966 --> 01:47:18.526 A:middle
事实证明我们可以

01:47:18.526 --> 01:47:20.136 A:middle
将计算能力应用于

01:47:20.136 --> 01:47:22.556 A:middle
各种各样的任务

01:47:22.646 --> 01:47:23.546 A:middle
它们不仅仅是传统的图形

01:47:24.306 --> 01:47:25.676 A:middle
因此 Metal 提供了所有

01:47:25.676 --> 01:47:27.086 A:middle
需要构建的模块

01:47:27.086 --> 01:47:29.976 A:middle
而这些模块是 GPU 上通用计算所需要的

01:47:30.206 --> 01:47:32.706 A:middle
一种熟悉的基于 C++ 的

01:47:32.706 --> 01:47:34.716 A:middle
GPU 编程语言

01:47:34.716 --> 01:47:35.966 A:middle
计算命令编码和 API 和运行时

01:47:35.966 --> 01:47:38.256 A:middle
全功能编译器

01:47:38.256 --> 01:47:41.526 A:middle
和调试器以及丰富的着色器和内核库

01:47:41.526 --> 01:47:42.766 A:middle
它被称之为 Metal 性能着色器

01:47:44.336 --> 01:47:45.876 A:middle
这个 MPS 库为你提供了

01:47:45.876 --> 01:47:48.296 A:middle
有价值的计算功能

01:47:48.656 --> 01:47:50.306 A:middle
所有这些功能都被预先优化了

01:47:50.306 --> 01:47:51.786 A:middle
GPU 和所有 Apple 系统

01:47:51.786 --> 01:47:52.816 A:middle
并且已经完全集成到

01:47:52.816 --> 01:47:54.756 A:middle
你的 Metal 代码中

01:47:56.436 --> 01:47:58.086 A:middle
在我们的 Apple 设计 GPU 上

01:47:58.236 --> 01:47:59.646 A:middle
Metal 还提供了高级的

01:47:59.726 --> 01:48:01.076 A:middle
计算功能比如着色

01:48:01.076 --> 01:48:04.006 A:middle
使你能够计算着色器和片段处理

01:48:04.066 --> 01:48:08.426 A:middle
组合成一个简单的高效的渲染过程

01:48:09.666 --> 01:48:12.106 A:middle
并且今年我们

01:48:12.106 --> 01:48:14.736 A:middle
还推出了 Metal 间接计算命令编码

01:48:14.736 --> 01:48:16.156 A:middle
它允许你构建 GPU

01:48:16.156 --> 01:48:17.566 A:middle
计算指令在 GPU 上面

01:48:17.566 --> 01:48:19.486 A:middle
解锁全新的

01:48:19.486 --> 01:48:22.096 A:middle
计算效率算法并释放 CPU

01:48:22.096 --> 01:48:24.666 A:middle
以此来帮助 App 中其他的活动

01:48:25.306 --> 01:48:27.676 A:middle
使用 Radeon Pro Vega II

01:48:27.676 --> 01:48:30.386 A:middle
新款 Mac Pro 是一款 GPU 计算怪兽

01:48:30.386 --> 01:48:33.916 A:middle
可以提供高达 56 万亿次浮点运算的

01:48:33.916 --> 01:48:35.786 A:middle
GPU 计算能力

01:48:35.786 --> 01:48:38.026 A:middle
这些都通过 Metal 提供给你

01:48:38.116 --> 01:48:39.666 A:middle
现在这是很多失误

01:48:39.666 --> 01:48:40.876 A:middle
我的意思使看看他们

01:48:41.486 --> 01:48:42.876 A:middle
它们几乎不能放在屏幕上

01:48:43.166 --> 01:48:45.166 A:middle
[掌声]

01:48:45.316 --> 01:48:47.676 A:middle
太多了 [掌声]

01:48:47.676 --> 01:48:50.616 A:middle
那么你能用 GPU 计算的所有这些触发器做什么呢

01:48:51.456 --> 01:48:52.276 A:middle
那么使用 Metal 你可以

01:48:52.276 --> 01:48:53.996 A:middle
将它们应用于高级计算处理

01:48:54.256 --> 01:48:57.276 A:middle
对于你的视频你可以提高照片的质量

01:48:57.646 --> 01:48:59.806 A:middle
你可以训练你的 ML 模型

01:48:59.806 --> 01:49:01.526 A:middle
并且你可以使用它们

01:49:01.526 --> 01:49:02.956 A:middle
来加速交互光线跟踪

01:49:04.016 --> 01:49:05.096 A:middle
因此我们在今年进一步改进了

01:49:05.096 --> 01:49:06.386 A:middle
对光线跟踪的 Metal 支持

01:49:06.386 --> 01:49:08.366 A:middle
现在启用动态场景

01:49:08.496 --> 01:49:11.346 A:middle
通过将边界和层次结构

01:49:11.346 --> 01:49:13.536 A:middle
从 CPU 移动到 GPU 来实现

01:49:13.536 --> 01:49:15.206 A:middle
并且添加了全新优化的 MPS 去噪滤波器

01:49:15.206 --> 01:49:18.146 A:middle
以进一步提高图像质量

01:49:18.146 --> 01:49:21.376 A:middle
现在光线跟踪使用 GPU

01:49:21.376 --> 01:49:24.746 A:middle
来计算模拟灯光和表面以及反射的

01:49:25.116 --> 01:49:27.166 A:middle
物理属性

01:49:27.166 --> 01:49:28.796 A:middle
它可能非常复杂

01:49:28.796 --> 01:49:30.576 A:middle
人们实际上可以在这个主题上获得博士学位

01:49:31.306 --> 01:49:32.596 A:middle
因此为了想你展示

01:49:32.596 --> 01:49:35.396 A:middle
如何使用 Metal 和 GPU 计算

01:49:35.396 --> 01:49:36.886 A:middle
进行光线跟踪

01:49:36.886 --> 01:49:38.686 A:middle
我们决定将一个非常简单的实例放在一起

01:49:38.776 --> 01:49:39.966 A:middle
我现在想邀请 Rav 到舞台

01:49:39.966 --> 01:49:42.686 A:middle
给你们做一个快速的演示 Rav

01:49:43.516 --> 01:49:48.716 A:middle
[掌声]

01:49:49.216 --> 01:49:49.926 A:middle
&gt;&gt; 谢谢 Jeremy

01:49:51.266 --> 01:49:54.666 A:middle
因此我们构建了一个原型混合光线追踪引擎

01:49:54.666 --> 01:49:56.316 A:middle
以了解我们可以在强大的

01:49:56.506 --> 01:49:58.296 A:middle
新 Mac Pro 上使用 Metal 计算做些什么

01:50:03.146 --> 01:50:04.466 A:middle
看起来很简单

01:50:04.466 --> 01:50:06.876 A:middle
但是我们正在使用 Metal 以 4K 分辨率每秒

01:50:06.876 --> 01:50:09.536 A:middle
处理超过 10 亿条光线

01:50:10.336 --> 01:50:11.366 A:middle
让我来带你了解一下

01:50:11.366 --> 01:50:11.976 A:middle
我们在这里所做的事情

01:50:13.396 --> 01:50:15.446 A:middle
首先我们使用 Metal 绘制命令

01:50:15.446 --> 01:50:17.616 A:middle
来渲染几何体

01:50:17.616 --> 01:50:18.936 A:middle
以及材质的信息

01:50:18.936 --> 01:50:21.736 A:middle
这些我们之后会用到

01:50:21.736 --> 01:50:23.086 A:middle
然后切换到使用 Metal 计算

01:50:23.126 --> 01:50:25.566 A:middle
以及 MPS 光线三角交叉 API

01:50:25.566 --> 01:50:28.756 A:middle
来完成所有繁重的工作

01:50:29.366 --> 01:50:30.716 A:middle
这包含计算

01:50:30.806 --> 01:50:32.316 A:middle
每一个表面点的环境光

01:50:32.356 --> 01:50:33.886 A:middle
正如你在这张图上看到的一样

01:50:34.406 --> 01:50:37.836 A:middle
而且可以模拟场景中的物体之间的光线反射

01:50:37.836 --> 01:50:40.466 A:middle
增加光线的深度

01:50:40.466 --> 01:50:44.146 A:middle
以在这些反射中产生阴影和反射

01:50:44.866 --> 01:50:47.596 A:middle
甚至是反射的反射

01:50:48.256 --> 01:50:51.636 A:middle
然后我们通过使用优化的 MPS

01:50:51.676 --> 01:50:53.376 A:middle
或者优化新 MPS 降噪器中的计算内核

01:50:53.376 --> 01:50:57.746 A:middle
来生成这种真正高质量的图像

01:50:58.776 --> 01:51:00.976 A:middle
因此传统的 CPU 渲染

01:51:01.506 --> 01:51:02.916 A:middle
需要花费超过一分钟的时间

01:51:02.916 --> 01:51:04.236 A:middle
来生成这样的帧

01:51:04.726 --> 01:51:06.046 A:middle
而使用 Metal 后我们已经可以

01:51:06.046 --> 01:51:07.946 A:middle
将时间减少到 30 毫秒以内

01:51:07.946 --> 01:51:12.016 A:middle
这比之前快了 1000 倍

01:51:13.746 --> 01:51:15.376 A:middle
所以我要感谢 Pro App 的开发人员

01:51:15.376 --> 01:51:16.976 A:middle
谢谢你们 我们也认为这很棒

01:51:17.516 --> 01:51:20.776 A:middle
[掌声]

01:51:21.276 --> 01:51:22.906 A:middle
因此 Pro App 的开发者们

01:51:23.026 --> 01:51:25.446 A:middle
现在可以使用 Metal 计算来构建

01:51:25.446 --> 01:51:27.676 A:middle
新的交互式工具

01:51:27.676 --> 01:51:30.936 A:middle
以可视化这些物理上精确的光影效果

01:51:30.996 --> 01:51:36.936 A:middle
比如由建筑物投下的巨大阴影

01:51:36.936 --> 01:51:37.776 A:middle
以及火灾逃生

01:51:41.106 --> 01:51:42.586 A:middle
或者如果我们在这里

01:51:42.586 --> 01:51:45.266 A:middle
平移到这个屋顶

01:51:45.376 --> 01:51:48.606 A:middle
绿色的灯光反射到这个相邻建筑物的实现方式

01:51:50.646 --> 01:51:51.956 A:middle
这看起来很棒 谢谢

01:51:52.516 --> 01:51:56.696 A:middle
[掌声]

01:51:57.196 --> 01:51:58.666 A:middle
另一个很好的效果

01:51:58.956 --> 01:52:00.956 A:middle
即我们可以模拟或建立的模型

01:52:00.956 --> 01:52:02.336 A:middle
是精确的反射

01:52:02.336 --> 01:52:03.836 A:middle
正如你在公共汽车的挡风玻璃上看到的那样

01:52:04.046 --> 01:52:06.086 A:middle
事实上你可以看到

01:52:06.176 --> 01:52:07.846 A:middle
阴影在那个挡风玻璃或

01:52:07.846 --> 01:52:09.656 A:middle
那些反射中移动

01:52:09.656 --> 01:52:10.666 A:middle
就在我在改变太阳的位置时侯

01:52:10.786 --> 01:52:14.426 A:middle
因此这看起来会很棒

01:52:14.476 --> 01:52:17.776 A:middle
但是在光线跟踪场景中设置的动画对象的

01:52:17.776 --> 01:52:19.146 A:middle
计算成本非常高

01:52:19.426 --> 01:52:20.936 A:middle
因为我们必须更新

01:52:20.936 --> 01:52:24.156 A:middle
与几何体关联的边界体积层次结构

01:52:25.376 --> 01:52:27.496 A:middle
幸运的是通过 Metal 计算

01:52:27.496 --> 01:52:29.776 A:middle
和 MPS API 我们可以

01:52:29.776 --> 01:52:32.306 A:middle
将所有这些工作移到

01:52:32.476 --> 01:52:34.186 A:middle
GPU 上并实现这个精彩的动画

01:52:35.546 --> 01:52:36.636 A:middle
那里有我们的火车

01:52:37.466 --> 01:52:40.666 A:middle
因此这只是一个可能的实例

01:52:40.746 --> 01:52:44.086 A:middle
即当你使用 Metal 在新 Mac Pro上

01:52:44.136 --> 01:52:46.646 A:middle
进行加速光线追踪

01:52:46.646 --> 01:52:48.016 A:middle
这太神奇了 谢谢

01:52:48.186 --> 01:52:49.456 A:middle
把时间还给你 Jeremy

01:52:50.516 --> 01:52:52.636 A:middle
[掌声]

01:52:53.136 --> 01:52:53.696 A:middle
&gt;&gt; 谢谢你 Rav

01:52:54.456 --> 01:52:57.436 A:middle
这就是我们在短时间内所做的事情

01:52:57.666 --> 01:52:59.416 A:middle
但是高性能光线追踪

01:52:59.416 --> 01:53:00.776 A:middle
在我们最专业的第三方开发人员手中

01:53:00.776 --> 01:53:03.816 A:middle
可能会变得更加强大

01:53:03.816 --> 01:53:05.876 A:middle
这就是为什么我们非常兴奋

01:53:05.876 --> 01:53:07.496 A:middle
OTOY 宣布它们正在

01:53:07.496 --> 01:53:09.426 A:middle
使用 Metal 计算来构建 OctaneX 

01:53:09.426 --> 01:53:12.946 A:middle
这是一个全新版本的 Octane 渲染器

01:53:12.946 --> 01:53:14.606 A:middle
他们的互动路径追踪引擎

01:53:14.716 --> 01:53:17.186 A:middle
针对 Metal 和 Apple 平台进行了优化

01:53:18.556 --> 01:53:21.766 A:middle
我们非常激动地与 Maxon 合作

01:53:21.806 --> 01:53:24.356 A:middle
Maxon 将其强大的 GPU 加速渲染器

01:53:24.356 --> 01:53:26.196 A:middle
Redshift 带入 Mac

01:53:26.316 --> 01:53:30.716 A:middle
并为 Metal 和新 Mac Pro 优化了全新版本

01:53:30.716 --> 01:53:33.106 A:middle
因此 借助先进的 Metal 计算 API

01:53:33.106 --> 01:53:34.916 A:middle
以及其强大的硬件

01:53:34.916 --> 01:53:38.526 A:middle
我们构建了 Metal 来支持最先进的

01:53:38.526 --> 01:53:40.666 A:middle
专业内容创建工具

01:53:41.256 --> 01:53:45.186 A:middle
我们一直与领先的 App 开发人员密切合作

01:53:45.186 --> 01:53:46.216 A:middle
他们都宣布将推出的这些

01:53:46.216 --> 01:53:50.096 A:middle
专业内容创建工具和 App

01:53:50.436 --> 01:53:53.726 A:middle
将针对 Metal 和 Apple 平台进行全面优化

01:53:55.116 --> 01:53:57.066 A:middle
例如 Serif 刚刚宣布

01:53:57.066 --> 01:54:00.766 A:middle
推出全新版本的 Mac 系统的 Affinty Photo

01:54:00.766 --> 01:54:02.726 A:middle
使用 Metal 的图形和计算 API

01:54:02.956 --> 01:54:06.006 A:middle
来增强其先进的照片处理引擎

01:54:06.406 --> 01:54:09.066 A:middle
从而实现惊人的性能提升

01:54:09.346 --> 01:54:10.656 A:middle
性能提升 10 倍以上或

01:54:10.656 --> 01:54:14.436 A:middle
甚至是更令人吃惊的 50 倍以上

01:54:14.436 --> 01:54:16.096 A:middle
就在使用带有多个 GPU 的 Metal

01:54:16.096 --> 01:54:18.756 A:middle
在新 Mac Pro 上运行的时侯

01:54:20.016 --> 01:54:22.236 A:middle
因此为了实现这些专业 App

01:54:22.236 --> 01:54:23.716 A:middle
和此类性能

01:54:23.716 --> 01:54:26.986 A:middle
我们与 GPU 硬件和软件合作伙伴团队密切合作

01:54:26.986 --> 01:54:28.536 A:middle
为 Metal 添加了全新的功能

01:54:28.956 --> 01:54:32.626 A:middle
为了支持新 Mac Pro 中心的 
AMD Infinty Fabric 链接

01:54:32.626 --> 01:54:34.306 A:middle
我们添加了 Metal 对等组 API

01:54:35.136 --> 01:54:36.206 A:middle
那么这是做什么的呢

01:54:36.446 --> 01:54:40.076 A:middle
以前在多个 GPU 之间共享工作负载

01:54:40.076 --> 01:54:44.766 A:middle
需要在 PCIe 总线上移动大量数据

01:54:44.766 --> 01:54:46.896 A:middle
但是使用 Metal 对等组 API

01:54:46.896 --> 01:54:51.286 A:middle
APP 可以更加有效的使用多个 GPU

01:54:51.286 --> 01:54:54.426 A:middle
直接在 Infinty Fabric 链接上共享数据

01:54:54.426 --> 01:54:57.086 A:middle
而无需通过系统内存占用那么长而昂贵的路径

01:54:58.536 --> 01:55:00.446 A:middle
最后你已经了解了如何

01:55:00.446 --> 01:55:02.876 A:middle
使用 Metal 计算和新的 Mac Pro

01:55:02.876 --> 01:55:06.936 A:middle
来处理更多的像素

01:55:06.936 --> 01:55:09.026 A:middle
但我们也希望你能够制作出

01:55:09.026 --> 01:55:10.406 A:middle
更加美丽的像素

01:55:10.476 --> 01:55:11.946 A:middle
因此我们引入了华丽的

01:55:12.006 --> 01:55:15.376 A:middle
新款 Pro Display XDR 和全新的 HDR 软件支持

01:55:15.376 --> 01:55:17.706 A:middle
在 macOS 上

01:55:18.396 --> 01:55:21.826 A:middle
你现在可以使用 AV 基础 API 解码 HDR 视频

01:55:21.826 --> 01:55:25.976 A:middle
也可以直接使用 Metal 渲染原生 HDR 内容

01:55:26.626 --> 01:55:29.966 A:middle
你可以管理 HDR 现实色调映射

01:55:29.966 --> 01:55:31.536 A:middle
或者也可以让 Windows 系统和我们的

01:55:31.536 --> 01:55:34.796 A:middle
高级显示系统软件为你做处理

01:55:34.946 --> 01:55:37.046 A:middle
使用这些相同的 API

01:55:37.046 --> 01:55:38.536 A:middle
你还可以在我们现有的许多

01:55:38.536 --> 01:55:42.706 A:middle
Mac 显示器上访问更大范围的亮度级别

01:55:43.366 --> 01:55:45.846 A:middle
这就是我们今天的 Metal 更新

01:55:45.846 --> 01:55:48.986 A:middle
这样会更加轻松的在所有平台上使用 Metal

01:55:48.986 --> 01:55:52.356 A:middle
即通过 iOS 模拟器中的 Metal 和简化的 GPU 系列

01:55:52.406 --> 01:55:53.706 A:middle
我们拥有全新的功能

01:55:53.756 --> 01:55:55.746 A:middle
和强大的硬件

01:55:55.806 --> 01:55:57.926 A:middle
可以释放全新的 GPU 计算性能

01:55:58.426 --> 01:55:59.856 A:middle
我们将 Metal 打造成

01:55:59.966 --> 01:56:02.076 A:middle
最佳的 GPU 编程 API

01:56:02.076 --> 01:56:07.186 A:middle
以推动现代专业内容创建工具和 App 非常感谢

01:56:07.486 --> 01:56:09.436 A:middle
我现在把现场还给 Sebastien 谢谢大家

01:56:10.516 --> 01:56:13.546 A:middle
[掌声]

01:56:14.046 --> 01:56:15.436 A:middle
&gt;&gt; 谢谢你 Jeremy

01:56:15.436 --> 01:56:16.596 A:middle
你们不爱 Metal 吗

01:56:16.756 --> 01:56:18.066 A:middle
你们不喜欢 Metal 强大的能力吗

01:56:18.446 --> 01:56:19.506 A:middle
非常非常精彩

01:56:20.226 --> 01:56:25.236 A:middle
你今天下午看到的是大量的新技术

01:56:25.276 --> 01:56:26.896 A:middle
这对你们所有开发者来说都是新的

01:56:27.486 --> 01:56:28.936 A:middle
我们展示的内容

01:56:28.936 --> 01:56:30.486 A:middle
涵盖了开发者工具

01:56:30.596 --> 01:56:32.486 A:middle
Apple 平台以及核心技术

01:56:32.856 --> 01:56:34.546 A:middle
这些只是其中的一些亮点

01:56:34.896 --> 01:56:37.136 A:middle
事实上本周我们还有很多东西可以展示给你们

01:56:37.336 --> 01:56:40.466 A:middle
所以我们前面有 109 个不同的会议

01:56:40.466 --> 01:56:44.106 A:middle
事实证明 这还不足以涵盖所有

01:56:44.496 --> 01:56:48.726 A:middle
所以今年我们又增加了 27 个视频会议

01:56:50.016 --> 01:56:51.146 A:middle
当你们像更深入的了解时

01:56:51.146 --> 01:56:53.346 A:middle
你可以在一周的 229 次不同的实验中

01:56:53.426 --> 01:57:01.676 A:middle
和在 WWDC 的 1000 多名 Apple 工程师坐在一起

01:57:03.266 --> 01:57:05.426 A:middle
所以走出去

01:57:05.496 --> 01:57:06.526 A:middle
准备好让你的头脑清醒一下

01:57:06.526 --> 01:57:08.526 A:middle
这将会是伟大的一周 谢谢大家

01:57:09.516 --> 01:57:16.500 A:middle
[掌声]

