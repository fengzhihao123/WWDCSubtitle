WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:08.516 A:middle
[音乐]

00:00:09.516 --> 00:00:13.946 A:middle
[掌声]

00:00:14.446 --> 00:00:14.886 A:middle
&gt;&gt; 欢迎大家

00:00:15.346 --> 00:00:16.346 A:middle
我的名字叫 Steve Breen

00:00:16.346 --> 00:00:17.856 A:middle
我是 UIKit 团队的工程师

00:00:18.446 --> 00:00:19.436 A:middle
今天和我一起的

00:00:19.436 --> 00:00:20.966 A:middle
还有我的同事们 

00:00:20.966 --> 00:00:22.596 A:middle
来自 AppKit 团队的 Troy Stephens

00:00:22.596 --> 00:00:24.716 A:middle
还有来自 App Store 团队的 Abolfathi

00:00:26.436 --> 00:00:27.436 A:middle
今天我们将谈一谈

00:00:27.436 --> 00:00:29.006 A:middle
关于 CollectionView 布局的一些

00:00:29.006 --> 00:00:30.646 A:middle
改进与发展

00:00:30.846 --> 00:00:31.486 A:middle
下面我们的发言

00:00:31.486 --> 00:00:33.536 A:middle
将分成四大部分

00:00:33.536 --> 00:00:34.376 A:middle
首先 我们将回顾目前

00:00:34.376 --> 00:00:35.316 A:middle
这项技术的发展状况

00:00:35.316 --> 00:00:35.966 A:middle
也就是现在我们是怎么做的

00:00:35.966 --> 00:00:38.076 A:middle
我们如何定义 App 中的

00:00:38.076 --> 00:00:39.456 A:middle
CollectionView 布局

00:00:40.436 --> 00:00:41.326 A:middle
之后 我们会介绍一种

00:00:41.426 --> 00:00:43.216 A:middle
全新的方法

00:00:43.216 --> 00:00:44.406 A:middle
今年会将它应用到所有平台上

00:00:44.406 --> 00:00:46.256 A:middle
包括 iOS 和 tvOS 以及 Mac

00:00:46.896 --> 00:00:48.326 A:middle
接着 我们将进行一些

00:00:48.326 --> 00:00:49.956 A:middle
实际操作的演示

00:00:49.956 --> 00:00:51.556 A:middle
这样就能看到运行中的 API 了

00:00:52.276 --> 00:00:53.526 A:middle
最后 我们将为大家展示

00:00:53.526 --> 00:00:55.136 A:middle
更多的高级功能

00:00:55.136 --> 00:00:56.886 A:middle
以使这个 API 发挥最大功效

00:01:01.746 --> 00:01:03.346 A:middle
我们开始吧

00:01:04.215 --> 00:01:06.306 A:middle
首先我们说一说

00:01:06.306 --> 00:01:07.166 A:middle
现在这项技术的发展状况

00:01:07.166 --> 00:01:07.876 A:middle
我们现在是怎么做的呢

00:01:07.876 --> 00:01:10.056 A:middle
我们是如何定义 CollectionView 布局的呢

00:01:11.336 --> 00:01:13.176 A:middle
当 CollectionView

00:01:13.176 --> 00:01:15.206 A:middle
被引入 iOS 6 的时候

00:01:15.206 --> 00:01:17.006 A:middle
就有一个很新颖的概念

00:01:17.006 --> 00:01:18.426 A:middle
它用一个单独的抽象概念

00:01:18.426 --> 00:01:19.256 A:middle
来定义布局

00:01:20.156 --> 00:01:21.766 A:middle
因此它其实是

00:01:21.766 --> 00:01:22.906 A:middle
相互配合作用的两个类

00:01:22.906 --> 00:01:23.686 A:middle
一个负责渲染

00:01:23.686 --> 00:01:25.626 A:middle
另一个负责布局

00:01:25.626 --> 00:01:27.966 A:middle
也就是 CollectionView 布局

00:01:28.856 --> 00:01:30.256 A:middle
CollectionView 布局是一个

00:01:30.256 --> 00:01:31.166 A:middle
抽象的概念

00:01:31.166 --> 00:01:32.676 A:middle
所以我们必须将其编入子类

00:01:32.676 --> 00:01:33.306 A:middle
去使用它

00:01:33.356 --> 00:01:35.416 A:middle
我们之前在 iOS 6 中装载了

00:01:35.416 --> 00:01:37.336 A:middle
一个具体的布局类

00:01:37.336 --> 00:01:38.576 A:middle
称作 CollectionView 流式布局

00:01:40.136 --> 00:01:41.696 A:middle
流式布局对许多不同的设计

00:01:41.696 --> 00:01:43.476 A:middle
都十分有用

00:01:43.476 --> 00:01:44.926 A:middle
特别是在 iOS 6 时期

00:01:44.926 --> 00:01:46.126 A:middle
当时的情况

00:01:46.126 --> 00:01:47.176 A:middle
可能更简单一些

00:01:48.066 --> 00:01:49.576 A:middle
当时这么做是因为它使用的

00:01:49.576 --> 00:01:51.306 A:middle
是一种基于行的布局系统

00:01:51.306 --> 00:01:53.606 A:middle
去年 我们在

00:01:54.146 --> 00:01:55.686 A:middle
UI CollectionView 中讲到了它

00:01:56.146 --> 00:01:57.826 A:middle
但总的来说 一个基于行的系统

00:01:57.826 --> 00:01:59.096 A:middle
使你能够在正交轴上进行布局

00:01:59.096 --> 00:02:00.576 A:middle
设置布局轴

00:02:00.576 --> 00:02:02.386 A:middle
直到你填满

00:02:02.386 --> 00:02:03.496 A:middle
可用的空间数量

00:02:03.496 --> 00:02:05.026 A:middle
然后开始下一行

00:02:05.726 --> 00:02:07.726 A:middle
这种方法真的很不错

00:02:07.726 --> 00:02:09.446 A:middle
它运行简单 推理容易

00:02:09.485 --> 00:02:10.826 A:middle
你很快就可以做好布局

00:02:11.786 --> 00:02:15.736 A:middle
但是今天的 App 呢

00:02:16.636 --> 00:02:18.906 A:middle
随着设备的异构性增强

00:02:18.906 --> 00:02:20.656 A:middle
和屏幕大小的改变

00:02:20.656 --> 00:02:21.756 A:middle
在如今的 App 里

00:02:21.756 --> 00:02:23.326 A:middle
情况变得更加复杂了

00:02:23.326 --> 00:02:25.186 A:middle
在这里我们看到的是

00:02:25.326 --> 00:02:26.866 A:middle
装载在 iOS 13 中的 App Store

00:02:27.736 --> 00:02:29.236 A:middle
如果今设计师天交给你这样的设计

00:02:29.236 --> 00:02:31.116 A:middle
你会怎么办呢

00:02:31.116 --> 00:02:32.216 A:middle
你肯定会想

00:02:32.216 --> 00:02:33.986 A:middle
“好吧 我得选择如何进行设计”

00:02:33.986 --> 00:02:35.156 A:middle
因为现在我们可选的选项

00:02:35.156 --> 00:02:35.716 A:middle
远多于从前

00:02:36.806 --> 00:02:38.656 A:middle
然后你也许会选定 CollectionView

00:02:38.656 --> 00:02:40.426 A:middle
而如果你选定了它

00:02:40.486 --> 00:02:42.196 A:middle
你就会想

00:02:42.196 --> 00:02:43.406 A:middle
“我真的能在这里实现流式布局吗”

00:02:44.256 --> 00:02:45.666 A:middle
然后你有可能立刻放弃它

00:02:47.196 --> 00:02:47.976 A:middle
你所面对的

00:02:47.976 --> 00:02:49.486 A:middle
则是一个自定布局

00:02:49.486 --> 00:02:51.256 A:middle
并且 我看到你们在 Twitter 上

00:02:51.256 --> 00:02:52.876 A:middle
关于自定布局的讨论

00:02:52.876 --> 00:02:53.996 A:middle
它们可能会很复杂

00:02:53.996 --> 00:02:55.676 A:middle
去年我们在

00:02:55.766 --> 00:02:58.136 A:middle
CollectionView 的介绍中讨论过它

00:02:58.716 --> 00:03:00.256 A:middle
我们当时讨论了

00:03:00.256 --> 00:03:02.076 A:middle
创建一个自定布局所需要的东西

00:03:03.476 --> 00:03:05.016 A:middle
你需要

00:03:05.266 --> 00:03:06.536 A:middle
在你的具体的布局类中

00:03:06.536 --> 00:03:08.976 A:middle
提供一定数量的东西

00:03:09.336 --> 00:03:10.486 A:middle
我们也讨论了这些东西

00:03:10.756 --> 00:03:12.236 A:middle
同时我们也考虑到了

00:03:12.286 --> 00:03:13.566 A:middle
一些性能注意事项

00:03:13.566 --> 00:03:14.776 A:middle
这是你在设计一个自定布局时

00:03:14.776 --> 00:03:15.976 A:middle
所必须要考虑的事情

00:03:15.976 --> 00:03:17.386 A:middle
以确保当你的 CollectionView 中

00:03:17.386 --> 00:03:18.466 A:middle
有大量的项目时

00:03:18.466 --> 00:03:19.046 A:middle
它依然能快速运行

00:03:19.576 --> 00:03:20.716 A:middle
但我们并没有涵盖所有的情况

00:03:20.716 --> 00:03:22.286 A:middle
如果我们创建这些

00:03:22.286 --> 00:03:23.356 A:middle
自定布局的话

00:03:23.356 --> 00:03:24.296 A:middle
还会遇到其他的挑战

00:03:25.436 --> 00:03:26.766 A:middle
有很多这样的例子

00:03:26.766 --> 00:03:27.876 A:middle
我将在这里介绍一些

00:03:27.916 --> 00:03:29.286 A:middle
比如 补充视图

00:03:29.286 --> 00:03:31.246 A:middle
和装饰视图

00:03:31.246 --> 00:03:33.416 A:middle
都是可以在 CollectionView 里

00:03:33.416 --> 00:03:34.816 A:middle
搞得定的视图

00:03:34.816 --> 00:03:36.236 A:middle
而它们在自定布局里就有点棘手了

00:03:36.236 --> 00:03:36.986 A:middle
你只能靠自己了

00:03:37.566 --> 00:03:39.296 A:middle
同时还有自定尺寸这一挑战

00:03:39.296 --> 00:03:40.556 A:middle
你都得想办法解决

00:03:41.016 --> 00:03:42.336 A:middle
之后我们还会谈到这个

00:03:42.606 --> 00:03:44.186 A:middle
今年我们将一种

00:03:44.186 --> 00:03:46.796 A:middle
全新的具体的布局类

00:03:46.796 --> 00:03:48.666 A:middle
应用到平台中

00:03:48.666 --> 00:03:50.676 A:middle
作为流式布局的同级

00:03:51.286 --> 00:03:53.886 A:middle
我们称之为组合布局

00:03:54.986 --> 00:03:55.706 A:middle
好的

00:03:56.091 --> 00:03:58.091 A:middle
[掌声]

00:03:58.166 --> 00:03:59.936 A:middle
我们还没看过这种布局呢

00:04:02.686 --> 00:04:03.496 A:middle
它是做什么的呢

00:04:04.606 --> 00:04:06.856 A:middle
先讲一点原理

00:04:06.916 --> 00:04:08.076 A:middle
这是建立在什么基础上的呢

00:04:08.076 --> 00:04:09.656 A:middle
它有三个基本支柱

00:04:09.656 --> 00:04:10.976 A:middle
我们在上面搭建组合布局

00:04:10.976 --> 00:04:12.466 A:middle
首先 它是可组合的

00:04:12.466 --> 00:04:13.816 A:middle
也就是用简单的东西

00:04:13.816 --> 00:04:14.696 A:middle
来制作复杂的东西

00:04:15.636 --> 00:04:17.086 A:middle
同时它也是灵活的

00:04:17.555 --> 00:04:19.866 A:middle
你可以用组合布局

00:04:19.866 --> 00:04:20.606 A:middle
来写任何布局

00:04:20.606 --> 00:04:21.776 A:middle
它十分灵活

00:04:21.776 --> 00:04:23.496 A:middle
在默认情况下它的速度也很快

00:04:23.496 --> 00:04:25.296 A:middle
我们之前已经

00:04:25.296 --> 00:04:26.626 A:middle
在框架中进行了

00:04:26.626 --> 00:04:27.966 A:middle
所有的性能优化

00:04:27.966 --> 00:04:28.836 A:middle
因此在这里不用考虑这点

00:04:28.836 --> 00:04:30.276 A:middle
组合布局就是

00:04:30.276 --> 00:04:32.376 A:middle
描述或定义你想做什么

00:04:32.376 --> 00:04:33.766 A:middle
它是一种描述性的 API

00:04:36.346 --> 00:04:37.376 A:middle
“组成”这个词

00:04:37.376 --> 00:04:39.016 A:middle
你将会在本讲座中听到很多次

00:04:39.016 --> 00:04:40.776 A:middle
我们该如何用组合布局

00:04:40.776 --> 00:04:41.776 A:middle
来进行组成呢

00:04:41.776 --> 00:04:43.186 A:middle
我们会用小块的布局

00:04:43.186 --> 00:04:44.636 A:middle
这些小组件

00:04:44.636 --> 00:04:46.896 A:middle
将它们缝合在一起

00:04:47.196 --> 00:04:48.556 A:middle
这样你就用小块的布局

00:04:48.556 --> 00:04:50.126 A:middle
组成了更大的布局

00:04:50.516 --> 00:04:51.766 A:middle
我们已经从大量相关课程里

00:04:51.766 --> 00:04:52.916 A:middle
学习了流式布局

00:04:52.916 --> 00:04:54.416 A:middle
通过这些基于行的课程

00:04:54.416 --> 00:04:56.836 A:middle
你可以学习沿着行进行布局

00:04:56.916 --> 00:04:57.956 A:middle
我们也许知道有多少项目

00:04:57.956 --> 00:04:58.506 A:middle
也许不知道

00:04:58.506 --> 00:04:59.766 A:middle
但我们可以在这些小布局组中的

00:04:59.766 --> 00:05:01.126 A:middle
一行上布局项目

00:05:02.626 --> 00:05:03.506 A:middle
最后 正如名字所示

00:05:03.506 --> 00:05:05.656 A:middle
你不用设置子类

00:05:05.656 --> 00:05:06.496 A:middle
你只需要构建一个东西

00:05:06.496 --> 00:05:08.096 A:middle
然后将一些元素组合起来

00:05:08.096 --> 00:05:09.706 A:middle
之后就可以运行了

00:05:09.706 --> 00:05:13.676 A:middle
说了这么多还没有看代码

00:05:13.676 --> 00:05:14.686 A:middle
在这样的会议上

00:05:14.686 --> 00:05:15.696 A:middle
讨论的应该全是代码

00:05:15.696 --> 00:05:17.586 A:middle
我们来看些代码吧

00:05:18.056 --> 00:05:22.026 A:middle
这是一个 Hello World

00:05:22.376 --> 00:05:23.156 A:middle
组合布局

00:05:23.206 --> 00:05:24.676 A:middle
共有五行代码

00:05:24.676 --> 00:05:27.036 A:middle
现在 我要切换到

00:05:27.036 --> 00:05:28.666 A:middle
我这里的设备

00:05:30.026 --> 00:05:33.446 A:middle
这里展示的是我们的示例 App

00:05:33.446 --> 00:05:35.536 A:middle
接着是列表示例

00:05:35.886 --> 00:05:36.876 A:middle
哇 这个布局挺无聊的

00:05:36.876 --> 00:05:38.496 A:middle
看起来像个表格 

00:05:39.296 --> 00:05:41.436 A:middle
这不重要

00:05:41.806 --> 00:05:46.336 A:middle
下面我们把重点

00:05:46.336 --> 00:05:47.236 A:middle
放在代码上

00:05:47.236 --> 00:05:47.976 A:middle
我们来看这个

00:05:48.886 --> 00:05:50.846 A:middle
这里我们马上

00:05:50.986 --> 00:05:52.206 A:middle
就会有一些发现

00:05:52.206 --> 00:05:53.426 A:middle
那第一个发现

00:05:53.426 --> 00:05:54.986 A:middle
因为我知道开发者们会说

00:05:54.986 --> 00:05:55.896 A:middle
“嘿 Steve 我可以在流式布局中

00:05:55.936 --> 00:05:57.956 A:middle
用两行代码完成这个

00:05:57.996 --> 00:05:59.146 A:middle
你这个有什么意义呢”

00:05:59.856 --> 00:06:01.476 A:middle
这种想法的确没错

00:06:01.476 --> 00:06:03.156 A:middle
你也许可以那样做

00:06:03.156 --> 00:06:05.186 A:middle
但在听完今天的整个发言后

00:06:05.186 --> 00:06:05.996 A:middle
我希望你们

00:06:05.996 --> 00:06:07.416 A:middle
记住和思考的是

00:06:07.416 --> 00:06:08.996 A:middle
当这些布局变得更多更复杂的时候

00:06:08.996 --> 00:06:10.096 A:middle
我们不会让代码量

00:06:10.096 --> 00:06:12.766 A:middle
随着问题的大小

00:06:12.766 --> 00:06:14.126 A:middle
呈线性增长

00:06:14.126 --> 00:06:14.686 A:middle
而是逐渐减少

00:06:14.686 --> 00:06:15.286 A:middle
因为我们只要将

00:06:15.286 --> 00:06:16.806 A:middle
新的东西组到布局中去

00:06:16.806 --> 00:06:18.436 A:middle
用一种非常简单的

00:06:18.676 --> 00:06:20.526 A:middle
容易推出的方法

00:06:20.526 --> 00:06:21.966 A:middle
来得到十分复杂的布局

00:06:22.626 --> 00:06:23.876 A:middle
我非常激动能向你们展示这些成果

00:06:24.636 --> 00:06:26.316 A:middle
第二个发现是

00:06:26.466 --> 00:06:27.406 A:middle
我想要你们看看

00:06:27.406 --> 00:06:29.746 A:middle
这些类型中有一个自然过渡 

00:06:29.746 --> 00:06:31.076 A:middle
这里我们一共有五种类型

00:06:31.076 --> 00:06:32.226 A:middle
这里什么情况

00:06:33.246 --> 00:06:34.926 A:middle
我首先要关注的类型

00:06:35.136 --> 00:06:36.666 A:middle
是这四种类型

00:06:36.666 --> 00:06:38.216 A:middle
它们在逐级递进时

00:06:38.216 --> 00:06:40.306 A:middle
自然会看到这个抽象过程

00:06:40.536 --> 00:06:42.596 A:middle
我们从一个项目开始

00:06:42.596 --> 00:06:43.716 A:middle
这个项目被折叠成一个组

00:06:43.716 --> 00:06:45.916 A:middle
这个组又变成一个段

00:06:46.366 --> 00:06:48.606 A:middle
而这个段又变为我们的布局

00:06:49.856 --> 00:06:51.756 A:middle
现在 我们直观地看一下

00:06:53.386 --> 00:06:58.016 A:middle
这里 这个大矩形就是布局

00:06:58.016 --> 00:07:01.716 A:middle
这个布局是你整个的布局

00:07:02.426 --> 00:07:03.676 A:middle
然后这些明显的白色部分

00:07:03.676 --> 00:07:06.456 A:middle
代表我们的段

00:07:06.806 --> 00:07:08.256 A:middle
这会直接映射到

00:07:08.256 --> 00:07:09.966 A:middle
数据源 也就是

00:07:09.966 --> 00:07:10.726 A:middle
那些段中的内容

00:07:11.606 --> 00:07:12.316 A:middle
接着在这个具体的例子里

00:07:12.316 --> 00:07:14.126 A:middle
我们展示的是一种

00:07:14.126 --> 00:07:15.766 A:middle
传统的网格型布局

00:07:15.766 --> 00:07:17.666 A:middle
我们可以看到这些组

00:07:17.666 --> 00:07:19.026 A:middle
代表了我们的行

00:07:19.886 --> 00:07:22.016 A:middle
在里面的就是项目

00:07:22.906 --> 00:07:24.086 A:middle
这里主要是为了

00:07:24.086 --> 00:07:25.136 A:middle
展示这个将贯穿

00:07:25.136 --> 00:07:26.296 A:middle
整个演讲的层次结构

00:07:26.326 --> 00:07:27.706 A:middle
也就是这种重复的模式

00:07:27.806 --> 00:07:31.106 A:middle
项目 组 段 布局的模式

00:07:33.076 --> 00:07:34.256 A:middle
现在我想要

00:07:34.256 --> 00:07:35.296 A:middle
简要谈一谈

00:07:35.296 --> 00:07:36.486 A:middle
一些概念

00:07:36.486 --> 00:07:38.526 A:middle
在组合布局中的这些核心类型

00:07:38.636 --> 00:07:40.046 A:middle
只要我们弄懂这些

00:07:40.046 --> 00:07:41.006 A:middle
我们就可以直接跳到

00:07:41.006 --> 00:07:42.486 A:middle
实际演示中来检测其适用性

00:07:42.526 --> 00:07:45.266 A:middle
我想从设定尺寸

00:07:45.266 --> 00:07:46.316 A:middle
开始讲起

00:07:47.236 --> 00:07:48.306 A:middle
组合布局扩展了

00:07:48.306 --> 00:07:49.906 A:middle
设定尺寸的功能

00:07:49.906 --> 00:07:51.226 A:middle
让你更容易推出

00:07:51.226 --> 00:07:52.876 A:middle
在一个组合布局里面

00:07:52.876 --> 00:07:53.866 A:middle
如何设定尺寸

00:07:54.566 --> 00:07:56.226 A:middle
所有东西都有一个清楚的尺寸

00:07:56.226 --> 00:07:57.766 A:middle
每个东西的大小

00:07:57.766 --> 00:07:58.696 A:middle
都十分明确

00:08:01.836 --> 00:08:03.266 A:middle
二维几何平面上

00:08:03.336 --> 00:08:03.856 A:middle
用弯曲视图

00:08:03.856 --> 00:08:05.916 A:middle
因此 一个尺寸实际上

00:08:05.916 --> 00:08:06.756 A:middle
只是两个属性

00:08:06.756 --> 00:08:08.646 A:middle
一个是宽度 一个是高度

00:08:09.466 --> 00:08:11.756 A:middle
这里我们可以看到

00:08:11.756 --> 00:08:12.866 A:middle
我们得到了该类型的

00:08:12.896 --> 00:08:13.696 A:middle
简化版定义

00:08:13.696 --> 00:08:15.646 A:middle
它有一个宽度和一个高度

00:08:15.646 --> 00:08:16.686 A:middle
但要注意的是

00:08:16.686 --> 00:08:17.396 A:middle
宽度和高度这两个维度

00:08:17.396 --> 00:08:18.676 A:middle
它们并不是标量值

00:08:18.676 --> 00:08:19.506 A:middle
它不只是一个浮点数或其他

00:08:19.506 --> 00:08:20.846 A:middle
它其实是另一种类型

00:08:20.896 --> 00:08:22.116 A:middle
也就是

00:08:22.166 --> 00:08:24.046 A:middle
NSCollectionLayoutDimension

00:08:25.136 --> 00:08:26.156 A:middle
那又是什么呢

00:08:26.956 --> 00:08:27.756 A:middle
其实很简单

00:08:27.896 --> 00:08:29.896 A:middle
这是用一种不依赖于轴的方式

00:08:29.896 --> 00:08:31.966 A:middle
来描述一个具体的轴的大小

00:08:31.966 --> 00:08:32.876 A:middle
我们有四个不同的方法

00:08:32.876 --> 00:08:35.015 A:middle
来定义这个东西

00:08:35.775 --> 00:08:36.885 A:middle
我们用一种可视的方式

00:08:36.885 --> 00:08:38.586 A:middle
来完成这些

00:08:39.716 --> 00:08:41.395 A:middle
你现在有一个项目

00:08:41.395 --> 00:08:42.296 A:middle
你想要描述它

00:08:42.296 --> 00:08:44.166 A:middle
相对于其容器的大小

00:08:44.926 --> 00:08:45.906 A:middle
最外层的容器

00:08:45.906 --> 00:08:46.676 A:middle
将会是你的 CollectionView

00:08:47.256 --> 00:08:48.376 A:middle
在这里我们只说

00:08:48.376 --> 00:08:49.976 A:middle
这个项目的宽度

00:08:49.976 --> 00:08:51.176 A:middle
会是其容器宽度的

00:08:51.176 --> 00:08:53.246 A:middle
一部分或 50%

00:08:54.656 --> 00:08:56.846 A:middle
同样的 我们可以说

00:08:56.846 --> 00:08:58.056 A:middle
某个东西的高度

00:08:58.056 --> 00:08:59.566 A:middle
是其容器高度的一部分

00:08:59.566 --> 00:09:01.566 A:middle
在这里是 30%

00:09:03.496 --> 00:09:05.266 A:middle
因为我们可以用这种

00:09:05.266 --> 00:09:07.656 A:middle
不依赖轴的方法来描述某物

00:09:07.656 --> 00:09:09.616 A:middle
我们就可以用

00:09:09.616 --> 00:09:11.486 A:middle
具体的长宽比来定义某物

00:09:11.486 --> 00:09:12.816 A:middle
在这个例子里长宽比是 1

00:09:12.816 --> 00:09:15.516 A:middle
通过将宽度和高度

00:09:15.666 --> 00:09:18.166 A:middle
定义为一个维度

00:09:18.166 --> 00:09:19.876 A:middle
即其容器宽度的一部分

00:09:20.526 --> 00:09:22.186 A:middle
因此当它的宽度为

00:09:22.186 --> 00:09:23.496 A:middle
其容器的 25% 时

00:09:23.676 --> 00:09:24.326 A:middle
其高度也是 25%

00:09:25.906 --> 00:09:26.656 A:middle
这些就是

00:09:26.876 --> 00:09:28.716 A:middle
创建维度的分数变量

00:09:29.626 --> 00:09:31.006 A:middle
基于点的值呢

00:09:31.736 --> 00:09:32.636 A:middle
我们有两个

00:09:33.256 --> 00:09:34.876 A:middle
第一个是最简单的 绝对值

00:09:35.536 --> 00:09:36.296 A:middle
你把这个值设为 200 点

00:09:36.296 --> 00:09:37.246 A:middle
因为你的设计师

00:09:37.246 --> 00:09:40.256 A:middle
强调它必须是 200 点

00:09:40.256 --> 00:09:42.076 A:middle
那它就是这样的 

00:09:42.076 --> 00:09:42.796 A:middle
接着在这里

00:09:42.986 --> 00:09:44.336 A:middle
就一个有趣的概念 估算值

00:09:45.376 --> 00:09:47.246 A:middle
如果你不知道具体的

00:09:47.246 --> 00:09:48.166 A:middle
项目的尺寸是多少

00:09:48.166 --> 00:09:49.606 A:middle
我们会经常这样说

00:09:49.736 --> 00:09:51.056 A:middle
你可以估计其大小

00:09:51.056 --> 00:09:52.206 A:middle
假设它是 200 点

00:09:52.566 --> 00:09:55.226 A:middle
随着时间的过去

00:09:55.226 --> 00:09:56.456 A:middle
它会随着项目的渲染而增长

00:09:56.456 --> 00:09:57.566 A:middle
我们对这个项目中的内容

00:09:57.566 --> 00:09:59.436 A:middle
也会更加了解

00:10:05.146 --> 00:10:06.666 A:middle
接下来我们来谈一谈项目

00:10:06.666 --> 00:10:07.656 A:middle
这很简单

00:10:07.656 --> 00:10:09.406 A:middle
这是一个储存格或者补充物

00:10:09.406 --> 00:10:11.116 A:middle
它是一个呈现在屏幕上的东西

00:10:12.296 --> 00:10:14.886 A:middle
你会在 STK 中看到更多的东西

00:10:14.886 --> 00:10:16.866 A:middle
但这只是那种类型定义的一小部分

00:10:17.586 --> 00:10:18.516 A:middle
我们发现当我们构建这些东西时

00:10:18.516 --> 00:10:20.756 A:middle
我们总要给它一个尺寸

00:10:20.996 --> 00:10:22.566 A:middle
所有的东西都要有一个尺寸

00:10:23.236 --> 00:10:25.866 A:middle
我们就接着说

00:10:25.916 --> 00:10:27.146 A:middle
按照抽象层级

00:10:27.146 --> 00:10:28.536 A:middle
已经说过了项目 下面我们来说组

00:10:28.856 --> 00:10:29.536 A:middle
所以什么是组呢

00:10:29.536 --> 00:10:31.366 A:middle
组是层级中的骨干

00:10:31.366 --> 00:10:33.206 A:middle
它就是你要

00:10:33.206 --> 00:10:34.756 A:middle
组成的布局的基本单元

00:10:34.756 --> 00:10:37.286 A:middle
有三种形式

00:10:37.426 --> 00:10:38.506 A:middle
水平 垂直 和自定

00:10:39.136 --> 00:10:39.976 A:middle
你可以把这些想象成

00:10:39.976 --> 00:10:41.226 A:middle
小型的流式布局 

00:10:41.226 --> 00:10:42.696 A:middle
它们布局在水平轴

00:10:42.696 --> 00:10:44.496 A:middle
和垂直轴的一条线上

00:10:45.426 --> 00:10:46.806 A:middle
但要记住 我们之前说过

00:10:46.806 --> 00:10:48.556 A:middle
它是十分灵活的

00:10:48.696 --> 00:10:50.426 A:middle
如果你有一些东西

00:10:50.426 --> 00:10:51.446 A:middle
没有沿着该线进行布局

00:10:51.446 --> 00:10:52.826 A:middle
很多布局就都没有做到这一点

00:10:53.176 --> 00:10:54.316 A:middle
我们可以用一个自定组

00:10:55.096 --> 00:10:56.166 A:middle
那是什么呢

00:10:57.286 --> 00:10:58.726 A:middle
自定组让你以一种

00:10:58.726 --> 00:11:00.876 A:middle
自定义的方式

00:11:00.876 --> 00:11:02.446 A:middle
描述项目的绝对大小和位置

00:11:02.446 --> 00:11:03.436 A:middle
所以如果你有

00:11:03.436 --> 00:11:04.896 A:middle
预定义的生成器

00:11:04.896 --> 00:11:06.726 A:middle
来生成布局 那你就可以用自定组

00:11:07.286 --> 00:11:08.166 A:middle
或者如果你要做一个径向的布局

00:11:08.166 --> 00:11:09.096 A:middle
并且你想要计算它

00:11:09.096 --> 00:11:10.926 A:middle
那你也可以用自定组来完成

00:11:11.526 --> 00:11:12.896 A:middle
很厉害的是

00:11:12.896 --> 00:11:14.066 A:middle
你可以直接在垂直

00:11:14.066 --> 00:11:15.786 A:middle
和水平方向上组成自定义组

00:11:15.786 --> 00:11:17.596 A:middle
也就是用简单

00:11:17.596 --> 00:11:18.016 A:middle
构建复杂

00:11:19.696 --> 00:11:22.156 A:middle
这就是组 层级中的骨干

00:11:23.486 --> 00:11:24.446 A:middle
接下来我们要说

00:11:24.666 --> 00:11:26.276 A:middle
NSCollectionLayoutSection

00:11:27.166 --> 00:11:28.666 A:middle
正如它的名字所示

00:11:28.666 --> 00:11:29.806 A:middle
这是一种基于

00:11:29.886 --> 00:11:31.586 A:middle
CollectionView 中每个段的

00:11:31.586 --> 00:11:32.936 A:middle
布局定义

00:11:33.066 --> 00:11:34.196 A:middle
可以把该段中有多少项目

00:11:34.196 --> 00:11:37.406 A:middle
直接映射到该段的数据源

00:11:37.406 --> 00:11:38.886 A:middle
正如预期 我们看到

00:11:39.466 --> 00:11:40.556 A:middle
对段进行初始化

00:11:40.556 --> 00:11:42.146 A:middle
只需输入布局组
 
00:11:42.676 --> 00:11:45.106 A:middle
我们已经讲过了项目 组 和段

00:11:45.916 --> 00:11:49.076 A:middle
在这部分的最后

00:11:49.076 --> 00:11:51.686 A:middle
我们将讲到两个

00:11:51.686 --> 00:11:53.486 A:middle
顶级的布局类

00:11:53.566 --> 00:11:56.786 A:middle
在 iOS 和 tvOS 中我们有

00:11:56.786 --> 00:11:58.296 A:middle
UICollectionViewCompositionalLayout

00:11:59.016 --> 00:12:00.856 A:middle
而在 Mac 中我们有

00:12:01.356 --> 00:12:02.646 A:middle
NSViewCompositionalLayout

00:12:03.806 --> 00:12:05.026 A:middle
有趣的是

00:12:05.116 --> 00:12:06.556 A:middle
这些布局的定义都是一样的

00:12:06.556 --> 00:12:08.896 A:middle
无论应用在哪个平台

00:12:09.586 --> 00:12:10.236 A:middle
它们只是在顶级类上

00:12:10.236 --> 00:12:12.896 A:middle
有一些细微的差别

00:12:13.516 --> 00:12:15.046 A:middle
最后在这里要说的是

00:12:15.046 --> 00:12:15.866 A:middle
一件十分有趣的事

00:12:15.866 --> 00:12:16.546 A:middle
我们也会在之后的

00:12:16.546 --> 00:12:17.296 A:middle
演示中看到更多

00:12:17.296 --> 00:12:20.956 A:middle
构建一个组合布局的方法

00:12:21.126 --> 00:12:22.056 A:middle
有两种方法

00:12:22.556 --> 00:12:24.486 A:middle
最简单的方法是

00:12:24.486 --> 00:12:26.206 A:middle
直接描述一个布局段的定义

00:12:26.416 --> 00:12:27.776 A:middle
这和我们今天在流式布局中

00:12:27.776 --> 00:12:29.296 A:middle
所用的方法差不多

00:12:29.296 --> 00:12:30.696 A:middle
因为流式布局将每个段的量

00:12:30.696 --> 00:12:31.926 A:middle
定义为与其他所有段一样

00:12:31.926 --> 00:12:33.206 A:middle
因而它是均匀的

00:12:34.396 --> 00:12:36.946 A:middle
而组合布局则扩展了这个想法

00:12:37.526 --> 00:12:38.646 A:middle
因为现在我们有了

00:12:38.646 --> 00:12:39.856 A:middle
这种对段的定义

00:12:39.856 --> 00:12:42.976 A:middle
我们就可以指定一个闭包

00:12:43.236 --> 00:12:44.856 A:middle
该闭包将被调回

00:12:44.856 --> 00:12:46.586 A:middle
并将在每个段的基础上

00:12:46.586 --> 00:12:48.876 A:middle
请求这些段的定义

00:12:49.236 --> 00:12:51.126 A:middle
这样就带来了许多的可能性

00:12:51.126 --> 00:12:52.306 A:middle
因为现在你的布局

00:12:52.736 --> 00:12:53.846 A:middle
能够在段间

00:12:53.846 --> 00:12:55.876 A:middle
被完全区分开

00:12:55.976 --> 00:12:57.886 A:middle
在之后的演示中

00:12:57.886 --> 00:12:59.276 A:middle
我们会向你们展示很多

00:12:59.276 --> 00:13:02.016 A:middle
现在就到演示的部分了

00:13:02.176 --> 00:13:03.926 A:middle
关于类型的讨论已经够多了

00:13:04.006 --> 00:13:05.626 A:middle
下面我们要看看它的实际应用

00:13:05.626 --> 00:13:06.536 A:middle
这一部分就交给

00:13:06.536 --> 00:13:08.896 A:middle
我的同事 Troy Stephens

00:13:08.896 --> 00:13:09.116 A:middle
Troy

00:13:10.321 --> 00:13:12.321 A:middle
[掌声]

00:13:12.626 --> 00:13:13.266 A:middle
&gt;&gt; 谢谢 Steve

00:13:14.776 --> 00:13:16.676 A:middle
接下来 我们就来看一些代码

00:13:16.676 --> 00:13:17.816 A:middle
我们将深入探讨

00:13:17.816 --> 00:13:19.716 A:middle
一些实用的方法

00:13:19.716 --> 00:13:21.416 A:middle
我们如何用 Steve 刚才描述的

00:13:21.516 --> 00:13:22.886 A:middle
这些简单的元素

00:13:23.046 --> 00:13:24.366 A:middle
来构建任意类型的

00:13:24.366 --> 00:13:25.406 A:middle
你想要的布局

00:13:25.956 --> 00:13:27.016 A:middle
因此如果你还没有下载

00:13:27.016 --> 00:13:28.596 A:middle
本次讲座的示例项目的话

00:13:28.596 --> 00:13:29.496 A:middle
请务必下载

00:13:29.986 --> 00:13:31.306 A:middle
这样你就可以跟着做

00:13:31.486 --> 00:13:33.156 A:middle
还能有空的时候研究一下

00:13:33.156 --> 00:13:35.506 A:middle
最重要的是可以在你自己的项目中

00:13:35.506 --> 00:13:37.246 A:middle
免费使用我们的代码

00:13:37.756 --> 00:13:38.736 A:middle
而无论你想要完成

00:13:38.736 --> 00:13:39.656 A:middle
哪种布局的构建

00:13:39.656 --> 00:13:41.236 A:middle
你都能在我们今天

00:13:41.236 --> 00:13:42.356 A:middle
所讲的例子里

00:13:42.356 --> 00:13:43.746 A:middle
找到与之类似的案例

00:13:44.376 --> 00:13:45.916 A:middle
用我们的代码作为基础

00:13:45.916 --> 00:13:46.806 A:middle
进行你的布局

00:13:46.806 --> 00:13:48.266 A:middle
你将会更快更有效地

00:13:48.266 --> 00:13:49.056 A:middle
接近你的目标

00:13:49.096 --> 00:13:50.706 A:middle
我们将看到这很容易

00:13:50.796 --> 00:13:52.696 A:middle
我们利用任意现有的

00:13:52.696 --> 00:13:54.226 A:middle
组合布局描述

00:13:54.566 --> 00:13:56.246 A:middle
并逐步改进它

00:13:56.246 --> 00:13:57.666 A:middle
使之成为你想要的布局

00:13:59.026 --> 00:13:59.996 A:middle
当我们看完今天的示例

00:13:59.996 --> 00:14:01.566 A:middle
我想让你们注意的是

00:14:01.566 --> 00:14:03.726 A:middle
每一个例子中都有

00:14:03.726 --> 00:14:04.806 A:middle
相同的基本模式

00:14:05.076 --> 00:14:07.236 A:middle
这就是 Steve 向我们介绍的模式

00:14:07.916 --> 00:14:09.466 A:middle
每一个组合布局描述

00:14:09.466 --> 00:14:11.346 A:middle
都由四个相同的

00:14:11.346 --> 00:14:13.846 A:middle
基础部分组成

00:14:13.976 --> 00:14:15.896 A:middle
分别是项目 组和段的描述

00:14:15.896 --> 00:14:17.596 A:middle
以及包含三者的

00:14:17.596 --> 00:14:19.146 A:middle
整个布局

00:14:19.496 --> 00:14:20.936 A:middle
在接下来我们看的

00:14:20.936 --> 00:14:21.606 A:middle
每一个代码示例里

00:14:21.606 --> 00:14:22.836 A:middle
我们都将会看到相同的

00:14:22.836 --> 00:14:24.346 A:middle
四层嵌套结构

00:14:24.726 --> 00:14:26.036 A:middle
在更高级的讨论中

00:14:26.036 --> 00:14:27.056 A:middle
我们将看到如何

00:14:27.056 --> 00:14:28.776 A:middle
将组嵌套进其他的组中

00:14:28.776 --> 00:14:30.166 A:middle
利用这些简单的

00:14:30.206 --> 00:14:32.476 A:middle
易懂的部分

00:14:32.506 --> 00:14:34.306 A:middle
来构建或组成

00:14:34.476 --> 00:14:37.026 A:middle
更为复杂精细的布局

00:14:37.676 --> 00:14:38.686 A:middle
接下来我们来看代码

00:14:45.066 --> 00:14:46.286 A:middle
这里我们会从

00:14:46.286 --> 00:14:47.876 A:middle
我们的列表示例开始

00:14:48.456 --> 00:14:49.646 A:middle
这是 Steve 之前展示过的那个

00:14:49.646 --> 00:14:51.426 A:middle
在这里 这是我们

00:14:51.426 --> 00:14:54.396 A:middle
能想到的最简单的有用的布局

00:14:54.576 --> 00:14:56.456 A:middle
这一个单列列表

00:14:56.456 --> 00:14:58.226 A:middle
其中项目的宽度与

00:14:58.226 --> 00:14:58.956 A:middle
CollectionView 相当

00:14:59.656 --> 00:15:02.316 A:middle
如果我把手机转过来

00:15:02.316 --> 00:15:03.646 A:middle
我们能看到这些项目的确会

00:15:03.646 --> 00:15:05.206 A:middle
进行扩展以填充可用的宽度

00:15:05.206 --> 00:15:06.836 A:middle
但同时可以

00:15:06.836 --> 00:15:07.966 A:middle
保持原有高度不变

00:15:08.376 --> 00:15:09.656 A:middle
我们如何用组合布局

00:15:09.726 --> 00:15:11.016 A:middle
来实施这个呢

00:15:11.566 --> 00:15:12.956 A:middle
我打开了列表视图

00:15:12.956 --> 00:15:14.946 A:middle
控制器源文件

00:15:14.946 --> 00:15:15.836 A:middle
这就是我们

00:15:15.836 --> 00:15:16.656 A:middle
实施布局的地方

00:15:16.686 --> 00:15:17.856 A:middle
在今天要讲的每个例子里

00:15:17.856 --> 00:15:19.476 A:middle
我们进行了一个

00:15:19.476 --> 00:15:20.986 A:middle
CreatLayout 的函数

00:15:20.986 --> 00:15:22.346 A:middle
它能够灵活地将

00:15:22.346 --> 00:15:23.936 A:middle
组合布局的描述

00:15:23.936 --> 00:15:25.686 A:middle
打包封装起来

00:15:25.686 --> 00:15:27.456 A:middle
然后再返回来连接到

00:15:27.456 --> 00:15:28.676 A:middle
我们的 CollectionView 中

00:15:28.676 --> 00:15:29.626 A:middle
就像其他任何的

00:15:29.746 --> 00:15:30.906 A:middle
CollectionView 布局一样

00:15:31.836 --> 00:15:33.056 A:middle
这里要注意的第一件事

00:15:33.606 --> 00:15:35.606 A:middle
就是我们之前说过的

00:15:35.606 --> 00:15:37.656 A:middle
要从描述一个项目及其尺寸开始

00:15:38.536 --> 00:15:39.906 A:middle
我们先描述一个项目

00:15:40.396 --> 00:15:42.036 A:middle
然后用它来描述

00:15:42.036 --> 00:15:44.626 A:middle
一个项目组

00:15:45.156 --> 00:15:46.906 A:middle
接着我们把该组放进一个段里

00:15:47.636 --> 00:15:49.196 A:middle
最后我们创建并回到

00:15:49.196 --> 00:15:51.106 A:middle
我们的组合布局

00:15:51.856 --> 00:15:53.016 A:middle
这就是项目 组

00:15:53.016 --> 00:15:54.256 A:middle
段及布局的结构

00:15:54.596 --> 00:15:55.406 A:middle
这里值得注意的第二件事

00:15:55.446 --> 00:15:56.676 A:middle
也是我们在进入到

00:15:56.676 --> 00:15:57.746 A:middle
另一个例子之前

00:15:57.746 --> 00:15:59.056 A:middle
应该真正理解的事

00:15:59.356 --> 00:16:01.996 A:middle
是我们定义项目尺寸的方式

00:16:02.766 --> 00:16:04.336 A:middle
在这个例子中

00:16:04.336 --> 00:16:06.666 A:middle
组的大小最终决定了

00:16:07.306 --> 00:16:08.466 A:middle
项目的大小

00:16:08.466 --> 00:16:10.066 A:middle
下面我来解释一下原理

00:16:10.506 --> 00:16:12.296 A:middle
在这个简单的列表示例中

00:16:12.296 --> 00:16:14.396 A:middle
组似乎有一点多余

00:16:14.646 --> 00:16:15.896 A:middle
在一个组合布局里

00:16:15.896 --> 00:16:17.766 A:middle
一个组代表了一些

00:16:17.766 --> 00:16:19.076 A:middle
典型的重复结构

00:16:19.076 --> 00:16:20.686 A:middle
即一列项目

00:16:20.966 --> 00:16:21.926 A:middle
或一行项目

00:16:22.196 --> 00:16:23.656 A:middle
在这个例子里是一行项目

00:16:23.656 --> 00:16:24.726 A:middle
但的确在一些十分简单的例子里

00:16:24.726 --> 00:16:26.716 A:middle
每一行只有一个项目

00:16:27.166 --> 00:16:29.896 A:middle
这时每个项目都会有自己的组

00:16:30.266 --> 00:16:31.576 A:middle
但是组通常都是

00:16:31.576 --> 00:16:32.906 A:middle
组合布局描述中

00:16:32.906 --> 00:16:33.706 A:middle
固定的一部分

00:16:33.706 --> 00:16:34.626 A:middle
同时我们要用组

00:16:34.626 --> 00:16:36.256 A:middle
来帮助我们定义

00:16:36.256 --> 00:16:37.326 A:middle
项目的大小

00:16:38.046 --> 00:16:40.076 A:middle
之前 Steve 已经介绍了如何

00:16:40.076 --> 00:16:41.466 A:middle
用容器定义大小

00:16:42.676 --> 00:16:44.866 A:middle
我们先来看组的大小的描述

00:16:45.856 --> 00:16:48.206 A:middle
这里我们要求组

00:16:48.206 --> 00:16:49.836 A:middle
也就是这个例子里的行

00:16:50.156 --> 00:16:52.946 A:middle
扩展成容器宽度的 100%

00:16:53.256 --> 00:16:54.726 A:middle
这个组的容器就是它的段

00:16:54.726 --> 00:16:56.406 A:middle
而段会反过来扩大

00:16:56.406 --> 00:16:57.656 A:middle
布局或 CollectionView

00:16:59.586 --> 00:17:01.036 A:middle
同时 我们要求每一个组的高度

00:17:01.116 --> 00:17:03.116 A:middle
都是一个绝对值

00:17:03.116 --> 00:17:05.215 A:middle
即 44 点高

00:17:06.336 --> 00:17:07.185 A:middle
要注意的是

00:17:07.185 --> 00:17:09.076 A:middle
这基本上已经定义了

00:17:09.076 --> 00:17:10.376 A:middle
这个项目方框

00:17:10.376 --> 00:17:11.656 A:middle
就是我们想要的项目大小

00:17:11.656 --> 00:17:12.626 A:middle
即与 CollectionView 等宽

00:17:12.626 --> 00:17:13.646 A:middle
44 点高

00:17:14.215 --> 00:17:15.326 A:middle
在指定项目的大小时

00:17:15.326 --> 00:17:17.346 A:middle
我们需要做的就是

00:17:17.896 --> 00:17:18.986 A:middle
假设我们想要每个项目的

00:17:18.986 --> 00:17:21.396 A:middle
宽度都是其容器的 100%

00:17:21.396 --> 00:17:22.756 A:middle
高度也是 100%

00:17:22.756 --> 00:17:25.896 A:middle
这时该项目的容器就是组

00:17:26.695 --> 00:17:28.056 A:middle
这就是完成一个列表

00:17:28.056 --> 00:17:29.076 A:middle
所需要的全部信息

00:17:29.076 --> 00:17:30.166 A:middle
但有趣的是 在此过程中

00:17:30.166 --> 00:17:31.186 A:middle
我们会发现

00:17:31.186 --> 00:17:32.316 A:middle
我们并不需要在编码上

00:17:32.316 --> 00:17:33.436 A:middle
做大的改变

00:17:33.436 --> 00:17:35.106 A:middle
就能得到十分不同的布局

00:17:35.996 --> 00:17:37.006 A:middle
我们来看另一个例子

00:17:37.006 --> 00:17:40.016 A:middle
这里我要

00:17:40.016 --> 00:17:40.976 A:middle
打开我们的网格

00:17:41.236 --> 00:17:43.196 A:middle
这是一个无边框的

00:17:43.196 --> 00:17:44.566 A:middle
五列的网格

00:17:46.036 --> 00:17:47.646 A:middle
我们可以看看

00:17:47.646 --> 00:17:51.046 A:middle
如果把手机转过来

00:17:51.046 --> 00:17:52.466 A:middle
这个布局就变成了这样

00:17:52.466 --> 00:17:54.376 A:middle
这时我们的确仍然有五列

00:17:54.376 --> 00:17:56.496 A:middle
项目也仍然是正方形的

00:17:56.496 --> 00:17:58.136 A:middle
而项目大小随之改变

00:17:58.216 --> 00:18:00.506 A:middle
以适应这五列的宽度

00:18:03.426 --> 00:18:04.626 A:middle
在这个例子中

00:18:04.626 --> 00:18:06.376 A:middle
组其实要更方便一些

00:18:06.376 --> 00:18:07.646 A:middle
同时我们更容易理解

00:18:07.646 --> 00:18:09.496 A:middle
它们的函数是什么

00:18:10.326 --> 00:18:11.576 A:middle
打开合格网格视图

00:18:11.576 --> 00:18:12.706 A:middle
控制源文件

00:18:12.706 --> 00:18:13.806 A:middle
看看这里创建布局的函数

00:18:13.806 --> 00:18:16.056 A:middle
同样的 还是这个结构

00:18:16.106 --> 00:18:20.676 A:middle
项目 组 段和布局

00:18:21.496 --> 00:18:22.826 A:middle
这看起来和列表布局描述

00:18:22.826 --> 00:18:23.456 A:middle
基本上差不多

00:18:23.456 --> 00:18:24.516 A:middle
这里唯一不同的就是

00:18:24.516 --> 00:18:27.376 A:middle
我们所设定的项目和组的大小

00:18:27.406 --> 00:18:28.716 A:middle
我们来看看能有什么不同

00:18:29.616 --> 00:18:31.876 A:middle
因为一组代表一行

00:18:31.876 --> 00:18:33.216 A:middle
我们仍然让每一组都

00:18:33.216 --> 00:18:34.936 A:middle
扩展到整个

00:18:34.936 --> 00:18:35.786 A:middle
CollectionView 的宽度

00:18:35.936 --> 00:18:38.976 A:middle
这很但这次我们不想让项目

00:18:38.976 --> 00:18:40.406 A:middle
与组的宽度保持一致

00:18:40.536 --> 00:18:42.306 A:middle
我们想要一行有五个项目

00:18:42.306 --> 00:18:43.406 A:middle
那在这个例子里

00:18:43.406 --> 00:18:45.566 A:middle
我们所要做的就是

00:18:45.566 --> 00:18:48.396 A:middle
在这里指定该项目的宽度

00:18:48.396 --> 00:18:50.636 A:middle
为其容器的 20%

00:18:51.106 --> 00:18:52.216 A:middle
该项目的容器是组或行

00:18:52.216 --> 00:18:53.916 A:middle
这时我们就

00:18:53.916 --> 00:18:55.146 A:middle
能够通过我们对

00:18:55.146 --> 00:18:57.076 A:middle
宽度的设定

00:18:57.076 --> 00:18:58.946 A:middle
使一行有五个项目

00:18:59.906 --> 00:19:01.226 A:middle
现在 我们来看高度

00:19:01.226 --> 00:19:02.626 A:middle
我们不设定一个绝对点值

00:19:03.606 --> 00:19:04.826 A:middle
我们说过想让每组

00:19:04.976 --> 00:19:07.236 A:middle
或每行的高度

00:19:07.236 --> 00:19:11.076 A:middle
是其容器宽度的 20%

00:19:11.076 --> 00:19:12.236 A:middle
注意 这里我们用这个方法

00:19:12.746 --> 00:19:15.096 A:middle
来指定横轴的

00:19:15.096 --> 00:19:17.146 A:middle
百分比宽度或高度

00:19:17.146 --> 00:19:18.756 A:middle
这真的很容易

00:19:18.756 --> 00:19:20.706 A:middle
这样我们就能让项目呈正方形

00:19:21.076 --> 00:19:23.286 A:middle
项目的宽度和组的高度

00:19:23.666 --> 00:19:25.186 A:middle
是一样的

00:19:26.436 --> 00:19:27.506 A:middle
同时因为组的高度

00:19:27.506 --> 00:19:28.756 A:middle
决定了项目的高度

00:19:28.756 --> 00:19:30.096 A:middle
在这里我们需要做的就是

00:19:30.096 --> 00:19:32.616 A:middle
设定项目的高度为其组高的 100%

00:19:33.326 --> 00:19:35.886 A:middle
这样创建一个网格

00:19:35.886 --> 00:19:37.306 A:middle
是很简单的

00:19:37.306 --> 00:19:38.566 A:middle
而我们现在所用的代码

00:19:38.566 --> 00:19:39.856 A:middle
与制作列表时所用的

00:19:39.856 --> 00:19:41.856 A:middle
并没有根本上的不同

00:19:42.566 --> 00:19:43.726 A:middle
如果设计师给你一个布局

00:19:43.726 --> 00:19:44.626 A:middle
通常来说 你会想要

00:19:44.626 --> 00:19:46.446 A:middle
在项目之间有一些空间

00:19:46.446 --> 00:19:48.046 A:middle
那接下来就看看怎样加这些空间

00:19:48.936 --> 00:19:50.466 A:middle
打开嵌入式项目网格示例

00:19:50.466 --> 00:19:52.136 A:middle
这仍然是一个

00:19:52.136 --> 00:19:54.086 A:middle
五列的网格

00:19:54.086 --> 00:19:55.866 A:middle
只是在项目之间

00:19:55.866 --> 00:19:57.056 A:middle
增加了一些空间

00:19:59.416 --> 00:20:01.576 A:middle
接下来打开嵌入式项目视图

00:20:02.376 --> 00:20:04.006 A:middle
InsetItemsGridViewController

00:20:04.006 --> 00:20:05.726 A:middle
我们来看

00:20:06.246 --> 00:20:08.146 A:middle
这里 如果把这些代码与

00:20:08.146 --> 00:20:09.296 A:middle
之前的例子相比

00:20:09.296 --> 00:20:10.786 A:middle
你就会发现

00:20:10.836 --> 00:20:12.516 A:middle
只有一行代码有所变化

00:20:12.666 --> 00:20:15.006 A:middle
这个发现很有用

00:20:15.006 --> 00:20:16.016 A:middle
因为你完全可以

00:20:16.016 --> 00:20:17.966 A:middle
把这个布局想成

00:20:17.966 --> 00:20:19.886 A:middle
和之前的无边框布局

00:20:19.886 --> 00:20:21.616 A:middle
几乎完全一样的计算

00:20:22.726 --> 00:20:25.016 A:middle
每个项目都会分配到

00:20:25.016 --> 00:20:26.476 A:middle
与之前给的无边框方块

00:20:26.476 --> 00:20:28.256 A:middle
一样的方块中

00:20:28.716 --> 00:20:30.046 A:middle
但在这个例子里

00:20:30.046 --> 00:20:32.406 A:middle
我们决定不通过

00:20:32.406 --> 00:20:33.576 A:middle
设定项目的大小

00:20:33.576 --> 00:20:34.886 A:middle
使其占据所分配的整个正方形

00:20:34.976 --> 00:20:37.156 A:middle
而是在最后 通过每个边上的

00:20:37.156 --> 00:20:40.096 A:middle
五个点 来嵌入项目的内容

00:20:40.226 --> 00:20:41.706 A:middle
所以这时候 项目的内容

00:20:41.706 --> 00:20:42.686 A:middle
就很有用了

00:20:42.686 --> 00:20:45.136 A:middle
而这个最后的步骤

00:20:45.136 --> 00:20:46.896 A:middle
是从已计算过的布局中减去一部分

00:20:47.426 --> 00:20:48.066 A:middle
这真的很棒

00:20:48.066 --> 00:20:50.196 A:middle
我们看过了如何创建列表和网格

00:20:50.436 --> 00:20:51.896 A:middle
还通过定义项目的大小

00:20:52.216 --> 00:20:54.726 A:middle
创建了网格

00:20:55.096 --> 00:20:55.896 A:middle
这里还有一种很好的方法

00:20:55.946 --> 00:20:58.306 A:middle
可以用来创建

00:20:58.416 --> 00:21:00.596 A:middle
含有行和列的网格状布局

00:21:01.636 --> 00:21:02.806 A:middle
我在这里展示给你们

00:21:02.806 --> 00:21:03.746 A:middle
这样就能熟悉它了

00:21:04.366 --> 00:21:05.126 A:middle
这里我打开

00:21:05.126 --> 00:21:06.636 A:middle
两列的网格示例

00:21:07.166 --> 00:21:09.956 A:middle
从表面上看起来

00:21:09.956 --> 00:21:11.016 A:middle
这和五列的网格很像

00:21:11.016 --> 00:21:13.366 A:middle
只是这里的列更少 

00:21:13.366 --> 00:21:15.446 A:middle
的确 如果我把它转过来

00:21:15.446 --> 00:21:17.056 A:middle
它就变成了这样

00:21:17.056 --> 00:21:18.936 A:middle
仍然保持两列不变

00:21:19.426 --> 00:21:20.606 A:middle
而每个项目都扩展到了适当宽度

00:21:21.696 --> 00:21:22.886 A:middle
但是这与之前的做法

00:21:22.886 --> 00:21:24.426 A:middle
还是有所不同的

00:21:24.426 --> 00:21:25.376 A:middle
所以我们有必要讲讲

00:21:25.926 --> 00:21:27.016 A:middle
这里

00:21:27.016 --> 00:21:28.876 A:middle
在 TwoColumnViewController 中

00:21:29.206 --> 00:21:30.506 A:middle
我们要看的是

00:21:30.506 --> 00:21:31.556 A:middle
createLayout 函数

00:21:33.056 --> 00:21:34.546 A:middle
我们注意到 有趣的是

00:21:34.546 --> 00:21:36.146 A:middle
这里又一次出现了

00:21:36.146 --> 00:21:39.096 A:middle
项目 组 段和布局结构

00:21:39.096 --> 00:21:39.946 A:middle
但我们首先要注意的

00:21:39.946 --> 00:21:42.006 A:middle
这也许不会

00:21:42.006 --> 00:21:43.776 A:middle
立刻表现出来

00:21:43.776 --> 00:21:45.406 A:middle
即我们在创建代表着

00:21:45.406 --> 00:21:47.246 A:middle
每一行的水平组时

00:21:47.246 --> 00:21:48.436 A:middle
用了一种不太一样的方法

00:21:49.106 --> 00:21:50.516 A:middle
我们用一种不同形式的

00:21:50.516 --> 00:21:52.276 A:middle
初始化程序

00:21:52.276 --> 00:21:53.926 A:middle
该程序有明确的计数参数

00:21:54.236 --> 00:21:56.066 A:middle
这里我们就明确地设定

00:21:56.606 --> 00:21:58.676 A:middle
每一组需要有两个项目

00:21:58.676 --> 00:22:01.236 A:middle
即每行两个项目

00:22:01.816 --> 00:22:02.466 A:middle
如此一来

00:22:02.466 --> 00:22:03.576 A:middle
组合布局就会

00:22:03.656 --> 00:22:05.356 A:middle
自动计算出

00:22:05.356 --> 00:22:06.546 A:middle
项目的宽度

00:22:06.546 --> 00:22:07.446 A:middle
以满足这一设定

00:22:08.406 --> 00:22:10.226 A:middle
我们在这里像往常一样

00:22:10.226 --> 00:22:11.396 A:middle
设定一个项目的宽度

00:22:11.616 --> 00:22:13.506 A:middle
我们假设它是容器的 100%

00:22:14.036 --> 00:22:15.366 A:middle
但是顶部的值

00:22:15.366 --> 00:22:17.006 A:middle
最终会被覆盖

00:22:17.006 --> 00:22:18.106 A:middle
当你要求每一组都有

00:22:18.106 --> 00:22:19.586 A:middle
一定数量的项目时

00:22:19.976 --> 00:22:21.336 A:middle
组合布局

00:22:21.626 --> 00:22:22.616 A:middle
该组合布局就会

00:22:22.616 --> 00:22:24.026 A:middle
将其视为一种覆盖

00:22:24.326 --> 00:22:25.136 A:middle
然后就会计算出

00:22:25.136 --> 00:22:26.246 A:middle
真正能够满足

00:22:26.246 --> 00:22:28.316 A:middle
我们要求的宽度

00:22:28.476 --> 00:22:29.936 A:middle
我们也用一种不同的方法

00:22:29.936 --> 00:22:31.216 A:middle
增加项目与项目

00:22:31.216 --> 00:22:32.286 A:middle
之间的空间

00:22:32.286 --> 00:22:33.446 A:middle
组合布局提供了

00:22:33.446 --> 00:22:34.906 A:middle
很多方法来完成这一步

00:22:34.906 --> 00:22:36.486 A:middle
这让 API 变得十分灵活

00:22:37.706 --> 00:22:39.666 A:middle
在这个例子里

00:22:39.666 --> 00:22:42.216 A:middle
我们不指定 itemInsets

00:22:42.826 --> 00:22:44.446 A:middle
而是在段上指定 contentInsets

00:22:45.066 --> 00:22:46.306 A:middle
这里 我想在左右两边

00:22:46.306 --> 00:22:47.616 A:middle
都加上一点空白

00:22:47.616 --> 00:22:48.956 A:middle
我们只有一个段

00:22:48.956 --> 00:22:50.856 A:middle
所以这基本上就是我们整个的布局

00:22:51.336 --> 00:22:53.236 A:middle
我们想要 10 个点的前导间隔

00:22:53.236 --> 00:22:55.776 A:middle
和 10 个点的尾随间隔

00:22:56.846 --> 00:22:58.266 A:middle
注意当我们在这行代码上时

00:22:58.266 --> 00:23:00.836 A:middle
组合布局的设计会促使你

00:23:00.836 --> 00:23:02.626 A:middle
用不确定布局方向的方式

00:23:02.626 --> 00:23:05.556 A:middle
来表达你的布局

00:23:05.556 --> 00:23:07.776 A:middle
所以不用明确指出左右

00:23:07.776 --> 00:23:09.526 A:middle
我们只用指定

00:23:09.526 --> 00:23:10.676 A:middle
前导和尾随

00:23:10.856 --> 00:23:12.316 A:middle
这样真的很棒

00:23:12.316 --> 00:23:13.726 A:middle
因为当你用一种从右到左的语言

00:23:13.726 --> 00:23:15.156 A:middle
运行 App 的时候

00:23:15.156 --> 00:23:17.146 A:middle
你会自动得到

00:23:17.146 --> 00:23:18.206 A:middle
正确的布局

00:23:19.156 --> 00:23:23.106 A:middle
这里我们也用到一个组的属性

00:23:23.106 --> 00:23:24.896 A:middle
叫做 interItemSpacing

00:23:24.896 --> 00:23:26.416 A:middle
我们请求一个组

00:23:26.416 --> 00:23:27.666 A:middle
在其项目之间增加一定量的空间

00:23:27.696 --> 00:23:29.256 A:middle
在这个例子中

00:23:29.316 --> 00:23:31.516 A:middle
我们将其设为 10 个点

00:23:31.806 --> 00:23:34.246 A:middle
其他的都与前面的例子

00:23:34.246 --> 00:23:35.506 A:middle
非常相似

00:23:35.506 --> 00:23:36.776 A:middle
我们只用那个方法

00:23:36.776 --> 00:23:39.206 A:middle
来明确指定每一组的项目数

00:23:40.566 --> 00:23:41.586 A:middle
这样就相当不错

00:23:42.356 --> 00:23:43.606 A:middle
但 Steve 之前提到了

00:23:43.696 --> 00:23:44.916 A:middle
另一种很棒的功能

00:23:44.916 --> 00:23:45.876 A:middle
我想深入讲讲

00:23:46.916 --> 00:23:48.326 A:middle
他提到每个段

00:23:48.326 --> 00:23:50.476 A:middle
都可以有不同的布局

00:23:50.476 --> 00:23:51.816 A:middle
目前为止我们只看了

00:23:51.816 --> 00:23:53.586 A:middle
一个段的布局

00:23:53.586 --> 00:23:54.546 A:middle
但要是我们想要有多个段呢

00:23:54.546 --> 00:23:56.456 A:middle
而且每个段还要有

00:23:56.456 --> 00:23:57.856 A:middle
不同的布局呢

00:23:58.746 --> 00:23:59.926 A:middle
下面打开不同的

00:23:59.926 --> 00:24:00.866 A:middle
段的示例

00:24:02.106 --> 00:24:03.616 A:middle
现在这个布局

00:24:03.616 --> 00:24:04.876 A:middle
有点像我们之前讲过的

00:24:04.876 --> 00:24:05.686 A:middle
示例的合成

00:24:05.936 --> 00:24:07.726 A:middle
在这个布局中有三个段

00:24:08.726 --> 00:24:11.446 A:middle
第一段是一个简单的

00:24:11.446 --> 00:24:13.326 A:middle
类似于之前的单列列表

00:24:14.126 --> 00:24:16.006 A:middle
第二段是一个正方形项目的

00:24:16.006 --> 00:24:16.806 A:middle
五列网格

00:24:16.806 --> 00:24:18.876 A:middle
第三段则是一个长方形项目的

00:24:18.876 --> 00:24:20.266 A:middle
三列网格

00:24:21.176 --> 00:24:22.976 A:middle
那我们该怎么做呢

00:24:24.346 --> 00:24:25.076 A:middle
首先打开

00:24:25.076 --> 00:24:26.616 A:middle
DistinctSectionsViewController

00:24:26.616 --> 00:24:28.586 A:middle
看 createLayout 函数

00:24:30.126 --> 00:24:31.456 A:middle
第一眼看上去

00:24:31.456 --> 00:24:32.406 A:middle
它好像和之前完全不同

00:24:32.406 --> 00:24:33.946 A:middle
但实际上只是

00:24:33.946 --> 00:24:35.206 A:middle
最外层的组件不同

00:24:35.206 --> 00:24:36.386 A:middle
相比我们先前例示的布局

00:24:36.386 --> 00:24:37.486 A:middle
它不是在结尾

00:24:37.486 --> 00:24:38.666 A:middle
而是在开头

00:24:39.306 --> 00:24:40.166 A:middle
原因是这样

00:24:40.766 --> 00:24:42.336 A:middle
当我们例示组合布局时

00:24:42.336 --> 00:24:43.596 A:middle
用的是一个初始化程序

00:24:43.596 --> 00:24:45.356 A:middle
该程序将提供段的闭包

00:24:45.356 --> 00:24:47.066 A:middle
视为其参数

00:24:47.066 --> 00:24:48.526 A:middle
这是 Steve 提到过的

00:24:49.286 --> 00:24:50.656 A:middle
提供段的闭包

00:24:50.656 --> 00:24:52.406 A:middle
是一个任意代码块

00:24:52.406 --> 00:24:54.596 A:middle
因此你们可以想象

00:24:54.596 --> 00:24:56.756 A:middle
你可以通过返回任何类型的

00:24:56.756 --> 00:24:58.396 A:middle
你想要的段的布局

00:24:58.396 --> 00:25:00.296 A:middle
来对这个被调用做出响应

00:25:01.096 --> 00:25:02.516 A:middle
传两个指明具体段的参数

00:25:03.206 --> 00:25:04.376 A:middle
即两个段指数参数

00:25:04.376 --> 00:25:05.186 A:middle
在这个例子里

00:25:05.186 --> 00:25:06.606 A:middle
将会是 0 1 或 2

00:25:07.596 --> 00:25:08.976 A:middle
一个布局环境

00:25:08.976 --> 00:25:10.106 A:middle
包含了各种

00:25:10.106 --> 00:25:11.326 A:middle
你可以查到的有用属性

00:25:11.326 --> 00:25:13.076 A:middle
那个我们待会再看

00:25:14.536 --> 00:25:16.676 A:middle
这个闭包里的

00:25:16.676 --> 00:25:17.796 A:middle
其他东西都只是

00:25:17.796 --> 00:25:18.956 A:middle
和之前一样的代码

00:25:19.026 --> 00:25:21.446 A:middle
我们指定一个项目的描述

00:25:22.066 --> 00:25:24.576 A:middle
然后将其嵌入一个组的描述

00:25:25.056 --> 00:25:27.026 A:middle
最后 我们指定

00:25:27.026 --> 00:25:28.256 A:middle
一个段的描述

00:25:28.256 --> 00:25:29.166 A:middle
这就是提供段的闭包

00:25:29.166 --> 00:25:30.386 A:middle
所返回的内容

00:25:30.996 --> 00:25:32.966 A:middle
组合布局会

00:25:32.966 --> 00:25:34.156 A:middle
在需要重新查询

00:25:34.156 --> 00:25:35.866 A:middle
一个对特定段的

00:25:35.866 --> 00:25:38.666 A:middle
新的描述时

00:25:38.666 --> 00:25:39.676 A:middle
自动调用这个闭包

00:25:40.346 --> 00:25:42.126 A:middle
这里的内容就与

00:25:42.126 --> 00:25:43.266 A:middle
之前的十分相似

00:25:44.126 --> 00:25:45.466 A:middle
有趣的是

00:25:45.466 --> 00:25:46.516 A:middle
使各种布局有所区分的

00:25:46.516 --> 00:25:47.886 A:middle
主要是每个布局中

00:25:47.886 --> 00:25:49.116 A:middle
列的数量不同

00:25:49.846 --> 00:25:50.746 A:middle
我们已经有

00:25:50.746 --> 00:25:52.966 A:middle
这个 SectionLayoutKind 类型

00:25:52.966 --> 00:25:54.376 A:middle
它在源文件的顶端

00:25:54.376 --> 00:25:55.416 A:middle
我们来看一下

00:25:55.416 --> 00:25:56.846 A:middle
当我们将它初始化

00:25:56.886 --> 00:25:58.506 A:middle
我们就进入到段指数中

00:25:58.506 --> 00:25:59.816 A:middle
该指数为 0 1 或 2

00:26:02.666 --> 00:26:04.476 A:middle
一个告诉我们

00:26:04.476 --> 00:26:05.606 A:middle
SectionLayoutKind 要么是一个列表

00:26:05.606 --> 00:26:08.306 A:middle
要么是网格 5 或网格 3

00:26:08.306 --> 00:26:08.906 A:middle
的枚举类型中

00:26:09.126 --> 00:26:11.696 A:middle
我们还添加了 columnCount

00:26:11.896 --> 00:26:13.436 A:middle
这个方便易得的属性

00:26:13.436 --> 00:26:14.636 A:middle
这里我们可以直接请求

00:26:14.636 --> 00:26:16.636 A:middle
该 SectionLayoutKind 值

00:26:16.636 --> 00:26:18.136 A:middle
即在该布局中应有多少列

00:26:18.646 --> 00:26:21.056 A:middle
回到我们的 createLayout 函数

00:26:21.056 --> 00:26:22.376 A:middle
我们能看到在我们请求

00:26:22.376 --> 00:26:24.356 A:middle
该 columnCount 的地方

00:26:24.356 --> 00:26:25.556 A:middle
有两处不同应用

00:26:25.866 --> 00:26:29.436 A:middle
在两列网格的示例里

00:26:29.436 --> 00:26:31.256 A:middle
当我们将水平的组

00:26:31.256 --> 00:26:32.796 A:middle
初始化时

00:26:32.796 --> 00:26:34.836 A:middle
我们明确指定了

00:26:34.836 --> 00:26:35.826 A:middle
想要的列的数量

00:26:36.616 --> 00:26:38.866 A:middle
因此我们就交给复合布局

00:26:38.956 --> 00:26:40.506 A:middle
来自动算出

00:26:40.506 --> 00:26:42.006 A:middle
所含的是哪种项目宽度

00:26:42.276 --> 00:26:43.676 A:middle
我们还用列的数量

00:26:43.676 --> 00:26:45.716 A:middle
来决定布局中的

00:26:45.716 --> 00:26:46.936 A:middle
组或行的高度

00:26:46.936 --> 00:26:48.416 A:middle
来区分布局

00:26:48.416 --> 00:26:50.516 A:middle
你可以选择你想用的方法

00:26:50.806 --> 00:26:52.816 A:middle
真的很不错

00:26:52.816 --> 00:26:53.856 A:middle
但如果我们想要

00:26:53.856 --> 00:26:56.066 A:middle
调整这个布局呢

00:26:56.066 --> 00:26:58.596 A:middle
如果我们将手机转过来

00:26:59.306 --> 00:27:00.726 A:middle
可能空间就没有被

00:27:00.726 --> 00:27:01.776 A:middle
充分利用了

00:27:02.526 --> 00:27:03.906 A:middle
或许我们可以放更多的项目

00:27:04.866 --> 00:27:06.836 A:middle
那我们就来看看自适应段布局

00:27:07.856 --> 00:27:09.276 A:middle
第一眼看上去

00:27:09.276 --> 00:27:10.926 A:middle
这和上一个例子一模一样

00:27:11.336 --> 00:27:13.896 A:middle
但旋转过来之后

00:27:13.896 --> 00:27:15.216 A:middle
我们发现第一段

00:27:15.216 --> 00:27:16.846 A:middle
调整显示为两列

00:27:16.846 --> 00:27:18.806 A:middle
第二段调整为十列

00:27:18.806 --> 00:27:21.766 A:middle
第三段调整为六列

00:27:22.486 --> 00:27:24.176 A:middle
这个代码应该怎么写呢

00:27:24.616 --> 00:27:26.976 A:middle
其实和前一个例子很像

00:27:28.586 --> 00:27:29.196 A:middle
下面打开

00:27:29.356 --> 00:27:31.096 A:middle
AdaptiveSectionsViewController

00:27:31.156 --> 00:27:33.076 A:middle
看 createLayout 函数

00:27:33.076 --> 00:27:36.676 A:middle
这和前一个例子很像

00:27:36.786 --> 00:27:37.576 A:middle
我们最先注意到的不同

00:27:37.576 --> 00:27:39.366 A:middle
就是我们改变了

00:27:39.366 --> 00:27:41.376 A:middle
SectionLayoutKind 的类型

00:27:42.026 --> 00:27:42.696 A:middle
这里仍然有

00:27:42.696 --> 00:27:43.866 A:middle
SectionLayoutKind

00:27:44.286 --> 00:27:45.786 A:middle
但 columnCount 不再只是

00:27:45.786 --> 00:27:47.326 A:middle
一个可获取的属性

00:27:47.406 --> 00:27:48.796 A:middle
而是有一个参数的函数

00:27:48.796 --> 00:27:52.396 A:middle
这里我们给它传一个

00:27:52.556 --> 00:27:55.286 A:middle
从 layoutEnvironment 里获得的宽度

00:27:55.286 --> 00:27:56.746 A:middle
该 layoutEnvironment 类型里

00:27:57.056 --> 00:27:58.366 A:middle
就包含了一些信息

00:27:58.406 --> 00:27:59.806 A:middle
比如你的布局所要处理的

00:28:01.896 --> 00:28:04.046 A:middle
在 iOS 上它还包含

00:28:04.046 --> 00:28:05.666 A:middle
特征集合信息

00:28:05.846 --> 00:28:07.076 A:middle
因此你可以用这些信息

00:28:07.076 --> 00:28:08.906 A:middle
来计算出

00:28:08.906 --> 00:28:10.116 A:middle
什么样的布局

00:28:10.116 --> 00:28:11.336 A:middle
适合现在的环境

00:28:11.826 --> 00:28:13.276 A:middle
这里我们只使用宽度

00:28:13.276 --> 00:28:16.476 A:middle
如果我们看看顶部

00:28:16.476 --> 00:28:18.026 A:middle
我们在这里用了 SectionLayoutKind

00:28:18.806 --> 00:28:19.946 A:middle
我们可以发现该 columnCount 函数

00:28:19.946 --> 00:28:21.416 A:middle
现在是一个函数

00:28:21.796 --> 00:28:24.096 A:middle
它接受我们传入的宽度参数

00:28:24.096 --> 00:28:25.106 A:middle
在这个例子里

00:28:25.106 --> 00:28:26.616 A:middle
这是 CollectionView 的宽度

00:28:26.986 --> 00:28:28.236 A:middle
我们基本上实现了

00:28:28.236 --> 00:28:28.926 A:middle
一个布局改变

00:28:29.326 --> 00:28:30.906 A:middle
我们决定如果在我们的设备上

00:28:30.906 --> 00:28:32.696 A:middle
需要处理大于

00:28:32.696 --> 00:28:34.106 A:middle
800 个点的宽度

00:28:34.106 --> 00:28:36.126 A:middle
我们会用 wideMode

00:28:36.566 --> 00:28:38.896 A:middle
在 wideMode 里我们只要

00:28:38.896 --> 00:28:40.946 A:middle
在每个段中返回大量的列

00:28:41.646 --> 00:28:43.266 A:middle
就可以完成

00:28:43.436 --> 00:28:44.566 A:middle
如果我们返回 creatLayout 函数

00:28:44.566 --> 00:28:45.766 A:middle
我们就会发现

00:28:45.766 --> 00:28:47.336 A:middle
当我们得到列的数量后

00:28:47.336 --> 00:28:49.646 A:middle
我们所用的方法

00:28:49.646 --> 00:28:51.936 A:middle
可能还是和以前差不多

00:28:51.936 --> 00:28:53.506 A:middle
所以我们不用改变太多代码

00:28:53.716 --> 00:28:55.266 A:middle
就可以得到一个自适应

00:28:55.266 --> 00:28:57.426 A:middle
旋转的布局

00:28:57.956 --> 00:29:00.396 A:middle
这样就很不错

00:29:00.506 --> 00:29:02.006 A:middle
但目前为止

00:29:02.006 --> 00:29:03.306 A:middle
我们只讨论了项目

00:29:03.306 --> 00:29:05.136 A:middle
我们甚至还没有深入探讨

00:29:05.136 --> 00:29:07.516 A:middle
我们可以用补充视图

00:29:07.516 --> 00:29:08.836 A:middle
和装饰视图做什么

00:29:09.056 --> 00:29:09.916 A:middle
我最喜欢组合布局的

00:29:09.916 --> 00:29:10.866 A:middle
一点是

00:29:10.866 --> 00:29:12.776 A:middle
它使事情变得

00:29:12.776 --> 00:29:14.926 A:middle
前所未有地简单

00:29:14.926 --> 00:29:17.046 A:middle
我们能够超出页眉和页脚

00:29:17.046 --> 00:29:18.136 A:middle
使用你自己设计的

00:29:18.246 --> 00:29:21.276 A:middle
任意的补充视图

00:29:21.856 --> 00:29:24.336 A:middle
接下来的部分

00:29:24.336 --> 00:29:25.646 A:middle
我们将进入

00:29:25.646 --> 00:29:26.976 A:middle
一些更高级的话题

00:29:26.976 --> 00:29:28.556 A:middle
一些你可以用组合布局

00:29:28.556 --> 00:29:29.896 A:middle
完成的很棒的事情

00:29:29.896 --> 00:29:31.866 A:middle
下面就继续交给我的同事 Steve

00:29:32.016 --> 00:29:32.496 A:middle
谢谢

00:29:33.516 --> 00:29:37.876 A:middle
[掌声]

00:29:38.376 --> 00:29:39.336 A:middle
&gt;&gt; 既然我们已经

00:29:39.336 --> 00:29:40.856 A:middle
看过基本的工作原理

00:29:41.026 --> 00:29:41.896 A:middle
知道如何创建

00:29:41.896 --> 00:29:42.806 A:middle
和运行组合布局

00:29:42.806 --> 00:29:44.736 A:middle
接下来我就要带大家进入

00:29:44.856 --> 00:29:46.106 A:middle
更高级的话题了

00:29:46.106 --> 00:29:47.326 A:middle
因为我们有很多种方法

00:29:47.326 --> 00:29:48.936 A:middle
可以用组合布局

00:29:48.936 --> 00:29:50.046 A:middle
来创建自定布局

00:29:50.806 --> 00:29:53.926 A:middle
首先我要接着

00:29:53.926 --> 00:29:55.476 A:middle
谈一谈补充项目

00:29:56.616 --> 00:29:58.126 A:middle
CollectionView 可以做三个基本的

00:29:58.126 --> 00:30:00.086 A:middle
视图类类型

00:30:00.086 --> 00:30:01.486 A:middle
包括储存格 即用来表示

00:30:01.486 --> 00:30:02.906 A:middle
模型对象的交互对象

00:30:02.906 --> 00:30:04.966 A:middle
同时它也代表着

00:30:05.136 --> 00:30:07.736 A:middle
补充项目和装饰项目

00:30:08.446 --> 00:30:10.236 A:middle
它们是为了装饰

00:30:10.236 --> 00:30:11.296 A:middle
布局的其他部分 

00:30:11.296 --> 00:30:12.786 A:middle
来给你一些关于内容信息的

00:30:12.926 --> 00:30:14.436 A:middle
视觉提示 比如

00:30:14.436 --> 00:30:16.106 A:middle
一个储存格上的标记会说

00:30:16.106 --> 00:30:17.076 A:middle
“嘿 你有一条推特评论”

00:30:17.076 --> 00:30:17.816 A:middle
或其他什么

00:30:18.946 --> 00:30:20.906 A:middle
今天我们会看到一些

00:30:20.946 --> 00:30:22.886 A:middle
这三个例子的常见用法

00:30:22.966 --> 00:30:24.776 A:middle
即标记 页眉和页脚

00:30:25.186 --> 00:30:26.766 A:middle
现在我们有流支持

00:30:26.766 --> 00:30:28.406 A:middle
以及粘性的页眉和页脚

00:30:28.406 --> 00:30:29.876 A:middle
它们在内容上方浮动

00:30:30.176 --> 00:30:32.086 A:middle
但我们可以在

00:30:32.086 --> 00:30:32.946 A:middle
组合布局里进行扩展

00:30:32.946 --> 00:30:34.166 A:middle
使其变得更容易

00:30:34.616 --> 00:30:36.776 A:middle
我们可以用这个概念简化它

00:30:36.776 --> 00:30:37.836 A:middle
将内容锚定在

00:30:37.836 --> 00:30:42.036 A:middle
你布局的一个项目或组上

00:30:42.036 --> 00:30:43.276 A:middle
这样可以简化视觉关系

00:30:43.276 --> 00:30:44.536 A:middle
这是怎么做到的呢

00:30:44.536 --> 00:30:47.496 A:middle
我们来直观地看一下

00:30:47.496 --> 00:30:50.406 A:middle
这里 我们能看到

00:30:50.576 --> 00:30:51.416 A:middle
有一个新的类型

00:30:51.646 --> 00:30:52.876 A:middle
NSCollectionLayoutAnchor

00:30:53.586 --> 00:30:54.986 A:middle
我们在这里设定

00:30:55.186 --> 00:30:56.896 A:middle
这两种类型的关系

00:30:56.896 --> 00:30:58.066 A:middle
我们的补充物就会

00:30:58.066 --> 00:31:00.216 A:middle
通过与一个主空间

00:31:00.216 --> 00:31:02.016 A:middle
一个项目或组的几何形状

00:31:02.016 --> 00:31:04.326 A:middle
相对应的方式被锚定

00:31:04.986 --> 00:31:06.956 A:middle
这非常容易推出

00:31:09.466 --> 00:31:11.766 A:middle
那这里我们马上看到

00:31:11.766 --> 00:31:14.276 A:middle
我们创建的 NSCollectionLayoutAnchor

00:31:14.276 --> 00:31:15.376 A:middle
我们指定边缘

00:31:15.376 --> 00:31:16.716 A:middle
我们想要把这个项目固定在

00:31:16.716 --> 00:31:20.156 A:middle
该储存格顶端的尾随边

00:31:20.836 --> 00:31:22.656 A:middle
我们想让它稍微

00:31:23.076 --> 00:31:24.106 A:middle
超出几何图形

00:31:24.106 --> 00:31:25.276 A:middle
我们可以用分数高度

00:31:27.106 --> 00:31:29.416 A:middle
这里我们能看到这个设备

00:31:29.416 --> 00:31:31.066 A:middle
我们已经放上了这些标记

00:31:31.606 --> 00:31:33.096 A:middle
得益于我精湛的设计技巧

00:31:33.096 --> 00:31:34.396 A:middle
这里有一个四个项目的网格

00:31:34.846 --> 00:31:36.696 A:middle
由浅蓝色的储存格组成

00:31:37.296 --> 00:31:38.476 A:middle
这里我们能看到

00:31:38.476 --> 00:31:39.436 A:middle
在一些项目上

00:31:39.436 --> 00:31:40.246 A:middle
有小的通知标记 

00:31:40.246 --> 00:31:41.146 A:middle
它们是在说

00:31:41.146 --> 00:31:42.396 A:middle
“嘿 你需要注意这里”

00:31:43.576 --> 00:31:45.626 A:middle
而这里的这些标记

00:31:45.626 --> 00:31:47.456 A:middle
就稍稍超出了几何图形

00:31:47.676 --> 00:31:48.486 A:middle
它们不完全在

00:31:48.486 --> 00:31:49.676 A:middle
储存格的几何图形里面

00:31:50.376 --> 00:31:51.486 A:middle
我们回到幻灯片上

00:31:51.486 --> 00:31:52.686 A:middle
快速浏览一下

00:31:53.076 --> 00:31:56.156 A:middle
就是 fractionalOffset

00:31:56.156 --> 00:31:58.306 A:middle
使它们能稍稍超出几何图形

00:31:58.306 --> 00:31:59.096 A:middle
现在我们将

00:31:59.096 --> 00:32:01.406 A:middle
在正 X 上移动 30% 

00:32:01.406 --> 00:32:04.436 A:middle
然后在负 Y 上也移动30%

00:32:04.916 --> 00:32:06.646 A:middle
然后我们用

00:32:06.646 --> 00:32:07.956 A:middle
badgeSize 和 elementKind 定义

00:32:07.956 --> 00:32:11.156 A:middle
CollectionLayoutSupplementaryItem

00:32:11.156 --> 00:32:12.046 A:middle
我们要用

00:32:12.046 --> 00:32:12.766 A:middle
已注册的补充类型 

00:32:12.766 --> 00:32:13.606 A:middle
重新回到

00:32:13.666 --> 00:32:14.846 A:middle
CollectionView 的视图类

00:32:15.486 --> 00:32:17.426 A:middle
然后我们指定容器的锚

00:32:17.426 --> 00:32:19.796 A:middle
指定它如何进行关联

00:32:19.796 --> 00:32:21.456 A:middle
既然我们有了

00:32:21.496 --> 00:32:22.856 A:middle
这个补充物的定义

00:32:22.856 --> 00:32:24.516 A:middle
就要把它和一些东西关联起来

00:32:24.786 --> 00:32:26.086 A:middle
我们要把它与一个项目

00:32:26.416 --> 00:32:28.476 A:middle
一个储存格相关联

00:32:29.026 --> 00:32:30.226 A:middle
在这个例子中

00:32:30.226 --> 00:32:31.686 A:middle
我们要用一个带有

00:32:31.686 --> 00:32:33.346 A:middle
一系列补充物的初始化程序

00:32:33.346 --> 00:32:34.456 A:middle
的扩展变体

00:32:34.456 --> 00:32:35.566 A:middle
来进行初始化

00:32:35.566 --> 00:32:39.476 A:middle
就是这样

00:32:39.476 --> 00:32:41.146 A:middle
页眉和页脚呢

00:32:41.486 --> 00:32:43.166 A:middle
页眉和页脚

00:32:43.166 --> 00:32:44.696 A:middle
与这些项目的补充物

00:32:44.696 --> 00:32:45.886 A:middle
只有一点点不同

00:32:45.886 --> 00:32:47.326 A:middle
当你想到

00:32:47.326 --> 00:32:48.776 A:middle
用一个补充页眉和页脚

00:32:48.776 --> 00:32:50.566 A:middle
来装饰的内容时

00:32:51.276 --> 00:32:52.226 A:middle
你并不想让

00:32:52.226 --> 00:32:53.106 A:middle
补充页眉或页脚

00:32:53.106 --> 00:32:54.726 A:middle
遮挡住真正的内容

00:32:54.726 --> 00:32:56.596 A:middle
需要扩展内容的区域

00:32:56.596 --> 00:32:58.096 A:middle
以便看到内容本身

00:32:59.186 --> 00:33:00.466 A:middle
在这个例子里

00:33:00.466 --> 00:33:01.666 A:middle
我们有很多不同的补充物

00:33:01.666 --> 00:33:03.886 A:middle
叫做边界补充物

00:33:03.946 --> 00:33:04.936 A:middle
我们要把它放在

00:33:04.936 --> 00:33:06.346 A:middle
主几何图形的补充物

00:33:06.346 --> 00:33:07.426 A:middle
的边界上

00:33:08.636 --> 00:33:09.706 A:middle
我们可以为段或整个布局

00:33:09.706 --> 00:33:11.136 A:middle
制作这些边界补充物

00:33:11.136 --> 00:33:13.316 A:middle
我们可以将它们

00:33:13.316 --> 00:33:14.716 A:middle
固定在这整个平衡中

00:33:14.716 --> 00:33:16.056 A:middle
完成一些很棒的布局

00:33:16.726 --> 00:33:18.196 A:middle
下面我将切换到

00:33:18.196 --> 00:33:19.226 A:middle
设备上的例子

00:33:20.726 --> 00:33:21.856 A:middle
就是这样

00:33:22.106 --> 00:33:24.586 A:middle
我们看看这个例子

00:33:25.146 --> 00:33:27.206 A:middle
很简单易懂的例子

00:33:27.206 --> 00:33:29.146 A:middle
这里有一个固定在段上

00:33:29.146 --> 00:33:30.136 A:middle
的页眉和页脚

00:33:30.616 --> 00:33:31.676 A:middle
上下滑动

00:33:31.676 --> 00:33:33.926 A:middle
发现这就是我们想要的

00:33:34.186 --> 00:33:34.786 A:middle
下面来看代码

00:33:38.716 --> 00:33:40.296 A:middle
这个和几分钟前说到的

00:33:40.296 --> 00:33:42.326 A:middle
BoundarySupplementaryItems 代码很像

00:33:42.786 --> 00:33:44.016 A:middle
现在除了这个容器锚

00:33:44.086 --> 00:33:45.636 A:middle
这里还有

00:33:45.636 --> 00:33:46.726 A:middle
对齐属性

00:33:47.706 --> 00:33:49.896 A:middle
这里为页眉指定了顶部

00:33:49.896 --> 00:33:51.116 A:middle
为页脚指定了底部

00:33:51.116 --> 00:33:52.316 A:middle
因为想到达几何图形的

00:33:52.316 --> 00:33:53.786 A:middle
段的顶部和底部

00:33:54.456 --> 00:33:55.806 A:middle
为了确保页眉浮动

00:33:55.806 --> 00:33:57.566 A:middle
并固定在段中

00:33:57.616 --> 00:33:58.876 A:middle
它所在的内容区域

00:33:58.876 --> 00:34:00.616 A:middle
我们只需指定

00:34:00.616 --> 00:34:02.046 A:middle
PinToVisibleBounds

00:34:02.306 --> 00:34:04.526 A:middle
接着我们需要将页眉和页脚

00:34:04.526 --> 00:34:05.516 A:middle
与它们要进入的

00:34:05.516 --> 00:34:06.466 A:middle
几何图形关联起来

00:34:06.466 --> 00:34:07.256 A:middle
也就是段

00:34:07.446 --> 00:34:08.315 A:middle
这里我们就用

00:34:08.315 --> 00:34:10.016 A:middle
BoundarySupplementaryItems 阵列

00:34:11.016 --> 00:34:11.735 A:middle
很简单吧

00:34:12.886 --> 00:34:15.196 A:middle
目前为止我们展示时

00:34:15.196 --> 00:34:17.255 A:middle
都用的是全新的 iOS 13 卡片

00:34:17.255 --> 00:34:18.766 A:middle
这种卡片设计语言

00:34:19.156 --> 00:34:20.976 A:middle
贯穿整个系统

00:34:21.936 --> 00:34:23.666 A:middle
我们在滚动 UI 中也能看到 

00:34:23.826 --> 00:34:26.156 A:middle
各种各样的内容

00:34:26.156 --> 00:34:27.306 A:middle
都用卡片

00:34:27.366 --> 00:34:28.815 A:middle
以逻辑方式组合在一起

00:34:29.136 --> 00:34:30.556 A:middle
这自然很适合 CollectionView

00:34:30.556 --> 00:34:31.426 A:middle
因为我们一直

00:34:31.426 --> 00:34:33.536 A:middle
支持装饰视图的概念

00:34:33.536 --> 00:34:36.446 A:middle
在过去你需要自己进行运算

00:34:36.446 --> 00:34:37.156 A:middle
但在组合布局里

00:34:37.156 --> 00:34:39.056 A:middle
这就变得很简单

00:34:39.666 --> 00:34:41.166 A:middle
我们用一个

00:34:41.196 --> 00:34:42.706 A:middle
CollectionLayoutDecorationItem 进行支持

00:34:43.025 --> 00:34:43.696 A:middle
你只要用一个 elementKind

00:34:43.696 --> 00:34:44.976 A:middle
来创建它就可以了

00:34:45.746 --> 00:34:47.436 A:middle
这么做是为了

00:34:47.436 --> 00:34:49.045 A:middle
在段的内容之后

00:34:49.045 --> 00:34:50.485 A:middle
产生一个视图

00:34:50.485 --> 00:34:51.866 A:middle
以提供良好的视觉分组

00:34:52.646 --> 00:34:54.315 A:middle
想要创建它

00:34:54.315 --> 00:34:55.206 A:middle
只需要一行代码

00:34:55.206 --> 00:34:55.996 A:middle
想要将它加到段里

00:34:55.996 --> 00:34:57.896 A:middle
你只要指定项目

00:34:58.116 --> 00:35:00.116 A:middle
这样就可以了

00:35:01.076 --> 00:35:01.696 A:middle
就是这样

00:35:02.256 --> 00:35:03.816 A:middle
那我们来快速浏览一下

00:35:03.816 --> 00:35:04.446 A:middle
这组代码的结果

00:35:04.876 --> 00:35:08.586 A:middle
非常简单也非常直观

00:35:08.976 --> 00:35:09.906 A:middle
这是包含多个段的列表

00:35:09.906 --> 00:35:11.196 A:middle
我们增加了装饰视图

00:35:11.196 --> 00:35:14.096 A:middle
只用了一行代码

00:35:14.226 --> 00:35:14.946 A:middle
很简单

00:35:17.756 --> 00:35:20.306 A:middle
下面是一个我

00:35:20.306 --> 00:35:21.356 A:middle
非常关心的话题

00:35:21.356 --> 00:35:22.176 A:middle
估算自定尺寸

00:35:23.466 --> 00:35:25.436 A:middle
在 iOS 13 中我们花了

00:35:25.436 --> 00:35:27.836 A:middle
很多时间来确保其速度快 准确性高

00:35:29.436 --> 00:35:30.806 A:middle
组合布局以非常具体的方式

00:35:30.806 --> 00:35:31.766 A:middle
扩展了估算自定尺寸

00:35:31.766 --> 00:35:34.406 A:middle
这一概念

00:35:34.406 --> 00:35:36.616 A:middle
它允许你按每个轴来确定尺寸

00:35:36.616 --> 00:35:37.816 A:middle
这非常重要

00:35:38.496 --> 00:35:39.486 A:middle
因为通常你想要

00:35:39.486 --> 00:35:40.366 A:middle
在你呈现内容时

00:35:40.366 --> 00:35:41.606 A:middle
得到良好的视图层次

00:35:41.606 --> 00:35:43.086 A:middle
你并不想要完全

00:35:43.086 --> 00:35:44.736 A:middle
被限制在轴线上

00:35:44.866 --> 00:35:47.086 A:middle
不想只能在 X 轴上

00:35:47.086 --> 00:35:48.546 A:middle
和 Y 轴上增长

00:35:49.066 --> 00:35:50.286 A:middle
比如你可能知道

00:35:50.286 --> 00:35:51.296 A:middle
这个东西的宽度

00:35:52.216 --> 00:35:53.716 A:middle
举一个页眉和页脚的例子

00:35:53.716 --> 00:35:55.336 A:middle
我们希望它的宽度

00:35:55.336 --> 00:35:58.106 A:middle
恰好是 CollectionView 的宽度

00:35:58.266 --> 00:35:59.546 A:middle
但是 我们希望它的高度

00:35:59.546 --> 00:36:00.756 A:middle
有一点变化

00:36:01.386 --> 00:36:03.466 A:middle
快速看一下这个例子

00:36:03.466 --> 00:36:04.996 A:middle
我们之前已经看过这个代码了

00:36:05.636 --> 00:36:07.796 A:middle
所以这里 我们看到非常熟悉的

00:36:07.796 --> 00:36:10.206 A:middle
段 页眉和页脚

00:36:10.206 --> 00:36:11.216 A:middle
然后我从这里下拉

00:36:11.216 --> 00:36:14.566 A:middle
打开文本大小部件 把它放大

00:36:15.896 --> 00:36:18.326 A:middle
这里所有的东西都变大了

00:36:18.456 --> 00:36:19.746 A:middle
这就对了 是吧

00:36:20.096 --> 00:36:21.336 A:middle
这是怎么做到的呢

00:36:21.406 --> 00:36:23.756 A:middle
这里我们能看到

00:36:23.756 --> 00:36:25.306 A:middle
heightDimension 是估算的

00:36:25.656 --> 00:36:26.936 A:middle
这就是唯一的不同

00:36:26.936 --> 00:36:28.226 A:middle
我们指定了

00:36:28.226 --> 00:36:29.606 A:middle
我们知道的确定宽度

00:36:29.606 --> 00:36:31.676 A:middle
但我们不知道具体高度

00:36:31.676 --> 00:36:33.426 A:middle
我们只是将其估算为 44 个点

00:36:34.046 --> 00:36:35.316 A:middle
随着内容的呈现

00:36:35.686 --> 00:36:36.436 A:middle
我们有了更好的想法

00:36:36.436 --> 00:36:38.096 A:middle
我们可以使布局自动作废

00:36:38.096 --> 00:36:39.026 A:middle
这些都是自动的

00:36:39.396 --> 00:36:40.466 A:middle
这使得你的 App

00:36:40.466 --> 00:36:42.046 A:middle
更容易支持动态类型

00:36:42.046 --> 00:36:43.356 A:middle
即使其中包含

00:36:43.356 --> 00:36:44.776 A:middle
补充物 页眉和页脚

00:36:44.776 --> 00:36:46.536 A:middle
所以 这是很不错的

00:36:48.906 --> 00:36:49.926 A:middle
现在我们来说一些

00:36:49.926 --> 00:36:50.636 A:middle
很有趣的东西

00:36:50.636 --> 00:36:52.076 A:middle
怎样嵌套呢

00:36:52.186 --> 00:36:54.606 A:middle
我们之前说过组成这个概念

00:36:54.606 --> 00:36:56.646 A:middle
我们来看看要怎么做

00:36:57.436 --> 00:37:00.856 A:middle
组合布局的

00:37:00.856 --> 00:37:02.226 A:middle
核心布局是布局组

00:37:02.766 --> 00:37:04.416 A:middle
布局组其实是

00:37:04.416 --> 00:37:06.766 A:middle
NSCollectionLayoutItem 的一个子类型 

00:37:07.506 --> 00:37:09.006 A:middle
因为有了这样的关系

00:37:09.086 --> 00:37:11.186 A:middle
当你指定一个

00:37:11.186 --> 00:37:12.966 A:middle
布局组中的项目时

00:37:12.966 --> 00:37:14.826 A:middle
你还可以有其他的组

00:37:14.826 --> 00:37:15.736 A:middle
你可以将它们嵌套

00:37:15.736 --> 00:37:17.186 A:middle
这个嵌套是没有限制的

00:37:17.226 --> 00:37:18.636 A:middle
它是任意的

00:37:18.786 --> 00:37:21.086 A:middle
因为这一点

00:37:21.086 --> 00:37:24.146 A:middle
我们解锁了很多有趣的新设计

00:37:25.456 --> 00:37:27.076 A:middle
那在这个例子里

00:37:27.326 --> 00:37:29.456 A:middle
我们看到一个组里有三个项目

00:37:30.156 --> 00:37:32.006 A:middle
我们看到在前导侧

00:37:32.006 --> 00:37:33.716 A:middle
有个大方块

00:37:33.716 --> 00:37:37.246 A:middle
在尾随侧有个垂直的组

00:37:37.646 --> 00:37:39.436 A:middle
那这个怎么在代码里推出呢

00:37:43.906 --> 00:37:45.366 A:middle
这个很简单

00:37:45.366 --> 00:37:46.646 A:middle
底部有一个

00:37:46.646 --> 00:37:47.686 A:middle
水平的组

00:37:47.776 --> 00:37:49.546 A:middle
其子项分别是

00:37:49.546 --> 00:37:52.966 A:middle
leadingItem 和一个 trailingGroup

00:37:52.966 --> 00:37:54.236 A:middle
我们很容易

00:37:54.236 --> 00:37:55.186 A:middle
推出这样的东西

00:37:55.186 --> 00:37:56.786 A:middle
我们现在就看看要怎么做

00:37:56.786 --> 00:37:57.856 A:middle
只需添加一些额外的东西

00:37:57.856 --> 00:38:01.126 A:middle
就可以得到这些很棒的布局

00:38:02.056 --> 00:38:05.406 A:middle
嵌套组是很有用的

00:38:05.406 --> 00:38:08.446 A:middle
嵌套 CollectionView 呢

00:38:08.916 --> 00:38:10.266 A:middle
好的

00:38:10.266 --> 00:38:14.296 A:middle
这里我们看到的是 App Store

00:38:14.656 --> 00:38:16.756 A:middle
是 iOS 13 的更新

00:38:17.516 --> 00:38:18.396 A:middle
我不知道你怎么看

00:38:18.396 --> 00:38:19.146 A:middle
但如果我是一个

00:38:19.146 --> 00:38:20.116 A:middle
第三方开发者时

00:38:20.606 --> 00:38:21.826 A:middle
要是交给我这样的设计

00:38:21.826 --> 00:38:22.776 A:middle
我会心脏病发作的

00:38:22.846 --> 00:38:24.116 A:middle
这真的很复杂

00:38:24.116 --> 00:38:25.916 A:middle
很有挑战性

00:38:25.916 --> 00:38:27.496 A:middle
因为有很多簿记工作要做

00:38:27.596 --> 00:38:28.776 A:middle
但这是一种常见的模式

00:38:28.776 --> 00:38:30.376 A:middle
在今天的 App 中

00:38:30.526 --> 00:38:32.236 A:middle
我们也经常看到它

00:38:32.656 --> 00:38:34.686 A:middle
要使其外观好性能棒

00:38:34.686 --> 00:38:36.656 A:middle
这一点就颇具挑战性

00:38:36.656 --> 00:38:37.696 A:middle
组合布局能用

00:38:37.696 --> 00:38:39.456 A:middle
一行代码来解决这个问题

00:38:40.366 --> 00:38:41.836 A:middle
下面我就给你们展示一个示例

00:38:42.516 --> 00:38:47.500 A:middle
[鼓掌]

00:38:52.306 --> 00:38:54.246 A:middle
这里的组

00:38:54.246 --> 00:38:55.366 A:middle
和之前的一样

00:38:55.366 --> 00:38:56.146 A:middle
但我们注意到这个组

00:38:56.146 --> 00:38:57.126 A:middle
铺得更平了

00:38:57.126 --> 00:38:59.586 A:middle
它大概占了容器宽度的 80%

00:38:59.586 --> 00:39:02.376 A:middle
这是一个垂直滚动的 CollectionView

00:39:02.376 --> 00:39:03.706 A:middle
里面有五个段

00:39:04.576 --> 00:39:05.946 A:middle
但每个段都可以

00:39:05.946 --> 00:39:07.876 A:middle
用这一行代码垂直滚动

00:39:08.516 --> 00:39:15.396 A:middle
[掌声]

00:39:15.896 --> 00:39:18.086 A:middle
这里有很多不同的变化

00:39:18.086 --> 00:39:18.646 A:middle
请容许我

00:39:18.646 --> 00:39:19.536 A:middle
切换到这里

00:39:19.596 --> 00:39:21.846 A:middle
我们有五种不同的方法

00:39:21.846 --> 00:39:22.886 A:middle
对 这里还有

00:39:22.886 --> 00:39:24.416 A:middle
我不想看到的无的情况

00:39:24.996 --> 00:39:26.626 A:middle
有两个连续函数的例子

00:39:26.876 --> 00:39:29.176 A:middle
然后是三个分页函数的例子

00:39:29.626 --> 00:39:31.166 A:middle
我将用可视的方式

00:39:31.166 --> 00:39:34.666 A:middle
来讲每个例子

00:39:36.256 --> 00:39:38.396 A:middle
先向大家演示我们

00:39:39.136 --> 00:39:40.756 A:middle
垂直滚动段的行为

00:39:41.396 --> 00:39:42.956 A:middle
正如你所期待的那样

00:39:42.956 --> 00:39:44.696 A:middle
这是一个十分简单的

00:39:44.696 --> 00:39:46.896 A:middle
滚动视图的行为 

00:39:46.896 --> 00:39:48.376 A:middle
这里有一个弹回 

00:39:48.376 --> 00:39:51.446 A:middle
这个很棒

00:39:51.446 --> 00:39:52.506 A:middle
我这么滑几个小时都不会烦

00:39:52.986 --> 00:39:54.226 A:middle
好了

00:39:54.226 --> 00:39:56.006 A:middle
这只是正常滚动视图的行为

00:39:56.006 --> 00:39:57.186 A:middle
但在连续函数里

00:39:57.186 --> 00:39:58.846 A:middle
我们还有一个另外的

00:39:58.846 --> 00:40:00.516 A:middle
流体滚动视图行为

00:40:00.516 --> 00:40:02.316 A:middle
我们称为 continuousGroupLeadingBoundary

00:40:02.316 --> 00:40:03.356 A:middle
这有点拗口

00:40:03.356 --> 00:40:04.066 A:middle
但描述得很到位

00:40:04.476 --> 00:40:05.696 A:middle
当我们滚动然后松手时

00:40:05.696 --> 00:40:07.836 A:middle
我们自然会停留在

00:40:07.836 --> 00:40:09.426 A:middle
该组语义前导

00:40:09.426 --> 00:40:10.976 A:middle
的边界上

00:40:11.516 --> 00:40:15.286 A:middle
[掌声]

00:40:15.786 --> 00:40:16.966 A:middle
鼓掌的人以前一定做过

00:40:17.006 --> 00:40:18.496 A:middle
定向内容偏移或提议过偏移

00:40:18.496 --> 00:40:20.356 A:middle
所以你们知道有多痛苦

00:40:20.566 --> 00:40:21.696 A:middle
好了

00:40:21.696 --> 00:40:24.926 A:middle
说完这个连续行为

00:40:24.926 --> 00:40:26.216 A:middle
我们来说说分页行为

00:40:26.216 --> 00:40:27.276 A:middle
这个也很酷

00:40:27.276 --> 00:40:29.316 A:middle
这就像是普通的

00:40:29.316 --> 00:40:30.856 A:middle
滚动视图分页行为

00:40:30.856 --> 00:40:32.216 A:middle
我们称之为分页

00:40:33.266 --> 00:40:33.696 A:middle
很有创意

00:40:34.386 --> 00:40:35.526 A:middle
在这里 我们能看到

00:40:35.526 --> 00:40:36.866 A:middle
无论用户用怎样的速度进行滚动

00:40:36.866 --> 00:40:39.216 A:middle
得到的都只是一页的内容

00:40:39.216 --> 00:40:40.826 A:middle
这个页面被定义为

00:40:40.826 --> 00:40:42.596 A:middle
默认滚动视图行为

00:40:42.596 --> 00:40:44.796 A:middle
它的宽度是 CollectionView 的宽度

00:40:46.776 --> 00:40:48.866 A:middle
这里还可以有两种变化 

00:40:48.866 --> 00:40:50.596 A:middle
你可能已经猜到了

00:40:50.596 --> 00:40:52.636 A:middle
接下来我们要说组分页的概念

00:40:53.316 --> 00:40:54.526 A:middle
现在我们有关于

00:40:54.526 --> 00:40:55.906 A:middle
一个组的语义概念

00:40:55.906 --> 00:40:57.786 A:middle
我们就就可以将组的大小

00:40:57.786 --> 00:40:58.606 A:middle
设置为页面的大小

00:40:59.646 --> 00:41:01.696 A:middle
这样真的很棒

00:41:03.121 --> 00:41:05.121 A:middle
[掌声]

00:41:05.226 --> 00:41:06.276 A:middle
这样你可以自动得到

00:41:06.306 --> 00:41:07.996 A:middle
没有遮挡的内容

00:41:07.996 --> 00:41:08.976 A:middle
你的内容总是

00:41:08.976 --> 00:41:10.116 A:middle
呈现在前面和中间

00:41:10.356 --> 00:41:13.226 A:middle
最后要说的是组分页居中

00:41:13.226 --> 00:41:14.626 A:middle
这个和组分页很像

00:41:15.426 --> 00:41:16.976 A:middle
但现在我们会自动把该组居中

00:41:17.516 --> 00:41:20.546 A:middle
[掌声]

00:41:21.046 --> 00:41:21.836 A:middle
对 看上去很棒

00:41:22.636 --> 00:41:23.756 A:middle
这样就是一种很好的

00:41:23.756 --> 00:41:24.716 A:middle
显示部分内容的效果 

00:41:24.716 --> 00:41:25.846 A:middle
你可以看到前导

00:41:25.846 --> 00:41:26.666 A:middle
和尾随两端的内容

00:41:26.666 --> 00:41:29.666 A:middle
你就会很清楚你所在的位置

00:41:31.056 --> 00:41:32.576 A:middle
这就是一些

00:41:32.576 --> 00:41:33.766 A:middle
应用在组合 App 中的

00:41:33.766 --> 00:41:36.156 A:middle
高级的附加特性

00:41:36.156 --> 00:41:36.536 A:middle
诸如此类的还有很多

00:41:36.536 --> 00:41:38.946 A:middle
你可以打开 SDK 来查看

00:41:40.296 --> 00:41:44.606 A:middle
在 Apple

00:41:44.606 --> 00:41:46.746 A:middle
协作的概念

00:41:46.746 --> 00:41:48.026 A:middle
是非常重要的

00:41:48.026 --> 00:41:49.496 A:middle
我们要与全公司的团队

00:41:49.496 --> 00:41:51.816 A:middle
进行合作以解决问题

00:41:53.036 --> 00:41:56.526 A:middle
作为一名框架工程师

00:41:56.526 --> 00:41:57.846 A:middle
对我们来说

00:41:57.916 --> 00:41:59.836 A:middle
与公司中不同的团队合作

00:41:59.836 --> 00:42:00.776 A:middle
确保我们知道他们

00:42:00.776 --> 00:42:01.986 A:middle
对新框架特性的需求

00:42:01.986 --> 00:42:04.196 A:middle
是非常重要的

00:42:05.256 --> 00:42:07.616 A:middle
其中一个团队

00:42:07.616 --> 00:42:09.196 A:middle
App Store 团队就在

00:42:09.196 --> 00:42:10.526 A:middle
iOS 13 中做了重新设计

00:42:10.526 --> 00:42:11.466 A:middle
他们真的很想

00:42:11.466 --> 00:42:12.566 A:middle
简化一下代码库

00:42:12.566 --> 00:42:14.616 A:middle
所以在沟通的过程中

00:42:15.256 --> 00:42:16.836 A:middle
我们讨论了组合布局

00:42:16.836 --> 00:42:18.926 A:middle
他们对此非常兴奋

00:42:18.926 --> 00:42:20.846 A:middle
用它写了很多代码

00:42:20.846 --> 00:42:22.086 A:middle
下面我们就有请

00:42:22.086 --> 00:42:23.816 A:middle
来自 App Store 团队的同事

00:42:23.816 --> 00:42:25.906 A:middle
Dersu Abolfathi 为大家介绍

00:42:26.276 --> 00:42:26.646 A:middle
Dersu

00:42:27.516 --> 00:42:32.766 A:middle
[掌声]

00:42:33.266 --> 00:42:34.086 A:middle
&gt;&gt; 谢谢 Steve

00:42:35.266 --> 00:42:36.806 A:middle
有数百万的用户

00:42:36.906 --> 00:42:38.386 A:middle
在 App Store 中

00:42:38.486 --> 00:42:39.746 A:middle
寻找合适的 App

00:42:39.746 --> 00:42:41.506 A:middle
以使其设备充分发挥效用

00:42:42.896 --> 00:42:44.076 A:middle
在座有很多人每天

00:42:44.076 --> 00:42:45.976 A:middle
都会访问 App Store

00:42:45.976 --> 00:42:47.236 A:middle
里面的内容就要丰富

00:42:48.046 --> 00:42:50.176 A:middle
吸引人而且有活力

00:42:51.666 --> 00:42:53.486 A:middle
CollectionView 在这其中

00:42:53.486 --> 00:42:55.646 A:middle
发挥着关键作用

00:42:57.876 --> 00:42:59.606 A:middle
这是 App Store

00:43:02.646 --> 00:43:05.276 A:middle
流式布局来构建这样的 UI

00:43:05.276 --> 00:43:07.396 A:middle
你可能会从

00:43:07.396 --> 00:43:08.556 A:middle
一个竖直方向滚动的

00:43:08.556 --> 00:43:09.816 A:middle
CollectionView 开始

00:43:11.656 --> 00:43:14.046 A:middle
而对于每一个

00:43:14.236 --> 00:43:15.586 A:middle
在水平轴上滚动的段

00:43:15.586 --> 00:43:17.466 A:middle
你都需要一个附加的 CollectionView

00:43:17.466 --> 00:43:19.846 A:middle
这意味着你需要有

00:43:19.846 --> 00:43:21.526 A:middle
更多的支持代码

00:43:21.526 --> 00:43:24.406 A:middle
来连接每个集合的演示和行为

00:43:27.536 --> 00:43:29.576 A:middle
而在组合布局中

00:43:29.576 --> 00:43:32.226 A:middle
只需要一个 CollectionView 就可以完成

00:43:32.226 --> 00:43:35.816 A:middle
事实上 我们已经这么做了

00:43:37.086 --> 00:43:39.386 A:middle
在 iOS 13 中我们用组合布局

00:43:39.386 --> 00:43:41.736 A:middle
重新设计了 App Store

00:43:42.286 --> 00:43:45.436 A:middle
你在此页上看到的

00:43:45.436 --> 00:43:47.526 A:middle
每种内容类型都能进行

00:43:47.526 --> 00:43:49.646 A:middle
它们自己的布局描述

00:43:50.146 --> 00:43:52.016 A:middle
所有的这些布局段

00:43:52.016 --> 00:43:54.906 A:middle
一起组成一个整体的

00:43:54.906 --> 00:43:56.076 A:middle
CollectionViewLayout

00:43:59.646 --> 00:44:01.996 A:middle
我们只用一个布局项目

00:44:01.996 --> 00:44:03.996 A:middle
就能描述这个段

00:44:03.996 --> 00:44:05.756 A:middle
该项目有一个已知的高度

00:44:05.756 --> 00:44:08.076 A:middle
而宽度则为容器的 100%

00:44:10.616 --> 00:44:12.266 A:middle
布局项目位于一个布局组里

00:44:12.266 --> 00:44:14.566 A:middle
而布局组本身

00:44:14.566 --> 00:44:16.556 A:middle
占据容器宽度的一半

00:44:17.056 --> 00:44:19.796 A:middle
这些都是

00:44:19.796 --> 00:44:22.136 A:middle
让 UI 运行的基本构件

00:44:22.696 --> 00:44:26.466 A:middle
我们拿出该布局组

00:44:26.466 --> 00:44:28.556 A:middle
将其贴在一个布局段中

00:44:28.556 --> 00:44:29.746 A:middle
然后为了得到想要的分页行为

00:44:29.746 --> 00:44:31.266 A:middle
我们将垂直滚动行为

00:44:31.266 --> 00:44:33.426 A:middle
设置为组分页

00:44:34.156 --> 00:44:34.976 A:middle
然后好戏就开场了

00:44:39.446 --> 00:44:41.676 A:middle
在 iOS 13 的 App Store 里

00:44:41.676 --> 00:44:43.636 A:middle
UI 也支持

00:44:43.636 --> 00:44:45.976 A:middle
从右向左阅读的语言

00:44:45.976 --> 00:44:48.436 A:middle
组合布局帮助实现了这一功能

00:44:49.016 --> 00:44:52.456 A:middle
我们用所有

00:44:52.566 --> 00:44:53.656 A:middle
今天能看到的

00:44:53.656 --> 00:44:55.376 A:middle
相同的原语来构建布局

00:44:55.376 --> 00:44:57.556 A:middle
组合布局只负责剩下的部分

00:44:58.056 --> 00:45:00.236 A:middle
它确保我们的补充物

00:45:00.236 --> 00:45:01.626 A:middle
和储存格的位置

00:45:01.626 --> 00:45:04.526 A:middle
适合从右到左的环境

00:45:05.186 --> 00:45:07.456 A:middle
此外 我们不再需要 

00:45:07.496 --> 00:45:09.326 A:middle
单独写一行代码

00:45:09.486 --> 00:45:10.976 A:middle
来确保我们的分页行为

00:45:10.976 --> 00:45:14.496 A:middle
也适用于从右到左的布局方向

00:45:17.496 --> 00:45:20.216 A:middle
所以这个新的 API

00:45:20.216 --> 00:45:21.946 A:middle
使我们能够获取所有那些

00:45:21.946 --> 00:45:23.466 A:middle
我们之前从头管到脚的可滚动区域

00:45:23.466 --> 00:45:25.746 A:middle
并将它们平铺到

00:45:25.936 --> 00:45:28.576 A:middle
顶层的一个 CollectionView 中

00:45:28.576 --> 00:45:31.336 A:middle
这样一来我们的代码

00:45:31.336 --> 00:45:34.086 A:middle
变得更加简洁

00:45:34.086 --> 00:45:36.286 A:middle
更易于推出

00:45:36.286 --> 00:45:37.736 A:middle
同时也更易于日后维护

00:45:40.016 --> 00:45:41.466 A:middle
组合布局重新定义了

00:45:41.526 --> 00:45:42.966 A:middle
我们在自己的 App 中

00:45:42.966 --> 00:45:44.686 A:middle
思考 CollectionViews 的方式

00:45:44.686 --> 00:45:46.546 A:middle
我们迫不及待地想看看

00:45:46.546 --> 00:45:47.756 A:middle
它是如何提升

00:45:47.756 --> 00:45:49.436 A:middle
你们在 App Store 中

00:45:49.436 --> 00:45:50.756 A:middle
所得到的 App 的体验呢

00:45:50.756 --> 00:45:51.936 A:middle
下面交给你 Troy

00:45:52.516 --> 00:45:57.546 A:middle
[掌声]

00:45:58.046 --> 00:45:59.206 A:middle
&gt;&gt; 非常感谢 Dersu

00:45:59.206 --> 00:46:00.996 A:middle
这个设计真不错

00:46:01.376 --> 00:46:02.996 A:middle
我们非常高兴地看到

00:46:03.116 --> 00:46:04.406 A:middle
我们已经用组合布局

00:46:04.436 --> 00:46:07.346 A:middle
简化了一个知名的 

00:46:07.346 --> 00:46:10.446 A:middle
面向用户的 App 的开发过程

00:46:10.446 --> 00:46:13.046 A:middle
我很高兴在我们的平台上

00:46:13.046 --> 00:46:14.556 A:middle
开发人员能

00:46:14.556 --> 00:46:16.756 A:middle
使用同样的API

00:46:17.186 --> 00:46:18.516 A:middle
说到这儿 我想给你们

00:46:18.516 --> 00:46:19.986 A:middle
快速地展示一下

00:46:19.986 --> 00:46:21.396 A:middle
组合布局用 NSCollectionView

00:46:21.396 --> 00:46:23.866 A:middle
在 macOS 上的运行

00:46:29.596 --> 00:46:31.086 A:middle
当你打开你在 Xcode 上

00:46:31.086 --> 00:46:32.316 A:middle
下载的示例项目时

00:46:32.316 --> 00:46:34.196 A:middle
注意会有一个

00:46:34.196 --> 00:46:35.866 A:middle
Mac 的构建方案和目标

00:46:36.196 --> 00:46:37.976 A:middle
我们要在这里构建且运行它

00:46:42.126 --> 00:46:43.656 A:middle
我们打开

00:46:43.656 --> 00:46:45.206 A:middle
我们在本次讲座中看过的

00:46:45.206 --> 00:46:47.016 A:middle
所有布局示例

00:46:47.016 --> 00:46:47.816 A:middle
然后把它们分散开

00:46:51.276 --> 00:46:53.096 A:middle
就是这样 这就是我们的

00:46:53.096 --> 00:46:54.376 A:middle
各种组合布局的例子

00:46:54.696 --> 00:46:55.876 A:middle
而我们用的代码

00:46:55.876 --> 00:46:57.326 A:middle
本质上都是一样的

00:46:57.326 --> 00:46:59.356 A:middle
我们也将得到相同的 API

00:46:59.686 --> 00:47:00.536 A:middle
你真正看到的

00:47:00.536 --> 00:47:01.636 A:middle
唯一的调整就是

00:47:01.636 --> 00:47:03.816 A:middle
我们想要在其中应用

00:47:03.816 --> 00:47:05.896 A:middle
更多适合 macOS 的指标

00:47:05.896 --> 00:47:08.666 A:middle
这里可以水平滚动

00:47:10.176 --> 00:47:12.786 A:middle
当然 在 Mac 上我们想要

00:47:12.786 --> 00:47:14.636 A:middle
它们以 Mac 的方式运行

00:47:14.636 --> 00:47:15.396 A:middle
我们在 Mac 上

00:47:15.396 --> 00:47:16.396 A:middle
使用 CollectionViews 时

00:47:16.396 --> 00:47:19.066 A:middle
它们是可以不断调整大小的 

00:47:19.446 --> 00:47:21.546 A:middle
我们已经确保 Mac

00:47:21.546 --> 00:47:23.286 A:middle
能又快又好地进行

00:47:24.176 --> 00:47:25.296 A:middle
超轻量的大小调整

00:47:25.506 --> 00:47:27.286 A:middle
布局也调整得非常快

00:47:27.286 --> 00:47:29.156 A:middle
我们的自适应段布局

00:47:29.246 --> 00:47:31.076 A:middle
和之前一样有一个布局改变

00:47:31.076 --> 00:47:32.606 A:middle
既然你知道了运行原理

00:47:32.606 --> 00:47:33.886 A:middle
你就可以随意地增加

00:47:33.886 --> 00:47:35.126 A:middle
额外的布局改变

00:47:35.126 --> 00:47:37.546 A:middle
给更大的窗口宽度和屏幕宽度

00:47:38.226 --> 00:47:40.386 A:middle
当然 我们还有一些特性

00:47:40.386 --> 00:47:42.116 A:middle
比如点击项目就能选中它们

00:47:42.626 --> 00:47:45.656 A:middle
用箭头键就可以进行导航

00:47:46.446 --> 00:47:47.756 A:middle
按住 Shift 键

00:47:47.756 --> 00:47:48.736 A:middle
同时按箭头键

00:47:48.736 --> 00:47:49.926 A:middle
就可以选中多个项目

00:47:50.516 --> 00:47:53.546 A:middle
[掌声]

00:47:54.046 --> 00:47:56.026 A:middle
当然 也可以拖动选择任意区域

00:47:56.026 --> 00:47:57.266 A:middle
可以大批量选择项目

00:47:57.266 --> 00:47:58.986 A:middle
这个在任何的

00:47:58.986 --> 00:48:00.536 A:middle
组合布局里都可以完成

00:48:00.536 --> 00:48:01.976 A:middle
包括像这样更高级的布局

00:48:02.016 --> 00:48:03.076 A:middle
[掌声]

00:48:03.076 --> 00:48:05.906 A:middle
所有用户期待

00:48:05.906 --> 00:48:07.386 A:middle
在 Mac 上实现的东西都可以做到

00:48:07.386 --> 00:48:09.606 A:middle
我们已经运行所有这些布局

00:48:09.896 --> 00:48:11.976 A:middle
下面这些代码已经说得够多了

00:48:11.976 --> 00:48:13.346 A:middle
项目 段和组的描述

00:48:13.346 --> 00:48:15.836 A:middle
在所使用的 API 中

00:48:15.836 --> 00:48:17.426 A:middle
是相同的

00:48:17.426 --> 00:48:18.586 A:middle
你甚至可以提取代码

00:48:18.586 --> 00:48:19.816 A:middle
并在不同的平台项目之间

00:48:19.816 --> 00:48:22.336 A:middle
分享这些代码

00:48:23.396 --> 00:48:24.846 A:middle
所以我们可以看到

00:48:24.846 --> 00:48:26.796 A:middle
这里的组合布局我们

00:48:26.796 --> 00:48:29.686 A:middle
在不同的平台上的操作

00:48:29.686 --> 00:48:30.896 A:middle
变得更加容易

00:48:31.026 --> 00:48:33.766 A:middle
它确实有很多值得推荐的地方

00:48:34.406 --> 00:48:35.806 A:middle
从今天开始你就可以

00:48:35.806 --> 00:48:39.856 A:middle
在 iOS tvOS 和 macOS 上使用它

00:48:39.856 --> 00:48:41.566 A:middle
我们只要简单地描述它

00:48:41.836 --> 00:48:43.966 A:middle
就可以轻易地为 CollectionView

00:48:43.966 --> 00:48:46.816 A:middle
创建新的自定布局

00:48:46.816 --> 00:48:48.546 A:middle
我们认为这是一个打破格局的创新

00:48:49.436 --> 00:48:50.386 A:middle
反过来 这使得

00:48:50.386 --> 00:48:51.766 A:middle
CollectionView 成为一个

00:48:51.846 --> 00:48:53.636 A:middle
比以前更全能的工具

00:48:53.636 --> 00:48:55.816 A:middle
你可以随心所欲地

00:48:55.816 --> 00:48:58.236 A:middle
展示你的内容

00:48:58.926 --> 00:49:00.176 A:middle
你可以更容易地

00:49:00.176 --> 00:49:02.116 A:middle
描述新的布局

00:49:02.116 --> 00:49:03.066 A:middle
调整和改变布局

00:49:03.066 --> 00:49:04.216 A:middle
尝试不同的东西

00:49:04.216 --> 00:49:05.556 A:middle
并进行迭代

00:49:05.606 --> 00:49:08.396 A:middle
这些都将使设计人员

00:49:08.526 --> 00:49:10.266 A:middle
能够更快地进行迭代

00:49:10.606 --> 00:49:12.786 A:middle
这的确是个改变游戏规则的创新

00:49:14.256 --> 00:49:15.606 A:middle
所以等你们回去

00:49:15.606 --> 00:49:17.806 A:middle
打开示例项目进行试验

00:49:17.846 --> 00:49:19.946 A:middle
尝试改变不同的事物

00:49:19.946 --> 00:49:21.746 A:middle
以我们的代码作为基础

00:49:21.746 --> 00:49:23.606 A:middle
为 App 的下个版本

00:49:23.606 --> 00:49:25.686 A:middle
创建自定布局吧

00:49:25.956 --> 00:49:27.026 A:middle
我们迫不及待地想看到

00:49:27.026 --> 00:49:28.696 A:middle
组合布局能够使你

00:49:28.696 --> 00:49:29.986 A:middle
在很短的时间内

00:49:29.986 --> 00:49:32.326 A:middle
创建出更好的用户体验

00:49:33.356 --> 00:49:34.426 A:middle
如果你本次讲座很感兴趣

00:49:34.426 --> 00:49:35.766 A:middle
我们还有一个话题

00:49:35.766 --> 00:49:36.616 A:middle
我想你也会非常喜欢

00:49:36.616 --> 00:49:37.696 A:middle
特别是使用 CollectionViews 

00:49:37.696 --> 00:49:40.046 A:middle
甚至是 UI 表视图的朋友

00:49:40.286 --> 00:49:42.486 A:middle
在UI数据源方面的发展中

00:49:42.806 --> 00:49:44.816 A:middle
我们引入了一个全新的

00:49:45.006 --> 00:49:47.126 A:middle
非常简单的 API

00:49:47.126 --> 00:49:48.806 A:middle
用于向 CollectionViews

00:49:48.806 --> 00:49:50.446 A:middle
和 UI 表视图提供模型数据

00:49:50.446 --> 00:49:52.016 A:middle
同时免费获得

00:49:52.016 --> 00:49:53.266 A:middle
对差异的自动计算

00:49:53.266 --> 00:49:55.596 A:middle
和自动动画

00:49:55.596 --> 00:49:56.666 A:middle
它将创造令人愉快的

00:49:56.666 --> 00:49:57.666 A:middle
用户体验

00:49:57.666 --> 00:49:59.876 A:middle
所以一定要观看这个讲座

00:50:03.508 --> 00:50:05.508 A:middle
[掌声]

