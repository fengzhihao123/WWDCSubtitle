WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:04.500 A:middle
[音乐]

00:00:12.516 --> 00:00:14.636 A:middle
[掌声]

00:00:15.136 --> 00:00:15.666 A:middle
&gt;&gt;  下午好

00:00:16.366 --> 00:00:17.206 A:middle
各位下午好

00:00:18.456 --> 00:00:22.546 A:middle
欢迎来到比特币专场

00:00:22.546 --> 00:00:23.156 A:middle
[笑声]

00:00:23.156 --> 00:00:25.276 A:middle
开个玩笑 欢迎大家来到

00:00:25.276 --> 00:00:26.306 A:middle
Cryptography and Your Apps 专场

00:00:27.206 --> 00:00:29.126 A:middle
今天 我的同事 Frederic

00:00:29.126 --> 00:00:31.326 A:middle
会和我一起向你们展示

00:00:31.326 --> 00:00:33.026 A:middle
在 Apple 产品上使用密码

00:00:33.026 --> 00:00:34.936 A:middle
变得前所未有的简单

00:00:35.776 --> 00:00:36.636 A:middle
我是 Yannick Sierra

00:00:36.636 --> 00:00:37.846 A:middle
我在 Apple 负责管理

00:00:37.846 --> 00:00:39.496 A:middle
加密工程团队

00:00:39.496 --> 00:00:43.466 A:middle
那么今天一方面

00:00:43.466 --> 00:00:45.756 A:middle
我们会带来一套系统功能

00:00:45.926 --> 00:00:48.456 A:middle
来解决一组常见安全问题

00:00:49.326 --> 00:00:51.306 A:middle
另一方面 我们还将

00:00:51.446 --> 00:00:54.406 A:middle
为大家带来一个全新的

00:00:54.406 --> 00:00:55.576 A:middle
为加密操作服务的 Swift API

00:00:56.336 --> 00:00:58.476 A:middle
我们很高兴能为大家讲这些

00:00:58.476 --> 00:01:00.056 A:middle
你们来到这里

00:01:00.056 --> 00:01:01.506 A:middle
一定是因为想要

00:01:01.506 --> 00:01:02.766 A:middle
保护一些信息 对吧

00:01:05.476 --> 00:01:08.246 A:middle
我们知道各位

00:01:08.396 --> 00:01:11.016 A:middle
作为开发者和用户

00:01:11.016 --> 00:01:12.526 A:middle
都认为保护用户的信息

00:01:12.526 --> 00:01:13.976 A:middle
是十分重要的

00:01:16.656 --> 00:01:17.806 A:middle
我们有各种各样的信息

00:01:17.806 --> 00:01:19.826 A:middle
它们都十分敏感

00:01:19.866 --> 00:01:21.966 A:middle
包括个人资料信息

00:01:21.966 --> 00:01:23.796 A:middle
比如电话号码

00:01:23.796 --> 00:01:25.746 A:middle
和电子邮件地址

00:01:26.636 --> 00:01:28.156 A:middle
你的 App 可能也会

00:01:28.156 --> 00:01:31.866 A:middle
处理一些用户信息

00:01:31.866 --> 00:01:34.386 A:middle
如照片或音乐

00:01:34.386 --> 00:01:36.686 A:middle
通过 App 来处理和加工

00:01:38.196 --> 00:01:39.976 A:middle
你的 App 也会

00:01:39.976 --> 00:01:41.596 A:middle
处理商业素材

00:01:42.826 --> 00:01:44.846 A:middle
这可能是你的 App

00:01:45.026 --> 00:01:46.886 A:middle
提供给用户的付费内容

00:01:47.716 --> 00:01:49.586 A:middle
或者是如手机银行

00:01:49.586 --> 00:01:51.626 A:middle
这样的场景中的账户信息

00:01:53.136 --> 00:01:54.836 A:middle
所有这些信息

00:01:54.836 --> 00:01:56.636 A:middle
我们都务必保护其安全

00:01:57.106 --> 00:01:59.346 A:middle
那么你就需要使用很好的工具

00:01:59.986 --> 00:02:04.436 A:middle
在 Apple 里 安全和隐私

00:02:04.716 --> 00:02:06.146 A:middle
是核心价值

00:02:06.826 --> 00:02:08.406 A:middle
它根植在我们所开发的

00:02:08.406 --> 00:02:11.056 A:middle
所有功能之中

00:02:12.356 --> 00:02:15.486 A:middle
加密技术是其中一个重要的部分

00:02:16.036 --> 00:02:18.086 A:middle
举个例子 对于设备完整性

00:02:18.086 --> 00:02:20.476 A:middle
我们使用加密技术

00:02:20.476 --> 00:02:21.886 A:middle
来验证在平台上运行的

00:02:21.886 --> 00:02:23.506 A:middle
软件的完整性

00:02:23.876 --> 00:02:25.206 A:middle
以确保它不被破坏

00:02:25.206 --> 00:02:27.216 A:middle
同时保证其安全属性

00:02:27.216 --> 00:02:29.376 A:middle
没有被篡改

00:02:30.746 --> 00:02:32.996 A:middle
我们用加密技术来保护静态数据

00:02:34.086 --> 00:02:36.236 A:middle
我们在众多用户

00:02:36.476 --> 00:02:38.166 A:middle
喜爱的 App 中使用加密技术

00:02:38.666 --> 00:02:42.416 A:middle
用户广泛地使用它们

00:02:42.616 --> 00:02:45.816 A:middle
来捕捉和分享非常私人的时刻

00:02:46.426 --> 00:02:47.946 A:middle
这是一个在信息

00:02:48.766 --> 00:02:50.876 A:middle
Safari 浏览器和 iCloud 的例子

00:02:51.876 --> 00:02:53.806 A:middle
我们有超过十亿的设备

00:02:53.806 --> 00:02:55.726 A:middle
因此我们大范围地使用加密技术

00:02:57.056 --> 00:02:58.806 A:middle
那么你可以想象

00:02:59.186 --> 00:03:00.206 A:middle
风险也是非常高的

00:03:00.626 --> 00:03:02.936 A:middle
性能对提高用户体验来说

00:03:02.936 --> 00:03:04.066 A:middle
是至关重要的

00:03:05.016 --> 00:03:07.006 A:middle
电量是保证我们

00:03:07.136 --> 00:03:09.296 A:middle
全天使用的基础

00:03:09.296 --> 00:03:11.166 A:middle
而安全则是基石

00:03:12.526 --> 00:03:13.856 A:middle
现在 我们来进一步了解一下

00:03:13.856 --> 00:03:14.516 A:middle
加密技术

00:03:16.196 --> 00:03:17.896 A:middle
加密技术其实是一个工具

00:03:18.286 --> 00:03:20.116 A:middle
它为一系列基本属性

00:03:20.306 --> 00:03:21.956 A:middle
提供解决方案

00:03:23.186 --> 00:03:25.096 A:middle
比如身份认证 它能够

00:03:25.096 --> 00:03:27.776 A:middle
让你知道是谁向你发送了信息

00:03:29.456 --> 00:03:31.406 A:middle
加密 就意味着

00:03:31.406 --> 00:03:34.546 A:middle
只有你才能解密该消息

00:03:35.456 --> 00:03:37.836 A:middle
而完整性 则代表着

00:03:37.836 --> 00:03:39.536 A:middle
没有人可以在你之前

00:03:39.536 --> 00:03:42.506 A:middle
修改该消息的内容

00:03:43.456 --> 00:03:45.636 A:middle
为解决更广泛的

00:03:45.636 --> 00:03:47.166 A:middle
安全问题

00:03:47.166 --> 00:03:48.916 A:middle
我们将加密功能

00:03:48.916 --> 00:03:51.376 A:middle
结合到加密协议中

00:03:51.376 --> 00:03:52.466 A:middle
这并不容易

00:03:54.036 --> 00:03:56.266 A:middle
事实上 你们中的很多人

00:03:56.266 --> 00:03:57.316 A:middle
大多数人可能都听过这个说法

00:03:57.356 --> 00:03:59.426 A:middle
不要使用加密 对吧

00:04:01.616 --> 00:04:04.256 A:middle
有很多地方都可能出错

00:04:05.456 --> 00:04:07.476 A:middle
比如它有可能选中

00:04:07.476 --> 00:04:09.116 A:middle
错误的原语

00:04:09.116 --> 00:04:09.946 A:middle
从而使你得不到

00:04:09.946 --> 00:04:11.766 A:middle
你想要获得的安全

00:04:12.636 --> 00:04:14.566 A:middle
或者它也可能添加了正确的

00:04:14.566 --> 00:04:16.745 A:middle
原语 但没有正确使用它们

00:04:16.745 --> 00:04:19.656 A:middle
而最低级的错误 

00:04:19.656 --> 00:04:22.366 A:middle
即安装启动的时候

00:04:22.366 --> 00:04:23.916 A:middle
就可能泄露了隐私或密钥

00:04:24.296 --> 00:04:25.476 A:middle
这可能会造成定时攻击

00:04:25.476 --> 00:04:27.556 A:middle
或 Padding Oracle 攻击

00:04:28.886 --> 00:04:30.696 A:middle
这就是为什么

00:04:30.696 --> 00:04:32.056 A:middle
加密十分困难

00:04:32.386 --> 00:04:35.046 A:middle
新闻上我们可以看到

00:04:35.186 --> 00:04:36.356 A:middle
无数关于加密协议

00:04:36.356 --> 00:04:39.636 A:middle
失败的例子

00:04:39.636 --> 00:04:41.236 A:middle
而最糟糕的是

00:04:41.236 --> 00:04:42.656 A:middle
安全漏洞也许不是当时

00:04:42.656 --> 00:04:43.426 A:middle
就能发现的

00:04:43.426 --> 00:04:45.186 A:middle
也许要等到几年后

00:04:45.186 --> 00:04:46.306 A:middle
有人报告说发现了一个漏洞

00:04:47.656 --> 00:04:50.386 A:middle
这就是风险高的原因

00:04:50.386 --> 00:04:53.146 A:middle
所以要保证其正确性需要

00:04:53.146 --> 00:04:53.736 A:middle
花费很多努力

00:04:55.026 --> 00:04:56.286 A:middle
设计一个强大的协议

00:04:56.636 --> 00:04:59.336 A:middle
需要花费大量时间和技巧

00:04:59.336 --> 00:05:02.166 A:middle
还需要你作为一个加密专家的专业知识

00:05:03.306 --> 00:05:04.686 A:middle
甚至当你设计出协议的时候

00:05:05.056 --> 00:05:06.226 A:middle
工作仍没有结束

00:05:06.946 --> 00:05:07.996 A:middle
你还要做大量连续的工作

00:05:07.996 --> 00:05:10.576 A:middle
来监控新的攻击

00:05:10.576 --> 00:05:12.156 A:middle
看看什么适用于你的代码

00:05:12.156 --> 00:05:14.806 A:middle
然后响应它

00:05:15.476 --> 00:05:17.096 A:middle
但有时并不是那么简单

00:05:17.486 --> 00:05:18.676 A:middle
它们可能是彼此依赖的

00:05:19.226 --> 00:05:20.606 A:middle
那些你选择整合进

00:05:20.606 --> 00:05:23.846 A:middle
你的 App 中的库文件

00:05:24.106 --> 00:05:25.856 A:middle
在一些情况下

00:05:25.856 --> 00:05:27.006 A:middle
你也需要修改并传输协议

00:05:27.006 --> 00:05:29.196 A:middle
同时管理所有的

00:05:29.196 --> 00:05:30.916 A:middle
可解释的场景

00:05:31.516 --> 00:05:35.436 A:middle
所有这些是个大工程

00:05:36.076 --> 00:05:38.326 A:middle
它会花费大量的时间和精力

00:05:38.326 --> 00:05:40.106 A:middle
让你无暇实践可能有的精彩想法

00:05:40.106 --> 00:05:42.546 A:middle
或者下一个很酷的功能

00:05:44.416 --> 00:05:46.936 A:middle
这就是为什么你可以

00:05:46.936 --> 00:05:49.136 A:middle
真正从原生功能中获益

00:05:50.256 --> 00:05:51.766 A:middle
我们的理念一直是

00:05:51.766 --> 00:05:55.306 A:middle
为一系列常见的问题

00:05:55.646 --> 00:05:57.836 A:middle
提供完整的解决方案

00:05:57.836 --> 00:05:59.626 line:90%
而你无需为此费心

00:06:03.726 --> 00:06:05.586 A:middle
和工作量 我们完全可以

00:06:05.586 --> 00:06:07.716 A:middle
通过我们平台上的

00:06:07.716 --> 00:06:09.856 A:middle
代理的硬件功能

00:06:09.856 --> 00:06:11.936 A:middle
来实现更好的安全性

00:06:14.686 --> 00:06:17.046 A:middle
现在 我们来看一组

00:06:17.046 --> 00:06:18.626 A:middle
你们可能非常熟悉的

00:06:19.156 --> 00:06:20.646 A:middle
很常见的场景

00:06:20.646 --> 00:06:24.146 A:middle
我会先开始讲如何

00:06:24.146 --> 00:06:25.736 A:middle
保护一个设备上的数据

00:06:26.366 --> 00:06:28.676 A:middle
接着我们可以看看

00:06:28.676 --> 00:06:30.206 A:middle
保护凭证和密钥

00:06:30.766 --> 00:06:36.456 A:middle
之后是跨设备和用户的数据共享

00:06:38.256 --> 00:06:40.106 A:middle
接着是保护网络链接安全

00:06:40.106 --> 00:06:42.196 A:middle
那么最后是

00:06:42.346 --> 00:06:44.846 A:middle
用证书验证间接联系人

00:06:46.426 --> 00:06:49.276 A:middle
现在 我们来看第一个例子

00:06:49.406 --> 00:06:50.456 A:middle
相信你们中的很多人

00:06:50.546 --> 00:06:54.106 A:middle
已经发现了该场景

00:06:54.106 --> 00:06:56.556 A:middle
并且在努力保护设备上的数据

00:06:57.406 --> 00:07:00.496 A:middle
那么 我建议你们不要

00:07:00.496 --> 00:07:01.586 A:middle
仅仅是复制粘贴你在

00:07:01.586 --> 00:07:03.246 A:middle
一些网站上发现的东西

00:07:03.896 --> 00:07:06.976 A:middle
最好使用数据保护

00:07:08.016 --> 00:07:09.276 A:middle
数据保护综合了

00:07:09.276 --> 00:07:11.046 A:middle
密码的长处

00:07:11.046 --> 00:07:12.766 A:middle
和 Secure Enclave 中的

00:07:12.766 --> 00:07:14.696 A:middle
硬件技术

00:07:14.816 --> 00:07:16.966 A:middle
来确保密钥的安全性

00:07:16.966 --> 00:07:19.886 A:middle
同时使加密数据不能被

00:07:19.886 --> 00:07:20.796 A:middle
暴力破解密码

00:07:21.396 --> 00:07:23.816 A:middle
但还有更多优点

00:07:24.526 --> 00:07:26.586 A:middle
数据保护提供了

00:07:26.586 --> 00:07:27.556 A:middle
破解后的复原

00:07:28.726 --> 00:07:30.656 A:middle
破解后复原

00:07:30.656 --> 00:07:31.806 A:middle
也称前向保密性

00:07:32.156 --> 00:07:34.166 A:middle
它能确保如果攻击者

00:07:34.456 --> 00:07:35.666 A:middle
攻击了设备的密钥

00:07:35.666 --> 00:07:37.736 A:middle
之后用户更改了密码

00:07:37.736 --> 00:07:40.276 A:middle
那么旧的密码

00:07:40.276 --> 00:07:42.086 A:middle
都不能被用来恢复

00:07:42.086 --> 00:07:43.346 A:middle
所有之后加密的数据

00:07:44.496 --> 00:07:47.296 A:middle
这一点可以说至关重要

00:07:47.296 --> 00:07:48.476 A:middle
如果你想要了解更多

00:07:49.086 --> 00:07:49.996 A:middle
数据保护能做的事情

00:07:49.996 --> 00:07:51.946 A:middle
你可以看看 iOS

00:07:51.946 --> 00:07:53.276 A:middle
安全白皮书

00:07:53.276 --> 00:07:56.086 A:middle
来获得更多信息

00:07:56.926 --> 00:07:58.386 A:middle
有一件事你需要知道

00:07:59.166 --> 00:07:59.996 A:middle
就是当你的 App 出现问题时

00:07:59.996 --> 00:08:02.336 A:middle
你可以设置

00:08:02.396 --> 00:08:03.626 A:middle
不同的保护属性

00:08:04.276 --> 00:08:08.736 A:middle
首次身份验证后就可以设置

00:08:09.496 --> 00:08:12.776 A:middle
而数据甚至一直会被保护

00:08:14.096 --> 00:08:15.526 A:middle
直到用户在开机后第一次

00:08:15.526 --> 00:08:17.096 A:middle
将手机解锁

00:08:18.346 --> 00:08:19.126 A:middle
这很不错

00:08:20.136 --> 00:08:21.766 A:middle
今天 你可以做得更好

00:08:22.316 --> 00:08:24.236 A:middle
我们有完整的文件保护

00:08:24.766 --> 00:08:26.076 A:middle
完整的文件保护 意味着

00:08:26.546 --> 00:08:28.746 A:middle
只有在用户解锁他的手机后

00:08:28.796 --> 00:08:30.876 A:middle
数据才能获取

00:08:31.326 --> 00:08:32.836 A:middle
只要用户锁起他的手机

00:08:32.836 --> 00:08:33.846 A:middle
将其放入一个口袋或包里

00:08:33.846 --> 00:08:36.336 A:middle
数据就再一次被保护起来了

00:08:36.885 --> 00:08:39.846 A:middle
这样使用起来真的很方便

00:08:40.145 --> 00:08:40.775 A:middle
这里有一个例子

00:08:41.566 --> 00:08:42.686 A:middle
你唯一需要使用的

00:08:42.846 --> 00:08:43.606 A:middle
就是这个选项

00:08:43.916 --> 00:08:44.966 A:middle
completeFileProtection

00:08:44.966 --> 00:08:46.706 A:middle
不能比这更简单了 对

00:08:47.216 --> 00:08:48.376 A:middle
如果你现在还没使用这个选项

00:08:48.376 --> 00:08:49.686 A:middle
请回去查看你的 App

00:08:49.686 --> 00:08:50.906 A:middle
看看你可以在哪里使用它

00:08:50.906 --> 00:08:53.446 A:middle
以获得最佳级别的安全性

00:08:55.576 --> 00:08:58.506 A:middle
现在 除了文件

00:08:58.506 --> 00:08:59.616 A:middle
你想要保护的

00:08:59.616 --> 00:09:01.066 A:middle
也许还有更为敏感的信息

00:09:02.076 --> 00:09:03.596 A:middle
也有身份验证令牌 这样的证书

00:09:03.836 --> 00:09:05.906 A:middle
它们用于对服务

00:09:05.906 --> 00:09:09.006 A:middle
或加密密钥进行身份验证

00:09:09.546 --> 00:09:13.986 A:middle
但不要将它们

00:09:13.986 --> 00:09:15.436 A:middle
编写成默认值 像我们可以

00:09:15.436 --> 00:09:16.936 A:middle
在所有平台上看到的那样

00:09:17.736 --> 00:09:19.666 A:middle
相反 我们有钥匙串

00:09:21.106 --> 00:09:22.826 A:middle
SecItem API 中的钥匙串

00:09:23.356 --> 00:09:24.826 A:middle
让你能像在本地钥匙串中一样

00:09:25.446 --> 00:09:27.036 A:middle
写那些项目 这意味着

00:09:27.036 --> 00:09:28.146 A:middle
它们会继续保留在该设备上

00:09:28.146 --> 00:09:30.976 A:middle
或者在 iCloud 钥匙串上

00:09:31.836 --> 00:09:33.076 A:middle
在那里 他们将所有的设备同步

00:09:33.076 --> 00:09:34.426 A:middle
从而实现一种

00:09:34.546 --> 00:09:37.306 A:middle
用户账户的无缝体验

00:09:37.946 --> 00:09:40.086 A:middle
这需要用户账户能够

00:09:40.306 --> 00:09:41.706 A:middle
进行双重验证

00:09:42.306 --> 00:09:45.006 A:middle
而对于钥匙串 你会发现

00:09:45.006 --> 00:09:47.466 A:middle
它对我前面提到的文件

00:09:47.466 --> 00:09:48.906 A:middle
和一些额外文件

00:09:49.576 --> 00:09:50.696 A:middle
有非常相似的保护

00:09:51.246 --> 00:09:52.556 A:middle
这里 我要再推荐你

00:09:52.556 --> 00:09:53.786 A:middle
可以去看看那个文档

00:09:53.786 --> 00:09:54.286 A:middle
来进一步学习

00:09:55.686 --> 00:09:56.946 A:middle
除了了解何时可用密钥外

00:09:56.986 --> 00:09:58.136 A:middle
有时知道用户

00:09:58.636 --> 00:10:00.306 A:middle
如何及何时

00:10:00.306 --> 00:10:01.976 A:middle
对其进行身份验证 也很重要

00:10:03.656 --> 00:10:05.576 A:middle
所以在这里 我们用

00:10:05.576 --> 00:10:06.976 A:middle
LocalAuthentication

00:10:08.256 --> 00:10:10.196 A:middle
LocalAuthentication 使你可以

00:10:10.196 --> 00:10:12.446 A:middle
根据何时可以执行一个操作

00:10:12.446 --> 00:10:14.726 A:middle
来进行限制

00:10:15.306 --> 00:10:16.746 A:middle
例如 你可以定义

00:10:16.886 --> 00:10:18.336 A:middle
用户需要使用 Face ID

00:10:18.336 --> 00:10:19.646 A:middle
这样的生物鉴定识别

00:10:19.646 --> 00:10:20.296 A:middle
进行身份验证

00:10:21.256 --> 00:10:22.906 A:middle
这样做非常方便

00:10:22.906 --> 00:10:25.336 A:middle
同时在这方面 在 macOS 上

00:10:25.336 --> 00:10:26.446 A:middle
我们有一些更有意思的操作

00:10:27.036 --> 00:10:31.066 A:middle
在 macOS 上 你习惯了

00:10:31.146 --> 00:10:33.776 A:middle
设备身份验证属性

00:10:33.776 --> 00:10:35.986 A:middle
它为用户提供了两种方法

00:10:35.986 --> 00:10:38.256 A:middle
来进行身份验证 分别是

00:10:38.256 --> 00:10:39.886 A:middle
密码和支持 Touch ID 进行验证的

00:10:39.886 --> 00:10:41.496 A:middle
Mac 上的生物鉴定识别

00:10:42.466 --> 00:10:43.606 A:middle
今年 我们非常高兴地宣布

00:10:43.606 --> 00:10:46.006 A:middle
现在 你不需要在

00:10:46.006 --> 00:10:48.746 A:middle
App 上做任何的改变

00:10:48.746 --> 00:10:50.446 A:middle
用户就可以用 Apple Watch

00:10:50.446 --> 00:10:52.496 A:middle
来进行身份验证 只要双击 Apple Watch

00:10:53.376 --> 00:10:54.606 A:middle
这是个很棒的全新体验

00:10:54.796 --> 00:10:56.506 A:middle
它将会减少密码的使用

00:10:56.506 --> 00:10:57.986 A:middle
减少摩擦

00:10:58.026 --> 00:10:59.926 A:middle
从而提高用户体验

00:11:02.536 --> 00:11:04.306 A:middle
我们增加了两个新的规则

00:11:05.236 --> 00:11:08.386 A:middle
第一个是将身份验证

00:11:08.386 --> 00:11:10.416 A:middle
简化为只用生物鉴定识别

00:11:10.416 --> 00:11:11.926 A:middle
和 Watch

00:11:12.506 --> 00:11:16.426 A:middle
第二个则是只用 Watch 验证

00:11:17.696 --> 00:11:18.686 A:middle
我们期待看到

00:11:18.776 --> 00:11:19.946 A:middle
你将如何在你的 macOS 上的

00:11:20.076 --> 00:11:21.566 A:middle
App 中使用这些

00:11:25.196 --> 00:11:26.386 A:middle
那么 我之前提到过钥匙串

00:11:27.316 --> 00:11:28.186 A:middle
这里有一种简单的方法

00:11:28.236 --> 00:11:30.376 A:middle
可以将一个账户

00:11:30.376 --> 00:11:32.286 A:middle
在所有设备上的项目同步

00:11:33.196 --> 00:11:34.066 A:middle
那么如果你有数据怎么办呢

00:11:35.086 --> 00:11:36.636 A:middle
好 对于数据我们也有很好的

00:11:36.636 --> 00:11:37.236 A:middle
解决方法

00:11:38.626 --> 00:11:41.436 A:middle
CloudKit 它使你可以

00:11:41.436 --> 00:11:43.336 A:middle
在私人 CloudKit 数据库里

00:11:43.336 --> 00:11:46.856 A:middle
对素材进行加密

00:11:46.856 --> 00:11:48.556 A:middle
相应的数据就会

00:11:48.556 --> 00:11:50.156 A:middle
在所有的设备间共享

00:11:50.156 --> 00:11:52.376 A:middle
而用户不需要登录 App

00:11:52.936 --> 00:11:56.296 A:middle
这很不错 甚至你可以用它

00:11:56.296 --> 00:11:58.636 A:middle
来共享给所有的用户

00:12:02.936 --> 00:12:05.746 A:middle
将作为一个信任方

00:12:05.846 --> 00:12:08.046 A:middle
来帮助管理 iCloud 身份

00:12:08.046 --> 00:12:09.886 A:middle
和对数据的控制

00:12:10.596 --> 00:12:13.776 A:middle
这里我再举一个例子

00:12:13.776 --> 00:12:15.786 A:middle
这个设置起来很容易

00:12:16.946 --> 00:12:17.976 A:middle
从文件中 我们创建一个素材

00:12:20.556 --> 00:12:22.626 A:middle
用这个素材 我们创建了一个记录

00:12:23.496 --> 00:12:24.846 A:middle
然后我们将这个记录

00:12:24.906 --> 00:12:26.476 A:middle
上传到私人 CloudKit 数据库

00:12:27.166 --> 00:12:31.386 A:middle
这样就可以了 如果你想

00:12:31.436 --> 00:12:32.816 A:middle
向其他用户添加共享

00:12:32.816 --> 00:12:34.486 A:middle
API 也是可以做到的

00:12:34.486 --> 00:12:36.326 A:middle
如果你之前没有关注过 CloudKit

00:12:36.356 --> 00:12:38.076 A:middle
那么这是一个很好的时机

00:12:38.376 --> 00:12:39.366 A:middle
你可以去查看说明文档

00:12:39.366 --> 00:12:40.656 A:middle
看看它对你来说

00:12:40.656 --> 00:12:42.046 A:middle
有多么强大

00:12:42.046 --> 00:12:45.326 A:middle
那么 我们之前说了

00:12:45.326 --> 00:12:47.846 A:middle
保护设备里的数据

00:12:47.846 --> 00:12:49.876 A:middle
然后将其在设备间共享

00:12:49.876 --> 00:12:52.626 A:middle
甚至是共享到另一用户的设备

00:12:52.626 --> 00:12:55.756 A:middle
比如 在你想对来自你自己的

00:12:55.756 --> 00:12:58.206 A:middle
服务器的数据执行此操作的时候

00:12:59.436 --> 00:13:00.986 A:middle
你想在哪里建立

00:13:00.986 --> 00:13:02.276 A:middle
一个安全连接

00:13:03.556 --> 00:13:04.646 A:middle
安全连接

00:13:04.646 --> 00:13:06.956 A:middle
真的十分重要

00:13:07.126 --> 00:13:08.916 A:middle
因为它能帮助我们

00:13:08.916 --> 00:13:10.376 A:middle
保证用户在使用你的

00:13:10.376 --> 00:13:12.826 A:middle
App 时的所有信息的

00:13:12.826 --> 00:13:14.896 A:middle
保密性 同时保证

00:13:14.896 --> 00:13:16.676 A:middle
该信息的可信度

00:13:16.676 --> 00:13:18.976 A:middle
确保它不被篡改

00:13:21.226 --> 00:13:22.346 A:middle
那么在这里

00:13:22.346 --> 00:13:23.936 A:middle
你首先不应该做的就是

00:13:23.936 --> 00:13:25.696 A:middle
只是尝试使用你的自定协议

00:13:26.296 --> 00:13:27.776 A:middle
有一个很好的解决方案

00:13:28.626 --> 00:13:29.696 A:middle
这是一个标准的解决方案

00:13:30.946 --> 00:13:32.446 A:middle
传输层安全协议

00:13:33.236 --> 00:13:35.826 A:middle
它在我们的平台上真的很好用

00:13:36.246 --> 00:13:39.096 A:middle
因为我们有两个很棒的 API

00:13:39.906 --> 00:13:41.076 A:middle
第一个是网络框架

00:13:41.076 --> 00:13:42.796 A:middle
你可能已经在

00:13:42.796 --> 00:13:46.316 A:middle
去年的 WWDC 中发现了这个

00:13:47.036 --> 00:13:48.946 A:middle
第二个就是 URL 会话

00:13:49.286 --> 00:13:51.356 A:middle
你可能知道它是

00:13:51.356 --> 00:13:53.236 A:middle
App 传输层安全的一部分

00:13:55.116 --> 00:13:56.726 A:middle
而在 URL 会话中

00:13:56.726 --> 00:13:59.816 A:middle
我们只需要使用一个

00:14:00.986 --> 00:14:02.926 A:middle
在这两种情况中

00:14:03.786 --> 00:14:07.106 A:middle
我们依赖的都是

00:14:07.866 --> 00:14:09.496 A:middle
包含很多默认值的 TLS

00:14:10.336 --> 00:14:12.876 A:middle
默认值保证密码套件提供

00:14:13.436 --> 00:14:14.676 A:middle
强大的安全性

00:14:14.966 --> 00:14:16.486 A:middle
包括完美前向保密

00:14:16.556 --> 00:14:18.796 A:middle
以及 Apple 产品上

00:14:18.796 --> 00:14:21.276 A:middle
最有效的算法

00:14:21.816 --> 00:14:24.576 A:middle
或者在默认情况下

00:14:26.156 --> 00:14:28.086 A:middle
实现 TLS 也要使用 TLS 1.3

00:14:28.086 --> 00:14:30.766 A:middle
你可能不是很熟悉 TLS 1.3

00:14:30.766 --> 00:14:32.936 A:middle
它相对于之前的版本

00:14:32.936 --> 00:14:34.596 A:middle
有很大的改进

00:14:34.596 --> 00:14:37.446 A:middle
它可以大大提高

00:14:37.726 --> 00:14:39.156 A:middle
安全性和效率

00:14:39.156 --> 00:14:41.246 A:middle
通过减少一些运行行程

00:14:42.996 --> 00:14:45.166 A:middle
如果你还没有使用 TLS 1.3

00:14:46.026 --> 00:14:46.876 A:middle
那么请你试着将其

00:14:46.876 --> 00:14:48.816 A:middle
应用在你的服务器上

00:14:48.816 --> 00:14:50.526 A:middle
而你不需要在你的 App 上

00:14:50.526 --> 00:14:51.556 A:middle
做任何改变

00:14:51.556 --> 00:14:53.826 A:middle
就可以受益

00:14:55.456 --> 00:14:56.836 A:middle
好 为了向你展示它真的很简单

00:14:56.836 --> 00:14:58.936 A:middle
我这里有两个使用网络框架

00:14:58.936 --> 00:15:01.206 A:middle
和 URL 会话的例子

00:15:02.026 --> 00:15:04.016 A:middle
但在讲这两个例子前

00:15:04.016 --> 00:15:05.586 A:middle
我想要强调的是

00:15:05.586 --> 00:15:06.826 A:middle
安全传输这种方法

00:15:07.096 --> 00:15:08.376 A:middle
我们不再推荐

00:15:08.376 --> 00:15:10.886 A:middle
我们希望你

00:15:10.886 --> 00:15:12.576 A:middle
转用网络框架

00:15:12.576 --> 00:15:13.776 A:middle
和 URL 会话

00:15:13.776 --> 00:15:14.776 A:middle
如果你正在使用安全传输的话

00:15:15.686 --> 00:15:17.806 A:middle
我们为此准备了很多的例子

00:15:18.776 --> 00:15:20.896 A:middle
首先是网络框架

00:15:20.896 --> 00:15:22.676 A:middle
当你建立了一个连接

00:15:22.676 --> 00:15:24.926 A:middle
你需要做的唯一的事就是

00:15:25.006 --> 00:15:27.926 A:middle
加上 using:tls 好了

00:15:27.926 --> 00:15:30.516 A:middle
你添加了该 TLS 连接

00:15:30.516 --> 00:15:32.226 A:middle
会带给你更好的安全性和性能

00:15:33.296 --> 00:15:35.356 A:middle
然后是 URL 会话

00:15:35.356 --> 00:15:38.186 A:middle
在这里 你只需要用 http 端点

00:15:38.236 --> 00:15:40.866 A:middle
好了

00:15:41.136 --> 00:15:43.636 A:middle
在一些情况下

00:15:44.286 --> 00:15:45.736 A:middle
你也许无法用 TLS

00:15:45.986 --> 00:15:47.566 A:middle
例如 如果你已经在尝试

00:15:47.566 --> 00:15:49.876 A:middle
通过一个内容发布网络

00:15:49.876 --> 00:15:51.356 A:middle
来保护数据

00:15:52.146 --> 00:15:54.116 A:middle
这时 你管理那些证书

00:15:54.116 --> 00:15:56.296 A:middle
而对于证书来说

00:15:56.456 --> 00:15:59.606 A:middle
首先要避免的就是

00:15:59.606 --> 00:16:01.816 A:middle
将它用在解析器上

00:16:01.816 --> 00:16:02.896 A:middle
或尝试用一个你在网站上

00:16:02.896 --> 00:16:04.416 A:middle
随意发现的解析器

00:16:05.066 --> 00:16:06.626 A:middle
解析器非常脆弱

00:16:06.626 --> 00:16:09.526 A:middle
因为它包含大量的攻击暴露

00:16:10.956 --> 00:16:12.026 A:middle
这是很严重的问题

00:16:13.216 --> 00:16:16.286 A:middle
在平台上我们有 SecTrust

00:16:17.126 --> 00:16:18.466 A:middle
SecTrust 提供了一个简单的方法

00:16:18.466 --> 00:16:20.436 A:middle
即根据一个信任规则

00:16:21.056 --> 00:16:22.286 A:middle
来验证证书

00:16:23.086 --> 00:16:24.286 A:middle
而信任规则可能包含

00:16:24.286 --> 00:16:26.096 A:middle
过期信息

00:16:27.006 --> 00:16:29.786 A:middle
作废信息

00:16:29.786 --> 00:16:31.666 A:middle
而直到证书已经被验证了

00:16:31.836 --> 00:16:36.386 A:middle
你才知道你可以使用密码

00:16:36.636 --> 00:16:38.196 A:middle
注意 如果你使用 TLS 的话

00:16:38.196 --> 00:16:40.566 A:middle
你就不需要担心证书的问题了

00:16:40.736 --> 00:16:43.326 A:middle
一切都在为你安排好了

00:16:43.886 --> 00:16:47.546 A:middle
好 在这个版本中

00:16:47.546 --> 00:16:49.606 A:middle
我们很高兴介绍一个

00:16:49.606 --> 00:16:51.846 A:middle
SecTrust 中的新函数

00:16:52.716 --> 00:16:54.256 A:middle
该函数综合了

00:16:54.256 --> 00:16:56.686 A:middle
你之前能做的两件事

00:16:57.286 --> 00:16:58.476 A:middle
一方面 这是一个函数

00:16:58.476 --> 00:17:00.206 A:middle
它允许异步执行

00:17:00.656 --> 00:17:02.796 A:middle
通过显式操作

00:17:02.796 --> 00:17:04.806 A:middle
来完成一个验证证书

00:17:04.806 --> 00:17:06.026 A:middle
这样你的 App 就可以

00:17:06.026 --> 00:17:07.336 A:middle
在证书被验证的同时

00:17:07.336 --> 00:17:09.026 A:middle
进行其他的事

00:17:09.626 --> 00:17:11.925 A:middle
但同时 这个函数

00:17:11.925 --> 00:17:13.026 A:middle
可以进行更丰富的处理

00:17:13.685 --> 00:17:15.996 A:middle
那么 作为一个开发人员

00:17:16.705 --> 00:17:18.726 A:middle
你知道万一失败了要怎么办

00:17:18.776 --> 00:17:20.665 A:middle
你可以进行调试

00:17:21.306 --> 00:17:22.675 A:middle
但同时 你可以在你的 App 里

00:17:22.675 --> 00:17:25.215 A:middle
建立逻辑来对不同的

00:17:25.215 --> 00:17:26.556 A:middle
错误场景作出回应

00:17:27.146 --> 00:17:29.086 A:middle
那么这个新函数将会

00:17:29.086 --> 00:17:30.736 A:middle
让调试变得更为

00:17:30.736 --> 00:17:31.856 A:middle
方便和简单

00:17:31.856 --> 00:17:34.106 A:middle
我们期待着你能运用它

00:17:34.656 --> 00:17:37.626 A:middle
那么 我刚刚向大家介绍了

00:17:37.626 --> 00:17:40.336 A:middle
五种不同的场景

00:17:40.336 --> 00:17:42.466 A:middle
对于这些场景

00:17:42.836 --> 00:17:44.976 A:middle
我们有非常易于使用的解决方案

00:17:45.456 --> 00:17:47.536 line:90%
它们提供了很好的安全性

00:17:47.536 --> 00:17:50.186 A:middle
你只需要使用默认设置

00:17:50.186 --> 00:17:53.306 A:middle
或者修改几个属性就可以

00:17:53.876 --> 00:17:57.546 A:middle
在这里 我们又一次地

00:17:58.156 --> 00:17:59.326 A:middle
受益于与硬件的深度融合

00:17:59.326 --> 00:18:00.756 A:middle
以此提供安全特性

00:18:00.816 --> 00:18:02.326 A:middle
否则我们是很难

00:18:02.326 --> 00:18:03.396 A:middle
提供这些特性的

00:18:04.026 --> 00:18:06.646 A:middle
那么 无论在哪个场景中

00:18:06.906 --> 00:18:09.496 A:middle
当你遇到它们

00:18:09.496 --> 00:18:10.406 A:middle
就去使用系统框架

00:18:10.406 --> 00:18:11.986 A:middle
如果你已经这么做了

00:18:11.986 --> 00:18:13.296 A:middle
就要保证你正在使用的

00:18:13.296 --> 00:18:14.016 A:middle
都是最好的属性

00:18:14.016 --> 00:18:14.936 A:middle
这样你才能

00:18:14.936 --> 00:18:17.656 A:middle
以尽可能好的方式

00:18:17.656 --> 00:18:19.466 A:middle
来保护用户和商业素材

00:18:20.086 --> 00:18:24.056 A:middle
我们明白在一些情况下

00:18:24.056 --> 00:18:26.186 A:middle
使用系统功能

00:18:26.186 --> 00:18:29.216 A:middle
也许对你来说并不是那么实用

00:18:29.746 --> 00:18:32.556 A:middle
例如 你可能需要

00:18:32.926 --> 00:18:35.726 A:middle
在适用系统之外具备互操作性

00:18:35.856 --> 00:18:38.626 A:middle
你可以用你的服务

00:18:38.626 --> 00:18:41.936 A:middle
来进行身份验证

00:18:41.936 --> 00:18:44.096 A:middle
或者只是给一个

00:18:44.096 --> 00:18:46.386 A:middle
需要实现的规范

00:18:46.386 --> 00:18:49.536 A:middle
对所有这些例子 我们现在

00:18:49.536 --> 00:18:50.766 A:middle
要介绍一个很棒的解决方案

00:18:51.976 --> 00:18:53.006 A:middle
Apple CryptoKit

00:18:53.936 --> 00:18:57.026 A:middle
Apple CryptoKit 是

00:18:57.096 --> 00:18:59.576 A:middle
新的 Swift 加密 API

00:18:59.576 --> 00:19:00.956 A:middle
其设计理念与我们

00:19:00.956 --> 00:19:02.866 A:middle
所讨论的功能的设计理念相同

00:19:02.866 --> 00:19:05.396 A:middle
它让你能够很容易地

00:19:05.396 --> 00:19:06.886 A:middle
访问加密函数

00:19:06.886 --> 00:19:10.096 A:middle
也很难误用函数

00:19:11.006 --> 00:19:14.966 A:middle
我们很高兴在本次发布中介绍它

00:19:16.106 --> 00:19:17.766 A:middle
现在 我要交给 Frederic

00:19:17.886 --> 00:19:18.916 A:middle
他将向你们介绍

00:19:18.916 --> 00:19:20.386 A:middle
这个全新的 API

00:19:21.076 --> 00:19:22.976 A:middle
下面有请 Frederic 上台

00:19:23.516 --> 00:19:29.546 A:middle
[掌声]

00:19:30.046 --> 00:19:30.846 A:middle
&gt;&gt; 谢谢 Yannick

00:19:31.776 --> 00:19:32.386 A:middle
大家好

00:19:32.796 --> 00:19:34.946 A:middle
我的名字是 Frederic Jacobs

00:19:34.946 --> 00:19:36.526 A:middle
我来自 Apple 的

00:19:36.526 --> 00:19:37.936 A:middle
加密工程团队

00:19:38.646 --> 00:19:40.536 A:middle
很高兴能向你们进一步介绍

00:19:40.536 --> 00:19:42.546 A:middle
Apple CryptoKit

00:19:43.386 --> 00:19:44.866 A:middle
我们认为你一定会喜欢

00:19:44.866 --> 00:19:49.346 A:middle
在 Swift 中实现加密协议

00:19:49.396 --> 00:19:51.786 A:middle
关于 Apple CryptoKit 有四个方面

00:19:51.786 --> 00:19:53.376 A:middle
我想要在今天下午

00:19:53.376 --> 00:19:54.346 A:middle
与你分享

00:19:55.216 --> 00:19:57.596 A:middle
首先 我们要谈一谈

00:19:57.786 --> 00:19:59.656 A:middle
CryptoKit 和 Swift

00:20:03.876 --> 00:20:06.016 A:middle
能够在 CryptoKit 里

00:20:06.016 --> 00:20:07.566 A:middle
获得的算法

00:20:08.556 --> 00:20:11.016 A:middle
第三 我们将讨论一下

00:20:11.126 --> 00:20:14.146 A:middle
Secure Enclave

00:20:14.146 --> 00:20:16.016 A:middle
和生物鉴定识别

00:20:16.586 --> 00:20:18.746 A:middle
最后 我们会谈谈性能

00:20:19.706 --> 00:20:21.006 A:middle
我们开始吧

00:20:22.096 --> 00:20:23.806 A:middle
在过去 当你从 Swift 中

00:20:23.856 --> 00:20:25.556 A:middle
调用 C 加密 API 时

00:20:25.556 --> 00:20:28.726 A:middle
你可能不得不编写

00:20:28.726 --> 00:20:30.366 A:middle
这样的代码

00:20:31.126 --> 00:20:33.326 A:middle
你需要分配缓冲区

00:20:33.596 --> 00:20:34.806 A:middle
分析出每一个

00:20:34.806 --> 00:20:36.706 A:middle
缓冲区的尺寸大小

00:20:37.406 --> 00:20:39.576 A:middle
也有像随机数这样的值

00:20:39.576 --> 00:20:42.246 A:middle
你可能需要查找

00:20:42.246 --> 00:20:45.366 A:middle
该值的安全值是多少

00:20:46.326 --> 00:20:47.836 A:middle
然后 你将所有这些

00:20:47.836 --> 00:20:50.406 A:middle
嵌套调用至

00:20:50.406 --> 00:20:52.746 A:middle
你传递指针的加密函数中

00:20:52.746 --> 00:20:54.346 A:middle
同时这里没有参数标签

00:20:54.346 --> 00:20:56.556 A:middle
来帮你弄清

00:20:56.846 --> 00:21:01.426 A:middle
哪个指针需要进入哪个参数

00:21:02.306 --> 00:21:04.716 A:middle
相比之下 用 Apple CryptoKit

00:21:04.716 --> 00:21:07.556 A:middle
你可以只写一行代码

00:21:07.556 --> 00:21:09.836 A:middle
来进行完全一样的操作

00:21:11.086 --> 00:21:12.696 A:middle
是不是很棒呢

00:21:13.516 --> 00:21:18.506 A:middle
[掌声]

00:21:19.006 --> 00:21:21.746 A:middle
那么 为了完成这个

00:21:21.746 --> 00:21:23.036 A:middle
你将你想要加密的数据

00:21:23.036 --> 00:21:24.666 A:middle
进行传输

00:21:24.786 --> 00:21:26.836 A:middle
在这个例子里 我们使用 AES.GCM

00:21:26.836 --> 00:21:29.536 A:middle
同时 我们用你想要加密的

00:21:29.536 --> 00:21:31.616 A:middle
数据的密钥

00:21:31.616 --> 00:21:34.716 A:middle
这就好了

00:21:35.926 --> 00:21:38.276 A:middle
你也许还需要

00:21:38.276 --> 00:21:40.016 A:middle
生成自己的加密密钥

00:21:40.016 --> 00:21:42.036 A:middle
当你从 Swift 中

00:21:42.036 --> 00:21:44.146 A:middle
调用 C 加密 API 的时候

00:21:44.766 --> 00:21:46.796 A:middle
我们首先需要

00:21:47.116 --> 00:21:48.646 A:middle
转换一些位和字节

00:21:48.646 --> 00:21:50.456 A:middle
因为加密密钥

00:21:50.456 --> 00:21:52.996 A:middle
通常是用位来表示的

00:21:54.066 --> 00:21:56.446 A:middle
接着你需要为

00:21:56.446 --> 00:22:01.416 A:middle
这一数量的字节

00:22:01.576 --> 00:22:03.576 A:middle
分配一个缓冲区

00:22:03.576 --> 00:22:05.606 A:middle
并使用系统随机数生成器 

00:22:05.666 --> 00:22:08.096 A:middle
来用加密安全的随机数

00:22:08.096 --> 00:22:09.556 A:middle
填充该缓冲区

00:22:11.216 --> 00:22:14.606 A:middle
接着 如果出现错误

00:22:14.606 --> 00:22:15.666 A:middle
你必须处理它

00:22:16.726 --> 00:22:19.646 A:middle
然后你终于可以使用该密钥了

00:22:19.646 --> 00:22:22.816 A:middle
当使用完该密钥时

00:22:22.816 --> 00:22:24.706 A:middle
即使你忘记把它归零

00:22:24.706 --> 00:22:28.216 A:middle
也可以将其从内存中移除

00:22:28.836 --> 00:22:32.956 A:middle
而使用 CryptoKit

00:22:32.956 --> 00:22:37.906 A:middle
只要一行代码就可生成一个密钥

00:22:38.636 --> 00:22:40.376 A:middle
你调用 SymmetricKey

00:22:40.906 --> 00:22:42.796 A:middle
初始化程序 然后传输

00:22:42.796 --> 00:22:45.836 A:middle
你希望密钥持有的一定量的位

00:22:50.096 --> 00:22:52.666 A:middle
我们能在释放时将该密钥归零

00:22:52.666 --> 00:22:55.966 A:middle
因为只要了解该值的

00:22:56.566 --> 00:22:58.916 A:middle
自动引用计数

00:22:58.916 --> 00:23:02.626 A:middle
无论它什么时候被释放

00:23:03.096 --> 00:23:04.806 A:middle
我们都在将

00:23:04.806 --> 00:23:09.246 A:middle
该缓冲区归零

00:23:09.456 --> 00:23:11.376 A:middle
好 CryptoKit 和 Swift

00:23:12.266 --> 00:23:15.426 A:middle
我们有一个强类型的 API

00:23:16.366 --> 00:23:18.726 A:middle
无论你何时初始化一个值

00:23:19.426 --> 00:23:22.436 A:middle
我们都在验证

00:23:22.436 --> 00:23:24.826 A:middle
你所传递的数据

00:23:25.076 --> 00:23:26.596 A:middle
是否为该参数的一个强值

00:23:28.116 --> 00:23:32.706 A:middle
多亏 Swift 的内存管理模型

00:23:32.706 --> 00:23:34.506 A:middle
我们才能够在释放时

00:23:34.946 --> 00:23:38.376 A:middle
将所有分配在

00:23:38.376 --> 00:23:40.656 A:middle
CryptoKit 里的秘值归零

00:23:41.986 --> 00:23:43.646 A:middle
我们将对一些

00:23:43.646 --> 00:23:46.846 A:middle
如消息身份验证代码之类的值

00:23:47.066 --> 00:23:49.416 A:middle
执行公平的一致性

00:23:49.736 --> 00:23:50.746 A:middle
如果你熟悉该内容的话

00:23:50.746 --> 00:23:52.756 A:middle
你就能够通过

00:23:52.756 --> 00:23:53.966 A:middle
只使用 == 操作符

00:23:53.966 --> 00:23:56.006 A:middle
在恒定的时间内

00:23:56.006 --> 00:23:58.786 A:middle
来对双消息身份验证代码

00:23:58.786 --> 00:23:59.866 A:middle
进行验证

00:24:06.806 --> 00:24:09.296 A:middle
这样你可以在

00:24:09.296 --> 00:24:12.336 A:middle
哈希函数 H 上编写通用代码

00:24:12.426 --> 00:24:14.176 A:middle
如果在你代码库的多个位置中

00:24:14.176 --> 00:24:16.136 A:middle
需要传递不同的哈希函数

00:24:16.136 --> 00:24:17.656 A:middle
那么你可以只编写一次代码

00:24:17.656 --> 00:24:19.346 A:middle
然后确定函数的参数

00:24:19.496 --> 00:24:21.976 A:middle
来调用一个不同的哈希函数

00:24:24.776 --> 00:24:27.456 A:middle
那么 我们讲过了 CryptoKit 和 Swift

00:24:27.456 --> 00:24:29.836 A:middle
接下来我想深入讲讲

00:24:29.836 --> 00:24:32.996 A:middle
CryptoKit 中所支持的

00:24:33.066 --> 00:24:36.716 A:middle
算法集

00:24:37.756 --> 00:24:40.716 A:middle
所有算法都是标准的

00:24:40.716 --> 00:24:41.896 A:middle
同行评议的算法

00:24:42.526 --> 00:24:46.216 A:middle
我们来看看 CryptoKit 中支持什么

00:24:47.716 --> 00:24:49.066 A:middle
这里支持哈希函数

00:24:49.066 --> 00:24:51.276 A:middle
消息身份验证代码

00:24:51.276 --> 00:24:53.056 A:middle
认证加密

00:24:53.696 --> 00:24:56.796 A:middle
密钥协商

00:24:57.026 --> 00:25:01.126 A:middle
以及签名

00:25:02.876 --> 00:25:05.096 A:middle
这其中的一些算法

00:25:05.096 --> 00:25:06.686 A:middle
是我们之前在

00:25:06.686 --> 00:25:09.316 A:middle
如 Common Crypto 或 SecKey 等框架中

00:25:09.316 --> 00:25:11.576 A:middle
就支持的算法

00:25:11.576 --> 00:25:13.136 A:middle
但有一些算法

00:25:13.136 --> 00:25:15.206 A:middle
则是我们首次支持的算法

00:25:15.726 --> 00:25:17.816 A:middle
我将它们用绿色标出

00:25:18.466 --> 00:25:22.596 A:middle
注意我们还有一个非安全的模块

00:25:23.936 --> 00:25:27.216 A:middle
该模块提供如 MD5 和 SHA1

00:25:27.216 --> 00:25:30.776 A:middle
这样的算法

00:25:30.776 --> 00:25:32.806 A:middle
这样即使你需要使用一些

00:25:32.806 --> 00:25:35.356 A:middle
不再满足最佳安全标准的算法

00:25:35.356 --> 00:25:38.526 A:middle
你也可以使用 CryptoKit 

00:25:42.836 --> 00:25:46.306 A:middle
我们通过一些例子

00:25:46.636 --> 00:25:47.986 A:middle
来看 CryptoKit 是如何工作的

00:25:48.806 --> 00:25:50.356 A:middle
让我们从哈希函数开始

00:25:50.926 --> 00:25:53.406 A:middle
哈希函数会生成

00:25:53.406 --> 00:25:56.456 A:middle
确定的固定大小的输出

00:25:56.616 --> 00:25:58.816 A:middle
我们称其为摘要

00:25:58.996 --> 00:26:01.526 A:middle
与 Swift 中 Hashable 希的不同

00:26:01.526 --> 00:26:04.326 A:middle
CryptoKit中的哈希函数

00:26:04.726 --> 00:26:07.686 A:middle
提供了如防碰撞等加密特性

00:26:08.626 --> 00:26:10.876 A:middle
这意味着你很难找到

00:26:10.876 --> 00:26:16.986 A:middle
两个会哈希出相同摘要的输入

00:26:16.986 --> 00:26:19.606 A:middle
计算该哈希十分简单

00:26:19.606 --> 00:26:22.926 A:middle
就像在你想要使用的哈希函数上

00:26:22.926 --> 00:26:24.976 A:middle
调用哈希方法

00:26:24.976 --> 00:26:28.166 A:middle
然后传递所要哈希的数据那样

00:26:29.196 --> 00:26:32.016 A:middle
这里我想要哈希一些音频数据

00:26:32.016 --> 00:26:35.496 A:middle
那么我会用 SHA256 哈希函数

00:26:35.496 --> 00:26:38.976 A:middle
来计算一个摘要

00:26:45.146 --> 00:26:47.676 A:middle
那你也许会从输入流中读取它

00:26:49.096 --> 00:26:50.416 A:middle
在这种情况下

00:26:50.416 --> 00:26:53.906 A:middle
你需要以增量来计算摘要

00:26:55.096 --> 00:26:57.566 A:middle
首先你初始化一个哈希

00:26:57.566 --> 00:26:59.836 A:middle
通过在哈希函数上

00:26:59.836 --> 00:27:01.746 A:middle
调用 MT 初始化程序

00:27:02.236 --> 00:27:07.016 A:middle
接着传送你想要哈希的数据

00:27:07.016 --> 00:27:09.146 A:middle
然后为此一次或多次地

00:27:09.146 --> 00:27:14.516 A:middle
调用 update() 方法

00:27:14.756 --> 00:27:17.966 A:middle
当你想要计算该摘要时

00:27:17.966 --> 00:27:20.446 A:middle
你只要立即在哈希上

00:27:20.446 --> 00:27:22.226 A:middle
调用 finalize() 方法

00:27:22.226 --> 00:27:24.466 A:middle
然后它就会返回摘要

00:27:24.886 --> 00:27:29.396 A:middle
接下来 我们来说说

00:27:29.636 --> 00:27:30.886 A:middle
认证加密

00:27:31.716 --> 00:27:34.446 A:middle
这也是你们一直想知道的

00:27:35.106 --> 00:27:37.496 A:middle
正如它的名字所示

00:27:37.496 --> 00:27:39.896 A:middle
它可以同时提供认证和加密

00:27:41.436 --> 00:27:44.146 A:middle
在加密协议中

00:27:44.146 --> 00:27:46.686 A:middle
缺少认证

00:27:46.686 --> 00:27:49.276 A:middle
会导致很多攻击

00:27:49.836 --> 00:27:51.316 A:middle
将身份验证

00:27:51.436 --> 00:27:53.636 A:middle
和加密手动结合

00:27:54.356 --> 00:27:56.266 A:middle
会导致如 Padding Oracle 

00:27:56.266 --> 00:27:58.076 A:middle
这样的攻击

00:27:58.436 --> 00:28:00.586 A:middle
所以 我们非常乐意将它

00:28:00.656 --> 00:28:03.036 A:middle
作为一个 API 调用提供给你

00:28:07.076 --> 00:28:08.846 A:middle
我正在做的一个项目

00:28:09.096 --> 00:28:10.586 A:middle
这是一个徒步旅行 App

00:28:11.216 --> 00:28:12.786 A:middle
该 App 上的大多数内容是免费的

00:28:12.786 --> 00:28:15.316 A:middle
但也有额外的内容

00:28:15.316 --> 00:28:21.276 A:middle
你可以在 App 里花钱购买

00:28:21.386 --> 00:28:22.876 A:middle
一旦购买了该内容

00:28:23.216 --> 00:28:25.156 A:middle
你就可以获取额外的内容

00:28:26.576 --> 00:28:27.936 A:middle
我正在使用一个内容发布网络

00:28:27.936 --> 00:28:29.706 A:middle
以此来保证随着用户群的增长

00:28:29.706 --> 00:28:32.776 A:middle
下载的速度仍然很快

00:28:35.436 --> 00:28:37.776 A:middle
为了获得该内容

00:28:38.026 --> 00:28:41.366 A:middle
我首先检查了我的服务器

00:28:41.366 --> 00:28:44.976 A:middle
看 App 内购买是否有效

00:28:45.596 --> 00:28:49.706 A:middle
接着从服务器中获取到密钥

00:28:49.706 --> 00:28:51.296 A:middle
然后通过手机传递过来

00:28:52.656 --> 00:28:54.836 A:middle
我从内容发布网络上

00:28:55.136 --> 00:28:56.286 A:middle
下载该加密数据

00:28:56.286 --> 00:29:00.686 A:middle
然后使用密钥

00:29:00.686 --> 00:29:02.736 A:middle
来将加密内容解密

00:29:03.136 --> 00:29:06.346 A:middle
如果密钥正确

00:29:06.346 --> 00:29:08.276 A:middle
且在内容发布网络上的内容

00:29:08.276 --> 00:29:10.816 A:middle
没有被篡改

00:29:10.866 --> 00:29:12.696 A:middle
那么我就可以获取地图数据

00:29:13.306 --> 00:29:19.166 A:middle
下面我们来看如何转化为代码

00:29:19.336 --> 00:29:22.166 A:middle
我们首先用服务器

00:29:22.166 --> 00:29:24.366 A:middle
获取的密钥数据

00:29:24.366 --> 00:29:29.036 A:middle
初始化一个 SymmetricKey

00:29:29.186 --> 00:29:31.976 A:middle
然后我们初始化一个密封箱

00:29:32.996 --> 00:29:35.576 A:middle
在这个例子中

00:29:35.576 --> 00:29:37.246 A:middle
密封箱里有什么真的不重要

00:29:37.306 --> 00:29:39.216 A:middle
但是要知道如果你

00:29:39.556 --> 00:29:42.106 A:middle
正在实现一个规范 

00:29:42.106 --> 00:29:44.066 A:middle
该规范要求你以一种特定的方式

00:29:44.066 --> 00:29:46.146 A:middle
将随机数 密码文本

00:29:46.146 --> 00:29:48.286 A:middle
和标签结合起来

00:29:48.286 --> 00:29:49.986 A:middle
那么你就可以使用密封箱来完成

00:29:50.816 --> 00:29:52.216 A:middle
如果你要实现

00:29:52.216 --> 00:29:54.446 A:middle
一个需要你传输

00:29:54.446 --> 00:29:57.146 A:middle
特定随机数值的协议

00:29:57.366 --> 00:29:59.176 A:middle
我们也能支持这个操作

00:29:59.336 --> 00:30:01.376 A:middle
但是在这个例子里

00:30:01.416 --> 00:30:02.676 A:middle
我们要看看简单的情况

00:30:04.096 --> 00:30:06.216 A:middle
好 我们将下载的数据

00:30:06.216 --> 00:30:08.086 A:middle
作为一个 combined

00:30:08.086 --> 00:30:09.636 A:middle
传输到密封箱里

00:30:09.636 --> 00:30:12.156 A:middle
既然我们有一个密封箱

00:30:12.896 --> 00:30:15.496 A:middle
我们就可以打开它

00:30:15.496 --> 00:30:18.936 A:middle
通过在密码上调用 open() 方法

00:30:19.566 --> 00:30:22.816 A:middle
然后我们传输密钥

00:30:23.426 --> 00:30:23.976 A:middle
就是这么简单

00:30:26.916 --> 00:30:28.896 A:middle
接下来 我们说一说签名

00:30:30.196 --> 00:30:31.946 A:middle
签名被用来

00:30:31.946 --> 00:30:34.036 A:middle
使用一个私钥

00:30:34.036 --> 00:30:36.616 A:middle
对数据进行身份验证

00:30:36.616 --> 00:30:38.926 A:middle
使用签名我们可以

00:30:38.926 --> 00:30:41.346 A:middle
用关联的公共密钥来验证数据

00:30:41.866 --> 00:30:45.856 A:middle
我们来看一个例子

00:30:45.856 --> 00:30:47.846 A:middle
这里我们想要用签名

00:30:47.846 --> 00:30:49.976 A:middle
来授权操作

00:30:50.796 --> 00:30:54.496 A:middle
而这里的操作可以是一个

00:30:54.496 --> 00:30:56.866 A:middle
双重验证登录

00:30:56.916 --> 00:30:58.916 A:middle
或一些敏感交易事项

00:30:58.916 --> 00:31:01.536 A:middle
比如给 App 中的其他用户汇款

00:31:03.666 --> 00:31:07.096 A:middle
为此 我们首先要

00:31:07.406 --> 00:31:09.466 A:middle
在设备上生成一个私钥

00:31:10.956 --> 00:31:13.246 A:middle
接着获取相关联的公共密钥

00:31:13.816 --> 00:31:16.666 A:middle
关联的公共密钥

00:31:16.666 --> 00:31:20.826 A:middle
是用你的服务进行注册的

00:31:20.956 --> 00:31:24.016 A:middle
一旦我们想要执行该操作

00:31:24.016 --> 00:31:25.926 A:middle
我们就用私钥

00:31:25.926 --> 00:31:29.516 A:middle
生成交易数据上的签名

00:31:29.516 --> 00:31:33.056 A:middle
然后将该交易数据

00:31:33.056 --> 00:31:35.456 A:middle
和签名发送给服务器

00:31:36.866 --> 00:31:40.566 A:middle
服务器会验证

00:31:40.566 --> 00:31:44.686 A:middle
该签名是否正确

00:31:44.686 --> 00:31:47.636 A:middle
如果签名正确

00:31:47.636 --> 00:31:51.276 A:middle
它将开始执行操作

00:31:51.756 --> 00:31:54.976 A:middle
下面我们看看这组代码

00:31:54.976 --> 00:31:57.676 A:middle
为了生成一个

00:31:57.676 --> 00:32:00.066 A:middle
强加密的私钥

00:32:00.066 --> 00:32:03.566 A:middle
我们调用 PrivateKey 初始化程序

00:32:06.876 --> 00:32:09.546 A:middle
然后我们想在服务器上

00:32:09.546 --> 00:32:11.316 A:middle
注册一些公共密钥数据

00:32:12.176 --> 00:32:14.556 A:middle
首先我们要获取公共密钥

00:32:14.806 --> 00:32:17.506 A:middle
通过私钥上

00:32:17.596 --> 00:32:19.326 A:middle
调用公共密钥

00:32:19.956 --> 00:32:24.536 A:middle
然后我们要说

00:32:24.596 --> 00:32:26.766 A:middle
我们想从公共密钥上

00:32:27.156 --> 00:32:28.346 A:middle
得到的表示形式

00:32:29.026 --> 00:32:30.546 A:middle
公共密钥有多种表示形式

00:32:30.546 --> 00:32:32.406 A:middle
而在 CryptoKit 中

00:32:32.456 --> 00:32:36.216 A:middle
我们支持许多公共密钥

00:32:37.536 --> 00:32:39.886 A:middle
这种情况下

00:32:39.886 --> 00:32:41.106 A:middle
我们使用紧凑表示

00:32:41.776 --> 00:32:44.106 A:middle
与往常一样 我们将私钥

00:32:44.106 --> 00:32:45.586 A:middle
存储在密钥链中

00:32:46.676 --> 00:32:48.996 A:middle
为了实现这一点

00:32:48.996 --> 00:32:50.236 A:middle
开发者门户上提供了

00:32:50.236 --> 00:32:51.266 A:middle
示例代码

00:32:51.266 --> 00:32:54.946 A:middle
要生成签名

00:32:54.946 --> 00:32:57.456 A:middle
我们要在私钥上

00:32:57.516 --> 00:32:59.346 A:middle
调用 signature() 方法

00:32:59.346 --> 00:33:02.446 A:middle
然后传输我们

00:33:02.446 --> 00:33:03.796 A:middle
想要签名的交易数据

00:33:03.796 --> 00:33:05.926 A:middle
我们就可以返回签名

00:33:09.136 --> 00:33:13.126 A:middle
现在 保护这些操作的密钥

00:33:13.266 --> 00:33:16.416 A:middle
是十分有价值的

00:33:16.416 --> 00:33:19.366 A:middle
所以我们想要给它

00:33:19.366 --> 00:33:21.416 A:middle
最好的安全保障

00:33:21.906 --> 00:33:23.846 A:middle
这时候就轮到 Secure Enclave 了

00:33:25.716 --> 00:33:27.726 A:middle
Secure Enclave 是

00:33:27.726 --> 00:33:29.156 A:middle
基于硬件的密钥管理器

00:33:29.466 --> 00:33:30.886 A:middle
它与主处理器隔离

00:33:30.886 --> 00:33:33.766 A:middle
来提供额外的安全层

00:33:34.466 --> 00:33:36.316 A:middle
它被用作关键系统特性的一部分 

00:33:36.316 --> 00:33:39.606 A:middle
如 Touch ID 或 Face ID

00:33:41.336 --> 00:33:45.186 A:middle
让我们看看如何改进

00:33:45.186 --> 00:33:48.156 A:middle
使用签名来利用

00:33:48.156 --> 00:33:49.986 A:middle
Secure Enclave 的代码

00:33:50.596 --> 00:33:54.726 A:middle
我们首先检查 Secure Enclave

00:33:54.726 --> 00:33:56.496 A:middle
是否可以在设备上获得

00:33:57.206 --> 00:34:00.476 A:middle
我们通过在 SecureEnclave 上调用 

00:34:00.476 --> 00:34:01.446 A:middle
isAvailable 来完成这一步

00:34:01.936 --> 00:34:07.286 A:middle
从这里开始 我们可以使用

00:34:07.286 --> 00:34:09.565 A:middle
和之前生成时完全一样的代码

00:34:10.886 --> 00:34:14.356 A:middle
来生成密钥

00:34:14.356 --> 00:34:15.516 A:middle
同时在 Secure Enclave 里

00:34:15.516 --> 00:34:18.076 A:middle
生成签名

00:34:18.606 --> 00:34:20.966 A:middle
注意 为了完成这一步

00:34:21.016 --> 00:34:24.656 A:middle
我们只需给

00:34:24.656 --> 00:34:27.985 A:middle
调用的 PrivateKey 初始化程序

00:34:27.985 --> 00:34:30.016 A:middle
添加前缀

00:34:30.016 --> 00:34:31.356 A:middle
SecureEnclave.

00:34:32.596 --> 00:34:35.746 A:middle
用 Secure Enclave 就是如此简单

00:34:37.755 --> 00:34:41.646 A:middle
使用 Secure Enclave 的一个优势是

00:34:41.646 --> 00:34:44.536 A:middle
你可以限制密钥的使用

00:34:45.096 --> 00:34:48.045 A:middle
在本例中 我们想说

00:34:48.045 --> 00:34:50.126 A:middle
我们在 Secure Enclave 上

00:34:50.126 --> 00:34:51.755 A:middle
生成的密钥

00:34:52.656 --> 00:34:54.866 A:middle
只有在设备解锁时

00:34:54.866 --> 00:34:58.596 A:middle
才能访问

00:34:58.596 --> 00:35:01.786 A:middle
且该密钥只在该设备上可用

00:35:02.886 --> 00:35:04.706 A:middle
我们可以进一步限制密钥的使用

00:35:04.706 --> 00:35:06.816 A:middle
方法是当我们使用

00:35:06.816 --> 00:35:09.556 A:middle
私钥执行操作时 

00:35:09.556 --> 00:35:12.326 A:middle
我们要求用户在场

00:35:13.496 --> 00:35:16.076 A:middle
要求用户在场意味着

00:35:16.076 --> 00:35:18.006 A:middle
用户要么按提示进行

00:35:18.006 --> 00:35:19.186 A:middle
生物鉴定识别

00:35:19.186 --> 00:35:22.336 A:middle
要么按要求

00:35:22.336 --> 00:35:24.846 A:middle
输入设备密码

00:35:25.466 --> 00:35:29.956 A:middle
既然我们已经组成了一个

00:35:29.956 --> 00:35:32.156 A:middle
访问控制规则

00:35:32.216 --> 00:35:33.726 A:middle
我们只需将其传递给

00:35:33.726 --> 00:35:35.426 A:middle
正在生成的密钥的初始化程序

00:35:35.426 --> 00:35:39.616 A:middle
就可以执行该策略

00:35:40.626 --> 00:35:41.846 A:middle
你可能希望为用户

00:35:41.846 --> 00:35:43.576 A:middle
提供一些额外的上下文

00:35:43.656 --> 00:35:45.646 A:middle
来说明为什么需要他们

00:35:45.646 --> 00:35:46.236 A:middle
进行身份验证

00:35:46.886 --> 00:35:49.216 A:middle
那么 我们可以传输一个

00:35:49.216 --> 00:35:51.126 A:middle
LocalAuthentication 上下文

00:35:51.696 --> 00:35:56.206 A:middle
在本例中 我们想要

00:35:56.236 --> 00:35:58.166 A:middle
LocalAuthentication 上下文的
 
00:35:58.166 --> 00:36:00.376 A:middle
有效期为十秒

00:36:02.476 --> 00:36:03.896 A:middle
将不需要

00:36:04.426 --> 00:36:06.746 A:middle
进行身份认证

00:36:07.116 --> 00:36:09.056 A:middle
我们想告诉用户

00:36:09.056 --> 00:36:10.546 A:middle
他们需要进行身份认证

00:36:10.656 --> 00:36:12.476 A:middle
因为他们正在允许

00:36:12.476 --> 00:36:14.066 A:middle
给 Bob 转账十美元

00:36:14.576 --> 00:36:17.506 A:middle
要使用这个认证上下文

00:36:17.786 --> 00:36:19.516 A:middle
你只需要将它

00:36:19.556 --> 00:36:23.136 A:middle
传给密钥的初始化器

00:36:26.976 --> 00:36:29.456 A:middle
最后让我们来谈谈性能

00:36:32.226 --> 00:36:34.546 A:middle
CryptoKit 建立在 corecrypto 顶端

00:36:35.386 --> 00:36:37.556 A:middle
corecrypto 是 Apple 的

00:36:38.056 --> 00:36:40.286 A:middle
本地加密库

00:36:40.286 --> 00:36:41.816 A:middle
它支持之前 Yannick 描述过的

00:36:41.816 --> 00:36:43.726 A:middle
所有系统框架

00:36:44.306 --> 00:36:47.676 A:middle
在为你带来

00:36:47.676 --> 00:36:48.726 A:middle
Accelerate 框架的团队

00:36:48.726 --> 00:36:50.826 A:middle
及 CPU 设计团队的帮助下

00:36:50.866 --> 00:36:53.216 A:middle
corecrypto 手工调整了汇编代码

00:36:53.216 --> 00:36:55.196 A:middle
将每个周期

00:36:55.196 --> 00:36:58.646 A:middle
从每个支持微架构中压出

00:37:03.466 --> 00:37:05.776 A:middle
因为它使用了 corecrypto

00:37:05.776 --> 00:37:07.916 A:middle
所以它利用了 corecrypto 中的

00:37:07.916 --> 00:37:10.886 A:middle
安全缓解措施

00:37:10.886 --> 00:37:13.986 A:middle
比如侧通道阻抗

00:37:14.356 --> 00:37:16.446 A:middle
而且 corecrypto 经过了 FIPS 验证

00:37:16.446 --> 00:37:19.156 A:middle
这意味着你可以用

00:37:19.156 --> 00:37:22.196 A:middle
符合 FIPS 的方式使用 CryptoKit

00:37:22.996 --> 00:37:24.576 A:middle
Yannick 用这张幻灯片开始

00:37:24.716 --> 00:37:27.586 A:middle
为大家展示了很多漏洞的类别

00:37:27.586 --> 00:37:31.006 A:middle
它们会出现在

00:37:31.006 --> 00:37:33.076 A:middle
加密协议和加密实现中

00:37:34.116 --> 00:37:36.086 A:middle
有了 CryptoKit 我们开始

00:37:36.086 --> 00:37:37.896 A:middle
消除这些漏洞类别中的一些

00:37:37.896 --> 00:37:40.036 A:middle
但 CryptoKit 仍然是一个

00:37:40.036 --> 00:37:42.036 A:middle
底层加密 API 虽然它非常强大

00:37:42.036 --> 00:37:44.226 A:middle
可以实现各种各样的协议

00:37:44.226 --> 00:37:48.906 A:middle
甚至是损坏的协议

00:37:49.076 --> 00:37:50.726 A:middle
但并不是所有的加密缺点

00:37:50.726 --> 00:37:52.046 A:middle
都可以在密码库级别上

00:37:52.046 --> 00:37:53.136 A:middle
得到解决

00:37:53.496 --> 00:37:55.266 A:middle
因此 我们强烈建议你

00:37:55.266 --> 00:37:56.706 A:middle
如果可以的话

00:37:56.706 --> 00:37:59.626 A:middle
要依靠一个更高级别的系统框架

00:38:01.786 --> 00:38:03.586 A:middle
我们想要继续帮助你

00:38:03.686 --> 00:38:05.646 A:middle
发布尽可能安全的 App

00:38:05.846 --> 00:38:07.646 A:middle
通过提供 API 来帮助你

00:38:07.646 --> 00:38:08.856 A:middle
防止你 App 中

00:38:08.856 --> 00:38:10.526 A:middle
安全的法律漏洞

00:38:11.056 --> 00:38:13.486 A:middle
我们非常期待看到

00:38:13.486 --> 00:38:15.566 A:middle
你在你的 App 中使用 CryptoKit

00:38:15.896 --> 00:38:17.146 A:middle
在本次会议的网页上

00:38:17.446 --> 00:38:18.546 A:middle
你会找到一个

00:38:18.546 --> 00:38:20.986 A:middle
CryptoKit 说明文档的链接

00:38:20.986 --> 00:38:22.536 A:middle
可以在 Xcode Playground 中使用

00:38:23.746 --> 00:38:25.866 A:middle
下载它 然后摸索一下

00:38:25.866 --> 00:38:28.096 A:middle
看看有什么可用的

00:38:28.756 --> 00:38:30.596 A:middle
看看你如何在你的 App 中

00:38:30.596 --> 00:38:32.366 A:middle
使用 CryptoKit

00:38:34.156 --> 00:38:36.016 A:middle
我们会在明天的实验室中

00:38:36.376 --> 00:38:38.466 A:middle
解答你们的问题

00:38:38.466 --> 00:38:41.636 A:middle
我们期待你的反馈 谢谢

00:38:42.016 --> 00:38:44.000 A:middle
[掌声]

