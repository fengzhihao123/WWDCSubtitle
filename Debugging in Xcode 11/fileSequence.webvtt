WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:06.640 --> 00:00:07.941 align:middle line:0
（Xcode 11调试）

00:00:08.007 --> 00:00:10.611 align:middle line:-2
大家好 欢迎参加
Xcode 11调试

00:00:11.111 --> 00:00:14.081 align:middle line:-2
我是Chris Miles
是Xcode团队的工程经理之一

00:00:14.314 --> 00:00:15.649 align:middle line:-1
今天非常开心能来这里

00:00:15.716 --> 00:00:17.317 align:middle line:-1
我有很多内容要讲

00:00:17.618 --> 00:00:19.186 align:middle line:-1
那我就开门见山吧

00:00:19.253 --> 00:00:21.889 align:middle line:-1
从设备状况和环境重写

00:00:21.955 --> 00:00:23.457 align:middle line:-1
开始介绍吧

00:00:24.625 --> 00:00:26.860 align:middle line:-2
当你的app在实际使用中
并未如期运行时

00:00:26.927 --> 00:00:31.465 align:middle line:-1
你可能已经从用户那获取到了报告

00:00:31.765 --> 00:00:33.433 align:middle line:-1
他们报告的状况

00:00:33.500 --> 00:00:36.737 align:middle line:-1
可能很难在你的开发环境中复现

00:00:37.704 --> 00:00:39.873 align:middle line:-1
比如现实生活中的网络状况

00:00:40.207 --> 00:00:42.109 align:middle line:-1
现实生活中网络响应

00:00:42.176 --> 00:00:45.179 align:middle line:-1
并不如我们在家或办公室

00:00:45.245 --> 00:00:46.513 align:middle line:-1
创建app时那么的理想

00:00:46.947 --> 00:00:48.282 align:middle line:-2
如果用户在有限的网络连接中
使用你的app

00:00:48.649 --> 00:00:52.586 align:middle line:-1
出现了一个问题向你报告了

00:00:52.819 --> 00:00:56.490 align:middle line:-2
你需要复现一个
可靠的网络类型的状况

00:00:56.557 --> 00:00:58.091 align:middle line:-1
来调试和提升你的app

00:00:59.359 --> 00:01:02.796 align:middle line:-2
或是 当设备在现实状况中
处于热压力时

00:01:03.096 --> 00:01:06.133 align:middle line:-1
需要控制你app的资源访问量

00:01:06.433 --> 00:01:08.368 align:middle line:-1
来降低设备的温度

00:01:08.669 --> 00:01:10.571 align:middle line:-1
你需要了解你的app在这类热压力

00:01:10.771 --> 00:01:12.506 align:middle line:-1
的状况下的表现

00:01:12.773 --> 00:01:15.275 align:middle line:-1
对于那些大量使用资源的app

00:01:15.542 --> 00:01:18.378 align:middle line:-1
在设备处于热压力时

00:01:18.645 --> 00:01:22.850 align:middle line:-2
你可能要主动地通过减少资源量来
改变热压力的状态

00:01:23.350 --> 00:01:27.154 align:middle line:-1
但为了调试和理清你的逻辑

00:01:27.521 --> 00:01:29.857 align:middle line:-2
你要如何让你的设备处于
热压力的状态呢？

00:01:30.691 --> 00:01:32.659 align:middle line:-1
这时就可以使用设备状况

00:01:33.093 --> 00:01:37.364 align:middle line:-2
这是Xcode 11的新功能
你可以使用新的热压力状态

00:01:37.431 --> 00:01:40.901 align:middle line:-1
来安全可靠地升高设备的热压力

00:01:40.968 --> 00:01:44.438 align:middle line:-2
到任意级别
一般 严重或是非常严重

00:01:44.771 --> 00:01:46.974 align:middle line:-2
你可以使用它来了解你app
的行为表现

00:01:47.274 --> 00:01:49.243 align:middle line:-1
在这些热压力的状态下

00:01:49.576 --> 00:01:53.247 align:middle line:-2
调试和确认你处理这些热压力
状态的改变

00:01:53.947 --> 00:01:56.283 align:middle line:-2
只需注意设备本身并不会
在物理上变热

00:01:56.517 --> 00:01:59.286 align:middle line:-2
所以不要在天冷的时候
尝试使用这个功能

00:02:04.291 --> 00:02:07.761 align:middle line:-2
这允许你的Xcode所处的
那台设备上

00:02:07.928 --> 00:02:10.097 align:middle line:-1
直接模拟现实生活中的网络状态

00:02:10.330 --> 00:02:15.035 align:middle line:-2
比如一个高延时 低带宽
高数据包丢失 慢的DNS

00:02:16.036 --> 00:02:19.039 align:middle line:-2
所以你能在多种网络状态下
使用它来了解

00:02:19.273 --> 00:02:21.708 align:middle line:-1
和调试你app的行为表现

00:02:22.309 --> 00:02:24.945 align:middle line:-2
现在 这个功能和
你们中的一些人可能已经

00:02:25.212 --> 00:02:28.815 align:middle line:-2
非常熟悉的iOS开发者设置
网络连接状态器很类似

00:02:29.249 --> 00:02:33.320 align:middle line:-2
但我们为它更新了一个更广泛
的现代网络配置文件

00:02:33.587 --> 00:02:35.622 align:middle line:-1
它完全能被Xcode控制

00:02:36.123 --> 00:02:37.991 align:middle line:-1
我马上会为你展示它是如何工作的

00:02:39.860 --> 00:02:41.962 align:middle line:-1
现在 用户控制了一些

00:02:42.262 --> 00:02:43.730 align:middle line:-1
app必须适配的状况

00:02:44.131 --> 00:02:46.633 align:middle line:-1
用户可以自定义他们界面的

00:02:47.067 --> 00:02:48.869 align:middle line:-1
可控制设置有很多

00:02:49.770 --> 00:02:53.473 align:middle line:-2
比如一个app运行时
浅色和深色界面样式

00:02:54.141 --> 00:02:58.245 align:middle line:-2
在iOS 13中 你的app在
浅色和深色

00:02:58.412 --> 00:03:00.414 align:middle line:-1
模式中必须提供一个好的用户体验

00:03:02.182 --> 00:03:05.452 align:middle line:-1
一个动态的高度客制化的设置

00:03:06.653 --> 00:03:09.523 align:middle line:-2
用户可以从非常动态的尺寸
到非常大的类型大小

00:03:09.723 --> 00:03:11.625 align:middle line:-1
之间选择

00:03:12.025 --> 00:03:15.596 align:middle line:-2
在辅助功能设置中还有更大的
尺寸可以选择

00:03:16.163 --> 00:03:18.832 align:middle line:-1
所以你需要调试你的UI样式

00:03:18.999 --> 00:03:22.035 align:middle line:-2
在一个范围非常大的动态
类型设置中

00:03:23.937 --> 00:03:26.740 align:middle line:-1
辅助功能也有很多选项

00:03:27.307 --> 00:03:29.710 align:middle line:-2
许多系统控制已经
适配了这些设置

00:03:29.776 --> 00:03:32.646 align:middle line:-2
但当这些设置生效时
你要确保你自定义

00:03:32.713 --> 00:03:35.782 align:middle line:-1
的视图和控制器也能正常运转

00:03:36.283 --> 00:03:37.150 align:middle line:-1
就像你在这里看到的

00:03:37.417 --> 00:03:40.954 align:middle line:-1
用户可以设置的环境配置有很多

00:03:41.321 --> 00:03:42.523 align:middle line:-1
你会在这些设置下

00:03:42.589 --> 00:03:45.092 align:middle line:-1
调试和测试你app吗？

00:03:45.492 --> 00:03:48.061 align:middle line:-2
你甚至还记得去哪里找到
这些设置吗？

00:03:48.428 --> 00:03:51.398 align:middle line:-1
这就是环境重写能帮你做到的

00:03:51.732 --> 00:03:55.135 align:middle line:-1
它允许你轻松地重写这些设置的组合

00:03:55.402 --> 00:03:57.804 align:middle line:-2
当你使用Xcode
直接调试你的app时

00:03:59.139 --> 00:04:00.274 align:middle line:-1
我们来快速了解一下

00:04:00.340 --> 00:04:02.075 align:middle line:-1
设备状态和环境重写

00:04:02.142 --> 00:04:03.577 align:middle line:-1
但我想向你展示它们是如何工作的

00:04:03.644 --> 00:04:05.279 align:middle line:-1
我会在Xcode中为你展示

00:04:08.315 --> 00:04:11.084 align:middle line:-2
我用Xcode打开了
这个Travel项目

00:04:11.151 --> 00:04:12.920 align:middle line:-1
这是一个允许用户发现旅行目的地

00:04:13.187 --> 00:04:15.589 align:middle line:-1
创建一个旅行计划和

00:04:15.656 --> 00:04:18.091 align:middle line:-1
记录一段旅程的一个iOS app

00:04:18.158 --> 00:04:20.726 align:middle line:-2
你可能在这周其他的一些演讲中
见过它

00:04:21.228 --> 00:04:24.464 align:middle line:-2
我集中注意力在这个美丽的
有着图钉标注的目的地

00:04:24.865 --> 00:04:28.168 align:middle line:-1
的3D渲染地球这里

00:04:28.802 --> 00:04:31.004 align:middle line:-2
现在我想测试这个app的
热压力状态

00:04:31.371 --> 00:04:33.540 align:middle line:-1
那么我开始添加代码来

00:04:33.607 --> 00:04:35.676 align:middle line:-1
观察这台设备上热压力状态的改变

00:04:35.909 --> 00:04:38.779 align:middle line:-1
我想减少使用GPU资源

00:04:38.946 --> 00:04:40.747 align:middle line:-1
当设备处于热压力下时

00:04:41.148 --> 00:04:42.850 align:middle line:-2
那么 我来向你展示我是如何
实现的

00:04:43.617 --> 00:04:45.919 align:middle line:-2
我将切换到这个
GlobeSceneController

00:04:46.320 --> 00:04:49.223 align:middle line:-1
这个控制器被用来配置3D场景

00:04:49.990 --> 00:04:52.759 align:middle line:-1
在这个注册器中 你能看到我为

00:04:52.826 --> 00:04:55.095 align:middle line:-2
thermalStatedidChangeNotification
添加了一个观察者

00:04:55.429 --> 00:04:58.265 align:middle line:-2
当设备的热压力状态改变时
它会被调用

00:04:58.532 --> 00:05:01.935 align:middle line:-2
在回调中 我们调用
configureSceneFeatures

00:05:02.236 --> 00:05:03.604 align:middle line:-1
那么我们来看一下这个功能

00:05:04.204 --> 00:05:06.974 align:middle line:-1
它负责我们3D场景的两个参数

00:05:07.307 --> 00:05:09.910 align:middle line:-1
反锯齿模式和请求帧率

00:05:10.677 --> 00:05:13.814 align:middle line:-2
当它被调用时 我们能获取到设备
的热压力状态

00:05:14.181 --> 00:05:17.084 align:middle line:-1
当设备处于非常严重的热压力状态时

00:05:17.317 --> 00:05:21.788 align:middle line:-2
我们推荐尽可能减少耗能大
的资源的使用

00:05:21.855 --> 00:05:24.191 align:middle line:-1
来为设备降温

00:05:24.658 --> 00:05:28.028 align:middle line:-1
在当前情况下 我会关闭反锯齿模式

00:05:28.495 --> 00:05:30.898 align:middle line:-1
同时将我们的帧率降到30

00:05:31.832 --> 00:05:33.700 align:middle line:-1
当处于严重热压力状态时

00:05:33.934 --> 00:05:35.302 align:middle line:-1
我们无需像刚才那么激进

00:05:35.369 --> 00:05:39.473 align:middle line:-2
所以我们只用关掉反锯齿模式
但帧率保持和之前一样

00:05:39.840 --> 00:05:40.974 align:middle line:-1
在较低的热压力状态下时

00:05:41.041 --> 00:05:43.410 align:middle line:-2
我们无需在当前的场景中
做出特别的更改

00:05:43.911 --> 00:05:47.014 align:middle line:-2
那么改完之后 我停止下来
再运行一下

00:05:47.748 --> 00:05:49.116 align:middle line:-1
我使用旁边的一个设备

00:05:49.183 --> 00:05:50.851 align:middle line:-2
我会使用右边的
QuickTime player

00:05:50.918 --> 00:05:52.619 align:middle line:-1
投屏到这个桌面上

00:05:53.787 --> 00:05:56.523 align:middle line:-2
现在 我想要将这台设备设置为
非常严重的热压力状态

00:05:56.590 --> 00:05:59.259 align:middle line:-2
这样我们就能测试逻辑和调试它
是否会出现任何问题

00:05:59.626 --> 00:06:01.495 align:middle line:-1
我也可以使用新的设备状态

00:06:02.029 --> 00:06:05.699 align:middle line:-2
但在我开始之前 我也想要监控
设备的热压力状态

00:06:06.033 --> 00:06:08.936 align:middle line:-1
我现在切换至调试导航栏

00:06:09.002 --> 00:06:11.438 align:middle line:-1
选择能源损失测量仪来实现

00:06:11.905 --> 00:06:15.943 align:middle line:-2
这个测量仪为你展示了一个平均
能源损失分类

00:06:16.276 --> 00:06:19.680 align:middle line:-1
和右上方的成分使用率

00:06:20.047 --> 00:06:21.615 align:middle line:-1
当我使用这个app时 你能看到

00:06:21.882 --> 00:06:25.118 align:middle line:-2
GPU是主要的使用成分
就像我们想的那样

00:06:25.686 --> 00:06:28.222 align:middle line:-1
但请你留意中间这里

00:06:28.589 --> 00:06:32.125 align:middle line:-2
在Xcode 11中
我们有了新的热压力状态跟踪

00:06:32.459 --> 00:06:34.161 align:middle line:-1
它为你展示了两个部分的信息

00:06:34.494 --> 00:06:37.297 align:middle line:-2
上面的追踪信息显示了设备状态是
活跃的

00:06:37.364 --> 00:06:39.600 align:middle line:-1
现在还没有设备状态

00:06:40.067 --> 00:06:42.636 align:middle line:-2
下面的部分展示了设备的当前
热压力状态

00:06:42.936 --> 00:06:44.805 align:middle line:-1
蓝色表示正常的热压力状态

00:06:44.872 --> 00:06:46.306 align:middle line:-1
所有组件温度都正常 运行平稳

00:06:46.807 --> 00:06:47.908 align:middle line:-1
那我们保持它运行

00:06:48.108 --> 00:06:51.311 align:middle line:-2
同时我使用窗口菜单来打
开设备视窗

00:06:52.379 --> 00:06:53.313 align:middle line:-1
我把它挪到上面

00:06:53.614 --> 00:06:54.948 align:middle line:-1
现在 设备被选中

00:06:55.115 --> 00:06:57.951 align:middle line:-2
我们滚到底部
找到新的设备状态UI

00:06:58.719 --> 00:07:00.888 align:middle line:-1
这里我们看到了这台设备的

00:07:01.221 --> 00:07:02.189 align:middle line:-1
所有的设备状态都处于可用状态

00:07:02.256 --> 00:07:05.859 align:middle line:-2
我们有网络连接状态
和所有的新配置

00:07:06.393 --> 00:07:08.729 align:middle line:-2
在我们的使用场景中
我们选择热压力状态

00:07:09.396 --> 00:07:11.632 align:middle line:-1
我们可以选择热压力状态级别

00:07:11.698 --> 00:07:13.534 align:middle line:-1
我会选择非常严 点击开始

00:07:14.168 --> 00:07:16.136 align:middle line:-1
现在 这里有几件事需要留意

00:07:16.203 --> 00:07:17.471 align:middle line:-1
一个是它要等几分钟

00:07:17.538 --> 00:07:20.340 align:middle line:-2
来让设备过渡到非常严重
的热压力状态

00:07:20.841 --> 00:07:22.309 align:middle line:-1
底下这里的热压力跟踪

00:07:22.543 --> 00:07:25.746 align:middle line:-2
我们看到了设备状态现在被激活后
的确认

00:07:26.146 --> 00:07:26.980 align:middle line:-1
过了一会儿

00:07:27.047 --> 00:07:30.751 align:middle line:-2
你能看到设备过渡到了非常严重的
热压力状态

00:07:31.318 --> 00:07:34.021 align:middle line:-1
设备的右边这里

00:07:34.288 --> 00:07:37.357 align:middle line:-1
注意上面有一个实时的背景过滤

00:07:37.424 --> 00:07:38.992 align:middle line:-1
那就是你的状态栏指示器

00:07:39.159 --> 00:07:41.929 align:middle line:-2
表示一条设备状态在这个设备
上被激活了

00:07:42.496 --> 00:07:45.132 align:middle line:-2
最后 如果我们与我们的3D场景
产生互动

00:07:45.832 --> 00:07:48.135 align:middle line:-1
我们能看到我们添加的帧率指示器

00:07:48.402 --> 00:07:49.837 align:middle line:-1
展示的是30帧每秒

00:07:50.103 --> 00:07:53.373 align:middle line:-2
这样我们就能非常简单的确认
我们的逻辑没错

00:07:54.041 --> 00:07:55.642 align:middle line:-1
抗锯齿也处于关闭状态

00:07:55.909 --> 00:07:57.678 align:middle line:-1
在这台小设备上有点难看清

00:07:57.744 --> 00:07:59.746 align:middle line:-1
但在一台大设备上你可以看到

00:08:03.283 --> 00:08:04.651 align:middle line:-1
我们可以关掉它了

00:08:05.219 --> 00:08:06.553 align:middle line:-1
我点击这里的停止按钮

00:08:06.620 --> 00:08:09.256 align:middle line:-2
但这里还有一些其他的方式来
禁用设备状态

00:08:09.556 --> 00:08:13.093 align:middle line:-2
一个是在Xcode上断开
设备的连接或退出Xcode

00:08:13.360 --> 00:08:15.596 align:middle line:-1
如果设备始终与Xcode断开

00:08:15.662 --> 00:08:17.764 align:middle line:-1
它会自动地关闭一个设备状态

00:08:17.831 --> 00:08:19.967 align:middle line:-2
因为我们不希望你的设备
在这些状态下运行

00:08:20.033 --> 00:08:21.068 align:middle line:-1
当你不处于开发模式中时

00:08:21.568 --> 00:08:23.270 align:middle line:-1
另一个是设备本身

00:08:23.604 --> 00:08:26.406 align:middle line:-2
我们可以点击上面的状态栏指示器
现在我来点它

00:08:27.107 --> 00:08:30.043 align:middle line:-2
我们看到了
关于当前活跃状态的信息

00:08:30.110 --> 00:08:32.913 align:middle line:-1
我可以点击停止按钮来关闭状态

00:08:33.113 --> 00:08:33.981 align:middle line:-1
我现在来点

00:08:34.548 --> 00:08:36.082 align:middle line:-1
我们能关闭设备窗口

00:08:36.984 --> 00:08:38.852 align:middle line:-1
在热压力状态追踪这里

00:08:38.919 --> 00:08:42.022 align:middle line:-2
我们看到设备状态
不再处于活跃状态的确认

00:08:42.456 --> 00:08:45.092 align:middle line:-2
我们看到设备开始过渡回之前
的状态

00:08:45.158 --> 00:08:46.560 align:middle line:-1
回落到一般热压力的状态

00:08:46.860 --> 00:08:48.128 align:middle line:-1
和正常的热压力状态

00:08:53.600 --> 00:08:55.702 align:middle line:-2
这就是使用设备状态的
一个快速的展示

00:08:55.769 --> 00:08:58.405 align:middle line:-2
在这种使用案例中 热压力状态
在我们连接的设备上

00:08:58.705 --> 00:09:01.308 align:middle line:-1
现在 我想继续向你介绍环境重写

00:09:01.909 --> 00:09:06.413 align:middle line:-2
现在我将停止运行
切换到一个特别的视图

00:09:06.880 --> 00:09:08.081 align:middle line:-1
我将选择个人档案视图

00:09:08.148 --> 00:09:09.449 align:middle line:-1
它是用SwiftUI创建的

00:09:09.850 --> 00:09:12.686 align:middle line:-1
我真的很想写SwiftUI

00:09:12.753 --> 00:09:15.389 align:middle line:-1
以及使用新的Xcode预览

00:09:15.455 --> 00:09:18.425 align:middle line:-1
我将打来画布来启动预览引擎

00:09:18.992 --> 00:09:21.695 align:middle line:-2
现在 我不再需要这台设备了
那么我关掉QuickTime

00:09:22.963 --> 00:09:23.931 align:middle line:-1
预览开始运行了

00:09:24.498 --> 00:09:26.200 align:middle line:-1
现在 使用环境重写

00:09:26.266 --> 00:09:28.769 align:middle line:-2
你需要调试你的app或
调试你的预览图

00:09:29.036 --> 00:09:32.072 align:middle line:-2
如果你还没看到
你可以调试预览图

00:09:32.506 --> 00:09:36.143 align:middle line:-1
点击底部右边的这个运行按钮

00:09:36.577 --> 00:09:38.912 align:middle line:-2
你会看到一个弹窗菜单
你只需选择调试预览图

00:09:39.680 --> 00:09:40.747 align:middle line:-1
它做了两件事

00:09:41.281 --> 00:09:45.319 align:middle line:-2
它让预览图进入了运行模式
它也打开了一个调试会话

00:09:45.786 --> 00:09:47.754 align:middle line:-2
那么 现在预览图处于运行中
并可以使用了

00:09:48.755 --> 00:09:52.960 align:middle line:-1
我们来到底部 我将它提高一点

00:09:53.026 --> 00:09:53.961 align:middle line:-1
在调试栏中

00:09:54.328 --> 00:09:56.597 align:middle line:-1
我们看到我们收到确认了

00:09:56.663 --> 00:09:58.932 align:middle line:-2
我们有一个活跃状态的调试会话
在预览图调试

00:09:59.299 --> 00:10:01.168 align:middle line:-1
我们有了所有常用的调试工具

00:10:01.235 --> 00:10:03.003 align:middle line:-1
比如视图调试 内存移植调试

00:10:03.303 --> 00:10:05.138 align:middle line:-1
和新的环境重写

00:10:05.772 --> 00:10:08.876 align:middle line:-2
那么 如果我点击它
我们看到了环境重写的UI

00:10:09.376 --> 00:10:11.778 align:middle line:-1
我们可以简单地重写用户界面样式

00:10:12.012 --> 00:10:13.046 align:middle line:-1
通过点击切换

00:10:13.380 --> 00:10:15.582 align:middle line:-1
现在我们将预览图设为深色模式

00:10:16.350 --> 00:10:18.218 align:middle line:-2
我们可以在浅色和深色模式中
来回切换

00:10:18.285 --> 00:10:20.454 align:middle line:-1
来测试我们的布局和我们的UI

00:10:21.088 --> 00:10:22.689 align:middle line:-1
那么 你可能已经留意到了一个问题

00:10:23.190 --> 00:10:25.826 align:middle line:-2
这里的描述文字在浅色模式下
没有问题

00:10:26.026 --> 00:10:27.995 align:middle line:-1
但在深色模式中 我们看不到它了

00:10:28.462 --> 00:10:29.796 align:middle line:-1
那么 我们在这里快速看一下

00:10:30.664 --> 00:10:34.334 align:middle line:-2
我光标下的这个文字元素负责
绘制描述

00:10:34.768 --> 00:10:37.437 align:middle line:-1
你可以看到我还没过渡到这个视图

00:10:37.504 --> 00:10:39.773 align:middle line:-2
来利用深色模式的优势
我还在使用一个固定的颜色

00:10:40.240 --> 00:10:42.910 align:middle line:-2
我应该使用一个具有语义的颜色
如secondary 我来改变它

00:10:43.443 --> 00:10:45.946 align:middle line:-2
我喜欢预览图的一点是
它会自动为我刷新

00:10:46.580 --> 00:10:48.715 align:middle line:-2
因为我们请求了调试
我们还有一个调试会话

00:10:48.782 --> 00:10:50.684 align:middle line:-1
那么我来使用环境重写

00:10:51.151 --> 00:10:53.687 align:middle line:-2
查看深色模式
我们修复了问题 非常简单

00:10:58.458 --> 00:11:00.227 align:middle line:-1
我们来试着使用动态类型的重写

00:11:00.427 --> 00:11:01.795 align:middle line:-1
我切换到文字重写

00:11:01.995 --> 00:11:03.497 align:middle line:-1
我使用这个滑动条

00:11:03.730 --> 00:11:07.401 align:middle line:-2
来选择这些动态类型设置中
任意一个调节至非常小

00:11:08.402 --> 00:11:10.170 align:middle line:-1
到非常大

00:11:10.904 --> 00:11:13.740 align:middle line:-1
接下来 我们来看看无障碍尺寸

00:11:13.807 --> 00:11:17.377 align:middle line:-2
一直到非常大的无障碍动态
尺寸类型设置尺寸

00:11:17.878 --> 00:11:20.848 align:middle line:-2
注意我们的布局在当前使用案例中
看上去很棒 特别是这里

00:11:20.914 --> 00:11:24.518 align:middle line:-2
点击这些小的矩形到
非常大的类型尺寸

00:11:24.852 --> 00:11:26.253 align:middle line:-2
那么 我们在这里
顺便也修复这个问题

00:11:27.020 --> 00:11:28.121 align:middle line:-1
我向下滚动至

00:11:28.288 --> 00:11:31.358 align:middle line:-2
ImageTextPill
是视图用来绘制这些矩形的

00:11:31.892 --> 00:11:34.628 align:middle line:-2
它水平排列展示了一张图片
和一段文字

00:11:35.295 --> 00:11:38.632 align:middle line:-1
我想做的是当类型尺寸变得太大时

00:11:38.699 --> 00:11:41.568 align:middle line:-1
就切换至垂直布局 将它们上下布局

00:11:42.135 --> 00:11:43.437 align:middle line:-2
现在 我已经在其他地方
解决了这个问题

00:11:43.504 --> 00:11:46.006 align:middle line:-2
我创建了一个自定义的视图
叫做AdaptingStack

00:11:46.306 --> 00:11:49.343 align:middle line:-1
我现在随便点击一个打开

00:11:50.344 --> 00:11:53.847 align:middle line:-2
这种场景中我们不需要画布
那么我关掉它

00:11:54.047 --> 00:11:57.150 align:middle line:-2
那么我们在另一个编辑器中打来它
我们来快速看一下

00:11:57.217 --> 00:11:59.119 align:middle line:-2
一个AdaptingStack
是一个自定义视图

00:11:59.486 --> 00:12:01.855 align:middle line:-2
它将一个视图创建器的闭包
作为一个输入

00:12:01.922 --> 00:12:03.857 align:middle line:-2
就像一个H布局或一个V布局
所做的一样

00:12:04.591 --> 00:12:06.660 align:middle line:-2
它为它自己绑定了
sizeCategory环境

00:12:07.160 --> 00:12:08.762 align:middle line:-1
所以当一个尺寸类别改变时

00:12:08.829 --> 00:12:10.430 align:middle line:-1
就在你动态改变我们的主体层级时

00:12:10.764 --> 00:12:13.300 align:middle line:-1
接下来 如果我们切换至尺寸类别

00:12:13.367 --> 00:12:15.335 align:middle line:-2
如果它的无障碍放大效果
越来越大

00:12:15.702 --> 00:12:17.671 align:middle line:-2
接下来我们将内容放置到一个
垂直排列堆栈中

00:12:18.005 --> 00:12:18.906 align:middle line:-1
调节一下边距

00:12:19.206 --> 00:12:20.841 align:middle line:-2
或者 我们把它放置到一个
水平排列堆栈中

00:12:21.441 --> 00:12:22.876 align:middle line:-1
那么 我们来试一下

00:12:23.644 --> 00:12:26.680 align:middle line:-2
我会改变这个HStack至
一个adaptingStack

00:12:29.750 --> 00:12:32.019 align:middle line:-1
我们的预览视图刷新了

00:12:32.386 --> 00:12:35.856 align:middle line:-1
现在我们尝试环境重写

00:12:36.490 --> 00:12:40.961 align:middle line:-2
我们扩大到大的尺寸
我们能看到我们的布局适配了

00:12:46.533 --> 00:12:47.601 align:middle line:-1
看到这个变化我很开心

00:12:47.901 --> 00:12:49.670 align:middle line:-1
我们来快速看一下无障碍设置

00:12:49.736 --> 00:12:50.904 align:middle line:-1
你能看到这里有很多设置

00:12:51.138 --> 00:12:52.806 align:middle line:-2
我们今天没有时间来试
所有的功能

00:12:52.873 --> 00:12:57.277 align:middle line:-2
但我非常鼓励你在你的app和
预览图中试用所有的这些设置

00:12:57.578 --> 00:13:00.581 align:middle line:-2
保证你的UI在启用这些设置时能
正常运行

00:13:01.215 --> 00:13:02.049 align:middle line:-1
谢谢

00:13:07.988 --> 00:13:11.058 align:middle line:-2
那么我来为你快速总结一下
我今天的介绍

00:13:11.124 --> 00:13:12.526 align:middle line:-1
首先 我们来看设备状态

00:13:12.593 --> 00:13:14.595 align:middle line:-1
在设备视窗上可用

00:13:15.028 --> 00:13:18.832 align:middle line:-1
它允许你启用一个网络连接状态

00:13:18.899 --> 00:13:20.667 align:middle line:-1
或是一个热压力状态

00:13:21.435 --> 00:13:25.172 align:middle line:-2
设备状态和Xcode设备
连接绑在一起

00:13:25.239 --> 00:13:27.341 align:middle line:-1
所以如果设备从Xcode断开链接

00:13:27.574 --> 00:13:29.843 align:middle line:-1
我们会自动地断开设备状态

00:13:30.177 --> 00:13:31.678 align:middle line:-1
一个iOS状态栏指示器

00:13:32.246 --> 00:13:35.716 align:middle line:-2
为你提供一台设备的活跃状态
的指示状态

00:13:35.782 --> 00:13:38.352 align:middle line:-2
你可以点击指示器来查看
关于状态的细节

00:13:38.418 --> 00:13:39.786 align:middle line:-1
使用它来停止状态

00:13:41.054 --> 00:13:43.624 align:middle line:-1
环境重写可以在调试中使用

00:13:43.957 --> 00:13:47.261 align:middle line:-2
你可以使用立即重写
你看到的许多设置

00:13:47.561 --> 00:13:50.063 align:middle line:-1
它只会影响你调试的app

00:13:50.130 --> 00:13:52.666 align:middle line:-2
它不会影响其他一些
正在运行的进程

00:13:52.833 --> 00:13:55.736 align:middle line:-2
最重要的是 它不会改变
任何系统设置

00:13:56.003 --> 00:13:57.771 align:middle line:-1
所以 它使用起来非常方便

00:13:58.338 --> 00:14:01.108 align:middle line:-1
它支持任何使用场景下的

00:14:01.175 --> 00:14:03.477 align:middle line:-1
设备 模拟器或你之前看到的调试

00:14:03.877 --> 00:14:05.946 align:middle line:-1
它支持我们所有的平台

00:14:06.113 --> 00:14:07.247 align:middle line:-1
有些设置可能不一样

00:14:07.648 --> 00:14:10.250 align:middle line:-1
但它适用于所有你能调试的平台

00:14:11.351 --> 00:14:13.554 align:middle line:-1
所以 我希望你能利用好这些新功能

00:14:13.820 --> 00:14:15.522 align:middle line:-1
在更宽广的状况和环境范围中

00:14:15.589 --> 00:14:17.724 align:middle line:-1
开发和测试你的app

00:14:17.958 --> 00:14:22.563 align:middle line:-2
所以你能为更多用户在更多的使用
条件下创建一个更好的用户体验

00:14:23.096 --> 00:14:24.798 align:middle line:-2
谢谢 我将邀请Han Ming
来为大家继续介绍

00:14:24.865 --> 00:14:27.634 align:middle line:-2
他会为你带来更多关于调试实时
预览图的细节介绍

00:14:33.440 --> 00:14:34.274 align:middle line:-1
谢谢Chris

00:14:35.342 --> 00:14:36.176 align:middle line:-1
早上好

00:14:37.377 --> 00:14:38.745 align:middle line:-1
在过去的几天里 我们了解了

00:14:38.912 --> 00:14:41.782 align:middle line:-1
实时预览是测试你项目中一个

00:14:42.015 --> 00:14:43.784 align:middle line:-1
特别视图之间的交互很好的方式

00:14:44.251 --> 00:14:46.520 align:middle line:-2
Xcode也优化提升了编辑
你的源代码

00:14:46.820 --> 00:14:49.489 align:middle line:-1
和更新预览视图之间最快的运转时间

00:14:50.424 --> 00:14:53.260 align:middle line:-2
但我们中的一些人 不
我们大家都是普通人

00:14:53.327 --> 00:14:55.796 align:middle line:-1
我们一定会在代码中引入一个问题

00:14:56.396 --> 00:14:59.933 align:middle line:-2
所以Xcode为开发者提供了一个
预览视图来

00:15:02.836 --> 00:15:05.572 align:middle line:-2
当调试工具被附加时
你可以利用所有这里的工具

00:15:05.973 --> 00:15:10.244 align:middle line:-2
比如调试导航栏
你可以用它测试栈回溯

00:15:11.879 --> 00:15:13.881 align:middle line:-2
打断点
你可以用它来暂停调试器

00:15:15.916 --> 00:15:18.318 align:middle line:-2
调试栏
你可以搜索你的进程控制按钮

00:15:18.385 --> 00:15:19.686 align:middle line:-1
比如分步控制

00:15:20.621 --> 00:15:23.957 align:middle line:-2
以及变量视图
你可以监测进程暂停时的状态

00:15:26.293 --> 00:15:30.330 align:middle line:-2
Xcode 11的新功能 它会为你展示
SwiftUI运行时的问题

00:15:32.399 --> 00:15:35.402 align:middle line:-1
现在这是一个新的由系统框架

00:15:35.469 --> 00:15:37.437 align:middle line:-1
产生的一类新问题

00:15:37.971 --> 00:15:41.575 align:middle line:-2
它通常和它们的API没有被
正确使用时关联在一起

00:15:43.844 --> 00:15:47.147 align:middle line:-1
Xcode会在进程运行时找到它们

00:15:48.015 --> 00:15:51.084 align:middle line:-1
我们现在有几个框架正在参与开发

00:15:51.685 --> 00:15:53.320 align:middle line:-1
因为SwiftUI是一个全新的

00:15:53.387 --> 00:15:56.323 align:middle line:-1
从一开始就为你设计来发现问题的

00:15:57.524 --> 00:15:59.259 align:middle line:-1
这些问题不会阻断你的进程

00:15:59.660 --> 00:16:02.663 align:middle line:-2
但它们会为你展示你想要修复的
重要的问题

00:16:03.096 --> 00:16:04.831 align:middle line:-2
在你的app发布至
App Store之前

00:16:05.232 --> 00:16:08.435 align:middle line:-2
为了吸引你的注意 它们会在
Xcode中非常明显地展示出来

00:16:09.102 --> 00:16:11.705 align:middle line:-2
它们会在活跃视图查看器中
以紫色图标显示出来

00:16:12.472 --> 00:16:15.209 align:middle line:-2
在问题导航栏中会有更多的细节
信息

00:16:17.377 --> 00:16:20.380 align:middle line:-2
除了预览视图 所有的平台都可以
查看这些问题

00:16:20.581 --> 00:16:21.782 align:middle line:-1
和运行目的地

00:16:22.649 --> 00:16:24.885 align:middle line:-1
我们直接用一个示例来了解更多

00:16:26.553 --> 00:16:29.256 align:middle line:-1
好的 这个我们创建的项目

00:16:29.790 --> 00:16:32.726 align:middle line:-1
这个画布开始为你展示静态视图

00:16:36.630 --> 00:16:40.300 align:middle line:-1
这个预览图会在右侧展示温度

00:16:40.367 --> 00:16:41.635 align:middle line:-1
当数据加载完成时

00:16:42.870 --> 00:16:44.471 align:middle line:-1
但在这之前 它会展示自旋体

00:16:44.805 --> 00:16:45.939 align:middle line:-1
自旋体的显示

00:16:47.174 --> 00:16:49.576 align:middle line:-2
由一个状态值itsloading
所控制

00:16:52.012 --> 00:16:54.348 align:middle line:-2
Itsloading在数据载入
完成时 变为false

00:16:55.449 --> 00:16:57.017 align:middle line:-1
那时自旋体就会消失

00:16:57.718 --> 00:16:58.752 align:middle line:-1
相当简单的逻辑

00:17:03.490 --> 00:17:04.657 align:middle line:-1
你点击播放按钮

00:17:05.526 --> 00:17:06.792 align:middle line:-1
来获取调试器

00:17:07.560 --> 00:17:09.829 align:middle line:-2
你可以按Control键并点击
来得到上下文菜单

00:17:09.896 --> 00:17:11.098 align:middle line:-1
选择调试预览图

00:17:12.232 --> 00:17:14.800 align:middle line:-2
现在 我的QA工程师告诉我她发现
了一个问题

00:17:14.867 --> 00:17:16.403 align:middle line:-1
就是这个自旋体不会消失

00:17:16.670 --> 00:17:20.607 align:middle line:-2
那么请你留意
当我的调试会话运行时

00:17:22.608 --> 00:17:26.413 align:middle line:-2
Xcode现会重新编译这个特别的
带有调试信息的Swift文件

00:17:26.613 --> 00:17:29.616 align:middle line:-1
启动一个新的预览视图

00:17:30.450 --> 00:17:33.954 align:middle line:-1
你知道调试器是由两种方式固定住的

00:17:34.755 --> 00:17:37.491 align:middle line:-1
首先 你可以到调试导航栏

00:17:37.758 --> 00:17:41.328 align:middle line:-1
寻找它 或者你可以在调试栏中寻找

00:17:42.095 --> 00:17:43.564 align:middle line:-1
进程控制按钮

00:17:44.565 --> 00:17:47.234 align:middle line:-2
它就像我们的画布中有一个运行中
的调试会话

00:17:48.001 --> 00:17:51.905 align:middle line:-1
我们看到自旋体没有消失

00:17:51.972 --> 00:17:52.806 align:middle line:-1
她是对的

00:17:53.473 --> 00:17:54.408 align:middle line:-1
我们来解决这个问题

00:17:55.609 --> 00:17:57.611 align:middle line:-1
在调试器下面 我们看到

00:17:57.978 --> 00:18:00.747 align:middle line:-2
编辑器上展示了
一个新的运行问题

00:18:01.448 --> 00:18:05.152 align:middle line:-2
我们点击注释
它会为你展示一则消息

00:18:05.586 --> 00:18:08.155 align:middle line:-1
它表示 在视图更新时修正状态

00:18:08.856 --> 00:18:11.258 align:middle line:-1
这会导致未定义的行为问题

00:18:11.558 --> 00:18:13.760 align:middle line:-1
这非常难懂 那么我来解释一下

00:18:15.796 --> 00:18:17.231 align:middle line:-1
body属性

00:18:17.698 --> 00:18:19.766 align:middle line:-2
保留了一个等下会展示的
一个视图层级

00:18:20.801 --> 00:18:22.903 align:middle line:-1
这个框架会请求body属性

00:18:23.203 --> 00:18:25.472 align:middle line:-1
它是否需要更新视图

00:18:25.939 --> 00:18:30.043 align:middle line:-1
所以你无法控制何时或请求次数

00:18:30.744 --> 00:18:32.045 align:middle line:-1
因此没有上下文环境

00:18:32.212 --> 00:18:34.481 align:middle line:-1
绝对没有上下文环境提供给你

00:18:34.648 --> 00:18:36.149 align:middle line:-1
来决定如何改变状态值

00:18:37.317 --> 00:18:40.921 align:middle line:-2
幸运的是 可以将它的加载放在
一个更好的地方

00:18:41.255 --> 00:18:43.357 align:middle line:-2
就是weatherFetcher
的回调函数中

00:18:46.360 --> 00:18:47.261 align:middle line:-1
在第47行代码

00:18:47.594 --> 00:18:49.329 align:middle line:-1
那么 我将这段代码移到

00:18:52.666 --> 00:18:53.667 align:middle line:-1
第47行

00:18:54.101 --> 00:18:57.104 align:middle line:-2
但你会看到Xcode
注意到了源码的变动

00:18:57.304 --> 00:19:00.007 align:middle line:-2
它会自动地尝试加载
一个新的预览视图

00:19:00.340 --> 00:19:03.143 align:middle line:-2
那么 请你再次留意自旋体
如果我让它变得很慢的话

00:19:12.519 --> 00:19:13.420 align:middle line:-1
这是自旋体

00:19:14.154 --> 00:19:15.422 align:middle line:-1
数据被加载完成了

00:19:16.190 --> 00:19:18.025 align:middle line:-1
等一下 调试会话要进来

00:19:18.892 --> 00:19:19.726 align:middle line:-1
这是自旋体

00:19:19.993 --> 00:19:20.928 align:middle line:-1
它是获取到的数据

00:19:21.628 --> 00:19:23.497 align:middle line:-1
数据加载后自旋体消失

00:19:23.697 --> 00:19:24.932 align:middle line:-1
所以第一个问题解决了

00:19:30.070 --> 00:19:33.373 align:middle line:-2
为了停止调试会话
你要返回你开始时相同的地方

00:19:33.540 --> 00:19:35.375 align:middle line:-1
点击停止按钮

00:19:36.677 --> 00:19:40.447 align:middle line:-2
那么我勤劳的QA工程师告诉我
还有另一个问题时

00:19:40.514 --> 00:19:41.982 align:middle line:-1
这次它会展示一个不同的视图

00:19:42.249 --> 00:19:43.517 align:middle line:-1
它调用了一个普通的细节视图

00:19:46.019 --> 00:19:46.920 align:middle line:-1
那么我来展示它

00:19:48.989 --> 00:19:52.125 align:middle line:-1
我会在描述情况时获得调试会话

00:19:55.462 --> 00:19:57.030 align:middle line:-1
那么我在上面有了一个标头

00:19:57.631 --> 00:19:59.800 align:middle line:-1
这里的设计是为了增大一些

00:20:02.269 --> 00:20:04.137 align:middle line:-2
这会帮助像我一样的朋友们能看得
更清楚一些

00:20:04.938 --> 00:20:07.107 align:middle line:-2
那么 它看上去我们有一个调试会话
我们来试一下

00:20:09.576 --> 00:20:10.844 align:middle line:-1
它的确变大了 很好

00:20:11.745 --> 00:20:13.413 align:middle line:-1
在某个节点上它突然消失了

00:20:13.780 --> 00:20:15.916 align:middle line:-1
这一定就是她提到的问题

00:20:17.084 --> 00:20:19.086 align:middle line:-1
接下来我意识到

00:20:19.152 --> 00:20:21.655 align:middle line:-2
一个紫色的图标在活动视图器
出现了

00:20:23.757 --> 00:20:24.825 align:middle line:-1
所以 我会点击它

00:20:25.192 --> 00:20:27.694 align:middle line:-1
它应该能带我到问题导航栏

00:20:28.495 --> 00:20:30.397 align:middle line:-1
它显示 无法逆转奇异矩阵

00:20:30.964 --> 00:20:34.501 align:middle line:-2
对于我们每日使用CGAffine
变换的人来说

00:20:34.568 --> 00:20:36.069 align:middle line:-1
你一定知道这是什么意思

00:20:36.937 --> 00:20:38.071 align:middle line:-1
对于不知道的人

00:20:38.138 --> 00:20:40.307 align:middle line:-2
这是一个两小时的
高中线性代数的课程

00:20:41.642 --> 00:20:43.911 align:middle line:-2
我的一个数学博士朋友
在挥舞着他的拳头

00:20:44.745 --> 00:20:45.646 align:middle line:-1
但请不要 我们不要那么做

00:20:45.712 --> 00:20:47.915 align:middle line:-1
这是一个非常简单的解释

00:20:48.682 --> 00:20:52.052 align:middle line:-2
获取一个逆矩阵就和
做一些数学除法运算类似

00:20:52.419 --> 00:20:54.121 align:middle line:-1
数学除法 你们都知道的

00:20:54.555 --> 00:20:56.657 align:middle line:-1
有些值是不可能出现的

00:20:57.524 --> 00:21:00.360 align:middle line:-1
那么 我们来看一下为什么

00:21:00.727 --> 00:21:02.362 align:middle line:-1
但现在 你要注意

00:21:03.197 --> 00:21:06.466 align:middle line:-1
在问题导航栏上的另一个数据

00:21:06.533 --> 00:21:08.969 align:middle line:-1
由调试器产生的记录回溯

00:21:09.736 --> 00:21:13.140 align:middle line:-1
你展开它 你看到回溯

00:21:13.307 --> 00:21:15.576 align:middle line:-2
接下来 会有一个
你调试符号的框架

00:21:15.642 --> 00:21:16.777 align:middle line:-1
就是第一个框架

00:21:17.277 --> 00:21:20.147 align:middle line:-2
选择它 它会为你导航到接下来
几行代码中

00:21:20.380 --> 00:21:22.549 align:middle line:-1
就是问题产生的地方

00:21:22.950 --> 00:21:26.386 align:middle line:-2
但在当前情况下 了解在哪发生
并没有了解怎样和何时发生重要

00:21:27.120 --> 00:21:29.489 align:middle line:-1
我们通常要做的是在调试器中暂停

00:21:30.457 --> 00:21:32.292 align:middle line:-1
接下来你可以检查进程的状态

00:21:32.726 --> 00:21:35.529 align:middle line:-2
现在你可能已经知道我将要使用
的工具来定位这些问题了

00:21:36.430 --> 00:21:37.397 align:middle line:-1
是的 断点

00:21:38.098 --> 00:21:41.768 align:middle line:-1
我可以在第44行打一个文件断点

00:21:43.704 --> 00:21:44.805 align:middle line:-1
但你猜发生了什么？

00:21:45.839 --> 00:21:47.941 align:middle line:-1
当我下拉时我需要点这里很多次

00:21:48.008 --> 00:21:49.409 align:middle line:-1
所以这不是很有效率

00:21:49.810 --> 00:21:50.777 align:middle line:-1
我们不要这么做

00:21:51.879 --> 00:21:54.915 align:middle line:-1
我们来使用断点导航栏来代替

00:21:56.884 --> 00:21:58.285 align:middle line:-1
点击添加按钮

00:22:02.656 --> 00:22:04.391 align:middle line:-1
叫做运行时问题断点

00:22:04.458 --> 00:22:05.359 align:middle line:-1
我们添加它

00:22:06.426 --> 00:22:09.530 align:middle line:-1
我们保留这个目标系统框架

00:22:10.831 --> 00:22:12.833 align:middle line:-2
现在 在例子中
我想要介绍一些提示和技巧

00:22:12.900 --> 00:22:15.002 align:middle line:-1
会让你的工作流更有效率

00:22:15.302 --> 00:22:16.270 align:middle line:-1
这是另一个好例子

00:22:17.070 --> 00:22:19.973 align:middle line:-2
如果你曾想停止或重启
你的预览视图

00:22:20.307 --> 00:22:25.212 align:middle line:-2
你可以使用在编辑器菜单里
名字很恰当的刷新捷径

00:22:25.546 --> 00:22:26.380 align:middle line:-1
我们来试一下

00:22:29.750 --> 00:22:32.586 align:middle line:-2
那么我们有了一个新附着的
调试器预览视图

00:22:33.187 --> 00:22:35.822 align:middle line:-1
Xcode会一直记住你之前的配置

00:22:36.089 --> 00:22:37.558 align:middle line:-1
所以如果你使用调试器

00:22:38.292 --> 00:22:40.794 align:middle line:-1
调试器会附着在新的预览视图会话里

00:22:41.495 --> 00:22:43.096 align:middle line:-1
那么 我将会向下拉

00:22:43.263 --> 00:22:45.365 align:middle line:-2
如果我幸运的话 我会遇到断点
好了

00:22:46.333 --> 00:22:48.936 align:middle line:-1
Xcode方便地带入了变量视图

00:22:50.237 --> 00:22:52.306 align:middle line:-2
现在我们知道我们的
scaleTransform出错了

00:22:52.606 --> 00:22:55.275 align:middle line:-1
所以我会展开它来查看矩阵

00:22:57.544 --> 00:23:01.448 align:middle line:-1
M11是我们在X方向上的缩放值

00:23:01.515 --> 00:23:03.951 align:middle line:-2
我们不会对它进行任何操作
所以我们让它保持为常量1

00:23:05.552 --> 00:23:08.288 align:middle line:-1
M22是我们在Y方向上的缩放值

00:23:08.689 --> 00:23:10.090 align:middle line:-1
当这个值为0时

00:23:10.157 --> 00:23:14.428 align:middle line:-2
是无法通过数学公式获取到逆值的
对吧？

00:23:14.995 --> 00:23:15.829 align:middle line:-1
是的

00:23:16.096 --> 00:23:20.801 align:middle line:-2
那么 我们现在知道了
导致问题的原因

00:23:21.768 --> 00:23:23.103 align:middle line:-1
我们来看一下代码

00:23:23.604 --> 00:23:27.474 align:middle line:-2
来看一下我是在哪里将值设为0的
将Y方向上的缩放值设为0的

00:23:27.674 --> 00:23:29.843 align:middle line:-2
它看上去像是这一行
现在修复它

00:23:30.444 --> 00:23:32.446 align:middle line:-2
我在这里也来让这段代码
更加简洁一点

00:23:35.282 --> 00:23:36.116 align:middle line:-1
哎呀

00:23:38.185 --> 00:23:41.488 align:middle line:-1
好的 我会关闭调试区域

00:23:42.222 --> 00:23:44.124 align:middle line:-1
好的 我现在来试一试

00:23:45.826 --> 00:23:48.862 align:middle line:-2
好了 它变大一点了
它固定住了

00:23:49.329 --> 00:23:51.498 align:middle line:-1
好的 第二个问题解决了

00:23:51.698 --> 00:23:53.333 align:middle line:-1
那就是我示例的结尾了

00:24:04.945 --> 00:24:06.613 align:middle line:-1
和你平常调试时比较

00:24:07.047 --> 00:24:09.516 align:middle line:-1
有三件事情不相同

00:24:09.783 --> 00:24:14.922 align:middle line:-2
首先 你使用画布播放按钮的
上下文菜单

00:24:15.222 --> 00:24:17.457 align:middle line:-1
来启动你的调试会话

00:24:17.791 --> 00:24:19.760 align:middle line:-1
为了停止它 你点击相同的按钮

00:24:21.595 --> 00:24:25.399 align:middle line:-2
你们可以看到Xcode
自动地留意到了源码产生了变化

00:24:25.766 --> 00:24:29.603 align:middle line:-2
接下来尝试启动一个视图
你的一个新的视图

00:24:29.670 --> 00:24:31.805 align:middle line:-1
不管有或没有调试器 这都会发生

00:24:32.272 --> 00:24:35.309 align:middle line:-2
当有调试器时
会有一个新的调试会话

00:24:36.243 --> 00:24:38.011 align:middle line:-2
所以 如果你想要和和编辑器里的
相同文件

00:24:38.078 --> 00:24:40.147 align:middle line:-1
保持相同的调试会话

00:24:40.480 --> 00:24:41.748 align:middle line:-1
不要改变那份文件

00:24:42.316 --> 00:24:43.483 align:middle line:-1
查看一份不同的文件

00:24:43.750 --> 00:24:46.820 align:middle line:-2
使用一个不同的面板
一个不同的标签或一个不同的窗口

00:24:47.321 --> 00:24:49.790 align:middle line:-2
Sebastian马上会为你展示
工作流程

00:24:54.795 --> 00:24:56.563 align:middle line:-1
好的 从我的例子中 我们学习到

00:24:56.897 --> 00:24:58.665 align:middle line:-1
当你调试实时预览图时

00:24:58.732 --> 00:25:01.235 align:middle line:-2
你可以使用你以前习惯的
但现在更高效

00:25:01.969 --> 00:25:03.070 align:middle line:-1
所有的这些很棒的工具

00:25:03.303 --> 00:25:05.138 align:middle line:-1
你想要调整我们特别为

00:25:05.205 --> 00:25:07.541 align:middle line:-1
预览视图设计的工作流程

00:25:08.375 --> 00:25:11.645 align:middle line:-2
留意这些SwiftUI运行时
的错误

00:25:11.945 --> 00:25:13.981 align:middle line:-1
因为它们指出的是真正的问题

00:25:14.448 --> 00:25:17.251 align:middle line:-1
以及使用运行时问题断点

00:25:17.317 --> 00:25:18.452 align:middle line:-1
来帮你调试

00:25:19.319 --> 00:25:21.889 align:middle line:-1
我已经为你展示了几个调试的方法

00:25:22.155 --> 00:25:24.124 align:middle line:-1
但有时你只需要在视觉上处理它

00:25:24.925 --> 00:25:26.627 align:middle line:-2
有请Sebastian
来为大家介绍如何实现

00:25:32.332 --> 00:25:33.233 align:middle line:-1
谢谢Han Ming

00:25:34.768 --> 00:25:39.106 align:middle line:-2
我们确实会来看一下在一个
示例中调试SwiftUI视图层级

00:25:39.640 --> 00:25:40.641 align:middle line:-1
但在开始之前

00:25:40.707 --> 00:25:43.710 align:middle line:-2
我们来看一些SwiftUI
特别的地方

00:25:43.777 --> 00:25:45.479 align:middle line:-1
以及SwiftUI和传统UI框架

00:25:45.546 --> 00:25:47.915 align:middle line:-2
比如AppKit和UIKit的
关键的不同之处

00:25:48.148 --> 00:25:50.684 align:middle line:-2
以及了解那会如何影响你调试
的工作流程

00:25:51.752 --> 00:25:55.556 align:middle line:-2
首先 SwiftUI使用了
一个声明式的API

00:25:55.622 --> 00:25:57.858 align:middle line:-2
这意味着它会显示运行时
你自己的源码

00:25:57.925 --> 00:26:00.761 align:middle line:-1
而不是视图的初始化

00:26:01.094 --> 00:26:02.863 align:middle line:-1
你提供了一套你的视图层级

00:26:02.930 --> 00:26:04.998 align:middle line:-1
以及构造你视图的框架

00:26:05.299 --> 00:26:06.967 align:middle line:-1
在运行时保持它们的状态更新

00:26:08.202 --> 00:26:10.971 align:middle line:-2
SwiftUI包括了构成和
轻量级的修饰符

00:26:11.038 --> 00:26:12.472 align:middle line:-1
超过复杂视图类型

00:26:13.073 --> 00:26:15.542 align:middle line:-1
所以在运行时你可能看到的视图

00:26:15.609 --> 00:26:17.644 align:middle line:-1
可以观测到有许多少的属性

00:26:18.912 --> 00:26:20.948 align:middle line:-1
SwiftUI的视图是值的类型

00:26:21.014 --> 00:26:24.218 align:middle line:-2
那意味着调试工作流程
依赖参考的视图

00:26:24.284 --> 00:26:25.485 align:middle line:-1
可能不再合适了

00:26:26.520 --> 00:26:30.490 align:middle line:-2
再运行时 SwiftUI可能将
你代码中具体的视图

00:26:30.791 --> 00:26:33.393 align:middle line:-2
转换为特定平台
UIKit和AppKit的视图

00:26:33.894 --> 00:26:35.863 align:middle line:-2
我们等下会在例子中看到
它的一个示例

00:26:37.831 --> 00:26:39.633 align:middle line:-2
SwiftUI也将
UIKit或AppKit

00:26:39.700 --> 00:26:43.370 align:middle line:-1
已有的框架视图整合得非常好

00:26:44.004 --> 00:26:47.474 align:middle line:-2
你早些时候看到的travel
app就已经使用了那个概念

00:26:47.875 --> 00:26:51.245 align:middle line:-2
来将一个UIKit视图混合
至SwiftUI视图

00:26:51.745 --> 00:26:54.848 align:middle line:-1
这是app中使用的主要视图

00:26:56.350 --> 00:26:58.051 align:middle line:-1
考虑到这些方面的同时

00:26:58.118 --> 00:26:59.386 align:middle line:-1
我们来切换至示例机器

00:26:59.453 --> 00:27:02.389 align:middle line:-2
了解下在这travel app中
检查我们个人信息

00:27:02.456 --> 00:27:03.323 align:middle line:-1
屏幕的视图层级

00:27:05.826 --> 00:27:06.660 align:middle line:-1
谢谢

00:27:07.194 --> 00:27:09.730 align:middle line:-2
我们再次调试travel app
的个人信息视图

00:27:09.997 --> 00:27:11.932 align:middle line:-1
我们在这里已经处于调试模式了

00:27:11.999 --> 00:27:13.934 align:middle line:-1
我再重新调整一下检查器

00:27:15.636 --> 00:27:16.870 align:middle line:-1
为了检查视图层级

00:27:17.304 --> 00:27:19.606 align:middle line:-2
我们可以使用Xcode的调试栏
下面的按钮

00:27:19.907 --> 00:27:21.308 align:middle line:-1
来调试视图层级

00:27:21.875 --> 00:27:23.210 align:middle line:-1
就像Han Ming之前提过的

00:27:23.277 --> 00:27:26.146 align:middle line:-2
我们必须确保我们在调试过程中
预览视图保持打开

00:27:26.213 --> 00:27:28.815 align:middle line:-2
因为调试会话和预览视图的
生命周期绑在一起

00:27:29.316 --> 00:27:32.653 align:middle line:-2
我们可以使用Xcode 11中
新的编辑器分屏功能来实现

00:27:32.920 --> 00:27:34.154 align:middle line:-1
按下option键的同时

00:27:34.388 --> 00:27:37.791 align:middle line:-2
在我们在Xcode调试栏中
点击调试视图层级按钮

00:27:38.025 --> 00:27:40.928 align:middle line:-2
它在一个单独的编辑器分屏中
打开视图调试画布

00:27:41.295 --> 00:27:43.597 align:middle line:-1
我们可以访问左上方的源码

00:27:44.131 --> 00:27:45.432 align:middle line:-1
预览视图在左下方

00:27:45.632 --> 00:27:48.468 align:middle line:-1
视图调试画布在右侧

00:27:51.772 --> 00:27:52.606 align:middle line:-1
谢谢

00:27:53.941 --> 00:27:56.810 align:middle line:-2
如果你之前使用过视图调试器
你会非常熟悉它

00:27:57.211 --> 00:28:00.080 align:middle line:-2
你有一个画布区域
在这里你能检查你所有的视图

00:28:00.147 --> 00:28:02.382 align:middle line:-2
你只需简单的旋转就可以分解它们
呈3D状态

00:28:02.449 --> 00:28:04.084 align:middle line:-1
这样你就能很好地预览你的视图

00:28:04.685 --> 00:28:06.086 align:middle line:-1
你可以选择元素

00:28:06.153 --> 00:28:08.121 align:middle line:-1
在右侧查看检查器属性

00:28:08.856 --> 00:28:10.224 align:middle line:-1
左边的导航栏

00:28:10.290 --> 00:28:12.125 align:middle line:-1
有一个你视图层级的缩略展示

00:28:12.192 --> 00:28:15.429 align:middle line:-2
这样你能自己定位
相关子视图和父视图

00:28:16.964 --> 00:28:18.699 align:middle line:-1
好的 那么 就像我之前提到过的

00:28:18.899 --> 00:28:22.169 align:middle line:-2
这个个人资料视图结合了UIKit
和SwiftUI

00:28:22.736 --> 00:28:24.438 align:middle line:-1
看一下实现

00:28:24.838 --> 00:28:29.910 align:middle line:-2
你可以看到它返回了一个垂直的栈
作为它的主体的一部分

00:28:30.277 --> 00:28:33.113 align:middle line:-1
它包含这里的头像视图控制器视图

00:28:33.180 --> 00:28:36.450 align:middle line:-2
那个视图从一个故事板文件
加载了一个UI视图控制器

00:28:37.117 --> 00:28:39.019 align:middle line:-1
在下面 它实例化了一个列表

00:28:39.686 --> 00:28:42.890 align:middle line:-2
那意味着这里上面的部分
是由UIKit创建的

00:28:42.956 --> 00:28:46.226 align:middle line:-2
下面的部分是使用SwiftUI
的一个列表来创建的

00:28:48.395 --> 00:28:49.763 align:middle line:-1
在第一部分的示例中 我想要

00:28:50.130 --> 00:28:51.965 align:middle line:-1
专注于视图层级的UIKit部分

00:28:52.032 --> 00:28:54.201 align:middle line:-2
接下来第二部分 我们会关注
SwiftUI部分

00:28:55.602 --> 00:28:58.172 align:middle line:-2
Xcode 11新支持了
UI窗口场景

00:28:58.405 --> 00:29:03.310 align:middle line:-2
它是在iOS 13的UIKit的
app中使用多窗口支持的概念

00:29:03.510 --> 00:29:05.913 align:middle line:-1
你可以看到所有的UI窗口现在

00:29:06.346 --> 00:29:08.782 align:middle line:-1
都罗列在自己的UI窗口视图下面

00:29:09.016 --> 00:29:11.885 align:middle line:-2
所以只要你在你的iOS app中
增加了多窗口的支持

00:29:12.186 --> 00:29:14.254 align:middle line:-1
寻找这些窗口场景会非常容易

00:29:14.588 --> 00:29:16.290 align:middle line:-1
当你在导航栏中选择一个

00:29:16.356 --> 00:29:18.292 align:middle line:-1
你也可以检查它们的属性

00:29:18.358 --> 00:29:21.762 align:middle line:-2
比如 在检查器中查看标题
和激活状态

00:29:23.197 --> 00:29:26.233 align:middle line:-2
iOS 13的另一个新功能是
深色模式

00:29:27.201 --> 00:29:31.505 align:middle line:-2
今年 我们采用了几种方法来
完善视图调试器

00:29:31.572 --> 00:29:33.740 align:middle line:-1
来帮你为你自己的app增加支持

00:29:34.675 --> 00:29:37.578 align:middle line:-2
首先 当你选择一个UI视图或UI
视图控制器时

00:29:37.911 --> 00:29:40.180 align:middle line:-2
我们现在在检查器中
为你展示了特征集合信息

00:29:40.247 --> 00:29:42.316 align:middle line:-2
比如用户界面样式
这样你就能保证

00:29:42.950 --> 00:29:45.085 align:middle line:-1
视图样式是我们期待的那样

00:29:45.152 --> 00:29:46.753 align:middle line:-1
当你为你视图层级中特定的

00:29:46.820 --> 00:29:48.722 align:middle line:-1
子元件重写用户界面样式时

00:29:49.022 --> 00:29:51.391 align:middle line:-1
你可以马上在视图调试器中调试它

00:29:52.893 --> 00:29:54.394 align:middle line:-1
深色模式的另一个关键点

00:29:54.461 --> 00:29:57.297 align:middle line:-1
是适配外观变化的动态颜色

00:29:57.564 --> 00:30:01.034 align:middle line:-2
使用资产目录和语义化颜色
来实现是一个好的方式

00:30:01.502 --> 00:30:02.769 align:middle line:-1
当我们选择这里的这个徽章

00:30:02.836 --> 00:30:07.207 align:middle line:-2
你能看到它用了一个语义化的颜色
来实现了橙色色调

00:30:07.608 --> 00:30:09.610 align:middle line:-1
来自资产目录的强调色

00:30:09.776 --> 00:30:12.045 align:middle line:-1
所以它现在非常容易确认一个

00:30:12.112 --> 00:30:14.314 align:middle line:-2
颜色是否来自资产目录里的
一个语义化颜色

00:30:14.381 --> 00:30:16.383 align:middle line:-1
它能动态地适配外观的改变

00:30:16.717 --> 00:30:19.553 align:middle line:-2
或是否是一个不能适配外观改变的
硬编码的颜色

00:30:20.387 --> 00:30:22.222 align:middle line:-1
另一个新功能是符号图片

00:30:22.589 --> 00:30:25.726 align:middle line:-2
这个徽章实际上使用了一张
符号图片

00:30:26.093 --> 00:30:28.161 align:middle line:-1
当我在这个检查器往上一点

00:30:28.228 --> 00:30:30.898 align:middle line:-2
你能看到检查器中
关于符号图片的细节

00:30:31.231 --> 00:30:34.668 align:middle line:-2
我们现在展示了你在选择器中选择的
所有图片的名字

00:30:34.935 --> 00:30:37.371 align:middle line:-1
你获取了比如符号配置的细节信息

00:30:37.437 --> 00:30:39.973 align:middle line:-2
看到了它实际上是一个系统
符号图片

00:30:40.040 --> 00:30:42.843 align:middle line:-2
和比如一个你在你的资产目录中
创建的自定义符号相比

00:30:47.481 --> 00:30:52.653 align:middle line:-2
符号图片由它们的基准线 这样它们
就能非常棒的一个接着一个布局

00:30:52.953 --> 00:30:56.590 align:middle line:-2
我们将这个基准线在右侧
的这个视图可视化展示了

00:30:57.157 --> 00:30:59.893 align:middle line:-1
来保证它在文本旁呈现良好的布局

00:30:59.960 --> 00:31:04.131 align:middle line:-2
我们必须在UIKit的世界
使用自动布局限制

00:31:04.198 --> 00:31:06.200 align:middle line:-1
来确保我们使用了基准线限制

00:31:06.266 --> 00:31:07.734 align:middle line:-1
而不是 比如将它们居中

00:31:08.068 --> 00:31:11.338 align:middle line:-2
因为如果这个名字变长的话
会导致一个换行

00:31:11.405 --> 00:31:12.573 align:middle line:-1
我们有一个多行标签

00:31:12.639 --> 00:31:15.209 align:middle line:-2
我们想要确保这个徽章
和第一行的这个标签对齐

00:31:15.943 --> 00:31:18.712 align:middle line:-2
我们能很容易地确认它
和被选择的徽章

00:31:18.779 --> 00:31:22.816 align:middle line:-2
我们可以切换至尺寸检查器
来看一下限制细节

00:31:23.150 --> 00:31:25.185 align:middle line:-2
我们在Xcode 11全面更新了
这个部分

00:31:25.252 --> 00:31:27.921 align:middle line:-2
让它更像是Interface Builder
且更强大

00:31:27.988 --> 00:31:30.390 align:middle line:-2
这样你的鼠标滑过它们时
就能高亮这些限制

00:31:30.757 --> 00:31:32.392 align:middle line:-2
你可以使用这里的
这个小的导航器

00:31:32.759 --> 00:31:34.828 align:middle line:-1
来过滤到一个特定的边缘

00:31:35.162 --> 00:31:36.663 align:middle line:-1
我们可以简单地确认

00:31:37.097 --> 00:31:39.967 align:middle line:-1
这个徽章实际上使用了它旁边标签的

00:31:40.033 --> 00:31:41.268 align:middle line:-1
第一个基准线限制

00:31:41.602 --> 00:31:46.940 align:middle line:-2
那么 这就是我们完全想要的
我们很简单地就实现了

00:31:48.041 --> 00:31:50.677 align:middle line:-2
好的 那么 这些是
我们在UIKit部分上所做的改进

00:31:51.078 --> 00:31:53.247 align:middle line:-1
我们切换至SwiftUI

00:31:55.315 --> 00:31:59.052 align:middle line:-2
就像我们看到的 我们现在看到的是
个人档案视图的预览图

00:31:59.586 --> 00:32:02.356 align:middle line:-1
看着左侧的导航栏

00:32:02.422 --> 00:32:04.191 align:middle line:-2
你能看到个人档案视图
在这里出现了

00:32:04.525 --> 00:32:07.528 align:middle line:-2
我们很好地明白了
它在画布区域的尺寸

00:32:08.996 --> 00:32:10.497 align:middle line:-1
我们看到它使用了一个垂直堆栈

00:32:10.564 --> 00:32:13.166 align:middle line:-2
我们在画布区域
也看到了选择它

00:32:13.500 --> 00:32:15.836 align:middle line:-2
你就能在右侧检查器获取
它的细节信息

00:32:16.603 --> 00:32:19.806 align:middle line:-2
切回个人档案视图
它有更多的属性

00:32:20.541 --> 00:32:24.778 align:middle line:-2
你可以看到那有很多关于
在检查器里出现的视图属性

00:32:24.845 --> 00:32:28.348 align:middle line:-2
我们已经使用Swift反射
自动地发现这些属性

00:32:28.749 --> 00:32:30.584 align:middle line:-1
那么 甚至是你自己自定义的视图

00:32:30.651 --> 00:32:33.120 align:middle line:-2
我们现在自动地在检查器中
展示了这些属性

00:32:33.554 --> 00:32:38.192 align:middle line:-2
它比之前的功能更强大了
之前我们只支持系统视图

00:32:38.892 --> 00:32:40.060 align:middle line:-1
我们甚至又近了一步

00:32:40.127 --> 00:32:41.628 align:middle line:-1
你现在可以自定义这些

00:32:41.695 --> 00:32:43.363 align:middle line:-1
出现在右侧检查器的属性了

00:32:43.864 --> 00:32:47.234 align:middle line:-2
通过在你视图类型中实现自定义
可反射协议

00:32:47.568 --> 00:32:49.469 align:middle line:-1
个人档案视图正在做它应该做的

00:32:49.870 --> 00:32:53.006 align:middle line:-2
你能看到它在这里
返回了3个不同的属性

00:32:53.073 --> 00:32:56.777 align:middle line:-2
账户状态、上次登录和个人档案
作为自定义Mirror的一部分

00:32:57.911 --> 00:32:59.546 align:middle line:-1
看右边的检查器

00:33:02.716 --> 00:33:05.419 align:middle line:-1
所以这是非常强大的功能

00:33:05.485 --> 00:33:08.722 align:middle line:-2
让你在调试过程中
可以返回你需要的确切的数据

00:33:14.194 --> 00:33:16.396 align:middle line:-2
我们再看一下检查器
你能看到在上方

00:33:16.997 --> 00:33:20.534 align:middle line:-1
我们获取到了当前选中视图的属性

00:33:20.601 --> 00:33:22.503 align:middle line:-1
个人档案视图和更进一步

00:33:22.569 --> 00:33:25.839 align:middle line:-2
我们能看到当前所有的修饰符
都在被选中视图中生效了

00:33:25.906 --> 00:33:29.009 align:middle line:-2
那么我们能看到边距和
安全区域嵌入物 举个例子

00:33:32.312 --> 00:33:35.415 align:middle line:-2
我们看一下视图层级中的
另一个不同的部分

00:33:35.883 --> 00:33:40.654 align:middle line:-2
就像我们之前看到的那样 底部
使用了一个列表来为所有视图布局

00:33:41.255 --> 00:33:43.156 align:middle line:-2
那么我们选择我们看到的
其中的一个视图

00:33:43.223 --> 00:33:46.059 align:middle line:-1
比如 这里的965字符

00:33:46.460 --> 00:33:49.930 align:middle line:-2
我会使用一个导航的手势
来在调试导航器中展示

00:33:49.997 --> 00:33:53.267 align:middle line:-2
这样我们就能很好的了解
它在视图层级中的位置了

00:33:53.967 --> 00:33:56.937 align:middle line:-2
我们能看到SwiftUI已经将
这个列表转移

00:33:57.004 --> 00:33:58.639 align:middle line:-1
至一个底层的UI表格视图

00:33:59.339 --> 00:34:02.643 align:middle line:-2
它使用表格视图单元格来寄存
SwiftUI视图

00:34:03.477 --> 00:34:05.179 align:middle line:-1
我们在代码中构建过

00:34:05.812 --> 00:34:07.080 align:middle line:-1
这是一个实现的细节

00:34:07.147 --> 00:34:09.416 align:middle line:-1
你不应该在你的实现中依赖它

00:34:09.483 --> 00:34:10.817 align:middle line:-1
但它非常有用

00:34:10.884 --> 00:34:13.786 align:middle line:-1
比如 当你试着调试布局问题时

00:34:15.289 --> 00:34:17.491 align:middle line:-2
这个被选择的文字
这里实际上是有一个问题的

00:34:17.558 --> 00:34:19.025 align:middle line:-1
我们的设计师提过

00:34:19.426 --> 00:34:22.963 align:middle line:-1
它们应该对齐基准线

00:34:24.063 --> 00:34:25.699 align:middle line:-2
而不是在这两个文字之间
垂直地居中

00:34:25.933 --> 00:34:29.235 align:middle line:-2
现在 我们已经看到
这是一个水平的堆栈了

00:34:29.303 --> 00:34:31.672 align:middle line:-1
它将它们一个接一个布局

00:34:32.172 --> 00:34:34.541 align:middle line:-1
当我们在这里看它的实现

00:34:34.975 --> 00:34:37.978 align:middle line:-2
你能看到它是一个扁平的水平
的堆栈

00:34:38.045 --> 00:34:40.147 align:middle line:-2
它没有传递任何参数至它的
初始化方法

00:34:40.547 --> 00:34:42.181 align:middle line:-1
但当我们看这个检查器时

00:34:42.248 --> 00:34:45.985 align:middle line:-2
你能看到它其实默认偏移屏幕
对齐了

00:34:46.152 --> 00:34:48.722 align:middle line:-2
现在 我们不想要居中对齐
我们想要基准线对齐

00:34:49.590 --> 00:34:52.592 align:middle line:-2
所以 我们调整代码来
修复这个问题

00:34:52.960 --> 00:34:54.360 align:middle line:-1
我会关闭这个视图调试器

00:34:54.862 --> 00:34:58.665 align:middle line:-2
继续调试会话和再一次激活
预览视图

00:35:01.235 --> 00:35:05.572 align:middle line:-2
我会添加一个对齐参数
.firstTextBaseline

00:35:05.939 --> 00:35:11.211 align:middle line:-2
我们现在能看到两个标签
实际上沿基准线对齐了

00:35:11.512 --> 00:35:12.379 align:middle line:-1
那么我们--

00:35:16.316 --> 00:35:21.388 align:middle line:-2
我们可以看到HStack为它自己
的对齐方式设定的默认值

00:35:21.722 --> 00:35:23.924 align:middle line:-1
找到并修改它

00:35:23.991 --> 00:35:27.628 align:middle line:-2
接下来立刻使用Xcode 11的
新的预览视图验证它

00:35:28.228 --> 00:35:30.197 align:middle line:-1
这样 我会切回至幻灯片

00:35:31.298 --> 00:35:34.301 align:middle line:-2
我们刚才看到 当你检查
SwiftUI视图层级时

00:35:34.902 --> 00:35:37.504 align:middle line:-1
视图层级时在导航器出现了

00:35:37.571 --> 00:35:39.773 align:middle line:-1
在画布的左侧

00:35:40.641 --> 00:35:42.109 align:middle line:-1
以及属性和修饰符

00:35:42.309 --> 00:35:44.278 align:middle line:-1
在检查器右侧展现了

00:35:45.379 --> 00:35:48.282 align:middle line:-2
检查器属性会自动地查明使用
Swift反射

00:35:48.348 --> 00:35:50.784 align:middle line:-1
你甚至可以自定义检查器属性

00:35:51.185 --> 00:35:52.786 align:middle line:-1
使用自定义的可反射协议

00:35:52.853 --> 00:35:54.721 align:middle line:-1
来在右侧的检查器展示

00:35:55.422 --> 00:35:57.291 align:middle line:-1
当然 使用SwiftUI

00:35:57.357 --> 00:36:00.060 align:middle line:-2
我们也为混合视图层级提供支持
我们刚看到

00:36:00.494 --> 00:36:03.130 align:middle line:-2
UIKit视图怎样在SwiftUI
视图右侧旁边展现的

00:36:04.431 --> 00:36:07.701 align:middle line:-2
我们对UIKit视图也做了
很大的改善

00:36:07.935 --> 00:36:11.038 align:middle line:-2
即支持了
UIWindowScene

00:36:12.105 --> 00:36:13.540 align:middle line:-2
当你开始在你的UIKit app
适配多窗口视图时

00:36:13.607 --> 00:36:15.776 align:middle line:-1
它会为你提供帮助

00:36:16.109 --> 00:36:17.811 align:middle line:-1
我们改进了检查器

00:36:18.178 --> 00:36:21.315 align:middle line:-2
提供了更多细节
比如特征集合的细节

00:36:21.582 --> 00:36:26.620 align:middle line:-2
我们看到了语义化的
图片和符号图片信息

00:36:26.920 --> 00:36:28.155 align:middle line:-1
我们也看到了语义化颜色

00:36:28.222 --> 00:36:30.490 align:middle line:-2
当你开始适配在深色模式适配它时
它会很有帮助

00:36:30.991 --> 00:36:34.094 align:middle line:-2
我们对检查器中的约束条件的细节
做了很大的改善

00:36:34.161 --> 00:36:35.963 align:middle line:-1
它比之前更为强大

00:36:36.029 --> 00:36:39.933 align:middle line:-2
当你在UIKit app中调试
你的自动布局约束条件时

00:36:41.235 --> 00:36:43.570 align:middle line:-1
如果你想要了解更多设备状态的细节

00:36:44.104 --> 00:36:46.573 align:middle line:-1
我在这里推荐这个演讲

00:36:47.040 --> 00:36:52.713 align:middle line:-2
这里也有一个介绍LLDB和改善的
一个很棒的视频

00:36:53.714 --> 00:36:56.984 align:middle line:-1
这样 我们今天的演讲就要结束了

00:36:57.551 --> 00:36:59.786 align:middle line:-1
愿你能好好享受接下来的会议

00:36:59.853 --> 00:37:01.455 align:middle line:-1
我们盛典上见

