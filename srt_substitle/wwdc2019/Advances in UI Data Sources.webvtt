WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:05.500 A:middle
[音乐]

00:00:08.516 --> 00:00:11.546 A:middle
[欢呼和掌声]

00:00:12.046 --> 00:00:12.376 A:middle
&gt;&gt; 欢迎

00:00:15.496 --> 00:00:16.696 A:middle
我是 Steve Breen

00:00:16.696 --> 00:00:18.256 A:middle
我是 UIKit 团队的一名工程师

00:00:18.426 --> 00:00:19.586 A:middle
今天我和我的同事

00:00:19.586 --> 00:00:21.186 A:middle
来自 AppKit 团队的 Troy Stephens 

00:00:21.186 --> 00:00:22.456 A:middle
和来自 App Store 团队的

00:00:22.456 --> 00:00:24.336 A:middle
Jacob Klapper 一起

00:00:25.366 --> 00:00:27.096 A:middle
今天我们要聊一些

00:00:27.216 --> 00:00:29.416 A:middle
关于 UI 数据源的内容

00:00:30.296 --> 00:00:30.986 A:middle
[笑声] 那么

00:00:30.986 --> 00:00:33.006 A:middle
今天的演讲将分为四个部分

00:00:33.626 --> 00:00:34.656 A:middle
首先我想谈谈

00:00:34.656 --> 00:00:35.936 A:middle
目前的最新状况

00:00:36.076 --> 00:00:37.346 A:middle
我们现在如何

00:00:37.346 --> 00:00:39.636 A:middle
在平台上与数据源交互

00:00:40.636 --> 00:00:41.656 A:middle
然后我们将讨论

00:00:41.656 --> 00:00:43.196 A:middle
一种全新的方法

00:00:43.196 --> 00:00:45.856 A:middle
将其引入 iOS tvOS 和 macOS

00:00:46.556 --> 00:00:48.156 A:middle
接下来我们会过渡到一些演示

00:00:48.156 --> 00:00:50.146 A:middle
获得一些关于这个

00:00:50.146 --> 00:00:51.926 A:middle
全新 API 的实践

00:00:52.646 --> 00:00:54.236 A:middle
最后我们将

00:00:54.236 --> 00:00:55.466 A:middle
更详细地考虑

00:00:55.466 --> 00:00:56.576 A:middle
如何充分利用

00:00:56.706 --> 00:00:59.466 A:middle
这个新 API

00:01:01.246 --> 00:01:02.636 A:middle
目前最新的状况

00:01:02.636 --> 00:01:05.495 A:middle
我们是如何在 UITableView

00:01:05.495 --> 00:01:07.206 A:middle
和 UICollectionView 中与

00:01:07.206 --> 00:01:08.436 A:middle
UI 数据源交互的呢?

00:01:09.836 --> 00:01:12.256 A:middle
这里我们看到

00:01:12.256 --> 00:01:13.546 A:middle
UICollectionView 数据源

00:01:13.546 --> 00:01:15.046 A:middle
的一个示例的实现

00:01:15.926 --> 00:01:16.896 A:middle
如果你用过

00:01:16.896 --> 00:01:18.456 A:middle
UITableView 或 UICollectionViews

00:01:18.456 --> 00:01:19.346 A:middle
那你以前见过这个

00:01:19.966 --> 00:01:21.886 A:middle
这提供了三个方法

00:01:21.886 --> 00:01:24.496 A:middle
包括协议必须的两个方法

00:01:24.496 --> 00:01:26.836 A:middle
很简单 对吧

00:01:26.836 --> 00:01:28.466 A:middle
我们已经询问了

00:01:28.466 --> 00:01:29.576 A:middle
Section 的数量

00:01:29.576 --> 00:01:30.886 A:middle
和每个 Section 中 Item 的数量

00:01:31.096 --> 00:01:32.676 A:middle
在内容渲染方面

00:01:32.676 --> 00:01:33.796 A:middle
我们会要求返回 Item 对应的 Cell

00:01:34.406 --> 00:01:38.136 A:middle
非常简单 到现在它已经

00:01:38.136 --> 00:01:39.566 A:middle
为我们服务十年了

00:01:39.796 --> 00:01:42.946 A:middle
对吧 它有几个优点 超级简单

00:01:43.356 --> 00:01:44.486 A:middle
你可以立刻推理出来

00:01:44.486 --> 00:01:46.296 A:middle
如果你只想提供两个方法

00:01:46.296 --> 00:01:48.446 A:middle
Section 中的 Item 数量

00:01:48.446 --> 00:01:50.426 A:middle
如果你的数据源是一维的

00:01:50.426 --> 00:01:51.606 A:middle
那就很简单了

00:01:52.576 --> 00:01:53.966 A:middle
你可以很快地对它进行迭代

00:01:54.566 --> 00:01:56.566 A:middle
但它也很灵活

00:01:56.636 --> 00:01:58.516 A:middle
对吧 因为你不需要

00:01:58.596 --> 00:02:00.586 A:middle
使用任何特定的数据结构

00:02:00.586 --> 00:02:02.896 A:middle
来支持你的数据源

00:02:04.116 --> 00:02:05.276 A:middle
它可以像一维数组

00:02:05.346 --> 00:02:06.386 A:middle
一样简单

00:02:07.426 --> 00:02:08.826 A:middle
如果你的数据源

00:02:08.826 --> 00:02:10.906 A:middle
有多个 Item 和 Section

00:02:10.906 --> 00:02:11.796 A:middle
它可能是二维的对吧

00:02:11.796 --> 00:02:12.946 A:middle
非常简单 非常直接

00:02:15.606 --> 00:02:17.926 A:middle
App 通常

00:02:17.926 --> 00:02:19.146 A:middle
比一维或二维数组

00:02:19.146 --> 00:02:20.706 A:middle
要复杂一些

00:02:22.456 --> 00:02:24.216 A:middle
而且 App 每年都变得越来越复杂

00:02:24.216 --> 00:02:25.166 A:middle
它们做的事情更多

00:02:25.166 --> 00:02:26.886 A:middle
我们的用户需要更多的功能

00:02:26.886 --> 00:02:29.576 A:middle
通常这些数据源

00:02:29.576 --> 00:02:31.316 A:middle
是由 App 内部的

00:02:31.316 --> 00:02:32.746 A:middle
复杂控制器支持的

00:02:33.686 --> 00:02:35.946 A:middle
这些控制器可以做很多事

00:02:35.946 --> 00:02:36.876 A:middle
它们可以与 Core Data 交互

00:02:36.876 --> 00:02:39.186 A:middle
还可以与 Web 服务对话

00:02:39.186 --> 00:02:40.546 A:middle
它们做了

00:02:40.546 --> 00:02:41.426 A:middle
很多不同的事情

00:02:41.626 --> 00:02:43.916 A:middle
我将很快地进行展示

00:02:45.296 --> 00:02:46.906 A:middle
让我们来看看

00:02:46.906 --> 00:02:49.166 A:middle
UI 层和控制器层之前的对话

00:02:49.166 --> 00:02:50.166 A:middle
这个控制器层做了很多

00:02:50.166 --> 00:02:51.576 A:middle
繁重的工作

00:02:51.576 --> 00:02:52.786 A:middle
来获取数据对吧

00:02:53.686 --> 00:02:55.576 A:middle
对话一开始很礼貌

00:02:56.106 --> 00:02:57.946 A:middle
就像是 “嘿 请告诉我 Section 中 Item 的数量

00:02:57.946 --> 00:02:59.456 A:middle
或者在我们渲染内容时

00:02:59.456 --> 00:03:00.046 A:middle
给我对应的 Cell“

00:03:00.486 --> 00:03:01.456 A:middle
非常简单

00:03:01.526 --> 00:03:02.956 A:middle
到目前为止一切顺利

00:03:06.056 --> 00:03:08.016 A:middle
但随着时间的推移 事情会变得更加复杂对吧

00:03:08.016 --> 00:03:09.076 A:middle
比如这个控制器

00:03:09.076 --> 00:03:10.516 A:middle
有一个 Web 服务请求

00:03:10.516 --> 00:03:11.896 A:middle
在这里得到响应

00:03:11.896 --> 00:03:14.196 A:middle
对吧 就像是我有你的

00:03:14.196 --> 00:03:15.776 A:middle
推特之类的数据 对吧

00:03:16.396 --> 00:03:18.096 A:middle
现在这个控制器层

00:03:18.196 --> 00:03:19.716 A:middle
它本身是复杂的

00:03:20.376 --> 00:03:21.926 A:middle
要让世界知道

00:03:21.926 --> 00:03:23.226 A:middle
嘿 我改变了 有一些地方变了

00:03:23.846 --> 00:03:25.546 A:middle
这就是事情变得

00:03:25.546 --> 00:03:27.996 A:middle
有点复杂的地方对吧

00:03:27.996 --> 00:03:31.066 A:middle
现在由 UI 层决定

00:03:31.066 --> 00:03:33.486 A:middle
嘿 事情变了

00:03:33.486 --> 00:03:34.856 A:middle
我现在要根据这个改变

00:03:34.856 --> 00:03:37.816 A:middle
对我们的 UI 层进行更新

00:03:38.486 --> 00:03:40.086 A:middle
这包括所有针对

00:03:40.086 --> 00:03:41.426 A:middle
TableView 和

00:03:41.426 --> 00:03:42.756 A:middle
CollectionView 的变化

00:03:42.756 --> 00:03:44.246 A:middle
可能会有点复杂

00:03:44.246 --> 00:03:46.076 A:middle
我们在去年的

00:03:46.076 --> 00:03:48.236 A:middle
UICollectionView 一览会议中

00:03:48.236 --> 00:03:51.436 A:middle
讨论了这种复杂性以及如何正确

00:03:51.436 --> 00:03:53.726 A:middle
构造批次更新

00:03:53.726 --> 00:03:54.976 A:middle
以及如何修改备份储存 诸如此类的

00:03:57.586 --> 00:03:59.276 A:middle
但是有时候 不管你怎么努力

00:04:03.126 --> 00:04:04.226 A:middle
你知道事情总不会顺利

00:04:04.606 --> 00:04:05.586 A:middle
这是一个不完美的世界

00:04:07.186 --> 00:04:08.746 A:middle
从笑声中可以看出

00:04:08.886 --> 00:04:10.006 A:middle
你以前可能也遇到过这种情况

00:04:10.006 --> 00:04:12.336 A:middle
对吧 这并不罕见

00:04:12.336 --> 00:04:13.756 A:middle
这真的很令人沮丧

00:04:13.756 --> 00:04:14.726 A:middle
对吧 你遇到这种情况 然后会想

00:04:14.726 --> 00:04:18.875 A:middle
"好吧 我做错了什么?" 这是我本人

00:04:18.875 --> 00:04:20.616 A:middle
当你深入研究你的代码后

00:04:20.616 --> 00:04:21.716 A:middle
你在 Stack Overflow 上查询

00:04:21.716 --> 00:04:22.886 A:middle
看看发生了什么

00:04:23.206 --> 00:04:25.146 A:middle
最终你可能会灰心

00:04:25.146 --> 00:04:26.516 A:middle
只能调用 reloadData

00:04:26.516 --> 00:04:27.806 A:middle
我们去年讨论了这个

00:04:27.806 --> 00:04:30.266 A:middle
很好 这是正确的做法

00:04:30.386 --> 00:04:31.616 A:middle
你的 App 会正常运行

00:04:32.676 --> 00:04:33.736 A:middle
当你调用 reloadData 时

00:04:33.736 --> 00:04:35.616 A:middle
你会得到一个非动画效果

00:04:36.306 --> 00:04:38.446 A:middle
它会降低用户体验

00:04:39.836 --> 00:04:41.356 A:middle
所以这不好

00:04:44.046 --> 00:04:46.156 A:middle
我想用这一张幻灯片来讲讲哲学

00:04:46.156 --> 00:04:48.716 A:middle
就一张 我保证出了什么问题呢

00:04:49.636 --> 00:04:52.456 A:middle
问题是 我们的真相在哪里

00:04:53.786 --> 00:04:55.386 A:middle
你知道的 我的意思是谁造成了这一切

00:04:55.386 --> 00:04:56.696 A:middle
谁能解决这些问题

00:04:57.806 --> 00:04:59.256 A:middle
这里最大的问题是

00:04:59.256 --> 00:05:01.016 A:middle
我们的数据控制器

00:05:01.016 --> 00:05:02.186 A:middle
或者说是作为一个数据源

00:05:02.186 --> 00:05:03.356 A:middle
有它自己版本的真相

00:05:03.356 --> 00:05:04.466 A:middle
随着时间的推移而变化

00:05:04.946 --> 00:05:07.136 A:middle
UI 有一个版本的真相

00:05:08.336 --> 00:05:09.866 A:middle
UI 层代码负责

00:05:09.866 --> 00:05:11.256 A:middle
调节两者

00:05:11.256 --> 00:05:12.796 A:middle
确保它们总是同步的

00:05:13.526 --> 00:05:15.476 A:middle
正如我们所看到的 有时候这很难

00:05:16.816 --> 00:05:19.036 A:middle
所以我们目前的方法容易出错

00:05:19.726 --> 00:05:22.976 A:middle
主要是因为没有集中真理的概念

00:05:26.626 --> 00:05:27.766 A:middle
这就是最新的状况

00:05:27.766 --> 00:05:28.476 A:middle
这就是我们今天的处境

00:05:28.476 --> 00:05:29.206 A:middle
但是我们接下来会怎么样呢

00:05:30.546 --> 00:05:31.716 A:middle
我很高兴地宣布

00:05:31.716 --> 00:05:33.726 A:middle
对于 iOS tvOS 和 macOS 

00:05:33.726 --> 00:05:36.326 A:middle
我们今年将推出一种全新的方式

00:05:37.106 --> 00:05:39.556 A:middle
我们称这个为差量数据源

00:05:40.516 --> 00:05:44.546 A:middle
[欢呼和掌声]

00:05:45.046 --> 00:05:45.976 A:middle
好了让我们深入了解一下这是什么

00:05:49.076 --> 00:05:50.576 A:middle
没有 performBatchUpdates 我们继续

00:05:51.056 --> 00:05:53.976 A:middle
与此同时 所有的崩溃 困扰和繁杂

00:05:53.976 --> 00:05:54.776 A:middle
所有你不想处理的东西

00:05:54.776 --> 00:05:56.726 A:middle
都被抛弃了

00:05:57.806 --> 00:05:59.086 A:middle
我们只有一个

00:05:59.086 --> 00:05:59.986 A:middle
被称为 apply() 的方法

00:06:01.806 --> 00:06:03.176 A:middle
apply() 是简单的 自动的

00:06:03.176 --> 00:06:04.496 A:middle
省事的差异化对比

00:06:07.386 --> 00:06:09.136 A:middle
我们用一个全新的构造

00:06:09.136 --> 00:06:10.766 A:middle
称之为快照

00:06:10.826 --> 00:06:12.156 A:middle
这是一个非常简单的想法

00:06:12.296 --> 00:06:13.846 A:middle
这实际上是

00:06:13.846 --> 00:06:14.826 A:middle
当前 UI 状态的真相

00:06:15.536 --> 00:06:18.306 A:middle
它不是 IndexPath

00:06:18.306 --> 00:06:20.076 A:middle
而是一组

00:06:20.346 --> 00:06:24.066 A:middle
唯一的 Section 标识符和 Item 标识符

00:06:25.336 --> 00:06:26.766 A:middle
你不是使用 IndexPath 进行更新

00:06:26.766 --> 00:06:28.736 A:middle
而是用标识符

00:06:29.486 --> 00:06:30.226 A:middle
让我们来看看

00:06:30.226 --> 00:06:32.666 A:middle
这里发生了什么

00:06:34.156 --> 00:06:35.276 A:middle
我是个很有创意的人

00:06:35.276 --> 00:06:37.146 A:middle
屏幕上有 FOO

00:06:37.226 --> 00:06:38.256 A:middle
BAR 和 BIF 对吧

00:06:38.256 --> 00:06:39.486 A:middle
这就是我们互动的对象

00:06:39.486 --> 00:06:41.736 A:middle
这些是 App 中的标识符

00:06:43.146 --> 00:06:45.156 A:middle
假设控制器改变了

00:06:45.156 --> 00:06:46.546 A:middle
现在我们有了这个

00:06:46.606 --> 00:06:48.316 A:middle
我们想应用的全新的快照

00:06:49.116 --> 00:06:50.316 A:middle
但这是我们当前的快照

00:06:50.316 --> 00:06:52.676 A:middle
我们如何从新的事实

00:06:53.686 --> 00:06:54.676 A:middle
得到当前的快照

00:06:56.686 --> 00:06:57.916 A:middle
我们可以看到

00:06:57.916 --> 00:06:59.486 A:middle
用 BAR FOO 和 BAZ

00:06:59.486 --> 00:07:01.496 A:middle
配置了一个全新的快照

00:07:01.496 --> 00:07:02.656 A:middle
我们有些项目是

00:07:02.656 --> 00:07:03.656 A:middle
一直存在的

00:07:03.656 --> 00:07:05.036 A:middle
只是改变了顺序

00:07:05.036 --> 00:07:06.796 A:middle
然后有个新的项目进来了

00:07:07.516 --> 00:07:10.136 A:middle
从概念上来讲

00:07:10.136 --> 00:07:11.796 A:middle
apply() 知道

00:07:11.796 --> 00:07:12.996 A:middle
当前的状态和新状态

00:07:12.996 --> 00:07:14.566 A:middle
然后应用到 

00:07:14.566 --> 00:07:14.976 A:middle
UI 元素上的

00:07:17.356 --> 00:07:19.096 A:middle
没有第二步 这就完成了

00:07:19.096 --> 00:07:21.336 A:middle
那我们该如何实现呢

00:07:21.336 --> 00:07:23.206 A:middle
我们在所有平台上

00:07:23.376 --> 00:07:24.576 A:middle
有四个类

00:07:25.226 --> 00:07:26.836 A:middle
对于 iOS 和 tvOS

00:07:26.836 --> 00:07:27.686 A:middle
我们有 UICollectionViewDiffableDataSource

00:07:27.686 --> 00:07:31.666 A:middle
以及 UITableViewDiffableDataSource

00:07:31.666 --> 00:07:33.256 A:middle
在 Mac 上 

00:07:33.636 --> 00:07:35.276 A:middle
我们有 NSCollectionViewDiffableDataSource

00:07:36.046 --> 00:07:37.696 A:middle
所有平台都通用的是

00:07:37.756 --> 00:07:39.796 A:middle
这个 Snapshot 类

00:07:39.796 --> 00:07:40.856 A:middle
它负责当前的

00:07:40.856 --> 00:07:43.846 A:middle
UI 状态的 NSDiffableDataSourceSnapshot

00:07:44.896 --> 00:07:46.456 A:middle
背景就介绍到这里

00:07:46.456 --> 00:07:48.126 A:middle
我们接下来看一些代码

00:07:48.186 --> 00:07:49.376 A:middle
为此我会让我的同事

00:07:49.376 --> 00:07:51.536 A:middle
Troy Stephens 出来

00:07:51.766 --> 00:07:54.266 A:middle
Troy [掌声]

00:07:54.516 --> 00:07:55.456 A:middle
&gt;&gt; 非常感谢 Steve

00:07:56.116 --> 00:07:57.706 A:middle
今天我很高兴

00:07:57.706 --> 00:07:59.266 A:middle
带大家一起看一些

00:07:59.266 --> 00:08:00.746 A:middle
使用这个强大而又

00:08:00.746 --> 00:08:02.956 A:middle
漂亮简单的新 API 的例子

00:08:03.286 --> 00:08:04.526 A:middle
因此如果你还没有

00:08:04.526 --> 00:08:06.086 A:middle
下载本讲座的示例项目

00:08:06.086 --> 00:08:08.746 A:middle
请务必下载 这样你就可以

00:08:08.966 --> 00:08:10.116 A:middle
在空闲的时候跟着学习

00:08:10.466 --> 00:08:12.616 A:middle
最重要的是

00:08:12.616 --> 00:08:14.946 A:middle
用这个例子来

00:08:14.946 --> 00:08:16.616 A:middle
真正理解所有这些东西是如何工作的

00:08:16.776 --> 00:08:17.776 A:middle
它没有很多代码

00:08:18.066 --> 00:08:19.186 A:middle
其实很简单

00:08:19.556 --> 00:08:22.076 A:middle
当你查看这个示例项目时

00:08:22.076 --> 00:08:23.416 A:middle
你会注意到

00:08:23.416 --> 00:08:24.796 A:middle
除了我们今天将要查看的

00:08:24.846 --> 00:08:26.336 A:middle
三个使用 DiffableDataSource 

00:08:26.336 --> 00:08:27.406 A:middle
的示例之外

00:08:27.926 --> 00:08:29.816 A:middle
这个项目还包含了

00:08:29.816 --> 00:08:31.266 A:middle
我们在 215 会议中引入的

00:08:31.266 --> 00:08:32.645 A:middle
功能强大的

00:08:32.645 --> 00:08:35.645 A:middle
新组合布局 API 的示例

00:08:36.046 --> 00:08:37.626 A:middle
这些例子恰好使用了

00:08:37.626 --> 00:08:39.905 A:middle
DiffableDataSource 

00:08:40.006 --> 00:08:41.905 A:middle
作为一种非常简单的方法

00:08:41.905 --> 00:08:42.936 A:middle
将示例内容填充至

00:08:42.936 --> 00:08:43.746 A:middle
CollectionView 中

00:08:44.256 --> 00:08:45.636 A:middle
让我们操作演示机器

00:08:45.636 --> 00:08:45.976 A:middle
一起来看一看

00:08:49.416 --> 00:08:51.116 A:middle
我们的演示 App 在这里

00:08:51.496 --> 00:08:52.926 A:middle
当我们今天

00:08:52.926 --> 00:08:54.496 A:middle
讲解不同的例子时

00:08:54.776 --> 00:08:56.566 A:middle
我们会注意到一个重复的模式

00:08:56.566 --> 00:08:58.676 A:middle
这是一个简单的三步过程

00:08:59.186 --> 00:09:00.986 A:middle
任何时候你想

00:09:00.986 --> 00:09:02.186 A:middle
把一组新变化 新数据

00:09:02.186 --> 00:09:04.296 A:middle
放到有完整数据源的

00:09:04.296 --> 00:09:05.776 A:middle
CollectionView 或 UITableView 中

00:09:05.776 --> 00:09:08.676 A:middle
你只需创建一个快照

00:09:09.306 --> 00:09:10.846 A:middle
用要在更新周期中

00:09:10.846 --> 00:09:12.296 A:middle
显示的项目描述

00:09:12.296 --> 00:09:13.856 A:middle
填充快照

00:09:13.906 --> 00:09:15.756 A:middle
然后应用快照

00:09:16.116 --> 00:09:17.376 A:middle
更改将自动被

00:09:17.376 --> 00:09:19.356 A:middle
提交到 UI

00:09:19.356 --> 00:09:20.786 A:middle
DiffableDataSource 负责

00:09:20.786 --> 00:09:22.386 A:middle
所有对 UI 元素的差异化对比

00:09:22.386 --> 00:09:23.556 A:middle
和发布 UI 元素的更改

00:09:24.426 --> 00:09:25.946 A:middle
我们来看一个具体的例子

00:09:25.946 --> 00:09:27.946 A:middle
我要打开 Mountain Search

00:09:29.046 --> 00:09:30.526 A:middle
这是一个很典型的

00:09:30.526 --> 00:09:31.236 A:middle
搜索 UI 对吧?

00:09:31.236 --> 00:09:33.966 A:middle
我们都能看到它 并推断出它的作用

00:09:34.216 --> 00:09:35.826 A:middle
例如你可能在

00:09:35.826 --> 00:09:37.006 A:middle
联系人 App 中看到这一点

00:09:37.006 --> 00:09:38.736 A:middle
而在本例中 我们正在查看

00:09:38.736 --> 00:09:39.776 A:middle
世界各地的山峰

00:09:40.626 --> 00:09:42.666 A:middle
你可以想象

00:09:42.666 --> 00:09:43.626 A:middle
在顶部有个搜索框

00:09:43.626 --> 00:09:45.046 A:middle
当我开始输入搜索字段时

00:09:45.046 --> 00:09:46.666 A:middle
我们希望看到

00:09:46.666 --> 00:09:48.556 A:middle
列表自动过滤

00:09:48.556 --> 00:09:49.606 A:middle
只显示匹配项

00:09:49.676 --> 00:09:51.426 A:middle
我们会看到如果我开始输入

00:09:51.426 --> 00:09:54.176 A:middle
我们做到了这一点

00:09:54.506 --> 00:09:55.456 A:middle
这一切都是

00:09:55.456 --> 00:09:57.456 A:middle
自动发生的

00:09:57.546 --> 00:09:58.356 A:middle
还伴有优秀的动画

00:09:59.656 --> 00:10:01.626 A:middle
这都是非常容易做到的

00:10:01.626 --> 00:10:03.896 A:middle
用非常少的代码

00:10:03.976 --> 00:10:05.336 A:middle
使用 DiffableDataSource 实现

00:10:05.336 --> 00:10:06.696 A:middle
我们来看看它是如何工作的

00:10:08.336 --> 00:10:09.976 A:middle
对于本例

00:10:09.976 --> 00:10:11.746 A:middle
查看 MountainsViewController 源文件

00:10:13.486 --> 00:10:15.386 A:middle
所有的行动都是从

00:10:15.386 --> 00:10:16.586 A:middle
用户在搜索栏中进行输入

00:10:16.586 --> 00:10:17.136 A:middle
开始的对吗

00:10:17.936 --> 00:10:19.256 A:middle
这里有一个回调

00:10:19.256 --> 00:10:20.876 A:middle
searchBarTextDidChange

00:10:20.876 --> 00:10:22.826 A:middle
它将被发送至控制器

00:10:24.316 --> 00:10:25.796 A:middle
从那里我们调用

00:10:25.836 --> 00:10:27.556 A:middle
我们自己的 performQuery 函数

00:10:27.736 --> 00:10:29.466 A:middle
传入的参数是

00:10:29.466 --> 00:10:30.926 A:middle
我们从那个搜索栏得到搜索文本

00:10:31.306 --> 00:10:33.096 A:middle
performQuery 本身

00:10:33.096 --> 00:10:34.116 A:middle
非常简单

00:10:34.676 --> 00:10:37.236 A:middle
我们所做的就是调用

00:10:37.236 --> 00:10:38.106 A:middle
我们的 mountainsController

00:10:38.106 --> 00:10:39.566 A:middle
这是我们模型层的对象

00:10:40.186 --> 00:10:42.106 A:middle
我们要它提供一个经过过滤的

00:10:42.106 --> 00:10:44.266 A:middle
排序的山峰列表

00:10:44.266 --> 00:10:45.636 A:middle
与我们的搜索词相匹配

00:10:46.356 --> 00:10:48.126 A:middle
我们现在有了这个山峰列表

00:10:49.616 --> 00:10:51.046 A:middle
我们经历了我提到的

00:10:51.046 --> 00:10:52.156 A:middle
三个步骤

00:10:52.196 --> 00:10:55.536 A:middle
我们创建了一个新的
NSDiffableDataSourceSnapshot

00:10:56.476 --> 00:10:58.566 A:middme
这个快照最初是空的

00:10:58.556 --> 00:10:59.456 A:middle
里面什么也没有

00:10:59.456 --> 00:11:01.136 A:middle
所以由我们来填充

00:11:01.136 --> 00:11:03.466 A:middle
我们想要的 Section 和 Item

00:11:04.296 --> 00:11:06.646 A:middle
在本例中 我们只显示一个 Section

00:11:07.216 --> 00:11:08.436 A:middle
我们只需添加一个 Section

00:11:08.716 --> 00:11:09.896 A:middle
我们可以称它为

00:11:09.896 --> 00:11:11.976 A:middle
主 Section

00:11:14.336 --> 00:11:17.356 A:middle
接下来我们添加

00:11:17.356 --> 00:11:18.796 A:middle
在此次更新中显示

00:11:18.796 --> 00:11:20.386 A:middle
Item 标识符

00:11:21.156 --> 00:11:22.376 A:middle
从形式上来讲

00:11:22.376 --> 00:11:23.446 A:middle
我们通常在这里传递

00:11:23.446 --> 00:11:24.386 A:middle
一个标识符数组

00:11:24.896 --> 00:11:27.126 A:middle
但是在 Swift 中你也可以

00:11:27.126 --> 00:11:29.196 A:middle
通过使用你自己原生的类型

00:11:29.366 --> 00:11:31.646 A:middle
使传参变得更加优雅

00:11:31.646 --> 00:11:32.916 A:middle
如果你有一个原生类型

00:11:32.916 --> 00:11:34.456 A:middle
它甚至可以是一个值类型

00:11:34.456 --> 00:11:36.486 A:middle
比如一个结构体或一个枚举

00:11:36.796 --> 00:11:38.396 A:middle
如果该类型是可哈希的

00:11:38.506 --> 00:11:39.756 A:middle
那你就可以根据

00:11:39.756 --> 00:11:41.076 A:middle
你所做的 Swift 语义传递

00:11:41.076 --> 00:11:42.716 A:middle
你的原生对象

00:11:42.716 --> 00:11:43.796 A:middle
我们过一会儿会

00:11:43.796 --> 00:11:46.166 A:middle
了解它是如何工作的

00:11:46.526 --> 00:11:48.286 A:middle
我们现在已经构建了快照

00:11:48.286 --> 00:11:49.036 A:middle
可以进行下一步了

00:11:49.796 --> 00:11:51.876 A:middle
我们所要做的就是调用

00:11:51.876 --> 00:11:53.126 A:middle
我们的 DiffableDataSource

00:11:53.126 --> 00:11:54.766 A:middle
让它应用快照

00:11:55.196 --> 00:11:56.196 A:middle
将差异展现出来

00:11:56.196 --> 00:11:57.776 A:middle
DiffableDataSource 运行时

00:11:57.776 --> 00:11:59.606 A:middle
会自动找出

00:11:59.606 --> 00:12:00.906 A:middle
上一次更新和

00:12:00.906 --> 00:12:01.866 A:middle
下一次更新之间的变化

00:12:02.276 --> 00:12:03.496 A:middle
请注意这里根本没有代码

00:12:03.496 --> 00:12:05.296 A:middle
我们不需要停下来并找出

00:12:05.296 --> 00:12:07.186 A:middle
上一个更新周期中

00:12:07.186 --> 00:12:08.286 A:middle
在用户输入当前字符之前

00:12:08.286 --> 00:12:12.206 A:middle
显示的内容是什么

00:12:12.206 --> 00:12:13.176 A:middle
一切都是自动处理的

00:12:13.176 --> 00:12:14.226 A:middle
没什么好担心的

00:12:14.226 --> 00:12:16.976 A:middle
我们不是在处理 IndexPaths

00:12:16.976 --> 00:12:18.046 A:middle
它们脆弱又短暂对吧

00:12:18.086 --> 00:12:19.426 A:middle
它们指的是

00:12:19.616 --> 00:12:20.856 A:middle
某个特定的更新

00:12:20.856 --> 00:12:21.536 A:middle
在不同的更新中

00:12:21.536 --> 00:12:22.306 A:middle
有着不同的含义

00:12:22.716 --> 00:12:24.166 A:middle
我们处理的标识符

00:12:24.166 --> 00:12:26.446 A:middle
是鲁棒和持久的

00:12:26.566 --> 00:12:29.236 A:middle
所以这里的操作 非常简单

00:12:30.636 --> 00:12:31.686 A:middle
在我们离开这段代码之前

00:12:31.686 --> 00:12:32.726 A:middle
我希望你注意到一些

00:12:32.726 --> 00:12:34.376 A:middle
关于 Snapshot 的事情

00:12:34.376 --> 00:12:35.326 A:middle
你可能已经注意到了

00:12:35.326 --> 00:12:37.816 A:middle
它是 Swift 中的一个泛型类

00:12:37.816 --> 00:12:39.916 A:middle
所以它的参数是

00:12:39.916 --> 00:12:42.126 A:middle
我们决定使用的

00:12:42.126 --> 00:12:43.846 A:middle
Section 标识符类型和

00:12:43.846 --> 00:12:44.696 A:middle
Item 标识符类型

00:12:45.246 --> 00:12:48.816 A:middle
首先看 Section 标识符类型这比较琐碎

00:12:48.816 --> 00:12:50.146 A:middle
在一般情况下

00:12:50.576 --> 00:12:51.906 A:middle
这是一种非常方便的技术

00:12:51.906 --> 00:12:52.906 A:middle
你只需要一个 Section

00:12:52.906 --> 00:12:54.936 A:middle
对吧 你可以为此声明

00:12:54.936 --> 00:12:55.606 A:middle
一个枚举类型

00:12:56.166 --> 00:12:57.436 A:middle
Swift 中枚举类型的一个好处是

00:12:57.436 --> 00:12:59.796 A:middle
它们是 自动可哈希的

00:12:59.796 --> 00:13:01.536 A:middle
为它们添加了可哈希性

00:13:01.976 --> 00:13:03.246 A:middle
我们这里有一个枚举

00:13:03.246 --> 00:13:05.976 A:middle
和一个 case 语句 没有其他的了

00:13:09.046 --> 00:13:10.076 A:middle
对于我们的 Mountain 类型

00:13:10.076 --> 00:13:13.566 A:middle
我们将查看 MountainsController

00:13:13.566 --> 00:13:14.276 A:middle
也就是模型层

00:13:14.866 --> 00:13:16.586 A:middle
我们在这把 Mountain 

00:13:16.586 --> 00:13:18.746 A:middle
声明为一个 Swift 结构

00:13:19.296 --> 00:13:21.066 A:middle
我们声明结构类型

00:13:21.066 --> 00:13:23.076 A:middle
为 Hashable

00:13:23.076 --> 00:13:24.186 A:middle
这样我们可以将它与 

00:13:24.186 --> 00:13:25.586 A:middle
DiffableDataSource 一起使用

00:13:25.586 --> 00:13:26.966 A:middle
而不是传递标识符

00:13:27.356 --> 00:13:28.816 A:middle
重要的要求是

00:13:28.816 --> 00:13:31.186 A:middle
每一座山都要用

00:13:31.246 --> 00:13:33.516 A:middle
它的哈希值进行唯一识别

00:13:34.086 --> 00:13:36.866 A:middle
所以我们通过给每座山

00:13:36.866 --> 00:13:38.726 A:middle
自动生成唯一标识符

00:13:38.726 --> 00:13:40.786 A:middle
来实现这一点

00:13:43.016 --> 00:13:48.606 A:middle
在这里我们遵循了承诺的可哈希性

00:13:48.606 --> 00:13:50.916 A:middle
我们只用那个标识符来

00:13:50.916 --> 00:13:51.666 A:middle
提供哈希值

00:13:52.246 --> 00:13:53.156 A:middle
这样我们就可以

00:13:53.156 --> 00:13:54.496 A:middle
找到每一座山

00:13:54.636 --> 00:13:56.206 A:middle
虽然每座山是值类型

00:13:56.206 --> 00:13:58.096 A:middle
只是通过复制来传递

00:13:58.356 --> 00:13:59.746 A:middle
没有可供引用的指针

00:14:01.766 --> 00:14:02.886 A:middle
特定于该标识符的哈希值

00:14:02.886 --> 00:14:04.716 A:middle
是它们足够独特

00:14:04.716 --> 00:14:06.056 A:middle
以便 DiffableDataSource 

00:14:06.056 --> 00:14:07.376 A:middle
可以追踪它们 从一个更新

00:14:07.376 --> 00:14:08.296 A:middle
到下一个更新

00:14:08.506 --> 00:14:09.926 A:middle
作为可哈希性的一部分

00:14:09.926 --> 00:14:11.486 A:middle
我们也在这里进行了

00:14:11.486 --> 00:14:12.466 A:middle
相等测试

00:14:12.946 --> 00:14:14.826 A:middle
因此我们已经了解如何

00:14:14.826 --> 00:14:16.216 A:middle
对 DiffableDataSource 发布更改

00:14:19.146 --> 00:14:20.166 A:middle
让我们回到

00:14:20.166 --> 00:14:21.176 A:middle
MountainsViewController

00:14:23.936 --> 00:14:25.636 A:middle
非常方便的是

00:14:25.636 --> 00:14:26.766 A:middle
我们创建了一个名为

00:14:26.906 --> 00:14:28.066 A:middle
ConfigureDataSource 的函数

00:14:28.066 --> 00:14:29.376 A:middle
我们在其中配置数据源

00:14:29.726 --> 00:14:30.806 A:middle
代码量

00:14:30.806 --> 00:14:31.516 A:middle
真的很少

00:14:33.106 --> 00:14:34.146 A:middle
在本例中

00:14:34.146 --> 00:14:35.666 A:middle
我们使用的是 UICollectionView

00:14:35.666 --> 00:14:36.666 A:middle
所以我们实例化一个

00:14:36.666 --> 00:14:38.966 A:middle
UICollectionViewDiffableDataSource

00:14:39.446 --> 00:14:41.886 A:middle
我们传递的参数是

00:14:41.886 --> 00:14:43.696 A:middle
Section 和 Item 类型

00:14:44.656 --> 00:14:45.866 A:middle
把一个指向

00:14:45.866 --> 00:14:46.886 A:middle
我们想要使用的 CollectionView 的指针

00:14:46.886 --> 00:14:47.286 A:middle
也传递过去

00:14:47.956 --> 00:14:49.236 A:middle
DiffableDataSource 会接受

00:14:49.236 --> 00:14:50.546 A:middle
那个指针并自动

00:14:50.546 --> 00:14:52.586 A:middle
接通自身作为

00:14:52.586 --> 00:14:53.746 A:middle
CollectionView 的数据源

00:14:53.746 --> 00:14:54.906 A:middle
我们不需要继续操作

00:14:57.406 --> 00:14:59.226 A:middle
最后我们有这个

00:14:59.226 --> 00:15:00.586 A:middle
尾随闭包参数

00:15:00.586 --> 00:15:02.226 A:middle
用于 DiffableDataSource 的初始化

00:15:02.746 --> 00:15:04.366 A:middle
所有这些

00:15:04.366 --> 00:15:06.256 A:middle
都是你通常需要写的代码

00:15:06.256 --> 00:15:07.726 A:middle
如果你从头开始

00:15:07.726 --> 00:15:09.396 A:middle
实现你自己的数据源

00:15:09.396 --> 00:15:11.766 A:middle
你将要实现 cellForItem(at: IndexPath) 方法

00:15:12.156 --> 00:15:13.896 A:middle
这是数据源回调方法

00:15:13.896 --> 00:15:15.426 A:middle
和我们在此处做的工作

00:15:15.426 --> 00:15:16.806 A:middle
一模一样

00:15:17.236 --> 00:15:18.946 A:middle
我们回调至

00:15:18.946 --> 00:15:22.226 A:middle
CollectionView 并请求它

00:15:22.226 --> 00:15:24.246 A:middle
提供适当类型的 Cell

00:15:24.246 --> 00:15:25.766 A:middle
显示我们想要的数据

00:15:25.766 --> 00:15:28.296 A:middle
我们用想要显示的内容

00:15:28.296 --> 00:15:29.276 A:middle
填充该 Cell

00:15:29.276 --> 00:15:30.386 A:middle
然后将其返回

00:15:30.526 --> 00:15:31.786 A:middle
所以这只是使用了

00:15:31.786 --> 00:15:34.116 A:middle
cellForItem(at: IndexPath) 代码

00:15:34.256 --> 00:15:35.526 A:middle
并方便地将其移植到

00:15:35.526 --> 00:15:36.906 A:middle
一个很好的闭包封装中

00:15:36.906 --> 00:15:38.646 A:middle
是我们在实例化数据源时

00:15:38.646 --> 00:15:40.046 A:middle
传递的

00:15:40.726 --> 00:15:41.766 A:middle
有一个很好很方便的

00:15:41.766 --> 00:15:44.346 A:middle
不同在于 除了提供我们

00:15:44.346 --> 00:15:46.186 A:middle
要求的 Item

00:15:46.186 --> 00:15:47.866 A:middle
IndexPath 之外

00:15:47.866 --> 00:15:49.846 A:middle
也提供了其标识符

00:15:49.846 --> 00:15:52.486 A:middle
在本例中 

00:15:52.546 --> 00:15:54.376 A:middle
是原生的 Swift 值类型

00:15:54.536 --> 00:15:55.686 A:middle
这对应于我们想要

00:15:55.686 --> 00:15:56.566 A:middle
显示的特定 Item

00:15:57.506 --> 00:15:59.636 A:middle
所以我们把 mountain 作为参数传递

00:15:59.636 --> 00:16:00.746 A:middle
没有更多的工作要做

00:16:00.746 --> 00:16:02.086 A:middle
我们不必使用

00:16:02.086 --> 00:16:04.326 A:middle
IndexPath 去查找

00:16:04.326 --> 00:16:07.146 A:middle
它属于哪个模型层对象

00:16:07.456 --> 00:16:09.436 A:middle
我们只是把 mountain 作为参数传递

00:16:09.436 --> 00:16:10.756 A:middle
我们获取到山的名称

00:16:10.756 --> 00:16:13.096 A:middle
并将其设置为该 Cell 的

00:16:13.096 --> 00:16:14.676 A:middle
标签文本

00:16:15.676 --> 00:16:17.096 A:middle
这就是全部内容

00:16:17.416 --> 00:16:18.916 A:middle
关于如何设置

00:16:18.916 --> 00:16:20.196 A:middle
和配置 CollectionView

00:16:20.196 --> 00:16:22.636 A:middle
的所有其他内容都与之前相同

00:16:22.906 --> 00:16:24.666 A:middle
在这个示例代码中

00:16:24.666 --> 00:16:25.826 A:middle
没有隐藏任何

00:16:25.826 --> 00:16:26.556 A:middle
performBatchUpdates() 代码

00:16:26.966 --> 00:16:27.916 A:middle
这就是所有内容

00:16:27.916 --> 00:16:29.976 A:middle
非常简单 来看看另一个例子

00:16:34.066 --> 00:16:36.536 A:middle
这里我们有一个来自 iOS

00:16:36.536 --> 00:16:39.526 A:middle
熟悉的 Wi-Fi 设置 UI 模型

00:16:39.526 --> 00:16:41.266 A:middle
这个只比上一个

00:16:41.266 --> 00:16:42.626 A:middle
稍微复杂一点

00:16:42.626 --> 00:16:43.936 A:middle
因为我们在这里

00:16:43.936 --> 00:16:46.006 A:middle
有两个不同的部分

00:16:46.396 --> 00:16:47.906 A:middle
我们在顶部有个

00:16:47.906 --> 00:16:49.466 A:middle
叫 Config 的部分

00:16:49.466 --> 00:16:51.686 A:middle
其中有 Wi-Fi 启用/禁用开关

00:16:52.056 --> 00:16:53.966 A:middle
并显示我们

00:16:53.966 --> 00:16:55.646 A:middle
连接的当前网络

00:16:55.816 --> 00:16:58.136 A:middle
在这下面我们有另一个动态更新的部分

00:16:58.136 --> 00:17:00.386 A:middle
向我们展示了

00:17:00.386 --> 00:17:02.446 A:middle
检测网络的列表

00:17:02.476 --> 00:17:03.986 A:middle
供我们连接

00:17:05.205 --> 00:17:06.386 A:middle
另外需要注意的是

00:17:06.386 --> 00:17:07.626 A:middle
如果我们点击 Wi-Fi

00:17:07.626 --> 00:17:10.286 A:middle
禁用开关

00:17:10.286 --> 00:17:11.646 A:middle
或重新打开

00:17:12.556 --> 00:17:15.546 A:middle
我们会看到一个流畅的 动画的

00:17:15.546 --> 00:17:16.136 A:middle
UI 折叠或展开

00:17:16.136 --> 00:17:17.846 A:middle
所有这些都可以使用

00:17:17.846 --> 00:17:18.826 A:middle
DiffableDataSource 轻松实现

00:17:18.965 --> 00:17:20.746 A:middle
让我们来看看这个

00:17:20.746 --> 00:17:22.356 A:middle
动态 UI 是如何实现的

00:17:23.626 --> 00:17:25.906 A:middle
转到我们的 WiFiSettingsViewController

00:17:28.036 --> 00:17:31.186 A:middle
我们将查看 updateUI 函数

00:17:31.186 --> 00:17:32.586 A:middle
我们将该函数命名为 updateUI

00:17:32.586 --> 00:17:34.046 A:middle
我们已经注意到确保

00:17:34.046 --> 00:17:35.286 A:middle
在我们需要显示的内容

00:17:35.626 --> 00:17:38.486 A:middle
发生变化时它都会被调用

00:17:38.936 --> 00:17:39.896 A:middle
大多数时候

00:17:39.896 --> 00:17:41.436 A:middle
可能是因为我们检测到的

00:17:41.436 --> 00:17:43.186 A:middle
当前可用的网络集合发生了变化

00:17:43.186 --> 00:17:44.406 A:middle
但也可能是因为

00:17:44.406 --> 00:17:46.056 A:middle
用户切换了 Wi-Fi

00:17:46.056 --> 00:17:47.096 A:middle
启用/禁用 按钮

00:17:47.366 --> 00:17:48.566 A:middle
出现任何改变我们 UI 的东西

00:17:48.566 --> 00:17:50.386 A:middle
我们都确保会调用它

00:17:51.786 --> 00:17:53.456 A:middle
所以我们在这里仍然有

00:17:53.456 --> 00:17:54.806 A:middle
相同的三步过程

00:17:55.316 --> 00:17:57.266 A:middle
获得我们想要显示的数据后

00:17:57.266 --> 00:17:58.776 A:middle
我们从获取

00:17:58.776 --> 00:18:00.106 A:middle
配置项目开始

00:18:00.106 --> 00:18:01.606 A:middle
因为我们通常需要这些

00:18:02.206 --> 00:18:04.146 A:middle
我们继续创建一个快照

00:18:04.736 --> 00:18:06.726 A:middle
这个快照最初也是空的

00:18:06.726 --> 00:18:07.566 A:middle
那就让我们用我们想要

00:18:07.566 --> 00:18:07.976 A:middle
展示的东西填充它

00:18:10.776 --> 00:18:12.366 A:middle
我们添加的第一个 Section

00:18:12.366 --> 00:18:14.016 A:middle
出现在顶端的配置部分

00:18:15.046 --> 00:18:16.386 A:middle
我们添加它的 Item

00:18:16.386 --> 00:18:18.376 A:middle
所以会有一个或两个 Item 是取决于

00:18:18.376 --> 00:18:19.326 A:middle
Wi-Fi 是否启用

00:18:21.476 --> 00:18:23.076 A:middle
如果现在启用了 Wi-Fi 

00:18:23.076 --> 00:18:25.026 A:middle
我们也会想和后端

00:18:25.026 --> 00:18:25.716 A:middle
和模型层交流

00:18:25.716 --> 00:18:28.836 A:middle
索要可用网络的列表

00:18:29.396 --> 00:18:31.806 A:middle
我们将把这个列表

00:18:31.806 --> 00:18:34.226 A:middle
包装成一些我们

00:18:34.226 --> 00:18:35.946 A:middle
在稍后会看到的项目类型中

00:18:38.256 --> 00:18:39.916 A:middle
我们为该网络列表

00:18:39.916 --> 00:18:40.886 A:middle
添加一个 Section

00:18:41.316 --> 00:18:43.326 A:middle
然后我们要添加

00:18:43.326 --> 00:18:44.876 A:middle
那个 Section 中的 Item

00:18:45.396 --> 00:18:46.246 A:middle
请注意

00:18:46.246 --> 00:18:47.296 A:middle
我们在这里有

00:18:47.396 --> 00:18:49.266 A:middle
两个不同的 Section

00:18:49.266 --> 00:18:51.983 A:middle
我们可以明确哪个 Section 添加了 Item

00:18:55.056 --> 00:18:56.316 A:middle
就是这样 我们准备好了

00:18:56.316 --> 00:18:58.086 A:middle
我们已经描述了所有我们想展示的内容

00:18:58.336 --> 00:18:59.266 A:middle
所以我们只需让

00:18:59.266 --> 00:19:00.756 A:middle
DiffableDataSource 

00:19:00.756 --> 00:19:02.636 A:middle
应用这些更改

00:19:02.666 --> 00:19:03.796 A:middle
可以以动画的形式展现差异

00:19:04.236 --> 00:19:05.596 A:middle
可能有时候

00:19:05.596 --> 00:19:06.816 A:middle
你想要选择

00:19:06.816 --> 00:19:07.386 A:middle
不用动画展现差异

00:19:07.386 --> 00:19:08.626 A:middle
例如

00:19:08.626 --> 00:19:09.776 A:middle
当你第一次打开 UI

00:19:09.776 --> 00:19:11.306 A:middle
并显示初始数据集时

00:19:11.626 --> 00:19:13.116 A:middle
你可能想 也可能不想要动画

00:19:13.396 --> 00:19:15.306 A:middle
通常你希望它是即时的

00:19:15.536 --> 00:19:16.506 A:middle
因此你可以将

00:19:16.636 --> 00:19:17.516 A:middle
animatingDifferences 设为 false

00:19:17.516 --> 00:19:17.976 A:middle
就像我们在本例中做的一样

00:19:22.436 --> 00:19:23.826 A:middle
看我们这里使用的类型

00:19:23.826 --> 00:19:24.596 A:middle
我们将一个 Section 类型

00:19:24.596 --> 00:19:26.166 A:middle
和一个 Item 类型

00:19:26.166 --> 00:19:27.466 A:middle
作为参数提供给

00:19:27.466 --> 00:19:28.426 A:middle
DiffableDataSource

00:19:29.226 --> 00:19:30.606 A:middle
回到顶部我们可以看到

00:19:30.606 --> 00:19:31.646 A:middle
正如我们想象的一样

00:19:31.646 --> 00:19:33.066 A:middle
Section 仍然是枚举类型

00:19:33.066 --> 00:19:34.286 A:middle
我们在这里需要

00:19:34.286 --> 00:19:35.666 A:middle
两个不同的 Section

00:19:37.106 --> 00:19:39.586 A:middle
再次 作为枚举类型的 Section

00:19:39.586 --> 00:19:40.836 A:middle
在 Swift 中是自动可哈希的

00:19:40.836 --> 00:19:41.976 A:middle
所以我们很高兴

00:19:44.206 --> 00:19:45.796 A:middle
然后我们在这里声明了一个 Item 类型

00:19:45.866 --> 00:19:47.306 A:middle
这是一种结构体类型

00:19:47.306 --> 00:19:47.966 A:middle
与 Mountains 一样

00:19:48.296 --> 00:19:50.046 A:middle
我们声明它是可哈希的

00:19:50.756 --> 00:19:52.226 A:middle
声明这个类型的原因是

00:19:52.226 --> 00:19:53.536 A:middle
当我们查看列表时

00:19:53.536 --> 00:19:55.416 A:middle
它主要包含列表是

00:19:55.416 --> 00:19:57.736 A:middle
其中的网络项目

00:19:57.736 --> 00:19:58.766 A:middle
但除此之外

00:19:58.766 --> 00:20:00.406 A:middle
上面还有个不同的项目

00:20:00.406 --> 00:20:02.136 A:middle
就是 Wi-Fi 启用/禁用开关

00:20:02.136 --> 00:20:03.236 A:middle
那不是网络项目

00:20:03.236 --> 00:20:04.826 A:middle
所以我们这里有一个异构列表

00:20:05.126 --> 00:20:06.266 A:middle
我们所做的就是

00:20:06.266 --> 00:20:08.336 A:middle
用这种通用包装器类型

00:20:08.336 --> 00:20:09.586 A:middle
封装每个 Item

00:20:10.446 --> 00:20:11.946 A:middle
但是由于这个包装器类型

00:20:11.946 --> 00:20:13.556 A:middle
是我们要传递给 DiffableDataSource

00:20:13.556 --> 00:20:14.666 A:middle
的项目类型

00:20:14.666 --> 00:20:16.236 A:middle
我们必须注意确保

00:20:16.236 --> 00:20:17.696 A:middle
它是可哈希的并且

00:20:17.696 --> 00:20:18.686 A:middle
项目是由哈希值

00:20:18.686 --> 00:20:20.186 A:middle
唯一标识的

00:20:21.026 --> 00:20:23.796 A:middle
所以对于网络项目

00:20:23.796 --> 00:20:25.866 A:middle
我们可以从 netowrk Item

00:20:25.866 --> 00:20:26.816 A:middle
得到唯一标识符

00:20:26.816 --> 00:20:29.306 A:middle
移植到 Network Item 中

00:20:30.786 --> 00:20:32.146 A:middle
对于配置项目

00:20:32.146 --> 00:20:33.606 A:middle
我们只是动态

00:20:33.606 --> 00:20:34.426 A:middle
生成 UUID

00:20:36.866 --> 00:20:38.026 A:middle
再看看我们的

00:20:38.026 --> 00:20:40.296 A:middle
哈希函数

00:20:40.366 --> 00:20:42.176 A:middle
它只是基于唯一标识符

00:20:42.176 --> 00:20:43.406 A:middle
计算哈希值

00:20:43.406 --> 00:20:44.616 A:middle
而这就是

00:20:44.616 --> 00:20:45.916 A:middle
DiffableDataSource 能够

00:20:45.916 --> 00:20:47.516 A:middle
识别从一个更新周期

00:20:47.516 --> 00:20:50.176 A:middle
到下一个更新周期时相同的项目所需的全部内容

00:20:51.616 --> 00:20:52.816 A:middle
让我们看看

00:20:52.816 --> 00:20:53.696 A:middle
配置数据源的位置

00:20:55.616 --> 00:20:57.486 A:middle
这与之前非常相似

00:20:57.486 --> 00:20:59.256 A:middle
除了这次

00:20:59.256 --> 00:21:00.886 A:middle
我们用的是 UITableView

00:21:01.306 --> 00:21:02.696 A:middle
从创建和提交 

00:21:02.766 --> 00:21:04.886 A:middle
快照的角度来看

00:21:04.886 --> 00:21:06.336 A:middle
这并不重要

00:21:06.336 --> 00:21:07.396 A:middle 
API 非常相似

00:21:07.396 --> 00:21:08.986 A:middle
但对于设置

00:21:08.986 --> 00:21:10.236 A:middle
我们必须实例化正确类型的

00:21:10.266 --> 00:21:11.186 A:middle
DiffableDataSource

00:21:11.286 --> 00:21:13.496 A:middle
我们有一个 UITableViewDiffableDataSource

00:21:14.406 --> 00:21:16.066 A:middle
我们用将要使用的

00:21:16.066 --> 00:21:18.506 A:middle
Section 和 Item 类型作为参数

00:21:18.506 --> 00:21:19.486 A:middle
然后传递一个

00:21:19.486 --> 00:21:20.996 A:middle
指向 TableView 的指针

00:21:21.066 --> 00:21:24.056 A:middle
它将进行连接

00:21:24.056 --> 00:21:26.196 A:middle
把 DiffableDataSource 作为数据源

00:21:27.646 --> 00:21:29.326 A:middle
最后我们得到了

00:21:29.356 --> 00:21:30.526 A:middle
提供 Item 的尾随闭包

00:21:30.696 --> 00:21:32.926 A:middle
乍一看起来

00:21:32.926 --> 00:21:35.126 A:middle
这更复杂

00:21:35.126 --> 00:21:36.386 A:middle
但实际上只是因为

00:21:36.386 --> 00:21:37.896 A:middle
我们有各种不同类型的项目

00:21:37.896 --> 00:21:39.606 A:middle
我们要显示的项目是异质的

00:21:39.606 --> 00:21:41.056 A:middle
基本上有三种类型的项目

00:21:41.396 --> 00:21:42.646 A:middle
我们以不同的方式处理它们

00:21:43.696 --> 00:21:44.626 A:middle
但是这段代码中

00:21:44.626 --> 00:21:45.036 A:middle
即使我们没有使用

00:21:45.036 --> 00:21:46.106 A:middle
DiffableDataSource 

00:21:46.106 --> 00:21:46.366 A:middle
它也会存在

00:21:46.366 --> 00:21:47.886 A:middle
它会在 cellForItem(at: IndexPath)

00:21:47.966 --> 00:21:49.486 A:middle
方法中出现

00:21:50.166 --> 00:21:52.846 A:middle
设置这个 UI 很简单

00:21:52.846 --> 00:21:54.346 A:middle
甚至配置

00:21:54.346 --> 00:21:55.976 A:middle
DiffableDataSource 也不是那么难

00:21:57.416 --> 00:22:00.166 A:middle
最后一个例子

00:22:00.166 --> 00:22:01.226 A:middle
可能是最有趣的

00:22:01.556 --> 00:22:02.566 A:middle
这里我们有一个

00:22:02.566 --> 00:22:05.036 A:middle
UICollectionView 

00:22:05.036 --> 00:22:06.286 A:middle
它显示的项目

00:22:06.286 --> 00:22:08.276 A:middle
表示为色卡

00:22:08.746 --> 00:22:09.786 A:middle
它们一开始是

00:22:09.786 --> 00:22:12.036 A:middle
随机混色的

00:22:12.626 --> 00:22:14.916 A:middle
如果我点击 Sort 按钮

00:22:14.916 --> 00:22:16.666 A:middle
我们可以看着它们被迭代排序

00:22:16.806 --> 00:22:18.426 A:middle
为频谱顺序

00:22:19.316 --> 00:22:20.976 A:middle
所以除了观看时令人着迷

00:22:20.976 --> 00:22:21.976 A:middle
和有趣之外

00:22:21.976 --> 00:22:22.043 A:middle
[笑声]

00:22:22.543 --> 00:22:25.576 A:middle
[掌声]

00:22:26.076 --> 00:22:27.516 A:middle
这要归功于 Steve

00:22:28.666 --> 00:22:29.806 A:middle
除了观看时非常迷人

00:22:29.806 --> 00:22:31.466 A:middle
和有趣之外

00:22:31.726 --> 00:22:33.256 A:middle
这个例子与我们在其他例子中

00:22:33.256 --> 00:22:34.776 A:middle
构建和提交

00:22:34.776 --> 00:22:36.706 A:middle
更新的方式

00:22:36.706 --> 00:22:38.346 A:middle
略有不同

00:22:39.036 --> 00:22:41.786 A:middle
所以如果我们想

00:22:41.786 --> 00:22:42.976 A:middle
如果我们的目标只是

00:22:42.976 --> 00:22:44.396 A:middle
把所有的东西排序然后

00:22:44.396 --> 00:22:46.116 A:middle
跳到最终状态 我们可以这么做对吧

00:22:46.386 --> 00:22:48.296 A:middle
这个演示程序的设置

00:22:48.296 --> 00:22:51.006 A:middle
使我们能够在

00:22:51.046 --> 00:22:52.296 A:middle
每个中间阶段观察

00:22:52.326 --> 00:22:53.536 A:middle
迭代排序过程

00:22:54.136 --> 00:22:55.586 A:middle
为了做到这一点

00:22:55.586 --> 00:22:57.146 A:middle
我们的排序功能

00:22:57.146 --> 00:22:58.176 A:middle
会经过每个阶段

00:22:58.176 --> 00:22:59.646 A:middle
并一步步给我们提供结果

00:22:59.646 --> 00:23:01.366 A:middle
它为我们提供了

00:23:01.366 --> 00:23:03.356 A:middle
每个连续的新状态 

00:23:03.356 --> 00:23:05.286 A:middle
每次发生更新时

00:23:05.286 --> 00:23:06.536 A:middle
我们都会创建一个快照

00:23:06.536 --> 00:23:07.146 A:middle
并应用快照

00:23:07.146 --> 00:23:08.286 A:middle
才有了这个

00:23:08.336 --> 00:23:09.876 A:middle
美好有趣的动画视图

00:23:10.936 --> 00:23:11.786 A:middle
来看看我们是

00:23:11.786 --> 00:23:12.686 A:middle
如何实现它的

00:23:12.686 --> 00:23:12.976 A:middle
以及它的不同之处

00:23:16.996 --> 00:23:17.776 A:middle
我们将在这里查看

00:23:17.776 --> 00:23:19.496 A:middle
InsertionSortViewController

00:23:21.576 --> 00:23:23.126 A:middle
所有有趣的动作

00:23:23.126 --> 00:23:25.666 A:middle
都发生在 PerformSortStep 函数中

00:23:26.876 --> 00:23:29.006 A:middle
正如我所说

00:23:29.006 --> 00:23:30.266 A:middle
总是有三步循环

00:23:30.266 --> 00:23:31.356 A:middle
我们将获得一个快照

00:23:31.356 --> 00:23:33.506 A:middle
填充它然后应用它

00:23:33.626 --> 00:23:36.916 A:middle
但在这种情况下

00:23:36.916 --> 00:23:38.166 A:middle
我们没有创建

00:23:38.166 --> 00:23:39.736 A:middle
新的空快照

00:23:39.736 --> 00:23:41.016 A:middle
而是利用 DiffableDataSource 的功能

00:23:41.436 --> 00:23:43.986 A:middle
请求当前的快照

00:23:44.386 --> 00:23:46.046 A:middle
现在这个快照

00:23:46.076 --> 00:23:47.766 A:middle
预先填充了

00:23:47.856 --> 00:23:49.376 A:middle
当前 CollectionView

00:23:49.376 --> 00:23:50.596 A:middle
看到的 UICollectionView 中

00:23:50.596 --> 00:23:51.526 A:middle
显示的内容的真实情况

00:23:52.576 --> 00:23:54.626 A:middle
所以我们不必从头开始

00:23:54.776 --> 00:23:56.306 A:middle
我们可以从该状态

00:23:56.306 --> 00:23:58.096 A:middle
开始并计算下一个

00:23:58.556 --> 00:24:01.496 A:middle
中间状态在这里

00:24:01.496 --> 00:24:02.786 A:middle
我们填充 Snapshot

00:24:02.786 --> 00:24:05.156 A:middle
我们将看到熟悉的 appendItems 

00:24:05.156 --> 00:24:05.726 A:middle
函数被调用

00:24:05.726 --> 00:24:07.936 A:middle
但我们这里也有一个 deleteItems 函数

00:24:08.236 --> 00:24:09.576 A:middle
当你查看到

00:24:09.576 --> 00:24:10.986 A:middle
Snapshot API 时

00:24:10.986 --> 00:24:12.296 A:middle
你将会看到有各种各样的

00:24:12.296 --> 00:24:13.596 A:middle
功能可以在你

00:24:13.596 --> 00:24:14.756 A:middle
进行此类用法时

00:24:14.756 --> 00:24:15.786 A:middle
修改现有 Snapshot

00:24:15.786 --> 00:24:17.356 A:middle
你可以将 Item 从一个地方

00:24:17.356 --> 00:24:18.816 A:middle
移到另一个地方 以此类推

00:24:19.656 --> 00:24:20.656 A:middle
但在其他方面

00:24:20.706 --> 00:24:21.666 A:middle
和之前没有什么区别

00:24:21.666 --> 00:24:22.736 A:middle
我们只是想

00:24:22.736 --> 00:24:24.996 A:middle
设置我们想要显示的新的最终状态

00:24:24.996 --> 00:24:27.066 A:middle
我们使用的是标识符

00:24:27.066 --> 00:24:28.866 A:middle
而不是 IndexPath

00:24:28.866 --> 00:24:29.776 A:middle
这点很好

00:24:30.566 --> 00:24:33.386 A:middle
最后当我们完成时

00:24:33.386 --> 00:24:35.176 A:middle
我们所要做的就是

00:24:35.176 --> 00:24:36.706 A:middle
将 Snapshot 应用于

00:24:36.706 --> 00:24:37.726 A:middle
我们的 DiffableDataSource

00:24:38.556 --> 00:24:39.756 A:middle
我们得到了这个好看的

00:24:40.446 --> 00:24:42.976 A:middle
渐进式排序 非常好

00:24:43.041 --> 00:24:45.041 A:middle
[掌声]

00:24:45.066 --> 00:24:49.556 A:middle
谢谢 [掌声]

00:24:50.056 --> 00:24:51.286 A:middle
这就是我们设置

00:24:51.286 --> 00:24:52.226 A:middle
DiffableDataSource 的地方

00:24:52.226 --> 00:24:54.246 A:middle
这是用于 UICollectionView

00:24:54.606 --> 00:24:56.436 A:middle
我们指定我们使用的类型

00:24:56.436 --> 00:24:58.546 A:middle
CollectionView

00:24:58.546 --> 00:25:00.026 A:middle
我们还有提供 Item 的闭包

00:25:00.026 --> 00:25:01.596 A:middle
也很简单

00:25:01.596 --> 00:25:02.636 A:middle
因为我们只是

00:25:02.636 --> 00:25:03.716 A:middle
显示这些色卡

00:25:04.926 --> 00:25:06.196 A:middle
所以通过这三个例子

00:25:06.196 --> 00:25:08.866 A:middle
我们可以看出

00:25:08.866 --> 00:25:11.306 A:middle
创建这些

00:25:11.306 --> 00:25:13.046 A:middle
动态 UI 所需的代码很少很简单

00:25:13.536 --> 00:25:15.986 A:middle
这些 UI 对更改也有非常强的鲁棒性

00:25:15.986 --> 00:25:17.586 A:middle
我们可以进行更改

00:25:17.586 --> 00:25:18.826 A:middle
而不必担心在代码中

00:25:18.826 --> 00:25:20.086 A:middle
出现奇怪的异常

00:25:20.086 --> 00:25:21.096 A:middle
它们的鲁棒性都很强

00:25:21.096 --> 00:25:23.086 A:middle
已经融入到了 API

00:25:23.086 --> 00:25:23.496 A:middle
的工作原理中

00:25:24.166 --> 00:25:25.256 A:middle
我们现在确实触及了一些

00:25:25.286 --> 00:25:27.066 A:middle
有趣的细微差别

00:25:27.066 --> 00:25:29.096 A:middle
特别是对象

00:25:29.096 --> 00:25:30.826 A:middle
唯一标识的重要性

00:25:30.826 --> 00:25:31.946 A:middle
如果你使用的是 Swift 类型

00:25:31.946 --> 00:25:34.276 A:middle
这些 Swift 类型需要

00:25:34.276 --> 00:25:35.456 A:middle
符合的要求是

00:25:35.456 --> 00:25:36.646 A:middle
必须可哈希

00:25:37.096 --> 00:25:38.886 A:middle
让我们进入更深的研究

00:25:38.886 --> 00:25:40.286 A:middle
使这些问题成为

00:25:40.286 --> 00:25:40.836 A:middle
讨论的焦点

00:25:40.926 --> 00:25:41.966 A:middle
我现在要邀请我的同事

00:25:41.966 --> 00:25:43.656 A:middle
Steve 再次上台

00:25:43.656 --> 00:25:47.626 A:middle
谢谢 [掌声]

00:25:48.126 --> 00:25:50.356 A:middle
&gt;&gt; 通过所有的演示

00:25:50.436 --> 00:25:52.836 A:middle
我对这个 UI 是如何工作的

00:25:52.836 --> 00:25:53.816 A:middle
有了一些了解

00:25:54.156 --> 00:25:56.046 A:middle
我想对如何充分利用

00:25:56.046 --> 00:25:57.276 A:middle
这个 API 进行

00:25:57.276 --> 00:25:58.976 A:middle
更详细的讨论

00:26:04.346 --> 00:26:05.236 A:middle
正如我们在整个演示中看到的

00:26:05.236 --> 00:26:06.396 A:middle
基本上有三个步骤

00:26:06.666 --> 00:26:07.856 A:middle
你希望创建一个 Snapshot

00:26:08.906 --> 00:26:10.246 A:middle
根据你的需要来配置它

00:26:10.246 --> 00:26:13.096 A:middle
然后应用它 所以你总是希望调用

00:26:13.096 --> 00:26:13.806 A:middle
apply() 方法

00:26:14.256 --> 00:26:15.576 A:middle
而你不需要再

00:26:15.576 --> 00:26:16.766 A:middle
调用 performBatchUpdates 方法了

00:26:16.986 --> 00:26:17.646 A:middle
那已经过时了

00:26:17.946 --> 00:26:19.766 A:middle
也不需要 insertItems 都没有了

00:26:19.946 --> 00:26:21.266 A:middle
如果你调用这些函数

00:26:21.266 --> 00:26:22.066 A:middle
框架会抱怨

00:26:22.296 --> 00:26:23.846 A:middle
你知道

00:26:23.846 --> 00:26:28.306 A:middle
你会看到的创建快照

00:26:28.306 --> 00:26:29.706 A:middle
有两种方法

00:26:29.766 --> 00:26:31.276 A:middle
最常见的方法

00:26:31.276 --> 00:26:32.486 A:middle
是创建一个空的快照

00:26:32.706 --> 00:26:33.816 A:middle
在这里我们看到

00:26:33.816 --> 00:26:35.206 A:middle
我们用 Section 和 Item 类型

00:26:35.206 --> 00:26:36.996 A:middle
构建 Snapshot 

00:26:38.376 --> 00:26:39.736 A:middle
你也可以创建一个

00:26:39.736 --> 00:26:40.696 A:middle
就像我们在最后一个

00:26:40.696 --> 00:26:41.896 A:middle
演示中看到的那样

00:26:41.896 --> 00:26:42.766 A:middle
当某个动作发生

00:26:42.766 --> 00:26:44.196 A:middle
你需要修改

00:26:44.196 --> 00:26:45.326 A:middle
一个小地方时

00:26:45.326 --> 00:26:50.036 A:middle
这非常有用 现在当你创建它时

00:26:50.036 --> 00:26:50.936 A:middle
你将得到一份副本

00:26:51.056 --> 00:26:52.696 A:middle
所以你可以随意改变它

00:26:52.696 --> 00:26:54.066 A:middle
它不会影响

00:26:54.206 --> 00:26:55.976 A:middle
它的数据源

00:26:58.186 --> 00:26:59.456 A:middle
一旦你有了这个快照

00:26:59.456 --> 00:27:00.836 A:middle
如果你提出了一些问题

00:27:00.836 --> 00:27:01.856 A:middle
比如 Item 的数量是多少

00:27:01.856 --> 00:27:02.746 A:middle
Section 的数量是多少

00:27:02.846 --> 00:27:03.946 A:middle
识别标识符

00:27:04.286 --> 00:27:06.296 A:middle
你都可以做到 你可以在 SDK 中

00:27:06.296 --> 00:27:07.976 A:middle
查看到很多 API 这里只展示了一些

00:27:11.156 --> 00:27:12.296 A:middle
我保证过

00:27:12.296 --> 00:27:13.146 A:middle
不再有 IndexPath

00:27:13.146 --> 00:27:14.456 A:middle
因此当我们配置

00:27:14.456 --> 00:27:16.496 A:middle
这些快照时

00:27:16.496 --> 00:27:18.666 A:middle
你将永远不会通过显示的 API 

00:27:18.666 --> 00:27:20.516 A:middle
看到 IndexPath

00:27:21.066 --> 00:27:22.506 A:middle
所以到目前为止

00:27:22.506 --> 00:27:23.846 A:middle
我们已经看到了一种

00:27:23.846 --> 00:27:25.226 A:middle
非常常见的添加 Section 和 Item 的模式

00:27:25.226 --> 00:27:26.026 A:middle
诸如此类

00:27:26.026 --> 00:27:27.026 A:middle
但你也可以执行

00:27:27.026 --> 00:27:28.456 A:middle
插入 移动 和删除等操作

00:27:29.246 --> 00:27:31.226 A:middle
所有这些 API 都采用

00:27:31.456 --> 00:27:34.276 A:middle
其他相对标识符

00:27:34.276 --> 00:27:35.596 A:middle
来进行标示

00:27:35.596 --> 00:27:37.426 A:middle
如果我想插入 20 个

00:27:37.426 --> 00:27:38.746 A:middle
唯一的新标识符

00:27:39.686 --> 00:27:40.776 A:middle
在另一个标识符之前或之后插入

00:27:40.776 --> 00:27:42.736 A:middle
我们完成任务的

00:27:42.736 --> 00:27:43.336 A:middle
明确的 API

00:27:43.336 --> 00:27:44.256 A:middle
所以你会说

00:27:44.256 --> 00:27:45.566 A:middle
在这个标识符之前

00:27:45.566 --> 00:27:46.236 A:middle
插入这些标识符

00:27:47.056 --> 00:27:49.246 A:middle
现在如果你在特定 Section 中

00:27:49.246 --> 00:27:50.316 A:middle
没有任何内容

00:27:50.316 --> 00:27:51.536 A:middle
则没有标识符可以

00:27:51.536 --> 00:27:53.086 A:middle
锚定插入或移动

00:27:53.696 --> 00:27:55.356 A:middle
这就是我们提供 append API 的原因

00:27:55.356 --> 00:27:57.586 A:middle
你可以添加 Section 和 Item

00:27:58.836 --> 00:28:00.316 A:middle
现在在你熟悉的路径中

00:28:00.316 --> 00:28:01.106 A:middle
你有许多 Section

00:28:01.106 --> 00:28:03.386 A:middle
你在这里配置你的快照

00:28:03.386 --> 00:28:04.866 A:middle
你可以循环遍历 Section 数据

00:28:04.866 --> 00:28:05.996 A:middle
在这种情况下

00:28:05.996 --> 00:28:08.316 A:middle
可以在不指定 Section 的情况下添加 Item

00:28:08.316 --> 00:28:09.456 A:middle
Swift 中有一个

00:28:09.456 --> 00:28:11.426 A:middle
默认参数指定为 null

00:28:11.666 --> 00:28:13.246 A:middle
在这种情况下

00:28:13.246 --> 00:28:14.966 A:middle
是默认添加到最后一个已知的 Section

00:28:14.966 --> 00:28:15.976 A:middle
这使得代码非常美观

00:28:19.066 --> 00:28:21.246 A:middle
我们再来谈谈标识符

00:28:21.986 --> 00:28:22.896 A:middle
这些必须是唯一的

00:28:23.386 --> 00:28:25.726 A:middle
这不是一个大问题

00:28:25.726 --> 00:28:26.896 A:middle
因为大多数 App 

00:28:26.896 --> 00:28:28.616 A:middle
在其模型对象中都有

00:28:28.616 --> 00:28:29.426 A:middle
某种身份概念

00:28:29.916 --> 00:28:31.456 A:middle
因此使用该唯一标识符

00:28:31.456 --> 00:28:32.976 A:middle
是很自然的步骤

00:28:35.046 --> 00:28:35.936 A:middle
现在在 Swift 中

00:28:35.936 --> 00:28:37.096 A:middle
需要符合可哈希的要求

00:28:37.526 --> 00:28:38.976 A:middle
这很方便

00:28:38.976 --> 00:28:39.926 A:middle
Swift 中的很多东西

00:28:39.926 --> 00:28:40.536 A:middle
都会自动完成

00:28:40.536 --> 00:28:42.356 A:middle
我们在枚举类型中

00:28:42.356 --> 00:28:42.976 A:middle
看到了这种自动合成

00:28:45.646 --> 00:28:47.466 A:middle
我们有字符串

00:28:47.466 --> 00:28:48.956 A:middle
整数和 UUID

00:28:48.956 --> 00:28:50.456 A:middle
所有这些可用于

00:28:50.456 --> 00:28:51.286 A:middle
DiffableDataSource 的东西

00:28:52.746 --> 00:28:54.636 A:middle
现在我们看到了

00:28:54.636 --> 00:28:56.266 A:middle
你可以将一些模型数据

00:28:56.266 --> 00:28:57.396 A:middle
引入这些标识符

00:28:57.496 --> 00:28:58.626 A:middle
这真的很方便

00:28:58.996 --> 00:29:00.266 A:middle
现在你的身份需要来自

00:29:00.266 --> 00:29:01.506 A:middle
某个唯一的标识符

00:29:01.856 --> 00:29:03.816 A:middle
但你也可以引入其他属性

00:29:03.816 --> 00:29:05.536 A:middle
当我们看到山峰的名字时

00:29:05.536 --> 00:29:07.666 A:middle
也可以找到我们例子中的对象

00:29:08.536 --> 00:29:09.426 A:middle
这非常方便

00:29:09.426 --> 00:29:10.656 A:middle
因为当你配置你的 Cell 时

00:29:10.656 --> 00:29:11.866 A:middle
你所需要的所有东西

00:29:11.866 --> 00:29:12.966 A:middle
都在这里

00:29:12.966 --> 00:29:13.926 A:middle
别去别的地方找了

00:29:18.056 --> 00:29:19.816 A:middle
这是一个小的快速模版

00:29:19.816 --> 00:29:20.886 A:middle
我们在整个示例中一直有看到

00:29:20.886 --> 00:29:22.086 A:middle
关于如何

00:29:22.086 --> 00:29:26.966 A:middle
在 Swift 创建可哈希的结构体非常直观

00:29:30.506 --> 00:29:31.246 A:middle
那么基于 IndexPath 的

00:29:31.466 --> 00:29:32.636 A:middle
API 要怎么处理呢

00:29:32.636 --> 00:29:34.926 A:middle
我们有 CollectionView 和 TableView

00:29:34.926 --> 00:29:36.656 A:middle
它们有大量基于 IndexPath 的 API

00:29:36.656 --> 00:29:38.276 A:middle
其中很多都在 Delegate 方法中

00:29:38.276 --> 00:29:40.176 A:middle
因此如果用户与内容交互

00:29:40.176 --> 00:29:41.776 A:middle
并点击某个项目

00:29:42.476 --> 00:29:43.356 A:middle
你将得到这个熟悉的

00:29:43.356 --> 00:29:46.006 A:middle
Delegate 消息 didSelectItemAt indexPath

00:29:47.126 --> 00:29:48.536 A:middle
但是我们已经进入了这个

00:29:48.536 --> 00:29:49.636 A:middle
基于标识符的新世界

00:29:49.636 --> 00:29:50.236 A:middle
我们将如何处理

00:29:50.236 --> 00:29:51.066 A:middle
这个 IndexPath

00:29:51.066 --> 00:29:51.906 A:middle
你知道那是老一套

00:29:51.906 --> 00:29:54.236 A:middle
所以我们这里有新的 API

00:29:54.296 --> 00:29:55.356 A:middle
让你在标识符

00:29:55.356 --> 00:29:57.716 A:middle
和 IndexPaths 之间进行转换

00:29:57.716 --> 00:29:59.196 A:middle
然后从 IndexPaths 

00:29:59.196 --> 00:29:59.926 A:middle
转化为标识符

00:29:59.926 --> 00:30:01.046 A:middle
所以这里我们看一个例子

00:30:01.556 --> 00:30:04.606 A:middle
我们正在使用过去的 IndexPath 

00:30:04.606 --> 00:30:06.746 A:middle
并将其转换回标识符

00:30:06.746 --> 00:30:07.736 A:middle
这会在常数时间内完成

00:30:07.846 --> 00:30:08.976 A:middle
这非常非常快

00:30:12.426 --> 00:30:13.886 A:middle
说到性能

00:30:14.906 --> 00:30:17.406 A:middle
我们做了大量的工作

00:30:17.406 --> 00:30:19.516 A:middle
让它尽可能更快

00:30:19.656 --> 00:30:20.606 A:middle
还有很多

00:30:20.606 --> 00:30:21.976 A:middle
低层次的东西非常重要

00:30:25.266 --> 00:30:26.646 A:middle
如果你学过

00:30:26.646 --> 00:30:27.746 A:middle
计算机科学

00:30:27.746 --> 00:30:29.176 A:middle
关于差异对比是如何发生的整个概念

00:30:29.176 --> 00:30:30.516 A:middle
你会知道这是

00:30:30.516 --> 00:30:31.606 A:middle
一个 O(N) 的线性运算

00:30:31.606 --> 00:30:34.236 A:middle
而简单来说

00:30:34.236 --> 00:30:35.276 A:middle
它只是意味着你的 Item 越多

00:30:35.276 --> 00:30:36.976 A:middle
你进行差异对比的时间越长

00:30:39.106 --> 00:30:40.236 A:middle
因此在开发过程中

00:30:40.236 --> 00:30:42.006 A:middle
衡量 App 很重要

00:30:42.006 --> 00:30:43.836 A:middle
我们都知道这一点 我们希望确保

00:30:43.836 --> 00:30:46.076 A:middle
主队列尽可能空闲

00:30:46.106 --> 00:30:48.766 A:middle
以便真正响应用户事件

00:30:48.766 --> 00:30:50.376 A:middle
我们渲染的非常快

00:30:50.896 --> 00:30:52.746 A:middle
所以当你在测试你的 App 时

00:30:52.796 --> 00:30:53.536 A:middle
你们都会测试 App

00:30:53.906 --> 00:30:55.566 A:middle
在开发过程中 尤其是在结束时

00:30:55.746 --> 00:30:58.776 A:middle
我想确保主队列上的尽可能的没有内容

00:30:59.906 --> 00:31:01.036 A:middle
如果你发现线性差异对比中

00:31:01.036 --> 00:31:02.426 A:middle
有大量 Item 需要花费

00:31:02.426 --> 00:31:03.526 A:middle
额外的时间

00:31:03.526 --> 00:31:05.656 A:middle
那么从后台队列

00:31:05.656 --> 00:31:06.966 A:middle
调用 apply() 方法会比较安全

00:31:07.516 --> 00:31:14.336 A:middle
[掌声]

00:31:14.836 --> 00:31:15.926 A:middle
真正酷的是

00:31:15.986 --> 00:31:17.286 A:middle
我们为了支持而使用的

00:31:17.286 --> 00:31:18.486 A:middle
API 的数量

00:31:18.486 --> 00:31:19.376 A:middle
没有 API

00:31:20.016 --> 00:31:21.046 A:middle
[笑声]

00:31:21.046 --> 00:31:21.976 A:middle
这就是最好的 API

00:31:22.031 --> 00:31:24.031 A:middle
[欢呼声和掌声]

00:31:24.046 --> 00:31:28.046 A:middle
对吗 那么如果从后台队列

00:31:28.046 --> 00:31:29.586 A:middle
调用 apply() 会发生什么

00:31:29.586 --> 00:31:30.886 A:middle
实际上

00:31:30.886 --> 00:31:31.966 A:middle
框架足够聪明可以知道

00:31:31.966 --> 00:31:32.856 A:middle
现在不在主队列中

00:31:32.856 --> 00:31:34.056 A:middle
它会说 让我们继续

00:31:34.056 --> 00:31:35.076 A:middle
在这里进行差异对比

00:31:36.126 --> 00:31:37.716 A:middle
一旦计算出差异

00:31:37.956 --> 00:31:39.086 A:middle
我们就会跳到主队列

00:31:39.086 --> 00:31:40.926 A:middle
应用我们差异对比的结果

00:31:40.926 --> 00:31:41.966 A:middle
程序就像往常一样继续

00:31:45.256 --> 00:31:46.706 A:middle
只有一个忠告

00:31:46.706 --> 00:31:47.696 A:middle
我保证就一个

00:31:48.406 --> 00:31:51.136 A:middle
如果选择此模型从

00:31:51.136 --> 00:31:52.466 A:middle
后台调用 apply() 

00:31:52.606 --> 00:31:53.226 A:middle
则应保持一致

00:31:53.626 --> 00:31:55.236 A:middle
永远都从后台队列中调用它

00:31:55.286 --> 00:31:56.486 A:middle
你永远不希望发生混乱

00:31:56.526 --> 00:31:58.226 A:middle
一会从后台队列

00:31:58.326 --> 00:32:00.786 A:middle
一会儿从主队列调用它 请始终用同样的方法

00:32:02.496 --> 00:32:03.566 A:middle
我们是好公民

00:32:03.566 --> 00:32:05.656 A:middle
如果你弄错了 我们会抱怨的

00:32:06.536 --> 00:32:08.016 A:middle
所以在 Apple 公司

00:32:08.216 --> 00:32:09.716 A:middle
合作是很重要的一部分

00:32:09.716 --> 00:32:11.166 A:middle
这是我们组织的主要力量

00:32:11.166 --> 00:32:12.666 A:middle
是我们彼此交谈

00:32:12.666 --> 00:32:14.616 A:middle
和共同解决问题的方法

00:32:15.286 --> 00:32:16.976 A:middle
作为框架的作者

00:32:16.976 --> 00:32:18.146 A:middle
这其中的一部分是

00:32:18.146 --> 00:32:19.456 A:middle
确保你所有的客户

00:32:19.456 --> 00:32:20.796 A:middle
或者你经常与之交谈的人

00:32:20.796 --> 00:32:22.366 A:middle
找到困扰他们的问题所在

00:32:22.756 --> 00:32:24.536 A:middle
这显然是正在困扰他们的问题之一

00:32:25.106 --> 00:32:27.636 A:middle
在这期间我们和那些正在制作

00:32:27.636 --> 00:32:29.146 A:middle
Share Sheet 的人聊了聊

00:32:29.146 --> 00:32:30.966 A:middle
这是 iOS 13 中

00:32:30.966 --> 00:32:33.786 A:middle
重新设计的新 Share Sheet

00:32:34.776 --> 00:32:36.076 A:middle
具有出色的隔空投送扩展功能

00:32:36.076 --> 00:32:38.026 A:middle
当他们拥有这个全新的设计时 他们才发现

00:32:38.026 --> 00:32:39.216 A:middle
他们说 哦 这看起来很棒

00:32:39.216 --> 00:32:40.976 A:middle
我们需要这个 他们确实做到了

00:32:41.016 --> 00:32:42.996 A:middle
因此我想让一位

00:32:42.996 --> 00:32:44.526 A:middle
来自 Share Sheet 的同事

00:32:44.526 --> 00:32:46.876 A:middle
Jacob Klapper 来指导

00:32:46.876 --> 00:32:48.546 A:middle
我们完成这项工作 Jacob

00:32:49.516 --> 00:32:54.426 A:middle
[掌声]

00:32:54.926 --> 00:32:57.596 A:middle
&gt;&gt; 大家好 我很高兴向你们

00:32:57.596 --> 00:32:58.586 A:middle
展示 Share Sheet 

00:32:58.586 --> 00:32:59.966 A:middle
如何利用 iOS 13 中

00:32:59.966 --> 00:33:02.976 A:middle
新的 CollectionView API

00:33:05.046 --> 00:33:06.066 A:middle
我们在全新的

00:33:06.066 --> 00:33:07.126 A:middle
Share Sheet 中

00:33:07.816 --> 00:33:08.786 A:middle
Share Sheet 实际上

00:33:08.786 --> 00:33:10.306 A:middle
利用了新的

00:33:10.306 --> 00:33:12.086 A:middle
组合布局 API

00:33:12.086 --> 00:33:13.406 A:middle
和 DiffableDataSource

00:33:13.406 --> 00:33:14.646 A:middle
但 DiffableDataSource

00:33:14.646 --> 00:33:16.126 A:middle
真正闪耀的地方在于

00:33:16.126 --> 00:33:17.446 A:middle
全新的隔空投送扩展

00:33:18.696 --> 00:33:21.176 A:middle
因此隔空投送扩展程序

00:33:21.176 --> 00:33:22.846 A:middle
有一个浏览设备的浏览器

00:33:23.156 --> 00:33:24.576 A:middle
实际上我们已经

00:33:24.576 --> 00:33:26.606 A:middle
使用 UUID 来唯一标识

00:33:26.606 --> 00:33:27.656 A:middle
发现的每个设备

00:33:28.166 --> 00:33:30.206 A:middle
因此当发现新设备时

00:33:30.206 --> 00:33:31.876 A:middle
我们可以创建

00:33:31.876 --> 00:33:34.036 A:middle
一个空的快照啊

00:33:34.036 --> 00:33:35.506 A:middle
附加我们的 Section 和 Item

00:33:35.506 --> 00:33:36.536 A:middle
并应用差异对比

00:33:36.876 --> 00:33:39.056 A:middle
DiffableDataSource 负责其余部分

00:33:39.056 --> 00:33:40.056 A:middle
无论移除或

00:33:40.056 --> 00:33:41.826 A:middle
删除多少 Item

00:33:41.826 --> 00:33:43.736 A:middle
动画都很漂亮

00:33:44.276 --> 00:33:46.196 A:middle
DiffableDataSource 对我们来说

00:33:46.196 --> 00:33:47.316 A:middle
已经改变了游戏规则

00:33:47.626 --> 00:33:48.986 A:middle
我们迫不及待地想看看

00:33:48.986 --> 00:33:50.566 A:middle
你在 App 中用它做什么

00:33:50.646 --> 00:33:51.866 A:middle
现在舞台还给 Troy

00:33:51.866 --> 00:33:53.486 A:middle
听听他最后的想法

00:33:55.516 --> 00:33:57.556 A:middle
[掌声]

00:33:58.056 --> 00:33:59.426 A:middle
&gt;&gt; 天呐

00:33:59.426 --> 00:34:00.456 A:middle
听到 DiffableDataSource 

00:34:00.456 --> 00:34:02.146 A:middle
在我们自己的 App 中

00:34:02.196 --> 00:34:03.566 A:middle
发挥了如此大的作用

00:34:03.566 --> 00:34:05.106 A:middle
我非常兴奋

00:34:05.106 --> 00:34:06.526 A:middle
我们非常高兴

00:34:06.526 --> 00:34:08.606 A:middle
让我们内部采用的 API 

00:34:08.606 --> 00:34:09.866 A:middle
能够在我们的

00:34:10.146 --> 00:34:12.976 A:middle
平台上供开发者使用

00:34:21.045 --> 00:34:22.505 A:middle
我们今天已经看到

00:34:22.505 --> 00:34:24.485 A:middle
DiffableDataSource 极大地

00:34:24.485 --> 00:34:26.416 A:middle
简化了将模型数据

00:34:26.416 --> 00:34:28.485 A:middle
放到 CollectionViews 

00:34:28.485 --> 00:34:31.676 A:middle
和 UITableViews 中的工作

00:34:31.976 --> 00:34:33.596 A:middle
我们认为这真正改变了游戏规则

00:34:33.596 --> 00:34:36.476 A:middle
它使这个过程非常简单和鲁棒

00:34:36.755 --> 00:34:38.516 A:middle
不会再有令人困惑的异常

00:34:38.696 --> 00:34:40.126 A:middle
在调试和难以编写的

00:34:40.186 --> 00:34:42.216 A:middle
批处理代码中出现

00:34:42.216 --> 00:34:44.025 A:middle
你可以专注于

00:34:44.025 --> 00:34:46.496 A:middle
你想让你的 App 做什么上

00:34:46.496 --> 00:34:49.315 A:middle
把其他的留给框架 今天你可以在 iOS

00:34:49.426 --> 00:34:53.186 A:middle
tvOS 和 macOS 上

00:34:53.186 --> 00:34:54.606 A:middle
使用 DiffableDataSource 

00:34:55.176 --> 00:34:57.016 A:middle
除了为你计算差异对比

00:34:57.016 --> 00:34:58.676 A:middle
并自动将它

00:34:58.906 --> 00:35:00.236 A:middle
提交给 UI

00:35:00.236 --> 00:35:01.936 A:middle
你能得到这些

00:35:01.936 --> 00:35:03.946 A:middle
漂亮的动画对吧

00:35:03.946 --> 00:35:05.516 A:middle
你不需要做额外的工作

00:35:05.516 --> 00:35:07.476 A:middle
就能得到那种

00:35:07.786 --> 00:35:09.316 A:middle
令人愉快的用户交互效果

00:35:10.126 --> 00:35:12.566 A:middle
内置的差异对比很快

00:35:12.566 --> 00:35:14.556 A:middle
它经受了严峻的压力测试

00:35:14.906 --> 00:35:17.296 A:middle
DiffableDataSource 是一个鲁棒的 API 

00:35:17.296 --> 00:35:19.086 A:middle
你可以使用它

00:35:19.086 --> 00:35:20.186 A:middle
并运行它

00:35:20.656 --> 00:35:22.686 A:middle
快行动起来吧

00:35:22.946 --> 00:35:24.526 A:middle
在你的 App 中使用

00:35:24.526 --> 00:35:25.656 A:middle
DiffableDataSource

00:35:25.986 --> 00:35:27.266 A:middle
我们迫不及待地想要看到

00:35:27.266 --> 00:35:28.356 A:middle
这将减轻你的负担

00:35:28.356 --> 00:35:31.176 A:middle
你将能够用更少的时间

00:35:31.176 --> 00:35:32.206 A:middle
更少的烦恼

00:35:32.206 --> 00:35:34.176 A:middle
来创造令人愉快的用户体验

00:35:36.636 --> 00:35:37.896 A:middle
如果你觉得这个讲座有趣

00:35:37.896 --> 00:35:39.256 A:middle
而且你正在使用

00:35:39.256 --> 00:35:40.426 A:middle
CollectionViews

00:35:40.426 --> 00:35:43.166 A:middle
我们还有另一个 你会非常喜欢的会议名为

00:35:43.166 --> 00:35:44.616 A:middle
Advances in Collection View Layout

00:35:44.976 --> 00:35:47.176 A:middle
我们描述了一个全新的

00:35:47.176 --> 00:35:48.706 A:middle
布局系统

00:35:48.706 --> 00:35:50.276 A:middle
它可以简单地描述

00:35:50.276 --> 00:35:51.736 A:middle
你想要在 CollectionView 中

00:35:51.736 --> 00:35:52.666 A:middle
拥有的任何自定义布局

00:35:52.986 --> 00:35:53.906 A:middle
并且能够看到

00:35:53.906 --> 00:35:55.356 A:middle
它的实现

00:35:55.356 --> 00:35:57.666 A:middle
而不需要任何高性能的结果

00:35:57.666 --> 00:35:58.916 A:middle
所以我们觉得你会喜欢的

00:35:58.916 --> 00:36:00.346 A:middle
一定要参加那个会议

00:36:01.316 --> 00:36:02.976 A:middle
谢谢大家今天的收看

00:36:03.516 --> 00:36:08.500 A:middle
[掌声]

