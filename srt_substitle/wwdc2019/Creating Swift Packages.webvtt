WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.516 --> 00:00:04.500 A:middle
[音乐]

00:00:12.516 --> 00:00:17.006 A:middle
[掌声]

00:00:17.506 --> 00:00:19.196 A:middle
&gt;&gt; 大家好 我叫 Boris 

00:00:19.196 --> 00:00:20.536 A:middle
是 Xcode 团队的一名成员

00:00:20.826 --> 00:00:22.946 A:middle
欢迎来到创建 Swift 包的会议

00:00:23.656 --> 00:00:25.096 A:middle
你们可能已经听说过 Xcode 

00:00:25.416 --> 00:00:27.036 A:middle
对包的支持

00:00:27.036 --> 00:00:29.506 A:middle
但今天你们将学习

00:00:29.576 --> 00:00:31.096 A:middle
如何创建自己的包

00:00:35.316 --> 00:00:37.576 A:middle
我们今天将主要讨论

00:00:37.576 --> 00:00:38.206 A:middle
五件事情

00:00:38.906 --> 00:00:40.386 A:middle
我们会了解

00:00:40.386 --> 00:00:41.516 A:middle
如何创建自己的本地包

00:00:42.576 --> 00:00:44.826 A:middle
然后了解如何发布它

00:00:46.306 --> 00:00:47.476 A:middle
我们也要告诉你们一些

00:00:47.476 --> 00:00:49.356 A:middle
关于包 Manifest API 的更多信息

00:00:49.356 --> 00:00:52.056 A:middle
以及如何编辑包

00:00:52.856 --> 00:00:54.966 A:middle
最后

00:00:54.966 --> 00:00:56.766 A:middle
我将告诉你们

00:00:56.766 --> 00:00:57.496 A:middle
有关 Swift 包管理器开源项目的信息

00:00:57.996 --> 00:01:02.286 A:middle
我们已经举办过另一场关于包的会议

00:01:03.766 --> 00:01:05.796 A:middle
那次会议叫做 Adopting Swift Packages

00:01:06.886 --> 00:01:08.896 A:middle
你们也应该看看那次会议

00:01:09.076 --> 00:01:11.186 A:middle
因为那里有相关信息

00:01:11.186 --> 00:01:15.036 A:middle
例如如何解决包解析冲突

00:01:15.036 --> 00:01:18.686 A:middle
会议内容还包括

00:01:19.016 --> 00:01:20.686 A:middle
包基础知识介绍

00:01:20.686 --> 00:01:23.746 A:middle
提供给初次接触的人

00:01:27.236 --> 00:01:29.036 A:middle
包是与你的团队

00:01:29.036 --> 00:01:31.576 A:middle
一起在工作区

00:01:31.576 --> 00:01:33.876 A:middle
或与更大的开源社区

00:01:33.936 --> 00:01:35.746 A:middle
共享代码的好方法

00:01:39.256 --> 00:01:42.976 A:middle
我们先来看看如何创建自己的本地包

00:01:43.636 --> 00:01:46.896 A:middle
你可以将本地包看作

00:01:46.896 --> 00:01:49.366 A:middle
工作空间中的子项目

00:01:49.616 --> 00:01:53.236 A:middle
它们本质上与平台无关

00:01:53.236 --> 00:01:55.496 A:middle
因此你可以直接

00:01:55.496 --> 00:01:57.056 A:middle
在 Apple 的所有平台上

00:01:57.056 --> 00:01:59.000 A:middle
使用你的代码

00:02:04.536 --> 00:02:07.636 A:middle
它们没有版本化

00:02:07.636 --> 00:02:10.406 A:middle
但是一旦你准备好了

00:02:09.006 --> 00:02:10.406 A:middle
只需几步即可发布它们

00:02:10.916 --> 00:02:14.086 A:middle
我们来演示一下

00:02:14.086 --> 00:02:16.926 A:middle
如何创建自己的本地包

00:02:17.166 --> 00:02:18.436 A:middle
在这个演示中

00:02:18.436 --> 00:02:19.776 A:middle
我们将使用一个 App

00:02:19.776 --> 00:02:22.186 A:middle
显示我工作地点附近几家咖啡馆的午餐菜单

00:02:22.526 --> 00:02:26.166 A:middle
我们有 iOS 和 WatchOS 两种版本的 App

00:02:26.366 --> 00:02:30.016 A:middle
现在这里有这个数据模型

00:02:30.086 --> 00:02:32.856 A:middle
通过 Target Membership 在两个平台之间共享

00:02:33.686 --> 00:02:36.266 A:middle
随着我们不断开发我们的 App

00:02:36.416 --> 00:02:38.746 A:middle
这种方式变得有些麻烦

00:02:38.846 --> 00:02:41.516 A:middle
所以我想把它重构成一个本地包

00:02:42.106 --> 00:02:44.696 A:middle
第一步就是

00:02:44.696 --> 00:02:47.136 A:middle
我们转到 File->New->Swift Package

00:02:47.646 --> 00:02:52.206 A:middle
把这个包命名为 FoodNStuff

00:02:52.206 --> 00:02:57.966 A:middle
我们将它添加到现有项目并添加到根管理组中

00:02:58.396 --> 00:03:00.436 A:middle
然后单击 Create

00:03:01.236 --> 00:03:04.776 A:middle
现在 Xcode 为我们创建了包的基本结构

00:03:04.926 --> 00:03:06.666 A:middle
包括 Readme

00:03:06.666 --> 00:03:10.366 A:middle
Package.swift Manifest 文件以及
Sources 和 Tests 文件夹

00:03:12.656 --> 00:03:15.646 A:middle
我们从 App 中

00:03:15.646 --> 00:03:17.476 A:middle
找到数据模型代码

00:03:17.996 --> 00:03:19.386 A:middle
然后将其拖入包中

00:03:19.546 --> 00:03:21.016 A:middle
现在我们要将此代码关联到

00:03:21.016 --> 00:03:21.786 A:middle
我们的 App

00:03:22.296 --> 00:03:25.886 A:middle
让我们快速浏览 Manifest 文件

00:03:26.366 --> 00:03:27.646 A:middle
它描述了如何构建包

00:03:27.826 --> 00:03:30.606 A:middle
还有一个名为 Products 的部分

00:03:30.606 --> 00:03:31.116 A:middle
在这儿我们定义了一个库

00:03:31.846 --> 00:03:33.736 A:middle
我们可以把这个库和 App 关联起来

00:03:33.966 --> 00:03:36.186 A:middle
我们将在之后的演讲中

00:03:36.186 --> 00:03:37.346 A:middle
详细介绍

00:03:37.346 --> 00:03:38.466 A:middle
Manifest 文件和 Products 部分

00:03:38.816 --> 00:03:43.056 A:middle
但是现在 我们打开项目编辑器

00:03:43.056 --> 00:03:45.996 A:middle
打开 Targets 中的 iOS App

00:03:45.996 --> 00:03:48.626 A:middle
然后进入 Frameworks, Libraries and Embedded Content 部分

00:03:48.946 --> 00:03:51.236 A:middle
我们点击这里的 + 号

00:03:51.236 --> 00:03:53.756 A:middle
然后从列表中选择 FoodNStuff

00:03:54.886 --> 00:03:57.976 A:middle
我们希望为 watchOS App 执行相同的步骤

00:03:58.566 --> 00:03:59.736 A:middle
所以我们找到对应的 Target

00:04:01.696 --> 00:04:03.766 A:middle
再次点击 + 号

00:04:03.766 --> 00:04:05.736 A:middle
并将其与我们的 App 相关联

00:04:07.276 --> 00:04:11.216 A:middle
包中还含有一个或多个模块

00:04:11.366 --> 00:04:15.186 A:middle
所以 我们必须将这些模块导入我们的 App

00:04:15.186 --> 00:04:16.406 A:middle
这个例子中 我们只有一个模块

00:04:17.136 --> 00:04:19.666 A:middle
我们进入 iOS App 的代码

00:04:20.896 --> 00:04:22.186 A:middle
在此处导入模块

00:04:23.396 --> 00:04:26.066 A:middle
我们也会为我们的 watchOS App 做同样的事情

00:04:29.726 --> 00:04:32.076 A:middle
现在 由于我们对工作区

00:04:32.156 --> 00:04:33.496 A:middle
进行了一些较大的更改

00:04:33.496 --> 00:04:34.586 A:middle
因此预览暂停了

00:04:34.946 --> 00:04:37.686 A:middle
那么让我们按下
command + option + P 来恢复它

00:04:38.306 --> 00:04:43.496 A:middle
现在我们的 App 就可以正常运行了

00:04:44.206 --> 00:04:45.726 A:middle
因此 只需几步

00:04:45.726 --> 00:04:48.086 A:middle
我们就可以将可重用的代码

00:04:48.086 --> 00:04:49.476 A:middle
在自己的本地包中完成重构

00:04:50.386 --> 00:04:51.676 A:middle
你可能还注意到

00:04:51.896 --> 00:04:55.036 A:middle
我们没有必要明确配置任何有关平台的内容

00:04:55.636 --> 00:04:58.566 A:middle
这是因为包本质上是平台无关的

00:04:59.176 --> 00:05:01.386 A:middle
因此 它们可以依客户的需求而建立

00:05:01.566 --> 00:05:03.526 A:middle
在这种情况下

00:05:03.526 --> 00:05:05.276 A:middle
我们计划同时构建 iOS 和 watchOS App

00:05:05.846 --> 00:05:09.316 A:middle
因此 包被构建了两次

00:05:09.316 --> 00:05:10.166 A:middle
一次用于 iOS 一次用于 watchOS

00:05:10.546 --> 00:05:12.826 A:middle
并且这一切都由 Xcode 自动处理

00:05:13.286 --> 00:05:17.666 A:middle
最后 这为包的发布打好了基础

00:05:17.846 --> 00:05:18.936 A:middle
但在发布包之前

00:05:18.936 --> 00:05:20.426 A:middle
让我们回到幻灯片

00:05:20.426 --> 00:05:22.000 A:middle
了解更多相关信息

00:05:28.556 --> 00:05:30.186 A:middle
你们刚刚了解了本地包

00:05:30.536 --> 00:05:33.796 A:middle
现在让我们来看看如何发布一个包

00:05:33.796 --> 00:05:35.446 A:middle
以便与广大受众分享

00:05:36.116 --> 00:05:38.766 A:middle
在我们看发布包的具体步骤之前

00:05:38.976 --> 00:05:40.456 A:middle
我们必须了解版本控制

00:05:41.956 --> 00:05:43.126 A:middle
更具体地说

00:05:43.126 --> 00:05:45.456 A:middle
是管理 Swift 包的语义化版本控制

00:05:46.806 --> 00:05:48.996 A:middle
它为了确保你可以在

00:05:49.346 --> 00:05:50.696 A:middle
不影响其他内容的情况下

00:05:50.696 --> 00:05:52.256 A:middle
修复依赖项的漏洞

00:05:52.866 --> 00:05:55.286 A:middle
Swift 包遵循语义化版本控制

00:05:56.166 --> 00:05:57.546 A:middle
这是一种广泛的标准

00:05:57.616 --> 00:05:58.976 A:middle
它为版本号

00:05:58.976 --> 00:06:00.306 A:middle
每个部分

00:06:00.306 --> 00:06:01.756 A:middle
赋予特定的语义含义

00:06:02.296 --> 00:06:06.456 A:middle
主版本号象征着对 API 的突破性更改

00:06:07.106 --> 00:06:09.526 A:middle
它需要更新现有客户端

00:06:09.916 --> 00:06:11.716 A:middle
例如 

00:06:11.816 --> 00:06:13.146 A:middle
重命名现有类型

00:06:13.756 --> 00:06:16.436 A:middle
移除一个方法或更改方法签名

00:06:16.976 --> 00:06:18.406 A:middle
但这也可能包括

00:06:18.406 --> 00:06:20.196 A:middle
任何不向后兼容的漏洞修复

00:06:20.246 --> 00:06:23.316 A:middle
或对现有 API 主要行为的更改

00:06:24.476 --> 00:06:26.096 A:middle
更新次版本号

00:06:26.096 --> 00:06:28.706 A:middle
是以向后兼容的方式添加功能

00:06:28.876 --> 00:06:33.186 A:middle
例如 添加一个新的方法或类型

00:06:33.636 --> 00:06:35.076 A:middle
在你进行

00:06:35.076 --> 00:06:36.036 A:middle
向后兼容的漏洞修复时

00:06:36.036 --> 00:06:37.146 A:middle
请递增修订号

00:06:37.886 --> 00:06:40.836 A:middle
这使客户在对包进行漏洞修复时

00:06:40.836 --> 00:06:45.256 A:middle
不会产生任何维护负担

00:06:45.396 --> 00:06:48.696 A:middle
主要版本号 0 是一个特殊情况

00:06:48.696 --> 00:06:49.596 A:middle
你可以在开发初期使用

00:06:50.486 --> 00:06:53.636 A:middle
此时对次版本和修订版本的更改也可能会破坏API

00:06:54.456 --> 00:06:56.926 A:middle
这简化了初始的开发过程

00:06:56.926 --> 00:07:00.416 A:middle
但在人们开始使用你的包时
你应该发布 1.0 版本

00:07:00.896 --> 00:07:03.826 A:middle
在发布包一段时间后

00:07:03.826 --> 00:07:07.076 A:middle
你的客户将期望有稳定的 API 

00:07:07.076 --> 00:07:11.696 A:middle
因此在发布最终版之前

00:07:12.186 --> 00:07:13.896 A:middle
你可以使用预发行版本

00:07:13.896 --> 00:07:14.936 A:middle
请求客户测试 API

00:07:18.616 --> 00:07:21.846 A:middle
你可以通过在版本规则中添加预发布标识符

00:07:21.846 --> 00:07:23.686 A:middle
来选择预发布版本

00:07:24.176 --> 00:07:26.436 A:middle
在这个例子中

00:07:26.766 --> 00:07:28.326 A:middle
我使用的标识符为 beta.1

00:07:31.276 --> 00:07:34.516 A:middle
请注意 这种情况下你可以解析预发布版本

00:07:34.726 --> 00:07:36.056 A:middle
但你仍然会得到更新

00:07:36.256 --> 00:07:38.366 A:middle
例如 这里的版本是 beta.6

00:07:39.036 --> 00:07:42.166 A:middle
一旦稳定版本 5 发布

00:07:42.166 --> 00:07:43.356 A:middle
包解析将自动选择稳定版

00:07:43.936 --> 00:07:44.736 A:middle
但是你应该

00:07:44.736 --> 00:07:46.236 A:middle
在完成测试后

00:07:46.236 --> 00:07:47.096 A:middle
删除预发布标识符

00:07:47.626 --> 00:07:50.606 A:middle
我们来看看

00:07:50.656 --> 00:07:51.956 A:middle
下一个演示中

00:07:51.956 --> 00:07:53.000 A:middle
发布包的具体步骤

00:07:59.416 --> 00:08:02.416 A:middle
让我们回到第一个演示结束地方

00:08:02.986 --> 00:08:10.856 A:middle
首先 我将把包拖出项目

00:08:11.346 --> 00:08:14.146 A:middle
在拖动时按住 option 键

00:08:14.146 --> 00:08:14.556 A:middle
就会创建一份拷贝

00:08:15.386 --> 00:08:17.866 A:middle
关闭项目

00:08:17.866 --> 00:08:19.546 A:middle
在 Finder 中打开它 

00:08:19.546 --> 00:08:20.606 A:middle
然后连按 Package.swift 文件

00:08:21.646 --> 00:08:25.086 A:middle
这样就可以独立打开包

00:08:25.086 --> 00:08:25.706 A:middle
和打开项目的方式一样

00:08:26.766 --> 00:08:30.016 A:middle
如果我们查看运行目标

00:08:30.016 --> 00:08:32.086 A:middle
可以看到菜单中也有 macOS 和 tvOS

00:08:32.086 --> 00:08:35.436 A:middle
虽然我们之前的开发仅针对 iOS 和 watchOS

00:08:36.535 --> 00:08:39.686 A:middle
这再次强调了包本质上是与平台无关的

00:08:40.006 --> 00:08:41.296 A:middle
无需特殊配置

00:08:41.296 --> 00:08:45.106 A:middle
即可在 Xcode 中为
所有 Apple 平台构建包

00:08:46.116 --> 00:08:47.436 A:middle
现在 既然你正在发布这个包

00:08:47.436 --> 00:08:49.426 A:middle
那么让我们补充一下 Readme 文件

00:08:49.926 --> 00:08:54.226 A:middle
假设这个包提供了

00:08:55.036 --> 00:08:59.726 A:middle
用于表示食物菜单

00:08:59.726 --> 00:09:08.316 A:middle
并从 JSON 中加载的

00:09:08.316 --> 00:09:08.856 A:middle
数据模型

00:09:08.976 --> 00:09:11.786 A:middle
现在 对于真正的包

00:09:11.786 --> 00:09:15.526 A:middle
你希望在 Readme 文件中包含更多信息

00:09:15.936 --> 00:09:17.676 A:middle
例如使用方法 平台限制等

00:09:17.716 --> 00:09:22.166 A:middle
如果你使用了特定平台的 API（如 UIKit）

00:09:22.166 --> 00:09:23.446 A:middle
还需要包含许可协议的信息

00:09:23.806 --> 00:09:26.236 A:middle
但由于这只是一个演示 现在就足够了

00:09:27.556 --> 00:09:31.136 A:middle
你要做的另一件事是添加测试用例

00:09:31.136 --> 00:09:32.546 A:middle
Xcode 已经为我们

00:09:32.546 --> 00:09:35.526 A:middle
创建了一个示例测试用例

00:09:35.526 --> 00:09:36.746 A:middle
但我们想在这里实际测试

00:09:36.746 --> 00:09:36.956 A:middle
我们的数据模型

00:09:37.476 --> 00:09:44.086 A:middle
让我们创建一个 FoodItem

00:09:44.326 --> 00:09:48.096 A:middle
名称为 chick'n

00:09:48.096 --> 00:09:49.006 A:middle
价格为 42 美元

00:09:49.676 --> 00:09:52.896 A:middle
我们设置条件

00:09:52.896 --> 00:09:55.816 A:middle
物品的价格就是 42 美元

00:09:56.476 --> 00:09:57.736 A:middle
现在 如果我们按下 Command + U

00:09:58.826 --> 00:10:00.976 A:middle
我们的包就会构建并进行测试

00:10:00.976 --> 00:10:02.986 A:middle
就像在项目中运行一样

00:10:03.286 --> 00:10:05.396 A:middle
测试已经通过

00:10:05.396 --> 00:10:05.706 A:middle
因此我们可以继续

00:10:06.506 --> 00:10:09.016 A:middle
我们首先为我们的包创建一个仓库

00:10:09.176 --> 00:10:10.636 A:middle
为此 我们可以打开

00:10:10.636 --> 00:10:12.396 A:middle
Source Control 菜单

00:10:12.396 --> 00:10:14.776 A:middle
并选择 Create Repositories 选项

00:10:15.576 --> 00:10:17.456 A:middle
Xcode 已经为我们选中了包

00:10:17.456 --> 00:10:19.346 A:middle
所以我们只需点按 Create 即可

00:10:20.056 --> 00:10:21.806 A:middle
这将在本地创建一个仓库

00:10:21.806 --> 00:10:24.286 A:middle
并提交我们当前的状态

00:10:25.266 --> 00:10:27.446 A:middle
但我们还需要 GitHub 中的仓库

00:10:27.716 --> 00:10:30.406 A:middle
我们也可以在 Xcode 中创建它

00:10:31.186 --> 00:10:32.646 A:middle
切换到源码管理导航栏

00:10:33.346 --> 00:10:34.646 A:middle
在仓库中打开上下文菜单

00:10:34.646 --> 00:10:37.116 A:middle
然后选择 Create Remote 选项

00:10:37.576 --> 00:10:42.026 A:middle
由于我已经在 Xcode 偏好设置中
配置了我的 GitHub 帐户

00:10:42.026 --> 00:10:44.936 A:middle
因此会在此处自动预选

00:10:45.116 --> 00:10:46.786 A:middle
仓库名称可以更改

00:10:46.786 --> 00:10:48.116 A:middle
但我们保持默认

00:10:48.376 --> 00:10:50.556 A:middle
同时也暂时略去可选描述

00:10:50.836 --> 00:10:53.876 A:middle
我们将可见性设置为私密

00:10:53.876 --> 00:10:56.716 A:middle
因为我想暂时与我的团队分享这个包

00:10:56.716 --> 00:10:57.086 A:middle
而不是面向大众

00:10:57.626 --> 00:10:59.626 A:middle
我们点按 Create

00:11:03.226 --> 00:11:06.076 A:middle
在 GitHub 上创建仓库

00:11:06.286 --> 00:11:10.106 A:middle
并当前状态推送到 Github 上的任务

00:11:10.326 --> 00:11:11.446 A:middle
现在我们已经发布了我们的包

00:11:11.446 --> 00:11:14.516 A:middle
但我们还想发布我们的第一个版本

00:11:14.896 --> 00:11:16.436 A:middle
为此 返回上下文菜单

00:11:16.436 --> 00:11:19.406 A:middle
并选择 Tag Master 选项

00:11:19.956 --> 00:11:23.326 A:middle
我们想要发布 1.0.0 版本

00:11:23.326 --> 00:11:25.936 A:middle
暂时不填消息文本框

00:11:26.486 --> 00:11:29.466 A:middle
这会在本地创建一个标记

00:11:29.466 --> 00:11:30.886 A:middle
所以我们仍然需要将它推送到 GitHub

00:11:31.256 --> 00:11:32.566 A:middle
我们要返回

00:11:32.566 --> 00:11:34.276 A:middle
Source Control 菜单

00:11:34.276 --> 00:11:35.016 A:middle
选择 Push 选项

00:11:35.606 --> 00:11:38.636 A:middle
要选中 include tags 复选框

00:11:38.636 --> 00:11:39.976 A:middle
以便它们被推送

00:11:39.976 --> 00:11:41.946 A:middle
然后点按 Push

00:11:47.636 --> 00:11:49.026 A:middle
现在我们已经在 GitHub 上

00:11:49.026 --> 00:11:50.626 A:middle
发布了我们的包

00:11:50.626 --> 00:11:52.516 A:middle
让我们来看看

00:11:52.516 --> 00:11:55.906 A:middle
从上下文菜单中选择 View in GitHub 选项

00:11:57.276 --> 00:11:59.356 A:middle
仓库会在此处打开

00:12:02.626 --> 00:12:04.016 A:middle
但作为最后一步

00:12:04.016 --> 00:12:05.216 A:middle
我想将包的远程版本

00:12:05.216 --> 00:12:06.646 A:middle
重新集成到我们的

00:12:06.646 --> 00:12:07.366 A:middle
之前的午餐 App 中

00:12:07.786 --> 00:12:08.656 A:middle
因此 我点按 Clone or download 按钮

00:12:08.686 --> 00:12:11.416 A:middle
并从此处复制网址

00:12:11.846 --> 00:12:15.916 A:middle
关闭 Safari Xcode 以及 Finder

00:12:16.946 --> 00:12:20.556 A:middle
然后我们回到 Xcode 的欢迎窗口

00:12:20.556 --> 00:12:22.136 A:middle
再次打开 Lunch 项目

00:12:24.196 --> 00:12:26.726 A:middle
在这里 我们打开 File 菜单和

00:12:26.726 --> 00:12:28.756 A:middle
这个新的 Swift Packages 子菜单

00:12:30.316 --> 00:12:34.186 A:middle
此菜单包含几个用于处理包的选项

00:12:35.916 --> 00:12:38.266 A:middle
但我想添加一个包依赖项

00:12:38.826 --> 00:12:42.396 A:middle
我们在这里粘贴网址

00:12:47.216 --> 00:12:49.946 A:middle
Xcode 为我们推荐的

00:12:49.946 --> 00:12:51.836 A:middle
默认版本规则

00:12:51.836 --> 00:12:53.496 A:middle
包括我们刚刚发布的

00:12:53.496 --> 00:12:53.996 A:middle
1.0.0 版本

00:12:54.226 --> 00:12:55.236 A:middle
所以 我们可以点击这里的 Next

00:12:55.796 --> 00:13:02.776 A:middle
包解析完成 现在我们看到了产品的选择

00:13:02.776 --> 00:13:05.596 A:middle
我们希望将库产品与我们的 iOS App 相关联

00:13:06.436 --> 00:13:07.656 A:middle
所以 我们在这里点按 Finish

00:13:08.266 --> 00:13:13.426 A:middle
现在我实际上忘了做一件事

00:13:13.476 --> 00:13:16.406 A:middle
就是删除我们之前的本地包

00:13:16.726 --> 00:13:19.176 A:middle
所以 我现在把它移到废纸篓里

00:13:20.136 --> 00:13:22.466 A:middle
那么此时就正在获取远程版本

00:13:23.006 --> 00:13:28.696 A:middle
我们来看看项目导航栏中的

00:13:28.696 --> 00:13:29.746 A:middle
Swift Package Dependencies 部分

00:13:30.256 --> 00:13:32.276 A:middle
这显示了所有的包依赖项

00:13:38.776 --> 00:13:40.676 A:middle
好了 因为我们

00:13:40.676 --> 00:13:42.506 A:middle
在之前的流程中

00:13:42.506 --> 00:13:44.226 A:middle
关联了产品

00:13:44.306 --> 00:13:45.366 A:middle
所以它已经与我们的 iOS App 相关联

00:13:45.846 --> 00:13:48.516 A:middle
但我们还必须

00:13:49.086 --> 00:13:50.076 A:middle
将它添加到 watchOS App 中

00:13:50.516 --> 00:13:51.746 A:middle
我们需要回到

00:13:51.746 --> 00:13:53.736 A:middle
Frameworks, Libraries and Embedded Content 部分

00:13:54.756 --> 00:13:57.236 A:middle
点按此处的 + 号

00:13:57.236 --> 00:13:58.016 A:middle
然后选择包产品

00:13:58.456 --> 00:14:02.726 A:middle
现在可以回到预览了

00:14:04.086 --> 00:14:04.656 A:middle
恢复预览

00:14:05.296 --> 00:14:09.126 A:middle
我们可以看到它

00:14:09.126 --> 00:14:09.646 A:middle
像之前一样正常运行

00:14:10.596 --> 00:14:12.036 A:middle
因此 只需几步

00:14:12.036 --> 00:14:13.956 A:middle
我们就可以发布一个包

00:14:14.566 --> 00:14:15.756 A:middle
我们回到幻灯片

00:14:21.386 --> 00:14:23.846 A:middle
接下来 

00:14:23.846 --> 00:14:25.066 A:middle
我想邀请我的同事 Ankit 上台

00:14:25.066 --> 00:14:26.686 A:middle
向你们介绍一下

00:14:26.686 --> 00:14:29.000 A:middle
包 Manifest API 的更多信息

00:14:32.366 --> 00:14:33.116 A:middle
&gt;&gt; 多谢 Boris

00:14:33.626 --> 00:14:35.346 A:middle
Boris 向你们展示了

00:14:35.346 --> 00:14:36.916 A:middle
如何在 Xcode 项目中

00:14:36.916 --> 00:14:38.656 A:middle
使用本地包

00:14:38.656 --> 00:14:40.306 A:middle
以及如何发布它

00:14:40.306 --> 00:14:41.376 A:middle
以与更广泛的受众分享

00:14:41.996 --> 00:14:43.476 A:middle
在本节中

00:14:43.476 --> 00:14:44.866 A:middle
我们将更多的了解

00:14:44.866 --> 00:14:46.856 A:middle
包的 Manifest API

00:14:46.856 --> 00:14:47.406 A:middle
用它来对包进行配置

00:14:48.026 --> 00:14:51.516 A:middle
Swift 包目录中

00:14:51.516 --> 00:14:52.766 A:middle
包含 Package.swift

00:14:52.816 --> 00:14:53.796 A:middle
Manifest 文件

00:14:54.946 --> 00:14:56.296 A:middle
Manifest 的第一行

00:14:56.566 --> 00:14:58.356 A:middle
始终是 Swift Tools 的版本

00:14:59.236 --> 00:15:00.436 A:middle
这是构建包

00:15:00.436 --> 00:15:02.366 A:middle
所需 Swift 编译器的

00:15:02.366 --> 00:15:03.346 A:middle
最低版本

00:15:04.066 --> 00:15:05.556 A:middle
我们将在后面的演讲中

00:15:05.556 --> 00:15:07.586 A:middle
详细说明

00:15:07.796 --> 00:15:08.616 A:middle
之后是导入

00:15:08.616 --> 00:15:10.256 A:middle
PacakageDescription 的语句

00:15:10.886 --> 00:15:12.326 A:middle
这是 Xcode 提供的库

00:15:12.326 --> 00:15:14.526 A:middle
其中包含

00:15:14.526 --> 00:15:16.296 A:middle
使用 Manifest 文件的 API

00:15:17.916 --> 00:15:19.766 A:middle
在这之后是

00:15:19.766 --> 00:15:20.926 A:middle
包的初始化语句

00:15:21.566 --> 00:15:23.216 A:middle
一条包初始化语句

00:15:23.216 --> 00:15:25.396 A:middle
可以配置整个包

00:15:26.206 --> 00:15:27.546 A:middle
在本例中

00:15:27.546 --> 00:15:29.296 A:middle
现在只有包的名称

00:15:29.296 --> 00:15:29.806 A:middle
所以我需要添加 Target

00:15:30.326 --> 00:15:33.306 A:middle
Swift 包具有

00:15:33.306 --> 00:15:34.136 A:middle
关于 Target 的标准布局

00:15:35.146 --> 00:15:36.766 A:middle
库 Target 位于

00:15:36.766 --> 00:15:38.666 A:middle
名为 Sources 的目录下

00:15:38.766 --> 00:15:41.256 A:middle
每个 Target 应具有自己的子目录

00:15:41.836 --> 00:15:43.966 A:middle
它们需要在

00:15:43.966 --> 00:15:45.316 A:middle
包初始化语句的 Target 部分

00:15:45.316 --> 00:15:45.986 A:middle
进行声明

00:15:47.006 --> 00:15:48.306 A:middle
标准布局非常强大

00:15:48.306 --> 00:15:49.926 A:middle
因为你无需

00:15:49.926 --> 00:15:51.416 A:middle
在 Manifest 中

00:15:51.416 --> 00:15:52.696 A:middle
单独列出源文件
 
00:15:53.426 --> 00:15:54.446 A:middle
你只需将它们放在正确的目录中

00:15:54.446 --> 00:15:56.036 A:middle
Xcode 就会

00:15:56.036 --> 00:15:57.126 A:middle
自动添加它们
 
00:15:58.566 --> 00:15:59.636 A:middle
如果我想添加另一个 Target

00:15:59.636 --> 00:16:01.466 A:middle
我可以创建一个

00:16:01.466 --> 00:16:03.476 A:middle
新的子目录

00:16:03.476 --> 00:16:04.876 A:middle
然后在 Manifest 中声明 Target

00:16:05.416 --> 00:16:08.806 A:middle
测试 Target 位于

00:16:08.806 --> 00:16:10.806 A:middle
名为 Tests 的目录下

00:16:10.806 --> 00:16:12.366 A:middle
它们也有自己的子目录

00:16:12.926 --> 00:16:15.496 A:middle
它们在声明时使用的是

00:16:15.496 --> 00:16:18.116 A:middle
testTarget API

00:16:18.116 --> 00:16:19.516 A:middle
并且由于测试 Target

00:16:19.516 --> 00:16:20.916 A:middle
通常是测试另一个 Target

00:16:20.916 --> 00:16:22.316 A:middle
因此你需要声明

00:16:22.316 --> 00:16:23.686 A:middle
对被测 Target 的依赖

00:16:24.866 --> 00:16:25.756 A:middle
这是使用

00:16:25.756 --> 00:16:27.616 A:middle
testTarget API 的 dependencies 参数

00:16:27.616 --> 00:16:28.456 A:middle
来完成的

00:16:29.176 --> 00:16:32.936 A:middle
作为最后一步

00:16:32.936 --> 00:16:34.506 A:middle
我们需要为包

00:16:34.506 --> 00:16:34.926 A:middle
声明产品

00:16:35.576 --> 00:16:36.696 A:middle
产品用于

00:16:36.786 --> 00:16:38.616 A:middle
从包中导出 Target

00:16:38.616 --> 00:16:39.656 A:middle
以便其他包可以使用它们

00:16:40.486 --> 00:16:42.066 A:middle
在本例中

00:16:42.066 --> 00:16:43.716 A:middle
有一个库产品

00:16:43.796 --> 00:16:44.786 A:middle
导出的是一个库 Target

00:16:45.376 --> 00:16:49.386 A:middle
我们刚刚看到了

00:16:49.386 --> 00:16:50.366 A:middle
一个基本的 Swift 包是如何配置的

00:16:50.996 --> 00:16:52.236 A:middle
现在让我们看看

00:16:52.286 --> 00:16:53.586 A:middle
如何在现有的 Xcode 项目中

00:16:53.946 --> 00:16:55.326 A:middle
添加对 Swift 包的支持

00:16:55.326 --> 00:16:59.416 A:middle
我有一个

00:16:59.416 --> 00:17:01.016 A:middle
名为 Menu Downloader 的项目

00:17:01.016 --> 00:17:02.516 A:middle
我一直把它与其他包管理器一起使用

00:17:02.546 --> 00:17:04.016 A:middle
如 CocoPods 和 Carthage

00:17:04.636 --> 00:17:08.705 A:middle
这个项目有一个 Swift Target

00:17:08.705 --> 00:17:11.786 A:middle
一些遗留 C 代码

00:17:11.786 --> 00:17:13.856 A:middle
Xcode 项目文件和一个

00:17:13.856 --> 00:17:16.386 A:middle
CoCoPods 包管理器使用的
podspec 文件

00:17:17.175 --> 00:17:19.616 A:middle
首先需要做的是

00:17:19.715 --> 00:17:21.286 A:middle
添加 package.swift

00:17:21.286 --> 00:17:23.536 A:middle
Manifest 文件

00:17:23.665 --> 00:17:25.996 A:middle
为配置 Target 做准备

00:17:26.056 --> 00:17:27.586 A:middle
从遗留的 C 代码开始

00:17:27.986 --> 00:17:30.656 A:middle
我们首先给它一个名称

00:17:30.656 --> 00:17:31.336 A:middle
然后给它一个自定义路径

00:17:31.336 --> 00:17:33.906 A:middle
这么做的原因是

00:17:33.946 --> 00:17:35.536 A:middle
这个 Target 没有放在

00:17:35.536 --> 00:17:36.456 A:middle
标准的 Sources 目录下

00:17:37.796 --> 00:17:39.636 A:middle
我还发现

00:17:39.636 --> 00:17:41.276 A:middle
C 代码中有一个宏

00:17:41.276 --> 00:17:43.366 A:middle
如果被定义

00:17:43.366 --> 00:17:43.906 A:middle
就会下载一个秘密午餐菜单

00:17:44.716 --> 00:17:46.856 A:middle
所以我使用了

00:17:47.426 --> 00:17:49.726 A:middle
cSettings API 定义它

00:17:49.976 --> 00:17:51.836 A:middle
我们可以以用类似的方式

00:17:51.906 --> 00:17:53.326 A:middle
配置 Swift Target

00:17:53.326 --> 00:17:55.636 A:middle
先自定义路径

00:17:55.636 --> 00:18:00.796 A:middle
然后声明对遗留 C Target 的依赖

00:18:00.906 --> 00:18:02.236 A:middle
这个包有两个产品

00:18:03.026 --> 00:18:04.986 A:middle
第一个产品导出 Swift Target

00:18:04.986 --> 00:18:07.946 A:middle
第二个产品导出 C Target

00:18:07.946 --> 00:18:10.266 A:middle
我们需要单独导出 C Target

00:18:10.266 --> 00:18:12.446 A:middle
因为我们的一些用户

00:18:12.446 --> 00:18:14.856 A:middle
可能直接使用 C Target

00:18:14.856 --> 00:18:16.736 A:middle
在这种情况下

00:18:16.736 --> 00:18:19.000 A:middle
他们不需要 Swift 桥接

00:18:20.286 --> 00:18:23.146 A:middle
它还被标记为 dynamic

00:18:23.146 --> 00:18:25.036 A:middle
因为我知道一些用户

00:18:25.066 --> 00:18:28.986 A:middle
有时会加载这个库

00:18:29.196 --> 00:18:30.266 A:middle
现在 让我们看看

00:18:30.266 --> 00:18:33.000 A:middle
如何在包中配置包依赖关系

00:18:34.496 --> 00:18:36.576 A:middle
包依赖关系在一个

00:18:36.576 --> 00:18:39.176 A:middle
名为 dependencies 的部分中配置

00:18:39.176 --> 00:18:42.386 A:middle
它有两个参数

00:18:42.386 --> 00:18:44.446 A:middle
源 URL 和版本要求

00:18:45.366 --> 00:18:47.466 A:middle
在本例中

00:18:47.466 --> 00:18:48.576 A:middle
我使用的是 upToNextMajor 版本要求

00:18:49.296 --> 00:18:51.126 A:middle
根据语义化版本控制

00:18:51.126 --> 00:18:52.886 A:middle
这意味着我的包

00:18:52.886 --> 00:18:54.946 A:middle
需要的 Yams

00:18:54.946 --> 00:18:56.376 A:middle
是从主要版本 2 开始

00:18:56.376 --> 00:18:58.456 A:middle
然后直到下一个主要版本 3

00:18:59.676 --> 00:19:00.816 A:middle
upToNextMajor

00:19:00.816 --> 00:19:02.096 A:middle
是一种比较推荐的

00:19:02.226 --> 00:19:03.216 A:middle
版本要求声明方式

00:19:04.206 --> 00:19:06.226 A:middle
这是因为它

00:19:06.226 --> 00:19:08.366 A:middle
允许你为下一个主要版本

00:19:08.366 --> 00:19:10.346 A:middle
指定最低版本

00:19:10.896 --> 00:19:12.236 A:middle
它足够灵活

00:19:12.236 --> 00:19:14.226 A:middle
可以避免解析时的

00:19:14.226 --> 00:19:15.466 A:middle
潜在冲突

00:19:16.276 --> 00:19:19.926 A:middle
这个参数也可以直接写作 from

00:19:21.036 --> 00:19:24.106 A:middle
还有一些其他类型的版本要求

00:19:24.856 --> 00:19:27.516 A:middle
我们已经看到了 from 和 upToNextMajor

00:19:28.786 --> 00:19:30.446 A:middle
还有 upToNextMinor

00:19:30.446 --> 00:19:33.876 A:middle
它允许你基于次版本号

00:19:33.876 --> 00:19:35.016 A:middle
声明版本要求

00:19:36.006 --> 00:19:37.656 A:middle
如果你想对所采取的更改保守一些

00:19:37.656 --> 00:19:40.126 A:middle
这种版本声明十分有用

00:19:41.416 --> 00:19:43.466 A:middle
其次我们有 exact 的版本要求

00:19:43.986 --> 00:19:45.276 A:middle
这允许我们

00:19:45.276 --> 00:19:47.246 A:middle
将依赖固定到特定版本上

00:19:48.086 --> 00:19:49.606 A:middle
我们不建议使用这种方式

00:19:49.606 --> 00:19:50.846 A:middle
除非你真的需要使用

00:19:51.456 --> 00:19:55.016 A:middle
因为它很可能会导致

00:19:55.016 --> 00:19:55.083 A:middle
包中发生冲突

00:19:56.636 --> 00:19:57.756 A:middle
还有一些

00:19:57.756 --> 00:19:59.236 A:middle
非基于版本的要求

00:19:59.776 --> 00:20:02.276 A:middle
有基于分支的依赖关系

00:20:02.416 --> 00:20:03.756 A:middle
如果你想要开发多个包

00:20:03.756 --> 00:20:05.546 A:middle
并且希望保持它们同步

00:20:05.546 --> 00:20:08.326 A:middle
这将非常有用

00:20:08.506 --> 00:20:09.596 A:middle
并且有基于修订的要求

00:20:09.596 --> 00:20:11.306 A:middle
这有助于

00:20:11.406 --> 00:20:12.546 A:middle
将我们的依赖固定到

00:20:12.656 --> 00:20:13.816 A:middle
特定的修订版

00:20:14.976 --> 00:20:18.176 A:middle
请注意 已发布的包中不允许

00:20:18.176 --> 00:20:19.276 A:middle
使用基于分支

00:20:19.276 --> 00:20:19.746 A:middle
和基于修订的要求

00:20:20.696 --> 00:20:22.126 A:middle
在发布包之前

00:20:22.126 --> 00:20:23.306 A:middle
必须删除所有基于分支

00:20:23.726 --> 00:20:25.136 A:middle
和修订的要求

00:20:25.626 --> 00:20:28.376 A:middle
现在 在选择我们的包依赖之后

00:20:28.376 --> 00:20:30.776 A:middle
我们需要声明

00:20:30.776 --> 00:20:33.536 A:middle
其中一个或多个产品的依赖

00:20:34.266 --> 00:20:36.026 A:middle
在本例里

00:20:36.026 --> 00:20:39.616 A:middle
我在 Swift Target 中

00:20:39.616 --> 00:20:42.566 A:middle
声明对 Yams 产品的依赖

00:20:42.696 --> 00:20:44.406 A:middle
现在让我们回到 Swift Tools 版本

00:20:45.436 --> 00:20:46.976 A:middle
正如我之前提到的

00:20:46.976 --> 00:20:48.556 A:middle
Swift Tools 版本

00:20:48.556 --> 00:20:50.046 A:middle
始终是 Manifest 的第一行

00:20:51.106 --> 00:20:52.936 A:middle
与所有其他 API 一样

00:20:52.936 --> 00:20:54.866 A:middle
PackageDescription API 也

00:20:54.866 --> 00:20:56.566 A:middle
随着时间的推移而发展

00:20:56.566 --> 00:20:58.216 A:middle
你得到的库版本

00:20:58.426 --> 00:21:00.136 A:middle
取决于 Tools 版本

00:21:01.376 --> 00:21:03.176 A:middle
它还参与了

00:21:03.176 --> 00:21:04.576 A:middle
依赖关系解析过程

00:21:05.336 --> 00:21:07.416 A:middle
Xcode 确保所有

00:21:07.416 --> 00:21:09.306 A:middle
包依赖项的 Tools 版本

00:21:09.306 --> 00:21:15.556 A:middle
始终与包的 Tools 版本兼容

00:21:15.676 --> 00:21:17.776 A:middle
最后 它声明了

00:21:17.776 --> 00:21:20.896 A:middle
构建包所需的

00:21:20.896 --> 00:21:21.166 A:middle
最低版本 Swift 编译器

00:21:22.386 --> 00:21:25.896 A:middle
这对于生成良好的诊断非常有用

00:21:25.896 --> 00:21:27.126 A:middle
以防有人试图将你的包

00:21:27.126 --> 00:21:30.246 A:middle
与较旧的不兼容版本的 Xcode 一起使用

00:21:30.766 --> 00:21:34.706 A:middle
正如 Boris 之前提到的

00:21:35.646 --> 00:21:38.086 A:middle
Swift 包总是与平台无关

00:21:39.126 --> 00:21:40.196 A:middle
如果你的包

00:21:40.196 --> 00:21:42.016 A:middle
支持多个平台

00:21:42.016 --> 00:21:43.976 A:middle
并且你有一些特定于平台的代码

00:21:43.976 --> 00:21:45.206 A:middle
我们可以使用

00:21:45.206 --> 00:21:46.106 A:middle
Swift 的条件组合功能

00:21:46.726 --> 00:21:48.696 A:middle
对于支持平台的可用性

00:21:48.696 --> 00:21:50.936 A:middle
Xcode 为每个平台

00:21:50.936 --> 00:21:53.526 A:middle
都分配了默认的部署 Target

00:21:54.046 --> 00:21:56.336 A:middle
你可以在包初始化的

00:21:56.336 --> 00:21:58.726 A:middle
platform 部分中

00:21:58.726 --> 00:21:59.956 A:middle
自定义部署 Target

00:22:04.276 --> 00:22:05.116 A:middle
此程序包可以构建的平台

00:22:05.576 --> 00:22:07.286 A:middle
它只为你列出的平台

00:22:07.286 --> 00:22:08.026 A:middle
进行自定义设置

00:22:08.696 --> 00:22:11.876 A:middle
在本例中

00:22:11.876 --> 00:22:15.256 A:middle
我将 macOS 自定义为 10.15
将 iOS 自定义为 13

00:22:16.306 --> 00:22:17.566 A:middle
如果你当前的 Tools 版本

00:22:17.846 --> 00:22:19.336 A:middle
没有所需的

00:22:19.336 --> 00:22:21.626 A:middle
部署 Target API

00:22:21.626 --> 00:22:22.606 A:middle
你则可以使用基于字符串的形式

00:22:23.266 --> 00:22:26.926 A:middle
我们刚刚提到了很多关于 API 的东西

00:22:27.766 --> 00:22:29.786 A:middle
所有包 Manifest API

00:22:29.786 --> 00:22:31.976 A:middle
都有对应的文档

00:22:31.976 --> 00:22:34.446 A:middle
你可以在模块界面中查看

00:22:35.776 --> 00:22:36.796 A:middle
按住 Command 键

00:22:36.796 --> 00:22:38.686 A:middle
在任何 Manifest 文件中

00:22:38.686 --> 00:22:40.056 A:middle
点按导入 PackageDescription 的语句

00:22:40.056 --> 00:22:42.376 A:middle
来访问模块界面

00:22:43.706 --> 00:22:45.896 A:middle
知道了这些

00:22:45.896 --> 00:22:47.316 A:middle
让我们再次欢迎 Boris

00:22:47.316 --> 00:22:47.756 A:middle
讨论如何编辑 Swift 包

00:22:48.236 --> 00:22:48.536 A:middle
谢谢大家

00:22:49.516 --> 00:22:55.266 A:middle
[掌声]

00:22:55.766 --> 00:22:56.386 A:middle
&gt;&gt; 多谢 Ankit

00:22:56.796 --> 00:23:00.036 A:middle
在你发布包后

00:23:00.036 --> 00:23:02.656 A:middle
过一段时间

00:23:02.656 --> 00:23:06.146 A:middle
为了与你的团队或开源社区共享

00:23:06.146 --> 00:23:09.046 A:middle
你可能需要在 App 的上下文中修改它

00:23:09.046 --> 00:23:10.706 A:middle
那么 我们来谈谈编辑包

00:23:11.636 --> 00:23:13.576 A:middle
在前面的演示中

00:23:13.576 --> 00:23:14.536 A:middle
我在编辑了一些包

00:23:15.036 --> 00:23:16.806 A:middle
其中一个是本地包

00:23:17.116 --> 00:23:19.526 A:middle
它是作为工作空间的一部分构建的

00:23:19.876 --> 00:23:22.516 A:middle
另一个是双击 package.swift 

00:23:22.516 --> 00:23:23.476 A:middle
独立打开的

00:23:23.816 --> 00:23:25.146 A:middle
两者都是一直可编辑的

00:23:25.746 --> 00:23:27.286 A:middle
但是其中的包依赖项

00:23:27.286 --> 00:23:29.466 A:middle
被锁定无法编辑

00:23:29.466 --> 00:23:31.446 A:middle
因为它们由 Xcode 自动管理

00:23:31.976 --> 00:23:34.626 A:middle
如果你看看之前的 App

00:23:34.626 --> 00:23:38.476 A:middle
我们依赖 GitHub 上的 FoodNStuff 包

00:23:38.886 --> 00:23:41.066 A:middle
如果我们现在将独立的包

00:23:41.066 --> 00:23:43.646 A:middle
作为本地包

00:23:43.646 --> 00:23:45.566 A:middle
添加到我们的项目中

00:23:45.566 --> 00:23:46.926 A:middle
它将覆盖现有依赖项

00:23:46.926 --> 00:23:49.246 A:middle
而无需进行删除

00:23:50.496 --> 00:23:53.486 A:middle
它的覆盖基于路径的最后一部分

00:23:53.846 --> 00:23:55.116 A:middle
因此 由于这两者都具有相同的最后一部分

00:23:55.116 --> 00:23:57.086 A:middle
因此本地包

00:23:57.086 --> 00:23:58.506 A:middle
将覆盖远程依赖

00:23:58.936 --> 00:24:02.056 A:middle
由于本地包始终可编辑

00:24:02.056 --> 00:24:04.916 A:middle
因此你可以以这种方式

00:24:04.916 --> 00:24:06.666 A:middle
同时编辑 App 和包

00:24:07.246 --> 00:24:13.816 A:middle
我们来演示如何编辑包

00:24:14.236 --> 00:24:15.886 A:middle
再次 我们回到

00:24:15.886 --> 00:24:17.266 A:middle
我们之前的演示中停下的地方

00:24:18.606 --> 00:24:22.196 A:middle
如果你还记得

00:24:22.196 --> 00:24:23.406 A:middle
Swift Package Dependencies 部分

00:24:23.406 --> 00:24:26.886 A:middle
显示了我们添加的包依赖

00:24:27.836 --> 00:24:30.796 A:middle
由于之前我们已经对独立包完成了检查

00:24:30.796 --> 00:24:32.306 A:middle
我们可以将它

00:24:32.306 --> 00:24:33.766 A:middle
拖到我们的项目中

00:24:37.356 --> 00:24:38.806 A:middle
现在 Swift Package Dependencies 部分消失了

00:24:39.286 --> 00:24:41.586 A:middle
因为我们不再使用远程依赖项

00:24:41.586 --> 00:24:43.316 A:middle
我们正在使用本地包

00:24:47.876 --> 00:24:50.356 A:middle
我们的用户要求

00:24:50.356 --> 00:24:51.666 A:middle
我们为午餐 App 提供新功能

00:24:52.326 --> 00:24:53.866 A:middle
他们想看看

00:24:53.926 --> 00:24:54.456 A:middle
他们能吃哪些菜

00:24:54.636 --> 00:24:56.346 A:middle
所以 我们要明确标记

00:24:56.696 --> 00:24:58.536 A:middle
哪种菜是素食者能吃的 哪种不是

00:24:59.136 --> 00:25:00.756 A:middle
值得庆幸的是

00:25:00.756 --> 00:25:02.296 A:middle
我们的数据模型已包含该信息

00:25:04.676 --> 00:25:06.646 A:middle
不是我们的数据模型

00:25:06.786 --> 00:25:07.636 A:middle
而是我们的潜在数据

00:25:07.856 --> 00:25:09.256 A:middle
我们必须更改数据模型

00:25:09.256 --> 00:25:10.426 A:middle
来真正显示信息

00:25:11.066 --> 00:25:12.576 A:middle
进入包目录

00:25:13.976 --> 00:25:15.476 A:middle
打开 FoodItem 类型

00:25:16.806 --> 00:25:18.056 A:middle
我将在这里添加一个新属性

00:25:22.956 --> 00:25:25.786 A:middle
名为 vegetarian

00:25:25.786 --> 00:25:27.336 A:middle
类型是 Bool

00:25:27.336 --> 00:25:28.436 A:middle
拷贝这部分

00:25:28.436 --> 00:25:30.826 A:middle
将它作为参数

00:25:30.826 --> 00:25:31.606 A:middle
添加到初始化中

00:25:31.936 --> 00:25:34.666 A:middle
最后我们在初始化中

00:25:34.666 --> 00:25:39.526 A:middle
设置属性参数

00:25:40.136 --> 00:25:41.376 A:middle
所以现在我们在数据模型中

00:25:41.376 --> 00:25:43.666 A:middle
有关于是否是素食的信息

00:25:44.366 --> 00:25:46.576 A:middle
让我们在 UI 中添加一些内容

00:25:46.576 --> 00:25:48.116 A:middle
以便向用户显示信息

00:25:49.286 --> 00:25:51.216 A:middle
转到我们的 iOS App 的代码

00:25:51.216 --> 00:25:54.046 A:middle
让我们隐藏项目导航栏

00:25:54.166 --> 00:25:55.166 A:middle
获得更多的空间

00:25:55.166 --> 00:25:57.886 A:middle
并恢复预览

00:25:57.886 --> 00:25:58.946 A:middle
以便我们看到

00:25:58.946 --> 00:25:59.076 A:middle
正在处理的内容

00:25:59.666 --> 00:26:02.086 A:middle
我们可以使用跳转栏

00:26:02.086 --> 00:26:03.566 A:middle
来转到 FoodItemRowView 类型

00:26:04.086 --> 00:26:09.586 A:middle
如果我们在编辑器中转到我们的 UI 代码

00:26:09.586 --> 00:26:11.386 A:middle
我们会看到高亮显示的

00:26:11.386 --> 00:26:14.676 A:middle
表示每个表视图单元格

00:26:15.366 --> 00:26:20.736 A:middle
所以 我已经准备了一个片段

00:26:20.866 --> 00:26:23.716 A:middle
可以为食物添加标签

00:26:23.716 --> 00:26:26.146 A:middle
包含食物名称

00:26:26.146 --> 00:26:28.536 A:middle
并添加是否是素食的表情符号

00:26:29.016 --> 00:26:31.626 A:middle
在文本字段中

00:26:31.836 --> 00:26:33.036 A:middle
使用该标签

00:26:33.476 --> 00:26:37.996 A:middle
让我们恢复预览

00:26:38.486 --> 00:26:42.066 A:middle
然后可以看到

00:26:42.066 --> 00:26:44.176 A:middle
现在每道菜都清楚标明

00:26:44.176 --> 00:26:45.276 A:middle
它是不是素食

00:26:45.956 --> 00:26:47.526 A:middle
因此 通过这些步骤

00:26:47.526 --> 00:26:49.636 A:middle
你可以同时编辑你的 App 和包

00:26:50.146 --> 00:26:52.416 A:middle
我们回到幻灯片

00:26:58.396 --> 00:27:00.466 A:middle
这种覆盖机制

00:27:00.526 --> 00:27:01.836 A:middle
也可用于修改他人的包

00:27:01.836 --> 00:27:03.986 A:middle
如果你需要修复漏洞

00:27:03.986 --> 00:27:05.646 A:middle
或者修改

00:27:05.646 --> 00:27:07.146 A:middle
包中的漏洞

00:27:08.976 --> 00:27:10.696 A:middle
总结一下

00:27:10.696 --> 00:27:12.106 A:middle
我们来看看

00:27:12.156 --> 00:27:13.766 A:middle
Swift 包管理器的开源项目

00:27:13.766 --> 00:27:15.136 A:middle
我们将其简称为 Swift PM

00:27:15.796 --> 00:27:18.896 A:middle
Swift PM 已经推出了几年

00:27:18.896 --> 00:27:20.576 A:middle
Xcode 对 Swift 包的支持

00:27:20.576 --> 00:27:23.006 A:middle
也建立在它之上

00:27:23.276 --> 00:27:24.676 A:middle
Swift 是一种跨平台语言

00:27:24.676 --> 00:27:26.496 A:middle
Swift PM 则是

00:27:26.496 --> 00:27:28.186 A:middle
是一个用于 Swift 包的

00:27:28.186 --> 00:27:28.956 A:middle
跨平台构建系统
 
00:27:29.526 --> 00:27:31.476 A:middle
你可以使用它

00:27:31.626 --> 00:27:35.436 A:middle
在客户端和服务器端 App 之间共享代码

00:27:35.686 --> 00:27:37.226 A:middle
Swift PM 由

00:27:37.226 --> 00:27:38.736 A:middle
Swift 命令下的

00:27:38.736 --> 00:27:39.606 A:middle
四个命令行工具组成

00:27:39.886 --> 00:27:41.596 A:middle
有 swift build

00:27:41.596 --> 00:27:42.116 A:middle
用于构建一个包

00:27:42.556 --> 00:27:44.256 A:middle
有 swift run

00:27:44.256 --> 00:27:44.776 A:middle
用于运行可执行结果

00:27:45.036 --> 00:27:46.496 A:middle
有 swift test 用于运行测试

00:27:47.146 --> 00:27:48.846 A:middle
以及最后的 swift package

00:27:48.846 --> 00:27:50.196 A:middle
用于在包上执行各种

00:27:50.196 --> 00:27:51.686 A:middle
非构建操作

00:27:52.546 --> 00:27:54.166 A:middle
这些命令行工具

00:27:54.166 --> 00:27:57.326 A:middle
可用于为 macOS 和 Linux 构建包

00:27:58.836 --> 00:28:03.156 A:middle
要了解有关 Swift PM 命令行工具的更多信息

00:28:03.156 --> 00:28:05.446 A:middle
及其未来发展的想法

00:28:05.446 --> 00:28:06.646 A:middle
你可以查看 WWDC 2018 中的

00:28:06.646 --> 00:28:09.896 A:middle
Getting to Know Swift Package Manager 会议

00:28:10.906 --> 00:28:14.726 A:middle
当然 你也可以使用 xcodebuild

00:28:14.726 --> 00:28:16.196 A:middle
在命令行或者 CI 上构建包

00:28:16.966 --> 00:28:18.476 A:middle
这也是一种在命令行上

00:28:18.476 --> 00:28:20.706 A:middle
为 iOS watchOS 和 tvOS

00:28:20.706 --> 00:28:21.956 A:middle
构建包的方法

00:28:22.426 --> 00:28:25.216 A:middle
Xcode 中的 Swift 包支持构建在

00:28:25.216 --> 00:28:26.436 A:middle
libSwiftPM 库之上

00:28:26.436 --> 00:28:29.996 A:middle
libSwiftPM 库是开源项目的一部分

00:28:30.946 --> 00:28:32.416 A:middle
libSwiftPM 可用于

00:28:32.416 --> 00:28:33.856 A:middle
支持 Swift 包和

00:28:33.856 --> 00:28:35.366 A:middle
其他 ID 开发人员工具

00:28:36.166 --> 00:28:37.406 A:middle
我们很高兴与社区合作 

00:28:37.406 --> 00:28:39.116 A:middle
建立稳定的 API

00:28:39.856 --> 00:28:42.946 A:middle
一个例子是 SourceKit-LSP

00:28:42.946 --> 00:28:44.856 A:middle
它是为

00:28:44.856 --> 00:28:46.266 A:middle
Swift 和 C 语言

00:28:46.266 --> 00:28:48.336 A:middle
实现语言服务器协议

00:28:48.336 --> 00:28:50.616 A:middle
简称 LSP

00:28:51.466 --> 00:28:53.886 A:middle
LSP 定义了

00:28:53.886 --> 00:28:55.926 A:middle
编辑器或 IDE 与

00:28:59.286 --> 00:29:01.026 A:middle
例如自动补全 跳转到定义

00:29:01.026 --> 00:29:02.846 A:middle
或查找引用等语言功能

00:29:03.416 --> 00:29:05.666 A:middle
使用 SourceKit-LSP

00:29:05.666 --> 00:29:08.616 A:middle
支持语言服务器协议的编辑器 IDE

00:29:08.616 --> 00:29:10.186 A:middle
就可以为 Swift 包提供这些功能

00:29:10.396 --> 00:29:11.776 A:middle
这是建立在

00:29:11.776 --> 00:29:13.206 A:middle
开源 libSwiftPM 之上的

00:29:13.686 --> 00:29:16.986 A:middle
Swift 包管理器是

00:29:16.986 --> 00:29:18.966 A:middle
更大的 Swift 开源项目的一部分

00:29:19.316 --> 00:29:20.946 A:middle
Swift.org 网站是一个

00:29:20.946 --> 00:29:23.696 A:middle
了解社区和发展过程的好地方

00:29:24.896 --> 00:29:26.416 A:middle
包管理器遵循

00:29:26.416 --> 00:29:28.486 A:middle
Swift 发展过程

00:29:28.486 --> 00:29:30.146 A:middle
就像 Swift 项目的其余部分一样

00:29:30.436 --> 00:29:31.706 A:middle
任何人都可以开发

00:29:31.706 --> 00:29:33.646 A:middle
并最终提交功能

00:29:33.646 --> 00:29:34.446 A:middle
或重大更改

00:29:35.846 --> 00:29:37.356 A:middle
在花时间提交修改之前

00:29:37.356 --> 00:29:39.086 A:middle
请先查看

00:29:39.086 --> 00:29:40.466 A:middle
论坛的包管理器部分

00:29:40.466 --> 00:29:42.226 A:middle
和其他开发者进行交流

00:29:42.426 --> 00:29:44.836 A:middle
并找到提供可行意见或反馈的人

00:29:45.256 --> 00:29:49.046 A:middle
Swift 包目前仅支持

00:29:49.046 --> 00:29:50.566 A:middle
源代码和单元测试

00:29:51.596 --> 00:29:53.986 A:middle
我们期待与社区合作

00:29:53.986 --> 00:29:55.686 A:middle
增加对图像 文本文件

00:29:55.686 --> 00:30:00.216 A:middle
或其他数据文件等资源的支持

00:30:00.396 --> 00:30:01.736 A:middle
我们已经有了

00:30:01.736 --> 00:30:02.836 A:middle
对包资源的提案

00:30:02.976 --> 00:30:04.336 A:middle
你可以关注这个功能的发展

00:30:04.336 --> 00:30:06.766 A:middle
并参与功能改进

00:30:09.936 --> 00:30:11.526 A:middle
同样在 Swift.org 上

00:30:11.526 --> 00:30:13.636 A:middle
我们会定期更新工具

00:30:13.636 --> 00:30:14.986 A:middle
以便你自己

00:30:14.986 --> 00:30:15.836 A:middle
尝试最新的更新

00:30:16.836 --> 00:30:18.016 A:middle
对开源项目的更改

00:30:18.016 --> 00:30:19.886 A:middle
也将成为 Xcode 

00:30:19.886 --> 00:30:21.326 A:middle
未来版本的一部分

00:30:21.936 --> 00:30:25.886 A:middle
最后

00:30:25.936 --> 00:30:28.076 A:middle
Apple 平台和 Xcode 

00:30:28.076 --> 00:30:28.736 A:middle
现在已提供对包的支持

00:30:29.776 --> 00:30:31.196 A:middle
你可以在项目中查找

00:30:31.196 --> 00:30:33.536 A:middle
可重用的代码

00:30:33.536 --> 00:30:34.346 A:middle
并将其重构到 Swift 包中

00:30:35.216 --> 00:30:36.426 A:middle
我们对 Swift 包

00:30:36.426 --> 00:30:38.436 A:middle
生态系统不断扩大感到兴奋

00:30:39.016 --> 00:30:41.536 A:middle
如果你对

00:30:41.536 --> 00:30:43.736 A:middle
使用或创建包有任何疑问

00:30:43.736 --> 00:30:46.326 A:middle
我们即将推出两个实验室

00:30:46.636 --> 00:30:48.436 A:middle
一个是在今天 12 点

00:30:48.436 --> 00:30:50.346 A:middle
另一个是明天同一时间

00:30:50.856 --> 00:30:53.256 A:middle
非常感谢你们的到来

00:30:53.306 --> 00:30:54.416 A:middle
享受这周剩下的美好时光吧

00:30:55.516 --> 00:30:59.506 A:middle
[掌声]

