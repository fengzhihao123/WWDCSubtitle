WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:06.406 --> 00:00:09.943 align:middle line:0
（如何创建独立的
Watch App）

00:00:15.749 --> 00:00:16.583 align:middle line:-1
大家好

00:00:17.050 --> 00:00:19.887 align:middle line:-2
我是Neil Desai
是一名watchOS框架工程师

00:00:19.953 --> 00:00:22.155 align:middle line:-1
今天很开心向大家介绍

00:00:22.222 --> 00:00:25.158 align:middle line:-1
如何创建独立的Watch app

00:00:26.560 --> 00:00:29.930 align:middle line:-1
现在 越来越多的人出门

00:00:29.997 --> 00:00:31.865 align:middle line:-1
只带Apple Watch

00:00:31.932 --> 00:00:36.136 align:middle line:-2
用户喜欢Apple Watch
给他们带来的快速互动和自由

00:00:36.970 --> 00:00:39.973 align:middle line:-1
不管是带着Watch去运动

00:00:40.307 --> 00:00:43.310 align:middle line:-1
出差 或者就是接一个电话

00:00:45.479 --> 00:00:49.449 align:middle line:-2
Apple Watch都能帮你
和你最在意的人 信息

00:00:49.516 --> 00:00:51.618 align:middle line:-1
或者是app相连

00:00:52.986 --> 00:00:57.491 align:middle line:-2
现在我们享受着
Apple Watch带来的自由

00:00:57.991 --> 00:01:00.694 align:middle line:-1
用户将它们的iPhone当做备胎

00:01:02.663 --> 00:01:04.364 align:middle line:-2
所以我们想让
我们的Watch app

00:01:04.431 --> 00:01:07.901 align:middle line:-2
也达到用户对
Apple Watch的期望

00:01:07.968 --> 00:01:10.838 align:middle line:-1
为此 我们引入了一个全新的概念

00:01:10.904 --> 00:01:14.408 align:middle line:-1
叫做独立Watch app

00:01:15.042 --> 00:01:18.412 align:middle line:-2
所以现在你的iPhone app
也会成为备胎

00:01:18.478 --> 00:01:19.680 align:middle line:-1
（独立WATCH APP）

00:01:20.681 --> 00:01:23.750 align:middle line:-2
许多app现在或多或少
已经是独立的了

00:01:23.817 --> 00:01:26.587 align:middle line:-2
Outcast就是一款
很好的播客app

00:01:26.653 --> 00:01:30.691 align:middle line:-1
我从手腕上就可以直接控制整个体验

00:01:31.525 --> 00:01:34.494 align:middle line:-2
CARROT天气是
另一款很好的例子

00:01:34.561 --> 00:01:38.332 align:middle line:-2
我经常用它来查看天气
我仅在Apple Watch上用

00:01:39.066 --> 00:01:44.538 align:middle line:-2
我出国旅游时也经常会用
Elk进行货币兑换

00:01:45.038 --> 00:01:47.875 align:middle line:-2
但是 这些app
都有iPhone版本

00:01:48.976 --> 00:01:52.346 align:middle line:-2
现在既然我们说
iPhone app是备胎

00:01:52.679 --> 00:01:54.314 align:middle line:-1
那么史上第一次

00:01:54.948 --> 00:01:59.686 align:middle line:-2
你可开发为Watch
量身定做app而不用做iOS版本

00:02:06.260 --> 00:02:08.495 align:middle line:-1
为了让你的app独立起来

00:02:08.562 --> 00:02:10.997 align:middle line:-2
我来为你们介绍
今年针对Watch app

00:02:11.064 --> 00:02:12.032 align:middle line:-1
推出的新功能

00:02:12.099 --> 00:02:16.436 align:middle line:-1
比如直接向设备发送推送通知

00:02:16.703 --> 00:02:21.275 align:middle line:-2
以及使登录更加容易
还有许多其他的功能

00:02:21.775 --> 00:02:23.243 align:middle line:-1
但是首先我想谈谈

00:02:23.310 --> 00:02:25.679 align:middle line:-1
到底怎么安装这些app

00:02:27.481 --> 00:02:29.082 align:middle line:-1
现在 在Watch iOS 5中

00:02:29.149 --> 00:02:31.919 align:middle line:-2
Watch app是
嵌入到iOS app中的

00:02:31.985 --> 00:02:34.388 align:middle line:-2
所以我们将两种版本
都下载到iPhone

00:02:35.489 --> 00:02:38.725 align:middle line:-2
之后由iPhone来处理
Watch app安装任务

00:02:38.792 --> 00:02:40.961 align:middle line:-2
所以安装要从iPhone
到Apple Watch

00:02:43.197 --> 00:02:44.031 align:middle line:-1
而且…

00:02:44.097 --> 00:02:48.435 align:middle line:-2
我们在iOS 13和watchOS 6中
将完全改变这一点

00:02:48.502 --> 00:02:51.605 align:middle line:-1
所以现在App Store服务器

00:02:51.672 --> 00:02:55.475 align:middle line:-2
无论在何时何地
都可以安装这些app

00:02:55.542 --> 00:02:59.279 align:middle line:-1
而且它将应用于商店中的所有app

00:03:01.915 --> 00:03:02.749 align:middle line:-1
所以

00:03:03.617 --> 00:03:07.521 align:middle line:-2
这意味着iOS app
不再包括Watch app

00:03:07.588 --> 00:03:11.625 align:middle line:-2
有些人可能会很高兴听到下面一点
Watch app不再会计入你的

00:03:11.692 --> 00:03:14.461 align:middle line:-1
iOS app蜂窝下载限制了

00:03:15.462 --> 00:03:17.164 align:middle line:-1
然后 谢谢

00:03:20.300 --> 00:03:24.538 align:middle line:-2
我们可以通过用bitcode
重新编译App Store中的

00:03:24.605 --> 00:03:26.073 align:middle line:-1
所有的app来实现这一操作

00:03:26.139 --> 00:03:29.743 align:middle line:-2
将iOS app
与Watch app分开来

00:03:30.644 --> 00:03:34.047 align:middle line:-2
也就是说每个设备可以
分别下载自己的app

00:03:34.114 --> 00:03:37.751 align:middle line:-2
所以iPhone有iPhone app
手表有Watch app

00:03:40.487 --> 00:03:41.355 align:middle line:-1
因此

00:03:41.421 --> 00:03:44.491 align:middle line:-1
我们可以直接将app下载到设备中

00:03:44.558 --> 00:03:47.461 align:middle line:-2
我们也第一次将
Watch app的

00:03:47.528 --> 00:03:48.562 align:middle line:-1
资源和变体细化

00:03:49.196 --> 00:03:51.732 align:middle line:-2
所以如果你的用户
用的是Series 4的设备

00:03:52.032 --> 00:03:55.369 align:middle line:-1
我们就可以安装特定适用于

00:03:55.435 --> 00:03:56.503 align:middle line:-1
该设备的变体

00:03:56.570 --> 00:03:59.439 align:middle line:-1
和体系结构大小 而不是其他

00:03:59.706 --> 00:04:02.843 align:middle line:-1
资源也是同样的道理

00:04:02.910 --> 00:04:05.445 align:middle line:-1
所以如果你已经将资源目录

00:04:05.512 --> 00:04:06.346 align:middle line:-1
配置为

00:04:07.247 --> 00:04:10.551 align:middle line:-1
将特定资源用于特定设备

00:04:10.617 --> 00:04:13.921 align:middle line:-2
那么我们就能将
特定的资源安装到特定的设备

00:04:14.988 --> 00:04:17.591 align:middle line:-1
说得简单一点就是

00:04:17.658 --> 00:04:19.125 align:middle line:-1
下载会更小

00:04:19.192 --> 00:04:21.562 align:middle line:-2
Watch app的
二进制规模也会更小

00:04:21.995 --> 00:04:26.099 align:middle line:-2
如果你是因为Swift 5和
ABI的稳定性而使用Swift

00:04:26.166 --> 00:04:29.670 align:middle line:-2
那么现在Swift dylibs
已经不包含在你的app里了

00:04:29.736 --> 00:04:32.339 align:middle line:-1
所以下载还会变得更小

00:04:33.540 --> 00:04:36.243 align:middle line:-1
所以 这就是我么安装app的方式

00:04:36.310 --> 00:04:38.745 align:middle line:-2
现在我们来说说
用户要如何获取你的app

00:04:40.414 --> 00:04:43.550 align:middle line:-2
在iOS App Store里
你的app仍旧可以找到

00:04:43.817 --> 00:04:46.086 align:middle line:-1
但是现在新的watchOS 6中

00:04:46.153 --> 00:04:49.022 align:middle line:-2
我们要向你介绍专为Apple Watch
打造的App Store

00:04:50.190 --> 00:04:52.726 align:middle line:-2
这是一个功能齐全的
App Store

00:04:53.227 --> 00:04:55.562 align:middle line:-1
有完整的功能部分

00:04:55.629 --> 00:04:59.333 align:middle line:-1
完整的产品详情页面 搜索 编辑

00:04:59.399 --> 00:05:00.434 align:middle line:-1
而且我得说

00:05:00.501 --> 00:05:02.636 align:middle line:-2
你甚至可以直接
在手腕上就能购买app

00:05:02.703 --> 00:05:05.105 align:middle line:-1
操作起来真的很酷

00:05:05.172 --> 00:05:06.607 align:middle line:-1
我真的很喜欢

00:05:07.174 --> 00:05:10.077 align:middle line:-1
现在我们来说说不同类型的app

00:05:10.143 --> 00:05:13.780 align:middle line:-2
以及它们在新的
Watch App Store中如何运行

00:05:14.648 --> 00:05:16.183 align:middle line:-1
（依存APP)

00:05:16.250 --> 00:05:18.852 align:middle line:-1
所以 现在商店里的所有app

00:05:18.919 --> 00:05:21.255 align:middle line:-1
我们都叫做依存app

00:05:21.321 --> 00:05:24.591 align:middle line:-2
因为Watch app在系统上
是依赖于iPhone app

00:05:24.658 --> 00:05:25.626 align:middle line:-1
而存在的

00:05:27.828 --> 00:05:30.063 align:middle line:-1
所以如果我在Watch

00:05:30.130 --> 00:05:32.466 align:middle line:-2
App Store里
下载了一款app

00:05:32.533 --> 00:05:36.837 align:middle line:-2
系统会自动将iPhone版本
下载到你的iPhone

00:05:38.005 --> 00:05:40.807 align:middle line:-2
如果iPhone app
还没有安装完成

00:05:40.874 --> 00:05:43.410 align:middle line:-2
那么watchOS app
是启动不了的

00:05:43.477 --> 00:05:45.846 align:middle line:-1
因为系统认为Watch app

00:05:45.913 --> 00:05:47.915 align:middle line:-1
是依存于iPhone app的

00:05:49.416 --> 00:05:50.250 align:middle line:-1
（独立APP）

00:05:50.317 --> 00:05:52.019 align:middle line:-1
现在 不像依存app

00:05:52.085 --> 00:05:55.422 align:middle line:-2
独立app的意思是
Watch app可以单独运行

00:05:55.489 --> 00:05:58.458 align:middle line:-2
也就是说你
不用安装iPhone app

00:05:58.525 --> 00:05:59.960 align:middle line:-1
也可以启动Watch app

00:06:05.699 --> 00:06:10.704 align:middle line:-2
如果你同时下载了
iPhone和Watch app

00:06:10.771 --> 00:06:13.574 align:middle line:-2
那么用户可以
卸载iPhone app

00:06:13.640 --> 00:06:15.275 align:middle line:-1
而Watch app依旧存在

00:06:18.312 --> 00:06:21.048 align:middle line:-1
有些人可能开始紧张

00:06:21.114 --> 00:06:22.182 align:middle line:-1
可能开始思考

00:06:22.249 --> 00:06:24.785 align:middle line:-2
那我在商店里已经上架的app
会受到什么影响呢

00:06:24.852 --> 00:06:27.588 align:middle line:-2
那么我告诉你
那些有iOS app的

00:06:27.654 --> 00:06:28.689 align:middle line:-1
独立watchOS app

00:06:28.755 --> 00:06:32.092 align:middle line:-1
完全兼容旧版OS

00:06:32.726 --> 00:06:35.028 align:middle line:-1
而那些新的Watch app

00:06:35.329 --> 00:06:36.163 align:middle line:-1
谢谢

00:06:38.632 --> 00:06:42.903 align:middle line:-2
新的Watch app会由
watchOS或更高版本进行支持

00:06:44.705 --> 00:06:45.639 align:middle line:-1
（企业分发）

00:06:45.706 --> 00:06:48.942 align:middle line:-1
如果你想在企业内部分发app

00:06:49.009 --> 00:06:51.745 align:middle line:-2
很高兴告诉你
我们有完整的Xcode支持

00:06:51.812 --> 00:06:54.748 align:middle line:-1
来创建我们刚刚提到的不同变体

00:06:54.815 --> 00:06:57.417 align:middle line:-2
来将你的iPhone
和Watch app分离

00:06:58.051 --> 00:07:00.454 align:middle line:-1
而且当你使用Xcode完成流程时

00:07:00.521 --> 00:07:02.923 align:middle line:-1
在生成的清单plist中

00:07:02.990 --> 00:07:05.959 align:middle line:-1
会添加一个新的平台标识符密钥

00:07:06.026 --> 00:07:09.496 align:middle line:-1
用于告知系统安装内容以及安装位置

00:07:11.632 --> 00:07:15.169 align:middle line:-2
现在我们了解了
独立Watch app的重要性

00:07:15.602 --> 00:07:19.273 align:middle line:-2
现在就来说说
如何创建独立Watch app

00:07:19.339 --> 00:07:20.874 align:middle line:-1
（创建独立Watch App）

00:07:21.308 --> 00:07:22.142 align:middle line:-1
（演示）

00:07:22.209 --> 00:07:25.112 align:middle line:-1
现在我们进入Xcode

00:07:25.179 --> 00:07:26.980 align:middle line:-1
我来告诉你们 将现有app

00:07:27.047 --> 00:07:29.883 align:middle line:-1
转化为独立app有多简单

00:07:37.024 --> 00:07:37.858 align:middle line:-1
酷

00:07:37.925 --> 00:07:39.626 align:middle line:-1
现在我们进入Xcode

00:07:39.693 --> 00:07:43.263 align:middle line:-2
这是一款很棒的Watch app
现在它还是依存app

00:07:43.730 --> 00:07:44.665 align:middle line:-1
这是

00:07:44.731 --> 00:07:47.701 align:middle line:-2
我基本上已经完成了所有
让这个app独立的工作

00:07:47.768 --> 00:07:51.038 align:middle line:-2
因为这真的是一款在Watch上的
很好的闪卡app

00:07:53.340 --> 00:07:55.042 align:middle line:-1
所以我们来创建和运行这款app

00:07:55.108 --> 00:07:57.911 align:middle line:-1
并且看看手机模拟器和手表模拟器

00:07:57.978 --> 00:08:01.682 align:middle line:-1
与我们想的调试流程是不是一样的

00:08:05.018 --> 00:08:07.521 align:middle line:-1
现在我们运行Watch app

00:08:07.588 --> 00:08:09.957 align:middle line:-1
我可以马上启动调试会话

00:08:10.224 --> 00:08:13.093 align:middle line:-2
但是我们先让系统
将这款app独立起来

00:08:13.861 --> 00:08:15.629 align:middle line:-1
所以我们先停止调试会话

00:08:17.564 --> 00:08:21.602 align:middle line:-2
现在在WatchKit扩展的
目标编辑器中

00:08:22.035 --> 00:08:24.671 align:middle line:-2
我们可以看到在部署目标下方
有一个新的复选框

00:08:24.738 --> 00:08:28.041 align:middle line:-2
叫支持在未安装iOS app的
情况下运行

00:08:28.642 --> 00:08:29.776 align:middle line:-1
所以我来看看它

00:08:30.277 --> 00:08:31.812 align:middle line:-1
然后我再进行创建和运行

00:08:31.879 --> 00:08:36.283 align:middle line:-2
这样 通过该复选框
我就告诉系统这款app是独立的

00:08:36.350 --> 00:08:37.518 align:middle line:-1
我刚刚做得挺快的

00:08:37.583 --> 00:08:40.721 align:middle line:-2
所以现在我来
给你们看看一件很酷的事情

00:08:42.089 --> 00:08:44.591 align:middle line:-1
让我们关闭iPhone模拟器

00:08:45.325 --> 00:08:46.493 align:middle line:-1
因为该app是独立的

00:08:46.560 --> 00:08:48.662 align:middle line:-2
我们就不再需要
iPhone SIM卡了

00:08:48.996 --> 00:08:50.631 align:middle line:-2
所以我再创建
和运行该app一次

00:08:50.998 --> 00:08:53.934 align:middle line:-1
现在 我只创建和运行了手表模拟器

00:08:54.001 --> 00:08:57.271 align:middle line:-1
而且调试过程也更快

00:09:03.911 --> 00:09:07.114 align:middle line:-1
好 现在让我们来建立一款

00:09:07.181 --> 00:09:08.148 align:middle line:-1
只在手表上的app

00:09:08.882 --> 00:09:10.484 align:middle line:-1
所以我先关闭这个项目

00:09:11.251 --> 00:09:15.322 align:middle line:-2
为了创建新app
我点击文件 新项目

00:09:18.192 --> 00:09:20.527 align:middle line:-2
在watchOS下面
我看到了Watch app

00:09:20.594 --> 00:09:23.197 align:middle line:-2
还有带Watch app的
iOS app

00:09:23.263 --> 00:09:25.799 align:middle line:-2
现在我想创建
单独的手表app

00:09:27.000 --> 00:09:28.268 align:middle line:-1
所以我们选这个

00:09:34.074 --> 00:09:34.908 align:middle line:-1
好

00:09:35.175 --> 00:09:37.211 align:middle line:-1
然后 我们使用SwiftUI

00:09:37.611 --> 00:09:39.713 align:middle line:-1
这很酷 有很多好东西

00:09:40.781 --> 00:09:43.116 align:middle line:-1
我们再创立一个并发

00:09:44.084 --> 00:09:46.153 align:middle line:-1
之后我再保存到桌面

00:09:50.324 --> 00:09:51.325 align:middle line:-1
好

00:09:52.893 --> 00:09:54.428 align:middle line:-1
现在我们来创建和运行该app

00:09:54.895 --> 00:09:58.866 align:middle line:-2
再次强调 就像我们刚刚
说到的独立app一样

00:09:58.932 --> 00:10:00.534 align:middle line:-1
我们不需要iPhone模拟器

00:10:00.601 --> 00:10:03.570 align:middle line:-2
我们就创建和
运行手表app就行

00:10:03.637 --> 00:10:05.405 align:middle line:-1
直接运用手表模拟器

00:10:06.373 --> 00:10:07.207 align:middle line:-1
好

00:10:12.646 --> 00:10:14.615 align:middle line:-1
（演示）

00:10:14.681 --> 00:10:15.516 align:middle line:-1
谢谢

00:10:17.751 --> 00:10:19.186 align:middle line:-1
（XCODE中的APP）

00:10:19.253 --> 00:10:23.357 align:middle line:-1
我们刚刚谈到了如何迁移现有app

00:10:23.423 --> 00:10:25.425 align:middle line:-2
并将它做成
独立的Watch app

00:10:25.993 --> 00:10:28.729 align:middle line:-2
我们也可以创建
只在手表上运行的app

00:10:28.795 --> 00:10:29.630 align:middle line:-1
我们也说了

00:10:29.696 --> 00:10:32.366 align:middle line:-1
模拟器体验如何大大改善

00:10:32.766 --> 00:10:35.302 align:middle line:-1
与模拟器体验一样

00:10:35.369 --> 00:10:36.737 align:middle line:-1
我们接下来就谈谈调试

00:10:37.371 --> 00:10:40.007 align:middle line:-1
watchOS 6中的调试过程

00:10:40.073 --> 00:10:42.709 align:middle line:-1
对于模拟器来说 现在快了十倍

00:10:42.776 --> 00:10:44.044 align:middle line:-1
（调试）

00:10:44.111 --> 00:10:44.978 align:middle line:-1
谢谢

00:10:46.580 --> 00:10:48.982 align:middle line:-1
设备调试速度提高了一倍

00:10:49.049 --> 00:10:50.517 align:middle line:-1
今年我们也做了许多努力

00:10:50.584 --> 00:10:53.387 align:middle line:-1
让它比以往更加可靠

00:10:55.088 --> 00:10:58.292 align:middle line:-1
调试依旧通过iPhone代理

00:10:58.358 --> 00:11:00.928 align:middle line:-1
但是我想给你一个小小的专业提示

00:11:00.994 --> 00:11:03.997 align:middle line:-2
如果你的手机和手表
都连着Wi-Fi

00:11:04.064 --> 00:11:06.867 align:middle line:-1
那么系统会选择更快的线路

00:11:06.934 --> 00:11:09.369 align:middle line:-1
你就可以看到调试过程会更快

00:11:10.537 --> 00:11:13.507 align:middle line:-1
现在我们来深入探讨

00:11:14.074 --> 00:11:15.776 align:middle line:-1
如何让app独立起来的不同方面

00:11:17.377 --> 00:11:20.447 align:middle line:-1
为此我们要讲到三点

00:11:20.981 --> 00:11:23.283 align:middle line:-1
我们会说到如何通过身份验证

00:11:23.350 --> 00:11:26.086 align:middle line:-1
获取用户数据 或者直接从用户处

00:11:26.420 --> 00:11:27.888 align:middle line:-1
获取用户私有数据

00:11:29.056 --> 00:11:31.925 align:middle line:-1
之后是如何将信息传输至设备

00:11:32.392 --> 00:11:35.195 align:middle line:-1
最后我们会讲到如何连接

00:11:35.262 --> 00:11:37.364 align:middle line:-1
和收集自己的app数据

00:11:38.398 --> 00:11:40.667 align:middle line:-1
首先来谈谈身份验证

00:11:41.535 --> 00:11:44.137 align:middle line:-1
（登录和注册）

00:11:44.204 --> 00:11:46.773 align:middle line:-1
处理身份验证的主要方式

00:11:46.840 --> 00:11:48.842 align:middle line:-1
就是注册和登录

00:11:48.909 --> 00:11:50.410 align:middle line:-1
现在在watchOS 6中

00:11:50.477 --> 00:11:53.480 align:middle line:-1
你可以直接在手表上建立注册验证

00:11:54.381 --> 00:11:59.319 align:middle line:-2
你可以使用WK警报操作API
支持条款和条件

00:12:01.922 --> 00:12:04.625 align:middle line:-1
和我们其他的Apple平台上

00:12:04.691 --> 00:12:06.860 align:middle line:-1
现在都支持使用Apple登录

00:12:08.495 --> 00:12:11.665 align:middle line:-1
然后我们会谈谈如何创建自己的

00:12:12.399 --> 00:12:14.401 align:middle line:-1
自定义密码登录

00:12:15.402 --> 00:12:17.271 align:middle line:-1
我们先来说说使用Apple登录

00:12:17.337 --> 00:12:18.906 align:middle line:-1
（使用Apple登录）

00:12:18.972 --> 00:12:21.041 align:middle line:-1
使用Apple登录是一项简单安全

00:12:21.108 --> 00:12:24.311 align:middle line:-1
以及私密的方法从用户处获取信息

00:12:25.279 --> 00:12:27.781 align:middle line:-1
用户不需要填写表格

00:12:27.848 --> 00:12:30.050 align:middle line:-1
不用想新的密码

00:12:30.384 --> 00:12:31.818 align:middle line:-1
他们可以就

00:12:32.319 --> 00:12:36.423 align:middle line:-1
选择一个邮件地址 然后继续登录

00:12:39.526 --> 00:12:43.030 align:middle line:-2
而且每个账户都内置
两个因子身份验证

00:12:43.564 --> 00:12:46.800 align:middle line:-1
用户也不需要进行邮件验证

00:12:47.935 --> 00:12:50.404 align:middle line:-1
我们也支持在所有设备上登录

00:12:50.470 --> 00:12:55.242 align:middle line:-2
此外还有适用于任何其他类型设备的
JavaScript SDK

00:12:57.711 --> 00:12:59.313 align:middle line:-1
所以通过Apple登录

00:12:59.379 --> 00:13:01.882 align:middle line:-2
确保并使用了现在
可在watchOS上

00:13:01.949 --> 00:13:04.151 align:middle line:-1
使用的身份验证服务框架

00:13:06.119 --> 00:13:08.789 align:middle line:-1
如果你有任何特定的UI想要创建

00:13:08.856 --> 00:13:11.658 align:middle line:-2
现在可以使用
授权Apple ID按钮

00:13:11.725 --> 00:13:13.927 align:middle line:-1
并将其嵌入你的app中

00:13:13.994 --> 00:13:16.897 align:middle line:-1
这样 你的用户点击按钮

00:13:16.964 --> 00:13:18.765 align:middle line:-1
你就可以收到ID活动

00:13:18.832 --> 00:13:21.635 align:middle line:-1
然后你就可以使用身份验证服务框架

00:13:21.702 --> 00:13:24.037 align:middle line:-1
来显示相应的系统UI

00:13:25.506 --> 00:13:27.241 align:middle line:-1
这周还有其他很棒的演讲

00:13:27.307 --> 00:13:29.543 align:middle line:-2
如果你想了解更多关于
使用Apple登录的内容

00:13:29.610 --> 00:13:31.078 align:middle line:-1
我强烈建议你去听听

00:13:32.779 --> 00:13:36.450 align:middle line:-1
好了 要在WatchKit扩展的

00:13:36.517 --> 00:13:38.085 align:middle line:-1
Xcode中启用Apple登录

00:13:38.151 --> 00:13:39.686 align:middle line:-1
只需添加一项新功能

00:13:39.753 --> 00:13:42.055 align:middle line:-1
并启用通过Apple登录授权

00:13:42.523 --> 00:13:44.358 align:middle line:-1
上手就是这么轻松

00:13:45.225 --> 00:13:47.160 align:middle line:-1
（文本字段）

00:13:47.227 --> 00:13:50.197 align:middle line:-1
现在你有了自己的自定义密码登录

00:13:50.264 --> 00:13:53.667 align:middle line:-2
现在我要向你介绍今年
watchOS推出的新文本字段

00:13:54.935 --> 00:13:59.673 align:middle line:-2
这样你就可以在SwiftUI或
WatchKit中嵌入此文本字段

00:14:05.279 --> 00:14:07.414 align:middle line:-1
我们只需要用户名和密码

00:14:07.481 --> 00:14:09.249 align:middle line:-1
我们使用占位符文本

00:14:09.316 --> 00:14:12.186 align:middle line:-1
来指导用户要输入什么

00:14:14.087 --> 00:14:16.490 align:middle line:-1
如果为该特定文本字段设置了

00:14:16.557 --> 00:14:18.225 align:middle line:-1
适当的文本内容类型

00:14:18.292 --> 00:14:21.195 align:middle line:-1
然后被调出的系统文本输入控制器

00:14:21.261 --> 00:14:24.231 align:middle line:-1
会自动改变成适当的文本类型

00:14:27.301 --> 00:14:30.571 align:middle line:-2
所以 对于这个流程
比如用户点击用户名

00:14:31.371 --> 00:14:34.441 align:middle line:-1
然后系统文本输入控制器就会被调出

00:14:34.775 --> 00:14:39.680 align:middle line:-2
用户就可以通过语音
或是手写来输入内容

00:14:39.746 --> 00:14:43.217 align:middle line:-2
现在有了一个新的选项
叫连续性键盘

00:14:43.483 --> 00:14:45.152 align:middle line:-1
如果用户点击这一选项

00:14:46.220 --> 00:14:47.588 align:middle line:-1
Apple Watch就会说

00:14:47.654 --> 00:14:51.692 align:middle line:-2
“在你的iOS或者iPad OS
设备上继续完成输入”

00:14:51.758 --> 00:14:54.595 align:middle line:-2
然后你会在
iPhone或iPad上

00:14:54.661 --> 00:14:56.430 align:middle line:-1
收到通知

00:14:56.496 --> 00:14:59.266 align:middle line:-2
如果它们是用相同的
iCloud账户登录的

00:14:59.933 --> 00:15:02.736 align:middle line:-2
如果你曾经使用过
带有文本字段的tvOS

00:15:02.803 --> 00:15:04.638 align:middle line:-1
那么这个流程你就很熟悉了

00:15:06.306 --> 00:15:07.674 align:middle line:-1
当用户点击输入

00:15:07.741 --> 00:15:11.411 align:middle line:-2
他们就可以轻松地将文本
输入到他们的iOS键盘中

00:15:12.079 --> 00:15:15.516 align:middle line:-2
再次强调 文本内容类型
就像我们刚才说到的那样

00:15:15.582 --> 00:15:18.485 align:middle line:-1
在这里会有自动填充建议

00:15:18.819 --> 00:15:22.756 align:middle line:-2
然后用户可以
从他们的iCloud钥匙串

00:15:22.823 --> 00:15:27.361 align:middle line:-2
或者是首选密码管理器中
选择自动填充建议

00:15:29.763 --> 00:15:30.831 align:middle line:-1
（iOS的密码自动填充建议）

00:15:30.898 --> 00:15:31.732 align:middle line:-1
现在

00:15:32.499 --> 00:15:35.569 align:middle line:-1
如果你想让系统置顶你的

00:15:35.636 --> 00:15:37.171 align:middle line:-1
密码自动填充建议

00:15:37.471 --> 00:15:38.605 align:middle line:-1
那么

00:15:38.672 --> 00:15:41.208 align:middle line:-1
你要保证设置正确的文本内容类型

00:15:41.542 --> 00:15:45.345 align:middle line:-2
并将关联域名添加到
你的WatchKit扩展中

00:15:45.812 --> 00:15:50.651 align:middle line:-2
关联域名是将你的app
和网站联系起来的好方法

00:15:50.918 --> 00:15:53.453 align:middle line:-1
这样系统就知道

00:15:53.520 --> 00:15:58.192 align:middle line:-2
用户的iCloud钥匙串中
可能存在的凭证

00:15:58.258 --> 00:16:01.595 align:middle line:-1
可以置顶并显示在iOS键盘的顶部

00:16:04.498 --> 00:16:07.467 align:middle line:-1
一旦用户选择自动填充建议

00:16:07.534 --> 00:16:09.937 align:middle line:-1
系统就会尽力

00:16:10.003 --> 00:16:13.507 align:middle line:-1
同时填写用户名和密码

00:16:15.275 --> 00:16:16.577 align:middle line:-1
对于基于密码的登录

00:16:16.643 --> 00:16:19.847 align:middle line:-1
有时候你可能会需要支持一次性密码

00:16:20.180 --> 00:16:22.516 align:middle line:-1
如果你设置了正确的文本内容类型

00:16:23.417 --> 00:16:26.186 align:middle line:-1
一次性密码就会自动填充

00:16:26.253 --> 00:16:29.690 align:middle line:-2
如果你是通过iMessage
或短信发送的话

00:16:29.957 --> 00:16:33.694 align:middle line:-2
然后系统文本输入控制器
将显示自动填充建议

00:16:33.760 --> 00:16:35.429 align:middle line:-1
用户就可以选择

00:16:35.495 --> 00:16:38.398 align:middle line:-1
之后继续进行身份验证

00:16:39.833 --> 00:16:42.903 align:middle line:-1
（文本字段）

00:16:45.005 --> 00:16:46.373 align:middle line:-1
再次强调 对于文本字段

00:16:46.440 --> 00:16:50.978 align:middle line:-2
你可以在SwiftUI
或WatchKit中使用

00:16:51.044 --> 00:16:53.313 align:middle line:-1
保证你设置了关联域名

00:16:53.380 --> 00:16:56.183 align:middle line:-1
来置顶适当的自动填充建议

00:16:57.117 --> 00:16:59.753 align:middle line:-1
运用连续性键盘测试流程

00:16:59.820 --> 00:17:02.322 align:middle line:-2
如果需要的话
构建一次性密码支持

00:17:03.824 --> 00:17:07.560 align:middle line:-1
我们有时要用到的另一种用户信息

00:17:07.627 --> 00:17:09.663 align:middle line:-1
就是私密用户信息

00:17:10.130 --> 00:17:12.766 align:middle line:-1
我们想要通过不同的可用框架

00:17:12.833 --> 00:17:14.601 align:middle line:-1
来向用户询问这些信息

00:17:14.667 --> 00:17:15.569 align:middle line:-1
（隐私管理）

00:17:15.636 --> 00:17:16.904 align:middle line:-1
在watchOS中

00:17:16.970 --> 00:17:20.140 align:middle line:-1
我们已经支持直接访问日历

00:17:20.207 --> 00:17:21.708 align:middle line:-1
联系人 手势

00:17:21.775 --> 00:17:25.712 align:middle line:-1
甚至一切其他类型的信息 如定位

00:17:26.012 --> 00:17:27.915 align:middle line:-1
现在在watchOS 6中

00:17:28.315 --> 00:17:32.486 align:middle line:-2
我们现在支持直接在
Apple Watch上提供健康授权

00:17:34.755 --> 00:17:35.589 align:middle line:-1
谢谢

00:17:37.057 --> 00:17:41.295 align:middle line:-2
现在用户可以选择
是否允许所有数据请求访问

00:17:41.361 --> 00:17:43.597 align:middle line:-1
或只是允许特定请求

00:17:47.067 --> 00:17:49.203 align:middle line:-1
这就是我们如何在独立app中

00:17:49.269 --> 00:17:50.838 align:middle line:-1
获取用户信息

00:17:51.138 --> 00:17:54.474 align:middle line:-2
现在我们来谈谈如何
将信息传输至设备中

00:17:54.775 --> 00:17:55.909 align:middle line:-1
当然

00:17:55.976 --> 00:17:58.612 align:middle line:-1
传输信息的最好方式

00:17:59.112 --> 00:18:00.581 align:middle line:-1
就是推送通知

00:18:00.948 --> 00:18:02.649 align:middle line:-1
现在在watchOS 6中

00:18:02.950 --> 00:18:06.353 align:middle line:-1
手表首次成为独立推送目标

00:18:06.787 --> 00:18:07.754 align:middle line:-1
（推送通知）

00:18:07.821 --> 00:18:08.655 align:middle line:-1
谢谢

00:18:10.757 --> 00:18:12.059 align:middle line:-1
也就是说

00:18:12.426 --> 00:18:16.530 align:middle line:-1
你可以将用户可见通知和后台通知

00:18:16.597 --> 00:18:18.365 align:middle line:-1
直接发送至Apple Watch

00:18:18.799 --> 00:18:21.835 align:middle line:-1
而这是基于用户通知框架

00:18:21.902 --> 00:18:24.238 align:middle line:-1
我们用的是和其他Apple设备

00:18:24.304 --> 00:18:26.206 align:middle line:-1
一样的基础设施

00:18:27.107 --> 00:18:27.941 align:middle line:-1
（通知）

00:18:28.008 --> 00:18:30.043 align:middle line:-1
总的来说

00:18:30.577 --> 00:18:34.047 align:middle line:-2
你的服务器会直接
向APNS发送请求标头和

00:18:34.114 --> 00:18:35.482 align:middle line:-1
有效负载

00:18:35.549 --> 00:18:38.452 align:middle line:-1
APNS是Apple通知推送服务

00:18:38.785 --> 00:18:40.921 align:middle line:-1
然后 APNS会将有效负载

00:18:40.988 --> 00:18:42.723 align:middle line:-1
发送至适当设备

00:18:43.524 --> 00:18:44.424 align:middle line:-1
在watchOS中

00:18:44.491 --> 00:18:47.928 align:middle line:-1
有效负载和其他平台是一样的

00:18:48.495 --> 00:18:51.899 align:middle line:-2
而在在APNS请求标题上
有一个新密钥

00:18:51.965 --> 00:18:53.000 align:middle line:-1
（APNS请求标题）

00:18:53.066 --> 00:18:55.869 align:middle line:-1
新密钥是APNS推送类型

00:18:57.304 --> 00:19:00.274 align:middle line:-1
它也支持所有Apple平台

00:19:00.340 --> 00:19:01.875 align:middle line:-1
以及所有OS

00:19:03.143 --> 00:19:07.648 align:middle line:-1
你可以将该密钥设置为提醒或是后台

00:19:07.714 --> 00:19:09.449 align:middle line:-1
我觉得它的使用方式就是

00:19:09.516 --> 00:19:12.052 align:middle line:-1
如果用户会看到该通知

00:19:12.119 --> 00:19:15.889 align:middle line:-2
他们要被提醒
那么就将推送类型设置为提醒

00:19:15.956 --> 00:19:18.425 align:middle line:-1
如果你只需发送后台提醒

00:19:18.492 --> 00:19:21.995 align:middle line:-1
只是想在有新内容可用时

00:19:22.062 --> 00:19:26.066 align:middle line:-2
在设备中唤醒app
那么你就可以设为后台推送类型

00:19:27.601 --> 00:19:28.902 align:middle line:-1
（推送通知）

00:19:28.969 --> 00:19:31.405 align:middle line:-1
对于注册和推送

00:19:32.306 --> 00:19:33.140 align:middle line:-1
对于注册而言

00:19:33.207 --> 00:19:35.209 align:middle line:-1
我们会获得WatchKit令牌

00:19:35.876 --> 00:19:39.413 align:middle line:-1
就像过去发送通知一样

00:19:39.479 --> 00:19:42.382 align:middle line:-2
你的提醒通知
会推送至Watch app

00:19:42.449 --> 00:19:44.084 align:middle line:-1
方式与以前一样

00:19:44.151 --> 00:19:47.187 align:middle line:-1
将用户通知与WatchKit结合

00:19:48.222 --> 00:19:49.556 align:middle line:-1
而后台通知

00:19:49.623 --> 00:19:52.526 align:middle line:-1
则会推送只WK扩展代理

00:19:53.627 --> 00:19:55.495 align:middle line:-1
如果你加密了任何有效负载

00:19:55.562 --> 00:19:58.632 align:middle line:-2
由于我们现在
在watchOS上也有完整的

00:19:58.699 --> 00:20:00.267 align:middle line:-1
通知服务扩展

00:20:00.901 --> 00:20:03.937 align:middle line:-2
所以你可以直接在设备上
解密该有效负载

00:20:04.004 --> 00:20:05.639 align:middle line:-1
之后向用户展示

00:20:07.708 --> 00:20:08.842 align:middle line:-1
在Xcode项目中

00:20:08.909 --> 00:20:12.112 align:middle line:-1
在目标编辑器中启用推送通知

00:20:12.179 --> 00:20:16.383 align:middle line:-2
如果你选择了WatchKit扩展
你就可以直接添加新功能

00:20:16.450 --> 00:20:19.386 align:middle line:-1
并启用推送通知权利

00:20:20.487 --> 00:20:23.023 align:middle line:-1
如果你想要支持后台通知

00:20:23.090 --> 00:20:24.758 align:middle line:-1
你可以启用后台模式

00:20:25.492 --> 00:20:28.929 align:middle line:-1
然后启用远程通知复选框

00:20:30.531 --> 00:20:32.266 align:middle line:-1
我们来看看代码

00:20:33.600 --> 00:20:38.071 align:middle line:-2
现在我们在扩展代理中
app也完成了启动

00:20:38.138 --> 00:20:41.775 align:middle line:-1
我们注册通知要做的第一件事就是

00:20:41.842 --> 00:20:44.211 align:middle line:-1
征求用户许可

00:20:44.278 --> 00:20:48.115 align:middle line:-2
所以如果我们在
UN用户通知中心请求授权

00:20:48.916 --> 00:20:51.185 align:middle line:-1
用户选择了授予访问权限

00:20:51.451 --> 00:20:54.488 align:middle line:-1
那我们就可以WK共享扩展上

00:20:54.555 --> 00:20:56.423 align:middle line:-1
调用远程注册通知

00:20:57.858 --> 00:20:59.159 align:middle line:-1
之后

00:20:59.726 --> 00:21:04.198 align:middle line:-1
如果我们完成了远程通知调用注册

00:21:04.264 --> 00:21:06.033 align:middle line:-1
那么我们就可以获取设备令牌

00:21:06.099 --> 00:21:10.070 align:middle line:-2
并将该通知转发给
我们的通知提供程序

00:21:10.137 --> 00:21:11.371 align:middle line:-1
或者是我们自己的服务器

00:21:12.439 --> 00:21:14.541 align:middle line:-1
当然 我们也希望确保

00:21:14.608 --> 00:21:17.110 align:middle line:-1
实施无法注册远程通知

00:21:17.177 --> 00:21:18.579 align:middle line:-1
以防故障发生

00:21:22.249 --> 00:21:24.084 align:middle line:-1
对于后台通知而言

00:21:24.151 --> 00:21:27.588 align:middle line:-1
它们会推送收到远程通知

00:21:27.654 --> 00:21:30.457 align:middle line:-2
以及获取完成处理程序
和后台获取结果

00:21:30.724 --> 00:21:32.059 align:middle line:-1
所以 当你收到该通知

00:21:32.125 --> 00:21:34.228 align:middle line:-1
你就可以开始处理后台通知

00:21:34.494 --> 00:21:36.263 align:middle line:-1
然后只需使用适当的后台获取结果

00:21:36.330 --> 00:21:39.166 align:middle line:-1
调用完成处理程序

00:21:40.501 --> 00:21:42.669 align:middle line:-1
（细节）

00:21:42.736 --> 00:21:47.307 align:middle line:-2
再次提醒
当发送推送到watchOS时

00:21:47.374 --> 00:21:50.544 align:middle line:-2
需要APNS推送类型
即APNS请求标头的新密钥

00:21:50.611 --> 00:21:52.646 align:middle line:-1
并且它支持所有平台

00:21:52.713 --> 00:21:56.283 align:middle line:-2
所以你要将通知推送至
任何Apple设备

00:21:56.350 --> 00:21:58.685 align:middle line:-1
只需确保添加APNS推送类型

00:22:04.258 --> 00:22:07.060 align:middle line:-2
是你的WatchKit
app包标识符

00:22:07.361 --> 00:22:10.297 align:middle line:-2
而不是WatchKit扩展
我只想快速提一下

00:22:11.665 --> 00:22:15.435 align:middle line:-2
如果你有多个app 比如
iPhone App和Watch app

00:22:15.869 --> 00:22:19.740 align:middle line:-1
你想同时向两个设备发送通知

00:22:20.073 --> 00:22:21.375 align:middle line:-1
当你这么做时

00:22:21.675 --> 00:22:25.379 align:middle line:-1
系统会在同步推送通知时

00:22:25.445 --> 00:22:27.314 align:middle line:-1
适当删除重复通知

00:22:28.949 --> 00:22:29.783 align:middle line:-1
（WATCHOS中的并发推送）

00:22:29.850 --> 00:22:32.286 align:middle line:-1
还有另一种向设备推送通知的好方法

00:22:32.352 --> 00:22:34.154 align:middle line:-1
那就是并发推送

00:22:35.022 --> 00:22:38.525 align:middle line:-1
并发推送是更新你的app的好方法

00:22:38.592 --> 00:22:42.996 align:middle line:-1
如果活动表盘已启用并发功能的话

00:22:45.399 --> 00:22:46.967 align:middle line:-1
而这是通过PushKit完成的

00:22:47.034 --> 00:22:49.603 align:middle line:-1
现在在watchOS上也可使用

00:22:49.970 --> 00:22:53.273 align:middle line:-2
并且你可以使用PushKit
进行注册和推送

00:22:54.308 --> 00:22:58.779 align:middle line:-2
,如果你用的是过去
基于iOS的旧并发推送机制

00:22:58.846 --> 00:23:01.548 align:middle line:-1
我们建议你现在直接将并发推送

00:23:01.615 --> 00:23:03.317 align:middle line:-1
发至Watch

00:23:05.052 --> 00:23:06.320 align:middle line:-1
在代码中

00:23:07.354 --> 00:23:09.756 align:middle line:-1
我们可以通过设置PK推送注册表

00:23:09.823 --> 00:23:13.260 align:middle line:-1
来注册并发推送 设置代理

00:23:13.327 --> 00:23:16.697 align:middle line:-1
之后指定所需推送类型

00:23:18.999 --> 00:23:22.135 align:middle line:-1
完成之后我们就要获取设备令牌

00:23:22.202 --> 00:23:24.771 align:middle line:-1
只需转发至我们的服务器

00:23:25.539 --> 00:23:28.075 align:middle line:-1
然后处理任何可能发生的失效

00:23:29.910 --> 00:23:32.412 align:middle line:-1
之后我们发送推送

00:23:32.880 --> 00:23:36.517 align:middle line:-1
然后运用适当的PushKit方法

00:23:36.583 --> 00:23:38.785 align:middle line:-1
处理接受并发推送

00:23:39.052 --> 00:23:41.722 align:middle line:-1
然后重新加载并发时间表

00:23:44.124 --> 00:23:45.192 align:middle line:-1
好了

00:23:45.259 --> 00:23:47.628 align:middle line:-1
这就是我们向设备推送信息的方法

00:23:48.328 --> 00:23:51.632 align:middle line:-1
我们接下来讲讲如何收集信息

00:23:51.698 --> 00:23:53.100 align:middle line:-1
以及处理连接性问题

00:23:54.301 --> 00:23:55.135 align:middle line:-1
（联网）

00:23:55.202 --> 00:23:57.137 align:middle line:-1
一般来说 在联网方面

00:23:57.938 --> 00:23:59.473 align:middle line:-1
我们会用URL会话

00:23:59.540 --> 00:24:02.576 align:middle line:-2
这在watchOS上
已经可用很久了

00:24:03.277 --> 00:24:04.111 align:middle line:-1
至于

00:24:04.912 --> 00:24:06.313 align:middle line:-1
至于CloudKit

00:24:06.380 --> 00:24:09.383 align:middle line:-2
我们也用CloudKit
来收集app数据

00:24:10.083 --> 00:24:11.618 align:middle line:-1
（URL会话）

00:24:11.685 --> 00:24:13.987 align:middle line:-1
如果你在使用手表连接

00:24:14.054 --> 00:24:17.291 align:middle line:-2
并且要依赖iPhone app
来获取特定信息

00:24:17.357 --> 00:24:21.094 align:middle line:-2
那么你就要将所有的
手表连接使用情况

00:24:21.161 --> 00:24:22.930 align:middle line:-1
迁移至NSURL会话

00:24:24.398 --> 00:24:25.666 align:middle line:-1
再次强调 对于手表来说

00:24:26.166 --> 00:24:28.769 align:middle line:-2
用户基本上使用
Watch app的时间

00:24:28.836 --> 00:24:31.705 align:middle line:-1
都会很短 然后他们就会放下手腕

00:24:31.772 --> 00:24:34.174 align:middle line:-1
因此 务必使用后台会话

00:24:34.241 --> 00:24:38.111 align:middle line:-1
确保URL会话能够正确完成

00:24:39.746 --> 00:24:40.647 align:middle line:-1
（手表连接）

00:24:40.714 --> 00:24:43.517 align:middle line:-1
所以 手表连接功能依旧是可用的

00:24:44.518 --> 00:24:46.920 align:middle line:-1
你依旧可将其用于任何伴随app的

00:24:46.987 --> 00:24:48.589 align:middle line:-1
特定互动

00:24:48.655 --> 00:24:51.625 align:middle line:-1
但只在需要的时候使用

00:24:53.393 --> 00:24:56.129 align:middle line:-2
现在有一项为伴随app
安装的Boolean属性

00:24:56.196 --> 00:24:59.233 align:middle line:-2
它会让你知道该app
是否有iPhone版本

00:25:04.805 --> 00:25:07.407 align:middle line:-2
如果你已经在使用
那么你会很高兴听到

00:25:07.474 --> 00:25:11.211 align:middle line:-2
我们现在在watchOS上
也有完整的CK订阅支持

00:25:12.112 --> 00:25:15.816 align:middle line:-2
它与CloudKit
通知支持相辅相成

00:25:15.883 --> 00:25:19.720 align:middle line:-2
因此 如果你不想管理自己的
服务器或通知提供程序

00:25:19.786 --> 00:25:22.589 align:middle line:-2
你就可以运用CloudKit
来发送通知

00:25:23.690 --> 00:25:25.626 align:middle line:-1
在网上有一个很棒的演讲

00:25:25.692 --> 00:25:27.761 align:middle line:-2
如果你想了解更多
关于CloudKit

00:25:27.828 --> 00:25:30.097 align:middle line:-1
及其最佳运用的信息 请参阅该演讲

00:25:31.398 --> 00:25:33.267 align:middle line:-1
对于CK订阅

00:25:34.034 --> 00:25:36.737 align:middle line:-1
它是订阅在任何其他设备上发生的

00:25:36.803 --> 00:25:39.273 align:middle line:-1
数据库更改的好方法

00:25:39.339 --> 00:25:40.307 align:middle line:-1
（CK订阅）

00:25:40.374 --> 00:25:42.876 align:middle line:-1
之后你会收到后台通知推送

00:25:42.943 --> 00:25:45.379 align:middle line:-1
它们会告诉你什么时候更新app

00:25:45.646 --> 00:25:48.048 align:middle line:-1
然后你就可以检索只在app

00:25:48.115 --> 00:25:50.951 align:middle line:-1
和CloudKit容器之间的更改

00:25:52.853 --> 00:25:57.824 align:middle line:-2
进一步说 如果你的用户
正在使用iPhone app

00:25:57.891 --> 00:25:59.626 align:middle line:-1
他们更改了数据库

00:25:59.693 --> 00:26:03.063 align:middle line:-2
该项更改就会
发送至CloudKit

00:26:03.363 --> 00:26:06.700 align:middle line:-2
CloudKit就会知道
这是一项订阅

00:26:07.434 --> 00:26:12.339 align:middle line:-2
CloudKit就会告诉APNS
向其他设备

00:26:12.406 --> 00:26:15.342 align:middle line:-2
发送发送后台通知
告诉它们有一项订阅

00:26:15.409 --> 00:26:16.877 align:middle line:-2
在这个例子中
就是Watch app

00:26:19.646 --> 00:26:21.148 align:middle line:-1
之后 如果Watch app

00:26:21.215 --> 00:26:23.684 align:middle line:-2
如果用户对Watch app
做出了更改

00:26:23.750 --> 00:26:25.752 align:middle line:-1
该循环就会自动重复

00:26:26.186 --> 00:26:31.358 align:middle line:-1
如何发送通知在任何其他设备上

00:26:31.425 --> 00:26:33.427 align:middle line:-1
都遵循一样的规则

00:26:34.528 --> 00:26:38.765 align:middle line:-2
想要进行CloudKit订阅
你可以设置通知信息

00:26:38.832 --> 00:26:42.035 align:middle line:-1
然后将发送内容可用

00:26:42.102 --> 00:26:43.136 align:middle line:-1
设为真

00:26:43.837 --> 00:26:46.006 align:middle line:-2
然后CloudKit就会向
我们刚刚说过的

00:26:46.073 --> 00:26:48.942 align:middle line:-1
相同的回调代理发送通知

00:26:49.009 --> 00:26:50.978 align:middle line:-1
你就会收到远程通知

00:26:51.044 --> 00:26:52.412 align:middle line:-1
这样 你就可以处理并检索

00:26:52.479 --> 00:26:55.649 align:middle line:-2
只在你的app和
CloudKit容器之间

00:26:55.716 --> 00:26:57.050 align:middle line:-1
发生的更改

00:26:59.720 --> 00:27:01.655 align:middle line:-1
好了 这就是我们说到的

00:27:01.722 --> 00:27:05.058 align:middle line:-1
如何创建独立的Watch app

00:27:05.125 --> 00:27:06.860 align:middle line:-1
如何获取用户信息

00:27:07.461 --> 00:27:11.331 align:middle line:-1
以及如何向设备推送信息

00:27:11.665 --> 00:27:15.502 align:middle line:-2
最后是如何获取自己的app数据的
三种主要方式

00:27:16.637 --> 00:27:17.804 align:middle line:-1
（总结）

00:27:19.072 --> 00:27:23.644 align:middle line:-2
用户喜欢Apple Watch
给他们带来的自由和独立

00:27:23.710 --> 00:27:27.381 align:middle line:-1
现在也有许多可供使用的系统和

00:27:27.447 --> 00:27:28.815 align:middle line:-1
开发者功能

00:27:28.882 --> 00:27:33.153 align:middle line:-2
所以务必使你的Watch app
独立起来 因为说实话

00:27:33.220 --> 00:27:37.057 align:middle line:-1
因为现在用户可能比以往更加希望

00:27:37.124 --> 00:27:39.126 align:middle line:-1
Watch app能够独立

00:27:39.960 --> 00:27:40.794 align:middle line:-1
（更多信息）

00:27:40.861 --> 00:27:43.730 align:middle line:-1
网上还有更多关于演讲

00:27:43.997 --> 00:27:46.266 align:middle line:-1
以及实验室的详细信息

00:27:46.600 --> 00:27:50.971 align:middle line:-2
再次感谢大家光临
希望你们在WWDC过得愉快

00:27:51.271 --> 00:27:52.206 align:middle line:-1
谢谢

