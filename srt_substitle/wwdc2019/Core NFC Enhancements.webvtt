WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:06.406 --> 00:00:10.344 align:middle line:0
（关于Core NFC的改进）

00:00:15.415 --> 00:00:17.451 align:middle line:-2
大家好 欢迎参加
关于Core NFC的改进演讲

00:00:18.185 --> 00:00:20.521 align:middle line:-2
我希望今年大家都能度过一个
愉快的WWDC

00:00:20.921 --> 00:00:23.123 align:middle line:-2
我希望每个人都在昨天的盛典上
度过了一段愉快的时光

00:00:23.724 --> 00:00:24.591 align:middle line:-1
我是Gordon

00:00:24.658 --> 00:00:26.660 align:middle line:-2
我是Apple NFC
软件团队的一员

00:00:26.960 --> 00:00:29.429 align:middle line:-2
稍后我们的另一位团队成员
Lawrence会加入我

00:00:30.230 --> 00:00:31.331 align:middle line:-1
现在让我们谈谈NFC

00:00:33.033 --> 00:00:34.134 align:middle line:-1
（API变更）

00:00:34.201 --> 00:00:35.402 align:middle line:-1
两年前

00:00:35.469 --> 00:00:38.572 align:middle line:-1
我们引入了Core NFC框架

00:00:38.906 --> 00:00:40.007 align:middle line:-2
用于在app内
启用NDEF标签读取

00:00:40.474 --> 00:00:43.644 align:middle line:-1
去年我们引入了后台标签扫描

00:00:43.710 --> 00:00:47.047 align:middle line:-2
用于支持自动发觉NDEF标签
和app启动

00:00:48.015 --> 00:00:48.916 align:middle line:-1
然而自从…

00:00:49.216 --> 00:00:51.285 align:middle line:-2
自从我们发布了
Core NFC框架之后

00:00:51.685 --> 00:00:54.054 align:middle line:-1
开发人员们一直都在请求一件事

00:00:54.354 --> 00:00:56.657 align:middle line:-2
在这里 在Apple
我们听取了你们的要求

00:00:57.090 --> 00:00:59.927 align:middle line:-1
今年我们要超级激动地发布

00:00:59.993 --> 00:01:02.896 align:middle line:-2
我们支持NDEF标签读取
和本地标签访问

00:01:03.764 --> 00:01:05.599 align:middle line:-1
是的 谢谢

00:01:07.701 --> 00:01:11.572 align:middle line:-2
app不仅可以读写
NDEF格式的标签

00:01:11.872 --> 00:01:14.808 align:middle line:-2
你还可以使用标签的本地协议
与之进行交互

00:01:15.642 --> 00:01:18.912 align:middle line:-1
这极大地影响了你在app内

00:01:18.979 --> 00:01:20.013 align:middle line:-1
可以使用NFC实现的功能

00:01:20.881 --> 00:01:22.683 align:middle line:-1
比如你可以读取passports

00:01:23.217 --> 00:01:26.620 align:middle line:-2
与智能卡通讯
并与NFC硬件进行交互

00:01:27.387 --> 00:01:30.224 align:middle line:-2
这些在iPhone 7
及其之后版本的手机上可用

00:01:32.492 --> 00:01:34.328 align:middle line:-1
在我们了解API变更之后

00:01:34.394 --> 00:01:37.531 align:middle line:-2
我们要看一下如何在app内
写入NDEF标签

00:01:39.700 --> 00:01:41.969 align:middle line:-2
然后我们就深入了解
如何使用本地标签访问

00:01:43.737 --> 00:01:46.773 align:middle line:-2
最后我们做一个演示
在实际操作中展示我们所讲述的内容

00:01:49.409 --> 00:01:51.478 align:middle line:-1
先让我们看一下新API变更

00:01:54.548 --> 00:01:55.649 align:middle line:-1
快速回顾一下

00:01:56.149 --> 00:01:58.185 align:middle line:-1
Core NFC框架的基本结构

00:01:58.252 --> 00:01:59.853 align:middle line:-1
保持不变

00:02:04.191 --> 00:02:05.592 align:middle line:-1
然后当会话激活后

00:02:05.659 --> 00:02:08.294 align:middle line:-1
你就可以自由地实施NFC操作

00:02:11.331 --> 00:02:13.734 align:middle line:-1
每次当阅读器会话被激活时

00:02:13.800 --> 00:02:15.569 align:middle line:-1
屏幕上仍将显示标签读取动作表单

00:02:18.405 --> 00:02:20.574 align:middle line:-1
新的标签读取和本地标签访问功能

00:02:20.641 --> 00:02:22.309 align:middle line:-1
对你的app都可用

00:02:22.843 --> 00:02:24.778 align:middle line:-1
然而后台标签扫描功能

00:02:24.845 --> 00:02:27.581 align:middle line:-2
仍要求是NDEF格式的标签
并且为只读

00:02:30.617 --> 00:02:33.854 align:middle line:-1
同时 现有的60秒最大扫描时间

00:02:33.921 --> 00:02:35.455 align:middle line:-1
仍存在于每个阅读器会话中

00:02:37.057 --> 00:02:37.991 align:middle line:-1
（阅读器会话）

00:02:38.058 --> 00:02:38.959 align:middle line:-1
有什么新功能？

00:02:39.726 --> 00:02:42.029 align:middle line:-1
今年有一个新NFC标签阅读器会话

00:02:42.429 --> 00:02:45.832 align:middle line:-1
可以让app扫描并连接到标签

00:02:45.899 --> 00:02:47.534 align:middle line:-1
基于它们的基础技术

00:02:49.236 --> 00:02:51.805 align:middle line:-1
它还允许你停止并重启轮询周期

00:02:51.872 --> 00:02:54.208 align:middle line:-2
从而发现新标签
或如果需要的话可以重新连接

00:02:57.411 --> 00:02:59.847 align:middle line:-2
同时我们修改了
NFCNDEFReaderSession

00:03:03.083 --> 00:03:05.686 align:middle line:-1
这两个会话将为app

00:03:06.253 --> 00:03:07.788 align:middle line:-1
提供NFC标签对象

00:03:07.855 --> 00:03:11.725 align:middle line:-2
可以让在与标签进行交互时
使用新标签接口

00:03:14.595 --> 00:03:17.064 align:middle line:-2
这是Core NFC中的
新标签协议

00:03:17.831 --> 00:03:20.267 align:middle line:-2
你可以看到它列出了所有
主要类型的协议

00:03:20.834 --> 00:03:26.640 align:middle line:-2
NDEF、ISO7816、MIFARE、
ISO15693和FeliCa

00:03:27.441 --> 00:03:30.010 align:middle line:-1
如果你不熟悉NFC技术

00:03:30.444 --> 00:03:32.546 align:middle line:-1
我建议你首先了解NDEF

00:03:34.381 --> 00:03:35.716 align:middle line:-1
（一般API用法）

00:03:35.782 --> 00:03:36.950 align:middle line:-1
让我们回顾一下

00:03:37.017 --> 00:03:38.752 align:middle line:-2
在Core NFC中
使用这些新功能的基本步骤

00:03:39.820 --> 00:03:41.889 align:middle line:-1
首先你需要在Xcode中启动权利

00:03:41.955 --> 00:03:42.956 align:middle line:-1
和之前一样

00:03:45.158 --> 00:03:48.595 align:middle line:-2
这是一个启动了
NFC功能的app示例

00:03:49.096 --> 00:03:51.064 align:middle line:-1
执行此操作不需要特殊权限

00:03:53.200 --> 00:03:55.836 align:middle line:-1
你可以在这里看到有两种不同功能

00:03:55.903 --> 00:03:58.172 align:middle line:-2
第一是NDEF
另一个是本地标签访问

00:03:58.939 --> 00:04:00.440 align:middle line:-1
（Xcode配置）

00:04:00.507 --> 00:04:01.775 align:middle line:-1
（一般API用法）

00:04:02.042 --> 00:04:05.379 align:middle line:-1
接下来你要决定你的app需要什么

00:04:05.445 --> 00:04:08.315 align:middle line:-2
NDEF或本地访问
并使用适当的阅读器会话

00:04:10.317 --> 00:04:12.920 align:middle line:-1
你需要实施新协议委托回调

00:04:12.986 --> 00:04:14.421 align:middle line:-1
来接收新标签对象

00:04:17.324 --> 00:04:18.291 align:middle line:-1
一旦你有了标签对象

00:04:18.358 --> 00:04:20.726 align:middle line:-1
你要使用阅读器会话连接到标签

00:04:23.363 --> 00:04:26.133 align:middle line:-1
那时你就可以自由地使用标签对象

00:04:26.200 --> 00:04:27.334 align:middle line:-1
实施全部交互了

00:04:29.770 --> 00:04:30.871 align:middle line:-1
最后当你完成后

00:04:30.938 --> 00:04:34.441 align:middle line:-1
使会话无效并释放标签

00:04:36.577 --> 00:04:37.611 align:middle line:-1
（NDEF标签写入）

00:04:37.678 --> 00:04:39.079 align:middle line:-1
好吧 我之前提到过

00:04:39.146 --> 00:04:43.984 align:middle line:-2
如果你刚接触NFC 先了解一下
NFC数据交换模式或叫做NDEF

00:04:44.751 --> 00:04:47.888 align:middle line:-2
它是向app中添加NFC功能
最简单的方式

00:04:48.889 --> 00:04:51.425 align:middle line:-2
新标签运行支持
允许使用任意NDEF格式的标签

00:04:51.491 --> 00:04:54.394 align:middle line:-1
进行快速实施和原型设计

00:04:54.461 --> 00:04:55.429 align:middle line:-1
无论它是什么类型

00:04:56.697 --> 00:04:59.333 align:middle line:-2
举个例子NDEF标签可以采用
与二维码相同的方式使用

00:04:59.399 --> 00:05:03.270 align:middle line:-1
可以轻松地集成到许多现有用例中

00:05:04.471 --> 00:05:05.672 align:middle line:-1
要更进一步

00:05:06.073 --> 00:05:08.509 align:middle line:-1
在NFC中使用新标签写入支持

00:05:08.575 --> 00:05:10.177 align:middle line:-1
你可以直接从iOS中

00:05:10.611 --> 00:05:12.346 align:middle line:-1
创建与后台标签扫描

00:05:12.412 --> 00:05:13.547 align:middle line:-1
相兼容的NFC标签

00:05:15.048 --> 00:05:16.083 align:middle line:-1
让我们看一下

00:05:16.149 --> 00:05:17.084 align:middle line:-1
是的 谢谢

00:05:19.486 --> 00:05:22.256 align:middle line:-1
让我们仔细看看

00:05:22.322 --> 00:05:23.357 align:middle line:-2
在app中写入
NDEF标签是多么简单

00:05:24.625 --> 00:05:27.895 align:middle line:0
正如我所说过的那样 你需要使用
NFCNDEFReaderSession

00:05:28.495 --> 00:05:31.665 align:middle line:0
并且你需要实施
新didDetect标签回调方法

00:05:31.732 --> 00:05:33.267 align:middle line:0
用于接收NDEF标签对象

00:05:34.434 --> 00:05:36.603 align:middle line:0
这将允许app做各种事

00:05:36.670 --> 00:05:39.206 align:middle line:0
比如查询关于标签的
NDEF相关信息

00:05:39.840 --> 00:05:41.608 align:middle line:0
包括它的最大容量

00:05:42.476 --> 00:05:44.378 align:middle line:0
并决定标签是否可写入

00:05:45.612 --> 00:05:48.782 align:middle line:0
你还可以读取NDEF信息
写入NDEF信息

00:05:49.416 --> 00:05:50.450 align:middle line:0
如果标签支持

00:05:50.517 --> 00:05:52.853 align:middle line:0
你甚至可以锁定标签
从而不能再重写标签

00:05:53.954 --> 00:05:55.055 align:middle line:0
让我们看一些代码

00:05:57.191 --> 00:05:58.525 align:middle line:-1
要开始写入NDEF标签

00:05:58.892 --> 00:06:00.961 align:middle line:-2
我们要实例化我们的
NFCNDEFReaderSession

00:06:01.762 --> 00:06:03.096 align:middle line:-1
我们提供我们的新委托

00:06:04.064 --> 00:06:06.900 align:middle line:-2
并且把invalidateAfterFirstRead
参数设为假

00:06:11.738 --> 00:06:13.073 align:middle line:-1
接下来当发现标签后

00:06:13.140 --> 00:06:15.576 align:middle line:-2
我们将在这里的新
Delegate回调方法中收到它

00:06:19.479 --> 00:06:20.547 align:middle line:-1
一旦我们有标签之后

00:06:20.614 --> 00:06:22.549 align:middle line:-2
我们可以把它发送到阅读器会话的
Connect方法

00:06:22.616 --> 00:06:23.984 align:middle line:-1
从而连接到标签

00:06:24.718 --> 00:06:26.820 align:middle line:-1
此时 你的标签将保持连接

00:06:26.887 --> 00:06:30.257 align:middle line:-1
直到你连接到不同的标签 重启轮询

00:06:30.891 --> 00:06:31.992 align:middle line:-1
或使会话无效

00:06:36.897 --> 00:06:39.132 align:middle line:-1
下一步是在我们连接到标签之后

00:06:39.199 --> 00:06:41.368 align:middle line:-1
查询NDEF信息

00:06:42.169 --> 00:06:43.737 align:middle line:-1
如果标签返回一个读写状态

00:06:43.804 --> 00:06:46.673 align:middle line:-1
我们就可以自由地把新信息写入标签

00:06:50.477 --> 00:06:52.980 align:middle line:-1
下一步是使用我们的有效载荷

00:06:53.046 --> 00:06:53.981 align:middle line:-1
创建NFC NDEF信息

00:06:54.414 --> 00:06:57.451 align:middle line:-2
并把它发送到标签的
writeNDEF方法更新标签

00:07:05.259 --> 00:07:07.961 align:middle line:-1
这会终止全部NFC操作并结束会话

00:07:09.329 --> 00:07:10.697 align:middle line:-1
就是这样 很简单 对吧？

00:07:11.265 --> 00:07:13.267 align:middle line:-2
这是在app内写入NDEF标签
所需要的全部步骤

00:07:14.801 --> 00:07:16.703 align:middle line:-1
可能有一些用例

00:07:16.770 --> 00:07:18.639 align:middle line:-2
你需要使用非NDEF格式的标签
进行交互

00:07:19.072 --> 00:07:21.341 align:middle line:-1
为此 我们需要使用本地标签访问

00:07:22.009 --> 00:07:23.110 align:middle line:-1
让我们具体看一下

00:07:25.512 --> 00:07:27.047 align:middle line:-2
（本地标签读取
ISO7816）

00:07:27.548 --> 00:07:30.083 align:middle line:-1
让我们先看ISO7816

00:07:30.551 --> 00:07:35.389 align:middle line:-2
ISO7816接口用于
A类型和B类型NFC标签

00:07:36.657 --> 00:07:38.559 align:middle line:-1
用于各种不同的用例

00:07:39.126 --> 00:07:42.930 align:middle line:-2
包括电子IDS
如passports、访问权限、

00:07:43.530 --> 00:07:46.867 align:middle line:-1
与智能卡通讯、付款和运输系统

00:07:48.001 --> 00:07:49.636 align:middle line:-1
支持7816的标签

00:07:49.937 --> 00:07:52.906 align:middle line:-1
利用app协议数据单元接口

00:07:53.640 --> 00:07:55.609 align:middle line:-1
通常缩写为APDU

00:07:56.310 --> 00:07:59.379 align:middle line:-1
app可以使用7816标签对象

00:07:59.446 --> 00:08:01.782 align:middle line:-1
发送和接收APDU命令

00:08:03.851 --> 00:08:05.319 align:middle line:-1
与7816标签进行交互

00:08:05.385 --> 00:08:07.187 align:middle line:-1
有一些特殊要求

00:08:07.921 --> 00:08:09.990 align:middle line:-2
在我们查看代码之前
先回顾一下这些特殊要求

00:08:13.393 --> 00:08:17.531 align:middle line:-2
首先app需要向它的
info.plist文件中添加一条记录

00:08:17.598 --> 00:08:21.568 align:middle line:-1
声明具体的app标识符或AIDs

00:08:22.002 --> 00:08:23.804 align:middle line:-2
这个标识符是app打算要使用的
标识符

00:08:26.840 --> 00:08:28.842 align:middle line:-2
接下来一旦Core NFC
检测到标签

00:08:29.343 --> 00:08:32.011 align:middle line:-1
它首先会检查该标签是否支持

00:08:32.078 --> 00:08:34.181 align:middle line:-2
你在app的info.plist
文件中列出的其中一个AID

00:08:35.015 --> 00:08:38.986 align:middle line:-2
它将轮流选择每个AID
直到找到匹配为止

00:08:40.020 --> 00:08:42.756 align:middle line:-1
那时将调用Delegate回调

00:08:42.823 --> 00:08:45.926 align:middle line:-2
并且你将收到预先选择了
该AID的标签对象

00:08:47.027 --> 00:08:48.061 align:middle line:-1
然而此时

00:08:48.128 --> 00:08:50.330 align:middle line:-1
你可以自由地选择

00:08:50.697 --> 00:08:52.165 align:middle line:-2
在info.plist文件中
列出的任意其它AID

00:08:58.906 --> 00:09:01.074 align:middle line:-2
对于Core NFC中的
这些新功能 我们感到非常激动

00:09:01.141 --> 00:09:04.244 align:middle line:-1
然而 我们暂时不支持读取支付卡

00:09:07.748 --> 00:09:09.983 align:middle line:0
这是app的info.plist
文件的一个示例

00:09:10.317 --> 00:09:12.085 align:middle line:0
列出了它打算使用的AIDs

00:09:14.054 --> 00:09:18.125 align:middle line:0
在这里你可以看到app列出了
用于进行NDEF操作的AID

00:09:18.959 --> 00:09:20.527 align:middle line:0
（ISO7816 AID列表）

00:09:23.830 --> 00:09:26.600 align:middle line:-2
现在我们要看一下实际的
7816标签对象

00:09:27.701 --> 00:09:31.538 align:middle line:-1
协议有特定于7816技术的属性

00:09:32.873 --> 00:09:35.275 align:middle line:-2
你可以看到这里的参数包含
唯一标识符

00:09:35.542 --> 00:09:36.610 align:middle line:-1
和历史字节

00:09:37.878 --> 00:09:39.780 align:middle line:-1
有人对这里的唯一ID感到激动吗？

00:09:40.080 --> 00:09:42.382 align:middle line:-2
这是我们所收到的第二个
最受欢迎的请求

00:09:43.684 --> 00:09:46.920 align:middle line:-2
还有个sendCommand方法
用于把任意形式的APDU

00:09:46.987 --> 00:09:48.755 align:middle line:-1
传输到标签并接收响应

00:09:52.759 --> 00:09:55.295 align:middle line:-2
要开始扫描7816标签
正如我所提到的那样

00:09:55.362 --> 00:09:58.065 align:middle line:-1
我们要做的第一件事是

00:09:58.131 --> 00:10:01.201 align:middle line:-2
实施遵守NFCTagReaderSession
委托协议的委托对象

00:10:01.735 --> 00:10:04.271 align:middle line:-2
只有三个必需方法
你可以在这里看到它们

00:10:09.409 --> 00:10:11.612 align:middle line:-1
要开始扫描7816标签

00:10:12.312 --> 00:10:16.350 align:middle line:-2
先实例化NFCTagReaderSession对象
把它提供给委托

00:10:16.950 --> 00:10:19.453 align:middle line:-2
并把轮询操作
设置为ISO14443

00:10:19.987 --> 00:10:23.257 align:middle line:-2
这是A类型和B类型标签的
基础NFC技术

00:10:27.294 --> 00:10:30.597 align:middle line:-2
接下来当Core NFC发现
有相匹配的AID的标签时

00:10:30.664 --> 00:10:32.366 align:middle line:-2
我们会在Delegate回调中
收到标签

00:10:36.336 --> 00:10:39.173 align:middle line:-1
一旦我们确信我们有7816标签

00:10:39.573 --> 00:10:42.342 align:middle line:-2
我们就使用阅读器的session.connect
方法连接到标签

00:10:46.513 --> 00:10:47.948 align:middle line:-1
最后当我们连接成功后

00:10:48.482 --> 00:10:50.717 align:middle line:-2
使用helper类
创建一个APDU

00:10:50.784 --> 00:10:53.554 align:middle line:-2
并使用与标签相同的命令方法
传输APDU

00:10:53.620 --> 00:10:54.755 align:middle line:-1
并接收其响应

00:10:58.559 --> 00:10:59.626 align:middle line:-1
在处理过程中

00:10:59.693 --> 00:11:02.129 align:middle line:-1
我们可能会发现与app相关的报错

00:11:02.196 --> 00:11:03.230 align:middle line:-1
我们不应该再继续

00:11:04.064 --> 00:11:06.300 align:middle line:-2
举个例子 假如我们正在尝试
读取一个passport

00:11:06.867 --> 00:11:08.769 align:middle line:-1
并且看起来我们没有合适的证书

00:11:08.836 --> 00:11:11.605 align:middle line:-1
或密码计算错误

00:11:12.039 --> 00:11:13.173 align:middle line:-1
在这样的情境中

00:11:13.473 --> 00:11:15.442 align:middle line:-1
我们非常希望向用户指出这个错误

00:11:16.510 --> 00:11:18.812 align:middle line:-2
用报错信息调用
Invalidate方法

00:11:19.646 --> 00:11:20.948 align:middle line:-1
将使会话无效

00:11:21.014 --> 00:11:23.517 align:middle line:-2
并会在动作表单UI上显示错误符号
以及所提供的错误信息

00:11:23.584 --> 00:11:26.220 align:middle line:-1
而不是显示对勾

00:11:29.823 --> 00:11:31.959 align:middle line:-1
这是出错指示的一个示例

00:11:32.226 --> 00:11:33.527 align:middle line:-1
我们稍后再在演示中具体看一下

00:11:34.461 --> 00:11:35.495 align:middle line:-1
但这非常棒 对吗？

00:11:35.562 --> 00:11:37.698 align:middle line:-2
这是我们所收到的第三个
请求最多的功能

00:11:43.570 --> 00:11:46.507 align:middle line:-1
这是一个现有的成功指示 以供参考

00:11:49.409 --> 00:11:50.611 align:middle line:-2
（本地标签读取
MIFARE）

00:11:50.677 --> 00:11:52.045 align:middle line:-1
那么这就是7816

00:11:52.112 --> 00:11:54.014 align:middle line:-2
让我们继续讲第二个技术
MIFARE

00:11:54.948 --> 00:11:57.518 align:middle line:-1
MIFARE技术类似于7816

00:11:57.584 --> 00:11:59.453 align:middle line:-1
它基于NFC A类型标签

00:12:02.656 --> 00:12:05.526 align:middle line:-2
在世界各地的票务和徽章系统中
大量使用

00:12:08.896 --> 00:12:10.631 align:middle line:-1
NFC MIFARE标签协议

00:12:11.031 --> 00:12:13.433 align:middle line:-1
属性与7816相似

00:12:14.268 --> 00:12:16.737 align:middle line:-2
此外还有另外一个
MIFARE家族属性

00:12:17.304 --> 00:12:19.773 align:middle line:-1
这将指出

00:12:19.840 --> 00:12:20.841 align:middle line:-1
所发现的特定MIFARE标签类型

00:12:21.475 --> 00:12:24.578 align:middle line:-2
可以是MIFARE Ultraligh、
MIFARE Plus或DESFire

00:12:25.379 --> 00:12:27.681 align:middle line:-2
目前不支持
MIFARE Classic标签

00:12:28.949 --> 00:12:31.785 align:middle line:-2
这里还有一个用于
发送任意MIFARE命令的方法

00:12:32.819 --> 00:12:34.621 align:middle line:-1
此外还有一个便利的方法

00:12:34.688 --> 00:12:38.926 align:middle line:-2
用于为标签发送7816 APDU
比如DESFire和Plus

00:12:39.326 --> 00:12:40.394 align:middle line:-1
标签将支持它们

00:12:41.762 --> 00:12:43.030 align:middle line:-1
现在让我们在实际操作中看一下

00:12:45.165 --> 00:12:46.633 align:middle line:-1
要开始扫描MIFARE标签

00:12:47.067 --> 00:12:48.902 align:middle line:-1
再一次 先实例化标签阅读器会话

00:12:49.536 --> 00:12:52.606 align:middle line:-1
把轮询选项设置为ISO14443

00:12:53.540 --> 00:12:55.976 align:middle line:-2
然后设置Delegate
和CallBegin

00:12:59.313 --> 00:13:02.716 align:middle line:-2
请注意MIFARE标签
支持7816接口

00:13:03.217 --> 00:13:06.220 align:middle line:-2
并包含在app的info.plist
文件中列出的一个AID

00:13:06.820 --> 00:13:10.824 align:middle line:-2
那会作为7816对象返回
而不是MIFARE对象

00:13:13.594 --> 00:13:15.362 align:middle line:-1
此时 当调用回调时

00:13:15.863 --> 00:13:18.932 align:middle line:-2
我们要进行特别检查以确保给我们
返回了一个MIFARE标签对象

00:13:22.202 --> 00:13:23.337 align:middle line:-2
一旦我们确保我们有
MIFARE标签对象

00:13:23.403 --> 00:13:25.439 align:middle line:-2
我们就把它发送到阅读器的
session.connect方法

00:13:25.506 --> 00:13:26.540 align:middle line:-1
并连接到标签

00:13:29.076 --> 00:13:31.578 align:middle line:-2
然后我们使用标签
发送MIFARE命令

00:13:34.448 --> 00:13:35.749 align:middle line:-2
（本地标签读取
IS015693）

00:13:36.283 --> 00:13:38.085 align:middle line:-1
好的 这是四种技术中的两种技术

00:13:38.151 --> 00:13:40.220 align:middle line:-1
让我们看一下ISO15693

00:13:41.755 --> 00:13:44.057 align:middle line:-1
这也叫做类型五或邻近标签

00:13:44.324 --> 00:13:46.727 align:middle line:-1
这些在零售、工业

00:13:46.793 --> 00:13:48.195 align:middle line:-1
甚至是医疗app中很常用

00:13:51.098 --> 00:13:53.367 align:middle line:-1
再一次 这个协议

00:13:53.433 --> 00:13:56.203 align:middle line:-2
有特定
于ISO15693技术的属性

00:13:56.870 --> 00:13:58.805 align:middle line:-1
在这里我们还有唯一标识符

00:13:59.072 --> 00:14:01.608 align:middle line:-1
以及制造代码和序列号

00:14:04.511 --> 00:14:05.712 align:middle line:-1
（ISO15693便利方法）

00:14:06.046 --> 00:14:08.048 align:middle line:-1
15693的命令集

00:14:08.115 --> 00:14:09.716 align:middle line:-2
如果你没见过的话
这个命令集非常大

00:14:10.350 --> 00:14:13.453 align:middle line:-1
协议有一些常见操作的便利方法

00:14:13.954 --> 00:14:15.255 align:middle line:-1
你可以在这里看到它们

00:14:15.856 --> 00:14:18.625 align:middle line:-1
包括读写单个或多个代码块、

00:14:19.226 --> 00:14:22.262 align:middle line:-1
锁定代码块、选择和重设

00:14:23.263 --> 00:14:26.333 align:middle line:-2
再一次 这里也有一个
用于发送任意自定义命令的方法

00:14:26.667 --> 00:14:30.437 align:middle line:-2
你可以按照ISO15693规范
构建任意命令

00:14:30.971 --> 00:14:32.873 align:middle line:-1
并使用那个方法来发送命令

00:14:33.974 --> 00:14:36.677 align:middle line:-1
你可以参考规范获取更多信息

00:14:38.278 --> 00:14:39.546 align:middle line:-1
（NFC标签阅读器会话）

00:14:40.314 --> 00:14:42.149 align:middle line:-1
要开始扫描邻近标签

00:14:42.683 --> 00:14:44.751 align:middle line:-1
现在每个人应该都很熟悉了

00:14:46.153 --> 00:14:49.323 align:middle line:-2
我们要创建NFCTagReaderSession
并把它提供给委托

00:14:50.057 --> 00:14:53.427 align:middle line:-2
但这一次我们把轮询选项
修改为ISO15693

00:14:57.865 --> 00:15:00.300 align:middle line:-2
当Core NFC发现一个
15693标签时

00:15:00.367 --> 00:15:02.870 align:middle line:-1
再一次 我们将在回调中收到标签

00:15:06.273 --> 00:15:08.442 align:middle line:-2
我们再一次验证
我们有适当的标签类型

00:15:08.509 --> 00:15:10.844 align:middle line:-2
然后使用sessions.connect
方法连接到标签

00:15:14.515 --> 00:15:17.851 align:middle line:-2
一旦连接成功 我们就使用标签
发布一条readSingleBlock命令

00:15:21.388 --> 00:15:22.623 align:middle line:-2
（本地标签读取
FELICA）

00:15:22.689 --> 00:15:25.526 align:middle line:-2
最后我们要讲第四种
也是最后一种技术FeliCa

00:15:26.293 --> 00:15:28.028 align:middle line:-2
FeliCa是由Sony定义的
一种格式

00:15:28.095 --> 00:15:30.864 align:middle line:-1
在日本的运输和付款系统中广泛使用

00:15:33.700 --> 00:15:36.303 align:middle line:-2
FeliCa的使用
还有一些额外要求

00:15:38.939 --> 00:15:40.440 align:middle line:-1
与7816类似

00:15:40.507 --> 00:15:43.577 align:middle line:-2
app需要向info.plist
文件中添加一条记录

00:15:44.044 --> 00:15:47.848 align:middle line:-2
声明app打算要使用的具体的
FeliCa系统代码

00:15:48.916 --> 00:15:50.384 align:middle line:-1
出于安全和隐私考虑

00:15:50.450 --> 00:15:53.020 align:middle line:-2
我们要求是谨慎的
Felica系统代码

00:15:53.086 --> 00:15:54.421 align:middle line:-1
而不是通配符记录

00:15:55.489 --> 00:15:56.990 align:middle line:-1
（FeliCa要求）

00:15:57.057 --> 00:15:58.992 align:middle line:-1
类似于7816

00:15:59.326 --> 00:16:01.328 align:middle line:-2
当Core NFC
发现Felica标签时

00:16:01.728 --> 00:16:04.865 align:middle line:-2
我们首先验证…
检测该标签是否包含

00:16:05.199 --> 00:16:06.867 align:middle line:-2
在info.plist文件中
所列出的系统代码

00:16:07.701 --> 00:16:09.870 align:middle line:-2
如果包含 你将收到
标签和Delegate回调

00:16:10.470 --> 00:16:12.506 align:middle line:-1
如果不包含 将不会调用回调

00:16:12.573 --> 00:16:15.642 align:middle line:-2
并且app也不会收到
存在标签的通知

00:16:18.645 --> 00:16:20.714 align:middle line:-2
这是info.plist文件的
一个示例

00:16:20.781 --> 00:16:22.482 align:middle line:-1
注册FeliCa系统代码…

00:16:23.984 --> 00:16:25.552 align:middle line:-1
以执行NDEF操作

00:16:32.392 --> 00:16:34.895 align:middle line:-1
看一下这里的FeliCa标签协议

00:16:34.962 --> 00:16:36.763 align:middle line:-2
我们可以看到
专用于FeliCa的属性

00:16:37.164 --> 00:16:39.399 align:middle line:-1
我们有制造商ID 或简称IDM

00:16:39.666 --> 00:16:41.168 align:middle line:-1
以及当前所选择的系统代码

00:16:42.135 --> 00:16:46.273 align:middle line:-2
同时还有sendFeliCaCommand方法
用于把FeliCa命令发送到标签

00:16:47.307 --> 00:16:48.575 align:middle line:-2
（NFC FELICA
标签便利方法）

00:16:48.642 --> 00:16:50.878 align:middle line:-1
并且这个协议还有一些便利方法

00:16:50.944 --> 00:16:52.779 align:middle line:-2
用于执行一些常见的
FeliCa操作

00:16:54.348 --> 00:16:56.950 align:middle line:-2
你可以参考Sony的
FeliCa命令规范

00:16:57.017 --> 00:16:57.985 align:middle line:-1
获取更多信息

00:16:59.653 --> 00:17:01.021 align:middle line:-1
（NFC标签阅读器会话）

00:17:01.088 --> 00:17:04.124 align:middle line:-2
接着是我们现在应该都很熟悉的
使用模式

00:17:04.992 --> 00:17:06.993 align:middle line:-2
实例化
NFCTagReaderSession

00:17:07.528 --> 00:17:08.628 align:middle line:-1
并把它提供给委托

00:17:08.962 --> 00:17:12.065 align:middle line:-2
这一次把轮询选项
修改为ISO18092

00:17:12.532 --> 00:17:14.268 align:middle line:-1
这是Felica的NFC技术

00:17:17.871 --> 00:17:20.941 align:middle line:-2
一旦Core NFC发现一个标签
并找到与之相匹配的系统代码

00:17:21.008 --> 00:17:23.377 align:middle line:-2
我们会再一次在同样的委托中
接收标签对象

00:17:25.479 --> 00:17:27.848 align:middle line:-2
我们确保拥有我们所期待的合适的
标签类型

00:17:27.915 --> 00:17:29.116 align:middle line:-1
然后连接到标签

00:17:33.754 --> 00:17:35.022 align:middle line:-1
最后我们使用标签

00:17:35.756 --> 00:17:37.491 align:middle line:-1
发送requestResponse方法

00:17:38.392 --> 00:17:41.728 align:middle line:-1
我们现在已经讲了使用四种本地技术

00:17:41.795 --> 00:17:43.764 align:middle line:-1
写入NDEF标签和与标签相交互

00:17:46.166 --> 00:17:48.335 align:middle line:-2
现在我想邀请
Lawrence上台来

00:17:48.402 --> 00:17:50.470 align:middle line:-1
给我们做一个演示

00:17:57.110 --> 00:17:58.645 align:middle line:-1
好吧 谢谢Gordon

00:17:59.580 --> 00:18:00.747 align:middle line:-1
大家好

00:18:01.548 --> 00:18:02.482 align:middle line:-1
欢迎参加我们的演讲

00:18:04.685 --> 00:18:07.421 align:middle line:-1
为了在现实示例中演示

00:18:07.487 --> 00:18:08.789 align:middle line:-1
如何使用Core NFC框架

00:18:09.623 --> 00:18:13.861 align:middle line:-1
让我带你想象一下鱼贩的生活

00:18:16.230 --> 00:18:17.798 align:middle line:-1
作为一个技术精通的鱼贩

00:18:18.465 --> 00:18:21.368 align:middle line:-1
我听说NFC技术

00:18:21.969 --> 00:18:26.306 align:middle line:-2
可以改善客户契合度
同时也可用于存货管理

00:18:27.841 --> 00:18:29.710 align:middle line:-1
在听了这场很棒的演讲之后

00:18:30.177 --> 00:18:34.414 align:middle line:-1
我决定创建两个app改善我的买卖

00:18:35.115 --> 00:18:36.283 align:middle line:-1
即Great Fish公司

00:18:38.051 --> 00:18:39.920 align:middle line:-1
我要以两种方式使用NFC

00:18:41.421 --> 00:18:43.090 align:middle line:-1
首先我要创建

00:18:43.490 --> 00:18:46.193 align:middle line:-2
NFC NDEF标签
来描述我的产品

00:18:47.361 --> 00:18:49.663 align:middle line:-2
第二 使用
MIFARE Ultralight标签

00:18:50.030 --> 00:18:51.598 align:middle line:-1
创建优惠码标签

00:18:52.232 --> 00:18:55.235 align:middle line:-2
这也叫做
NFC Type II标签

00:19:04.711 --> 00:19:06.046 align:middle line:-1
在捕鱼后

00:19:06.346 --> 00:19:10.951 align:middle line:-2
我们集成NFC NDEF标签
来描述捕获

00:19:12.186 --> 00:19:15.355 align:middle line:-1
信息包含他们所捕获的鱼

00:19:15.856 --> 00:19:17.291 align:middle line:-1
鱼的名称和价格

00:19:18.492 --> 00:19:21.061 align:middle line:-1
然后这个标签就被贴到产品包装上

00:19:21.128 --> 00:19:23.397 align:middle line:-1
并最终配送给我们的客户

00:19:24.398 --> 00:19:28.035 align:middle line:-2
我要创建的第一个app叫做
Fish Tag Creator

00:19:29.503 --> 00:19:30.804 align:middle line:-1
看起来是这样的

00:19:32.806 --> 00:19:35.042 align:middle line:-1
一旦我在app中输入全部信息

00:19:36.009 --> 00:19:39.813 align:middle line:-2
我可以点击“写入标签”按钮
写入NDEF标签

00:19:41.048 --> 00:19:44.418 align:middle line:-2
Fish Tag Creator app
还可以让我创建

00:19:44.952 --> 00:19:47.421 align:middle line:-1
NFC优惠码进行促销

00:19:49.056 --> 00:19:50.958 align:middle line:-2
我使用
MIFARE Ultralight标签

00:19:51.024 --> 00:19:54.027 align:middle line:-2
存储特定的优惠码
并把它发送给我的客户们

00:19:55.696 --> 00:19:59.566 align:middle line:-2
在这里我可以从三个可能的优惠值中
选择其中一个写入

00:20:05.138 --> 00:20:07.641 align:middle line:-2
我的客户可以从App Store
下载这款app

00:20:08.175 --> 00:20:11.478 align:middle line:-2
并读取他们所购产品上的
NDEF鱼标签

00:20:13.614 --> 00:20:16.683 align:middle line:-2
在第一个选项卡中
我们有“点击扫描”按钮

00:20:17.651 --> 00:20:19.319 align:middle line:-1
可以扫描鱼随附的鱼标签

00:20:21.188 --> 00:20:23.857 align:middle line:-2
然后app就显示它在标签中
所存储的信息

00:20:24.591 --> 00:20:25.626 align:middle line:-1
在第二个选项卡中

00:20:25.959 --> 00:20:30.130 align:middle line:-2
我们可以点击“扫描优惠码”按钮
用于读取MIFARE Ultralight鱼标签

00:20:30.564 --> 00:20:31.532 align:middle line:-1
优惠码标签

00:20:32.299 --> 00:20:34.935 align:middle line:-1
客户可以在将来购买时兑换此优惠码

00:20:36.503 --> 00:20:38.939 align:middle line:-2
现在让我们在实际操作中看一下
这两个app

00:20:44.845 --> 00:20:46.446 align:middle line:-1
好吧 我基本上…

00:20:48.148 --> 00:20:51.552 align:middle line:-2
把Fish Tag Reader app
把Creator app打开了

00:20:53.620 --> 00:20:55.155 align:middle line:-1
今天我带来了一条

00:20:56.089 --> 00:20:57.891 align:middle line:-1
创意彩虹鲑鱼

00:21:05.832 --> 00:21:06.834 align:middle line:-2
鱼的名字叫做
Creative Salmon

00:21:07.835 --> 00:21:10.037 align:middle line:-1
好的 这条鱼显然很大 对吧

00:21:13.574 --> 00:21:15.542 align:middle line:-1
现在我要点击“写入标签”按钮

00:21:17.110 --> 00:21:18.312 align:middle line:0
将显示动作表单

00:21:18.579 --> 00:21:21.882 align:middle line:0
此时我可以把手机靠近NDEF标签

00:21:25.052 --> 00:21:25.886 align:middle line:0
宾果

00:21:27.955 --> 00:21:31.758 align:middle line:-1
接下来我要给你们创建一个优惠标签

00:21:33.327 --> 00:21:35.529 align:middle line:-1
我要选择“创建优惠码”按钮

00:21:37.764 --> 00:21:39.466 align:middle line:-1
我要选择打五折

00:21:39.800 --> 00:21:43.003 align:middle line:-2
因为 你知道的
这是个特别的WWCC促销 对吧？

00:21:45.906 --> 00:21:47.841 align:middle line:-1
好吧 让我点击按钮

00:21:48.509 --> 00:21:50.344 align:middle line:0
屏幕上再次显示动作表单

00:21:50.711 --> 00:21:53.847 align:middle line:0
现在我用手机靠近优惠标签

00:21:55.983 --> 00:21:56.917 align:middle line:-1
瞧！

00:21:59.920 --> 00:22:04.191 align:middle line:-2
好的 现在我要切换到
NFC Tag Readers app

00:22:05.292 --> 00:22:07.027 align:middle line:-1
重新测试全部NFC标签

00:22:09.696 --> 00:22:11.198 align:middle line:-1
在这里我打开了app

00:22:12.633 --> 00:22:14.334 align:middle line:-1
我要按“扫描标签”按钮

00:22:14.701 --> 00:22:16.036 align:middle line:-1
并读取我的NDEF鱼标签

00:22:22.075 --> 00:22:24.444 align:middle line:-1
现在屏幕上显示了对于产品的描述

00:22:25.646 --> 00:22:26.780 align:middle line:-1
哇哦 很酷

00:22:27.314 --> 00:22:31.785 align:middle line:-1
好吧 现在我要试着扫描优惠码标签

00:22:32.586 --> 00:22:35.088 align:middle line:-1
我要选择第二个选项卡

00:22:35.656 --> 00:22:37.824 align:middle line:-1
点击“扫描优惠码”按钮

00:22:44.498 --> 00:22:46.934 align:middle line:-1
好吧 是的 这是鱼打五折的优惠码

00:22:48.602 --> 00:22:51.271 align:middle line:-1
好的 现在试着第二次读取优惠码

00:22:56.410 --> 00:22:58.011 align:middle line:-1
好的 这不是一个有效的优惠码

00:22:59.813 --> 00:23:01.949 align:middle line:-2
在实际操作中
了解了这两款app之后

00:23:02.382 --> 00:23:04.084 align:middle line:-1
我要切换到源代码中

00:23:04.151 --> 00:23:05.786 align:middle line:-1
看看这是如何实施的

00:23:11.859 --> 00:23:14.928 align:middle line:-2
好吧 让我们先看
“鱼标签创意供应”

00:23:21.034 --> 00:23:24.705 align:middle line:-1
在这里 我将在我的权利文件中

00:23:24.771 --> 00:23:26.039 align:middle line:-1
设置NDEF和本地标签功能

00:23:26.840 --> 00:23:29.810 align:middle line:-2
这是因为我要在我的app中
使用NDEF和标签读取…

00:23:30.344 --> 00:23:31.979 align:middle line:-1
阅读器会话

00:23:38.185 --> 00:23:39.586 align:middle line:-1
现在让我们看一下

00:23:40.587 --> 00:23:44.892 align:middle line:-2
主视图控制器
看看NDEF写入器是如何实施的

00:23:54.401 --> 00:23:55.302 align:middle line:-1
在…

00:23:58.005 --> 00:23:59.139 align:middle line:-1
抱歉 稍等

00:24:05.979 --> 00:24:09.183 align:middle line:-2
我们要实例化
NFCNDEFReaderSession

00:24:10.817 --> 00:24:12.119 align:middle line:-1
设置警告信息

00:24:13.520 --> 00:24:15.656 align:middle line:-1
并调用Begin方法开始会话

00:24:23.497 --> 00:24:24.898 align:middle line:-1
当发现NDEF标签时

00:24:25.332 --> 00:24:27.434 align:middle line:-1
会把它发送到Delegate函数

00:24:29.436 --> 00:24:30.704 align:middle line:-1
我们连接到标签

00:24:32.206 --> 00:24:34.908 align:middle line:-2
并调用
queryNDEFStatus

00:24:37.711 --> 00:24:40.814 align:middle line:-2
如果标签可写入
并拥有足够的存储空间

00:24:41.215 --> 00:24:44.384 align:middle line:-2
我们就调用
writeNDEF函数写入标签

00:24:46.353 --> 00:24:49.756 align:middle line:-2
最后我们调用
invalidateFunction结束会话

00:24:51.892 --> 00:24:53.727 align:middle line:-1
现在让我们看看优惠码是如何创建的

00:25:05.005 --> 00:25:07.741 align:middle line:-2
我们实例化
TagReaderSession对象

00:25:09.109 --> 00:25:11.178 align:middle line:-1
调用setAlert信息

00:25:12.112 --> 00:25:14.248 align:middle line:-2
并调用beginFunction
以开始会话

00:25:23.190 --> 00:25:26.727 align:middle line:-2
在这里我们在
Delegate函数中

00:25:27.027 --> 00:25:28.128 align:middle line:-2
特别查找MIFARE Ultralight
优惠码标签

00:25:29.463 --> 00:25:30.831 align:middle line:-1
当找到标签后

00:25:31.632 --> 00:25:34.668 align:middle line:-1
我们连接到它并启动写入操作

00:25:42.142 --> 00:25:43.277 align:middle line:-1
要写入标签

00:25:44.011 --> 00:25:46.847 align:middle line:-1
我们要创建一个优惠码

00:25:47.714 --> 00:25:51.185 align:middle line:-2
然后调用sendMIFARE命令
以开启写入操作

00:25:52.719 --> 00:25:54.855 align:middle line:-1
当完成所有写入操作之后

00:25:56.723 --> 00:25:58.125 align:middle line:-1
就使会话无效

00:26:04.231 --> 00:26:07.234 align:middle line:-2
又使用了本地标签阅读器会话
来创建NFC标签

00:26:08.101 --> 00:26:11.905 align:middle line:-2
现在让我们一起看一下
Fish Tag Reader app

00:26:20.814 --> 00:26:24.218 align:middle line:-2
NFCTagReaderSession
有一些便利方法

00:26:24.284 --> 00:26:25.886 align:middle line:-1
用于实施NDEF操作

00:26:27.621 --> 00:26:28.856 align:middle line:-1
我们在这里使用了这些方法

00:26:29.890 --> 00:26:36.597 align:middle line:-2
然而它要求我们向info.plist
文件中对NDEF

00:26:36.663 --> 00:26:39.967 align:middle line:-2
添加7816 AID
和F类型系统代码

00:26:40.868 --> 00:26:41.835 align:middle line:-1
如这里所示

00:26:50.410 --> 00:26:52.546 align:middle line:-1
在扫描视图控制器中

00:26:57.918 --> 00:27:00.187 align:middle line:-1
我们有ScanTag动作函数

00:27:02.089 --> 00:27:05.092 align:middle line:-2
在这里我们创建一个
TagReaderSession

00:27:06.960 --> 00:27:08.161 align:middle line:-1
设置警告信息

00:27:09.663 --> 00:27:11.298 align:middle line:-1
和CallBegins

00:27:12.132 --> 00:27:13.767 align:middle line:-1
从而开始写入Reader动作函数

00:27:21.208 --> 00:27:22.776 align:middle line:-1
当找到NFC标签之后

00:27:23.110 --> 00:27:25.812 align:middle line:-2
就把标签提交到
Delegate回调中

00:27:28.382 --> 00:27:29.616 align:middle line:-1
我们连接到标签

00:27:30.751 --> 00:27:32.619 align:middle line:-1
并实施NDEF状态查询

00:27:35.122 --> 00:27:36.590 align:middle line:-1
如果标签可读取

00:27:37.090 --> 00:27:39.193 align:middle line:-1
就调用readNDEF方法

00:27:46.700 --> 00:27:47.835 align:middle line:-1
现在让我们…

00:27:47.901 --> 00:27:51.338 align:middle line:-2
最后我们实际上要通过调用
Invalidate使会话无效

00:27:57.377 --> 00:27:59.680 align:middle line:-2
现在让我们看一下如何读取
优惠码标签

00:28:09.957 --> 00:28:10.991 align:middle line:-1
跟以前一样

00:28:11.325 --> 00:28:14.094 align:middle line:-2
我们实例化一个
NFCTagReaderSession对象

00:28:15.896 --> 00:28:17.130 align:middle line:-1
设置警告信息

00:28:18.198 --> 00:28:20.133 align:middle line:-1
通过调用Begin开始会话实现

00:28:26.807 --> 00:28:27.875 align:middle line:-1
当找到标签后

00:28:28.442 --> 00:28:30.911 align:middle line:-2
检查标签是否是
MIFARE Ultralight标签

00:28:32.246 --> 00:28:33.213 align:middle line:-1
如果是

00:28:34.481 --> 00:28:35.682 align:middle line:-1
我们就连接到标签

00:28:42.756 --> 00:28:46.460 align:middle line:-2
要读取标签 我们要调用
sendMIFARE命令

00:28:48.595 --> 00:28:50.097 align:middle line:-1
然后验证队列点

00:28:52.232 --> 00:28:56.970 align:middle line:-2
最后调用Invalidate
方法结束会话

00:28:59.706 --> 00:29:01.175 align:middle line:-1
如果优惠码无效

00:29:02.242 --> 00:29:04.912 align:middle line:-2
我们就调用
invalidateErrorMessage

00:29:09.416 --> 00:29:11.218 align:middle line:-1
这就是使用Core NFC框架

00:29:11.285 --> 00:29:14.421 align:middle line:-2
创建一款优秀的app所需要做的
一切操作

00:29:14.988 --> 00:29:16.056 align:middle line:-1
舞台交还给Gordon

00:29:24.331 --> 00:29:25.299 align:middle line:-1
谢谢Lawrence

00:29:28.135 --> 00:29:30.604 align:middle line:-1
我们希望新标签写入和本地访问

00:29:30.671 --> 00:29:33.106 align:middle line:-2
可以让你们向你们的app中
添加非常棒的新功能

00:29:33.774 --> 00:29:36.109 align:middle line:-2
如我们所见
非常直截了当并且非常简单

00:29:36.743 --> 00:29:38.979 align:middle line:-2
让我们快速回顾一下
我们今天所讲的内容

00:29:39.613 --> 00:29:42.683 align:middle line:-2
首先确定app要求哪种类型的
阅读器会话

00:29:43.350 --> 00:29:45.485 align:middle line:-1
NDEF、本地访问或两者都有

00:29:48.789 --> 00:29:51.558 align:middle line:-2
实施newDelegate方法
以接收新标签对象

00:29:53.360 --> 00:29:54.628 align:middle line:-1
一旦你拥有标签对象

00:29:54.895 --> 00:29:57.764 align:middle line:-1
使用这些对象实施全部读写操作

00:29:59.266 --> 00:30:02.636 align:middle line:-1
当你全部完成之后

00:30:02.970 --> 00:30:04.738 align:middle line:-2
使用合适的Invalidate
调用表明成功或指示错误

00:30:06.473 --> 00:30:07.407 align:middle line:-1
就这样

00:30:08.509 --> 00:30:09.977 align:middle line:-2
（要获取更多信息请访问
DEVELOPER.APPLE.COM/WWDC19/715）

00:30:10.043 --> 00:30:12.212 align:middle line:-1
今天我们所讲到的全部示例代码

00:30:12.279 --> 00:30:13.680 align:middle line:-1
全部在线可用

00:30:14.648 --> 00:30:16.083 align:middle line:-1
并附带其它信息

00:30:16.750 --> 00:30:19.520 align:middle line:-2
现在iOS 13和
Xcode 11都可用了

00:30:19.987 --> 00:30:21.321 align:middle line:-1
每个人都应该下载它们

00:30:21.388 --> 00:30:23.490 align:middle line:-2
并使用Core NFC
开始执行一些非常棒的新功能

00:30:25.192 --> 00:30:26.293 align:middle line:-1
如果你有任何疑问

00:30:26.360 --> 00:30:29.429 align:middle line:-2
本场演讲结束之后就有一场
Core NFC演讲

00:30:31.598 --> 00:30:32.933 align:middle line:-1
欢迎大家参加

