WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:04.500 A:middle
[音乐]

00:00:10.516 --> 00:00:14.946 A:middle
[掌声]

00:00:15.446 --> 00:00:16.226 A:middle
&gt;&gt; 欢迎各位

00:00:16.616 --> 00:00:18.016 A:middle
我叫 Stephane 是地图团队中的

00:00:18.016 --> 00:00:19.546 A:middle
一名工程师 

00:00:19.596 --> 00:00:21.246 A:middle
我将和我的同事 Mithilesh 一起

00:00:21.246 --> 00:00:22.336 A:middle
和各位开发者来聊聊

00:00:22.406 --> 00:00:24.386 A:middle
如何在你们的 App 和网站里添加室内地图

00:00:26.306 --> 00:00:28.116 A:middle
在 iOS 11 中 我们引入了室内地图

00:00:28.116 --> 00:00:29.626 A:middle
作为 Apple 地图的一部分

00:00:30.586 --> 00:00:32.386 A:middle
我们为机场和商场等场所

00:00:32.386 --> 00:00:33.856 A:middle
提供了漂亮且

00:00:33.856 --> 00:00:35.186 A:middle
详细的平面图

00:00:36.196 --> 00:00:37.786 A:middle
当你处在室内空间时

00:00:37.786 --> 00:00:39.826 A:middle
室内地图可以很好的帮助你

00:00:39.826 --> 00:00:41.286 A:middle
查看和搜索你在室内的路径

00:00:43.026 --> 00:00:45.036 A:middle
使用楼层选择器 你可以在

00:00:45.036 --> 00:00:46.616 A:middle
不同的楼层间进行切换

00:00:46.616 --> 00:00:48.716 A:middle
并且在这些场所内你得到的室内位置

00:00:48.716 --> 00:00:51.516 A:middle
是与 GPS 相似的 甚至更好

00:00:52.986 --> 00:00:54.366 A:middle
今天 我们就将和

00:00:54.366 --> 00:00:55.706 A:middle
各位探讨一下 开发者如何在

00:00:55.946 --> 00:00:57.716 A:middle
自己的 App 中呈现室内地图以及

00:00:58.136 --> 00:00:59.376 A:middle
室内定位

00:01:02.836 --> 00:01:04.105 A:middle
室内地图的数据格式

00:01:04.796 --> 00:01:06.646 A:middle
之后我们将为各位

00:01:06.646 --> 00:01:08.276 A:middle
介绍一些室内地图项目中的

00:01:08.276 --> 00:01:10.046 A:middle
可用的工具

00:01:11.036 --> 00:01:12.186 A:middle
之后我们将为各位展示

00:01:12.186 --> 00:01:14.266 A:middle
如何在 iOS 和 web 的 App 当中

00:01:14.266 --> 00:01:15.606 A:middle
展示室内地图

00:01:16.156 --> 00:01:18.246 A:middle
那么 我们开始吧

00:01:19.146 --> 00:01:21.076 A:middle
IMDF 代表的是

00:01:21.076 --> 00:01:23.146 A:middle
Indoor Mapping Data Format

00:01:23.146 --> 00:01:25.176 A:middle
它是一种特定的室内空间的建模规范

00:01:26.246 --> 00:01:27.736 A:middle
但在讨论更多细节之前

00:01:27.736 --> 00:01:28.936 A:middle
让我们先退一步

00:01:29.086 --> 00:01:32.796 A:middle
仔细看看室内地图的一般含义

00:01:33.236 --> 00:01:36.156 A:middle
室内地图和一般地图一样

00:01:36.156 --> 00:01:38.166 A:middle
是由许多层组成

00:01:38.166 --> 00:01:39.946 A:middle
每一层可能都

00:01:40.426 --> 00:01:41.706 A:middle
分别包含着一些特性

00:01:42.646 --> 00:01:43.816 A:middle
比方说 我们把这张地图分解一下

00:01:44.476 --> 00:01:48.336 A:middle
室内地图的基础是建筑的覆盖区域

00:01:49.016 --> 00:01:51.326 A:middle
之后我们就会得到一个平面

00:01:51.326 --> 00:01:54.006 A:middle
在这个平面上 我们可以找到一些

00:01:54.006 --> 00:01:55.936 A:middle
细节的空间单元 比如房间和过道

00:01:56.526 --> 00:02:00.996 A:middle
这些空间单元有门 我们还可以看到

00:02:00.996 --> 00:02:03.576 A:middle
在商场里经常看到的售货亭

00:02:04.216 --> 00:02:06.766 A:middle
房间和售货亭都有标签

00:02:06.766 --> 00:02:08.496 A:middle
比如 标记出使用该房间的

00:02:08.496 --> 00:02:11.726 A:middle
企业的名称

00:02:11.786 --> 00:02:13.106 A:middle
或者是用图案标记出

00:02:13.106 --> 00:02:14.246 A:middle
像是电梯和卫生间

00:02:14.246 --> 00:02:16.586 A:middle
这样的公共设施

00:02:16.736 --> 00:02:21.476 A:middle
最后 还有可以用

00:02:21.476 --> 00:02:23.806 A:middle
虚拟边界把多个空间单元

00:02:23.886 --> 00:02:25.096 A:middle
划归到一个区域内

00:02:26.516 --> 00:02:27.816 A:middle
好了 这就是用来制作室内地图的

00:02:27.816 --> 00:02:29.146 A:middle
一些图层的样例

00:02:30.316 --> 00:02:32.186 A:middle
因此 为了能进行准确地描述

00:02:32.486 --> 00:02:35.006 A:middle
也为了能够

00:02:35.006 --> 00:02:36.446 A:middle
创建和显示出这样的地图

00:02:36.446 --> 00:02:38.456 A:middle
我们需要一种新的方式

00:02:38.456 --> 00:02:40.156 A:middle
可以用于准确的描述它的内容

00:02:41.126 --> 00:02:43.000 A:middle
这就需要 IMDF 这种数据格式发挥作用

00:02:44.286 --> 00:02:46.136 A:middle
IMDF 是进行室内空间

00:02:46.136 --> 00:02:47.356 A:middle
建模的一种规范

00:02:48.646 --> 00:02:52.636 A:middle
它是一种基于 GeoJSON 的二维数据格式

00:02:52.636 --> 00:02:55.236 A:middle
不仅易于创建和理解

00:02:55.236 --> 00:02:57.186 A:middle
而且方便应用程序调用

00:02:58.136 --> 00:03:00.996 A:middle
一个 IMDF 档案就是一组 JSON 文件

00:03:03.236 --> 00:03:05.486 A:middle
更进一步来说

00:03:05.486 --> 00:03:07.506 A:middle
它由一个 manifest.json 文件以及

00:03:07.506 --> 00:03:10.216 A:middle
多个 GeoJSON 文件组成

00:03:10.216 --> 00:03:11.416 A:middle
每个文件都是一组特征的集合

00:03:11.416 --> 00:03:14.386 A:middle
这些特征又可以赋予 IMDF 的特征以类型

00:03:15.696 --> 00:03:18.016 A:middle
也就是说每个 IMDF 特征就是一个

00:03:18.016 --> 00:03:18.826 A:middle
寻常的 GeoJSON 的特征

00:03:19.536 --> 00:03:21.856 A:middle
其中包含一个负责表明类型的 type（特征）

00:03:21.856 --> 00:03:24.156 A:middle
也许会有一个 geometry（几何对象）

00:03:23.696 --> 00:03:24.156 A:middle
并且会有一组 properties（属性）

00:03:25.566 --> 00:03:27.216 A:middle
IMDF 规范还要求提供一个 ID

00:03:27.216 --> 00:03:28.926 A:middle
这个 ID 是一个 UUID 类型的字符串

00:03:28.926 --> 00:03:31.466 A:middle
并且还需要一个额外的

00:03:31.466 --> 00:03:33.586 A:middle
称作 feature_type 即特征类型的项 这一项的值

00:03:33.586 --> 00:03:35.556 A:middle
表明正在建模的是某一种室内空间的对象

00:03:36.246 --> 00:03:38.486 A:middle
让我们来看看

00:03:38.486 --> 00:03:40.886 A:middle
IMDF 的一些主要的特征类型吧

00:03:43.586 --> 00:03:45.346 A:middle
level 类型模拟的是楼层区域的

00:03:45.346 --> 00:03:47.716 A:middle
位置信息以及物理范围

00:03:48.866 --> 00:03:50.926 A:middle
每个 level 还有一个全称

00:03:50.926 --> 00:03:53.416 A:middle
比如说这里的 Parking Level 1

00:03:53.886 --> 00:03:56.436 A:middle
再配个缩写像是 P1  下面这个属性

00:03:56.436 --> 00:03:57.966 A:middle
则用来指出它是属于哪一栋建筑的

00:03:59.166 --> 00:04:00.516 A:middle
它还有一个序数

00:04:00.896 --> 00:04:02.996 A:middle
代表了该楼层

00:04:02.996 --> 00:04:04.966 A:middle
在建筑的总楼层范围内的位置

00:04:06.446 --> 00:04:08.106 A:middle
一楼的序数对应的是 0

00:04:08.106 --> 00:04:10.956 A:middle
地下楼层使用负数来表示

00:04:11.036 --> 00:04:13.236 A:middle
当然与之对应的

00:04:13.236 --> 00:04:16.546 A:middle
地上楼层使用正数

00:04:19.096 --> 00:04:21.185 A:middle
每一个楼层都是由各个空间单元组成的

00:04:21.726 --> 00:04:23.006 A:middle
unit 类型则是模拟了

00:04:23.056 --> 00:04:24.266 A:middle
空间里的位置和范围

00:04:24.266 --> 00:04:27.446 A:middle
它可以代表房间 过道 楼梯间 或是 电梯

00:04:29.366 --> 00:04:31.826 A:middle
opening 类型则模拟了像是门一类的入口

00:04:32.866 --> 00:04:33.956 A:middle
其中可以定义一些有趣的属性

00:04:33.956 --> 00:04:35.716 A:middle
像是这个入口的可访问性

00:04:35.716 --> 00:04:38.486 A:middle
或者是访问控制系统的类型

00:04:39.056 --> 00:04:42.756 A:middle
kiosk 类型则模拟的是一些装置和设施

00:04:42.976 --> 00:04:44.876 A:middle
一般是一些用来提供服务

00:04:44.916 --> 00:04:46.546 A:middle
或是分销产品的

00:04:47.046 --> 00:04:49.306 A:middle
比如说一个咨询台或者是自动售货机

00:04:49.996 --> 00:04:52.936 A:middle
多亏有了 occupant 这种特征类型

00:04:52.936 --> 00:04:55.376 A:middle
我们就可以把商业信息添加到地图当中

00:04:55.476 --> 00:04:57.676 A:middle
occupant 这种类型可以

00:04:57.676 --> 00:04:59.766 A:middle
提供包括商户的名字 电话号码

00:04:59.766 --> 00:05:00.966 A:middle
营业时间在内的商业信息

00:05:02.306 --> 00:05:04.246 A:middle
这个类型里面不包含 geometry 对象

00:05:04.246 --> 00:05:05.456 A:middle
但是我们可以通过它关联的

00:05:05.866 --> 00:05:10.616 A:middle
anchor 对象获取它们的显示点和地址

00:05:10.856 --> 00:05:12.666 A:middle
anchor 类型代表的是一种用于引导的锚点

00:05:12.666 --> 00:05:13.996 A:middle
它们给一个单元区域

00:05:13.996 --> 00:05:15.496 A:middle
赋予了外围呈现位置

00:05:16.556 --> 00:05:17.986 A:middle
它们也可能会引用某个地址

00:05:19.106 --> 00:05:21.466 A:middle
anchor 类型在 IMDF 中起着重要的作用

00:05:22.106 --> 00:05:23.566 A:middle
其他的一些特征类型 比如之前提过的

00:05:23.566 --> 00:05:26.476 A:middle
occupant unit 或者是 kiosk 都需要通过

00:05:26.526 --> 00:05:30.626 A:middle
anchor 类型的对象才能连接到地址之上

00:05:30.846 --> 00:05:32.406 A:middle
我们可能还想增加一些便利设施

00:05:33.156 --> 00:05:34.396 A:middle
amenity 这样的特征类型就可以

00:05:34.486 --> 00:05:36.366 A:middle
用来模拟永久性的设施

00:05:36.366 --> 00:05:38.376 A:middle
或是其他便利设施

00:05:38.376 --> 00:05:40.096 A:middle
比如说照相亭 ATM 机 或者是

00:05:40.096 --> 00:05:44.216 A:middle
某个展品之类的

00:05:44.406 --> 00:05:45.976 A:middle
section 这种特征类型用于

00:05:45.976 --> 00:05:47.476 A:middle
描述在一个楼层内

00:05:47.476 --> 00:05:49.126 A:middle
具有特定主题的区域范围

00:05:49.126 --> 00:05:50.876 A:middle
比如说购物中心的美食广场

00:05:50.876 --> 00:05:53.546 A:middle
或是机场内的安检区域

00:05:54.856 --> 00:05:56.106 A:middle
section 这种类型不需要

00:05:56.106 --> 00:05:58.316 A:middle
通过物理边界来具体化

00:06:04.006 --> 00:06:06.006 A:middle
它们会有一个名字并且还有一个地址

00:06:06.866 --> 00:06:08.046 A:middle
但是 这一类型中并不包含 geometry（几何对象）

00:06:08.046 --> 00:06:10.146 A:middle
来描述建筑物的范围

00:06:10.146 --> 00:06:12.006 A:middle
而把这件事交给

00:06:12.006 --> 00:06:14.046 A:middle
另一种称作 footprint 的特征类型来实现

00:06:15.576 --> 00:06:16.996 A:middle
footprint 可以分成 3 个类型

00:06:17.516 --> 00:06:19.926 A:middle
aerial 型的 footprint 能用来圈定

00:06:19.926 --> 00:06:22.296 A:middle
建筑物地面以上部分的最大范围

00:06:23.366 --> 00:06:24.416 A:middle
ground 型的 footprint 圈定

00:06:24.416 --> 00:06:25.616 A:middle
地面区域的最大范围

00:06:25.616 --> 00:06:27.536 A:middle
而 subterranean 型的

00:06:27.536 --> 00:06:32.086 A:middle
footprint 则圈定地下楼层的最大范围

00:06:33.466 --> 00:06:35.246 A:middle
好了 刚才我们简要的

00:06:35.246 --> 00:06:37.676 A:middle
概述了一下 IMDF 的主要的特征类型

00:06:38.586 --> 00:06:40.716 A:middle
多亏了 IMDF 我们才能够使用

00:06:40.716 --> 00:06:44.046 A:middle
一种正式且灵活的方式描述室内空间

00:06:45.076 --> 00:06:46.406 A:middle
但是 其实 IMDF 规范中还

00:06:46.406 --> 00:06:47.226 A:middle
涵盖了更多的内容

00:06:47.846 --> 00:06:51.846 A:middle
你可以到 register.apple.com 去查看更多的内容

00:06:52.286 --> 00:06:54.686 A:middle
Apple 与许多顶级的

00:06:54.686 --> 00:06:56.386 A:middle
平台供应商合作

00:06:56.386 --> 00:06:58.546 A:middle
提供支持 IMDF 的地理空间工具

00:06:59.536 --> 00:07:00.886 A:middle
你可以直接使用这些

00:07:01.256 --> 00:07:03.596 A:middle
来为你的场所创建一个 IMDF 档案文件

00:07:05.206 --> 00:07:06.986 A:middle
你可以立即就启用这个档案文件

00:07:06.986 --> 00:07:08.486 A:middle
并将其显示在你的 App 之中

00:07:08.486 --> 00:07:10.686 A:middle
我们将在稍后进行演示

00:07:11.266 --> 00:07:14.856 A:middle
如果你想启用室内定位

00:07:14.856 --> 00:07:16.036 A:middle
又该如何操作呢

00:07:17.076 --> 00:07:17.976 A:middle
好了 我们的室内地图项目

00:07:17.976 --> 00:07:19.826 A:middle
就是来解决这种需求的

00:07:20.516 --> 00:07:22.766 A:middle
通过参与室内地图项目

00:07:22.766 --> 00:07:23.976 A:middle
你可以使用

00:07:23.976 --> 00:07:25.396 A:middle
Apple 提供的一些工具

00:07:25.396 --> 00:07:27.616 A:middle
来对你的数据进行

00:07:27.696 --> 00:07:28.896 A:middle
可视化和验证操作

00:07:29.786 --> 00:07:31.496 A:middle
更有趣的是

00:07:31.536 --> 00:07:33.036 A:middle
你还可以为你的场所添加室内定位功能

00:07:33.036 --> 00:07:34.856 A:middle
或是标记用户所处位置的蓝点功能

00:07:35.596 --> 00:07:37.176 A:middle
此外 你还可以

00:07:37.346 --> 00:07:38.906 A:middle
允许 Apple 在 Apple 地图中

00:07:38.906 --> 00:07:44.186 A:middle
显示你的建筑场所信息

00:07:44.186 --> 00:07:45.386 A:middle
注册室内地图项目

00:07:45.386 --> 00:07:48.156 A:middle
仅需登录 register.Apple.com/indoor

00:07:49.116 --> 00:07:51.236 A:middle
注册起来非常的简单易行

00:07:51.676 --> 00:07:52.886 A:middle
你只需要提供一些

00:07:52.886 --> 00:07:54.326 A:middle
关于你自己以及

00:07:54.326 --> 00:07:56.626 A:middle
你所在的组织的基本信息

00:07:56.626 --> 00:07:58.596 A:middle
比如 名字 位置 和 地址

00:07:59.176 --> 00:08:02.366 A:middle
一旦 Apple 审核

00:08:02.366 --> 00:08:03.846 A:middle
并批准了你的 App

00:08:03.846 --> 00:08:05.486 A:middle
你就可以开始与你的

00:08:05.486 --> 00:08:07.296 A:middle
地理空间工具的供应商展开合作

00:08:07.296 --> 00:08:08.626 A:middle
来创建 IMDF 存档文件

00:08:08.626 --> 00:08:11.776 A:middle
当你有了存档文件之后

00:08:11.776 --> 00:08:13.376 A:middle
你就可以使用 IMDF 沙箱

00:08:13.376 --> 00:08:14.616 A:middle
来验证它了

00:08:15.276 --> 00:08:19.016 A:middle
IMDF 沙箱是一个工具

00:08:19.016 --> 00:08:20.516 A:middle
它可以用来将 IMDF 数据

00:08:20.516 --> 00:08:22.076 A:middle
进行可视化并验证

00:08:22.856 --> 00:08:24.006 A:middle
它报告的大多数问题

00:08:24.106 --> 00:08:26.226 A:middle
都可以通过单击几下就立即得到解决

00:08:27.426 --> 00:08:28.836 A:middle
有一些错误可能会

00:08:28.836 --> 00:08:30.396 A:middle
需要更多的工作

00:08:30.396 --> 00:08:31.806 A:middle
这时你可能希望把你的数据提取回来

00:08:31.806 --> 00:08:34.916 A:middle
交给地图制作方进行再修复

00:08:35.145 --> 00:08:36.836 A:middle
当 IMDF 沙箱没有反馈错误时

00:08:36.836 --> 00:08:38.916 A:middle
你可以把你的数据提交至

00:08:39.186 --> 00:08:40.956 A:middle
更费时的验证测试

00:08:41.895 --> 00:08:43.486 A:middle
如果没有检测到问题的话

00:08:43.486 --> 00:08:44.476 A:middle
你就可以进入到下一个阶段

00:08:44.686 --> 00:08:46.516 A:middle
使用室内测量 App

00:08:46.516 --> 00:08:49.986 A:middle
为你的场所启用室内定位

00:08:51.276 --> 00:08:53.146 A:middle
室内测量 App 是

00:08:53.146 --> 00:08:55.656 A:middle
你在 iOS 上启用室内定位的配套程序

00:08:56.976 --> 00:08:58.996 A:middle
通过收集所在地点的

00:08:58.996 --> 00:09:01.026 A:middle
射频纹理特征来测量你的场所

00:09:01.986 --> 00:09:03.346 A:middle
测量依赖于这样一个事实

00:09:03.806 --> 00:09:05.616 A:middle
那就是建筑物内固定的

00:09:05.666 --> 00:09:07.256 A:middle
WiFi 接入点所发出的

00:09:07.316 --> 00:09:09.066 A:middle
射频模式是独特的

00:09:09.066 --> 00:09:10.826 A:middle
而且射频模式取决于你所处的位置

00:09:11.436 --> 00:09:14.816 A:middle
当测量完成时

00:09:14.816 --> 00:09:16.136 A:middle
测量数据会被上传到 Apple 的服务器

00:09:16.136 --> 00:09:17.316 A:middle
并进行处理

00:09:17.716 --> 00:09:20.066 A:middle
如果没有报错的话

00:09:20.736 --> 00:09:22.416 A:middle
你的场所的室内位置就会变成实时的

00:09:23.596 --> 00:09:25.276 A:middle
你可以用一个测试 App

00:09:25.276 --> 00:09:27.676 A:middle
来测一下室内位置的准确性

00:09:29.006 --> 00:09:31.526 A:middle
测量的过程是非常简单和直观的

00:09:32.366 --> 00:09:33.466 A:middle
我们有一些指导方针

00:09:33.466 --> 00:09:35.416 A:middle
以便帮助你获得最好的结果

00:09:37.226 --> 00:09:40.146 A:middle
好了 这样一来 你就已经创建了

00:09:40.146 --> 00:09:42.366 A:middle
IMDF 档案文件 并且还对其进行了验证

00:09:42.366 --> 00:09:44.086 A:middle
你还有可能已经启用了室内定位

00:09:44.836 --> 00:09:46.126 A:middle
下一步就是

00:09:46.586 --> 00:09:47.746 A:middle
在你的 App 和网站上显示它

00:09:48.786 --> 00:09:50.056 A:middle
接下来我将让我的同事 Mithilesh

00:09:50.056 --> 00:09:51.126 A:middle
来为大家展示

00:09:51.246 --> 00:09:53.976 A:middle
如何把室内地图呈现在 iOS App 当中

00:09:54.516 --> 00:09:57.986 A:middle
[掌声]

00:09:58.486 --> 00:09:59.126 A:middle
&gt;&gt; 谢谢 Stephane

00:10:03.476 --> 00:10:04.576 A:middle
是地图团队的一名工程师

00:10:05.486 --> 00:10:06.716 A:middle
我在这里向各位展示

00:10:06.716 --> 00:10:09.246 A:middle
如何使用 IMDF 数据

00:10:09.246 --> 00:10:11.086 A:middle
在 iOS App 中显示室内地图

00:10:11.676 --> 00:10:15.266 A:middle
我们将为恐龙博物馆的

00:10:15.266 --> 00:10:16.696 A:middle
游客创建一个简单的 App

00:10:17.276 --> 00:10:19.286 A:middle
我们就叫它《Dinoseum》

00:10:20.296 --> 00:10:21.666 A:middle
这款 App 会显示一个

00:10:21.666 --> 00:10:23.136 A:middle
博物馆的地图 其中包含有

00:10:23.396 --> 00:10:24.916 A:middle
不同的展品 餐厅 商店等等

00:10:26.076 --> 00:10:28.026 A:middle
博物馆的各个区域

00:10:28.026 --> 00:10:29.486 A:middle
都有描述性的标签和图标

00:10:29.486 --> 00:10:31.326 A:middle
用户可以点击这些标签和图标

00:10:31.326 --> 00:10:33.416 A:middle
来显示详细信息

00:10:35.276 --> 00:10:36.716 A:middle
在右上角 我们有一个楼层切换器

00:10:36.716 --> 00:10:38.656 A:middle
来切换至不同的楼层

00:10:39.356 --> 00:10:42.176 A:middle
这款 App 还利用室内定位

00:10:42.176 --> 00:10:43.796 A:middle
来显示用户在

00:10:43.796 --> 00:10:45.896 A:middle
博物馆内的位置

00:10:47.066 --> 00:10:49.996 A:middle
那么 构建这款 App 都需要什么呢

00:10:50.296 --> 00:10:52.056 A:middle
显示一个基本的室内地图

00:10:52.126 --> 00:10:53.316 A:middle
可以分为 3 个步骤

00:10:55.026 --> 00:10:57.096 A:middle
第 1 步 我们将向项目中

00:10:57.126 --> 00:10:59.466 A:middle
添加 IMDF 文件

00:10:59.466 --> 00:11:03.096 A:middle
并为每一种特征类型创建模型类

00:11:03.276 --> 00:11:05.186 A:middle
第 2 步 我们将解码

00:11:05.186 --> 00:11:08.496 A:middle
IMDF 文件 并且给模型类创建实例

00:11:09.436 --> 00:11:10.846 A:middle
然后我们给这些实例化后的特征类型的对象

00:11:10.846 --> 00:11:12.536 A:middle
创建一个关系图 将它们关联起来

00:11:13.986 --> 00:11:15.446 A:middle
场所由建筑物构成

00:11:15.726 --> 00:11:17.606 A:middle
建筑物包含有足迹和楼层

00:11:17.866 --> 00:11:19.636 A:middle
楼层中又包含有空间单元和出入口

00:11:20.086 --> 00:11:24.426 A:middle
以此类推 第 3 步 我们将从已经解码了的

00:11:24.426 --> 00:11:26.546 A:middle
特征对象中检索它们

00:11:26.546 --> 00:11:28.276 A:middle
在 GeoJSON 文件中的几何对象

00:11:28.276 --> 00:11:30.636 A:middle
并把它们呈现出来以此创建室内地图

00:11:32.456 --> 00:11:33.556 A:middle
现在 让我们快速浏览下

00:11:33.556 --> 00:11:34.686 A:middle
需要编写的代码吧

00:11:36.116 --> 00:11:38.106 A:middle
对于第 1 步而言 我们创建一个

00:11:38.106 --> 00:11:39.646 A:middle
名为 feature 的抽象类

00:11:41.306 --> 00:11:43.246 A:middle
每一个 IMDF 的特征对象都必须有一个

00:11:43.246 --> 00:11:44.276 A:middle
唯一的标识符

00:11:44.936 --> 00:11:47.656 A:middle
他还必须有一组

00:11:47.746 --> 00:11:51.006 A:middle
描述特征的属性

00:11:51.186 --> 00:11:53.806 A:middle
它也许还会包含有 geometry 对象

00:11:53.806 --> 00:11:55.606 A:middle
也就是一个 MKShape 数组对象

00:11:57.166 --> 00:11:58.536 A:middle
使用上面的抽象类作为基类

00:11:58.716 --> 00:11:59.586 A:middle
我们将会为像是 unit（空间单元）

00:11:59.586 --> 00:12:01.036 A:middle
这样的具体的特征类

00:12:01.236 --> 00:12:02.126 A:middle
编写它们的具体实现

00:12:04.436 --> 00:12:06.516 A:middle
对于解码 IMDF 文件

00:12:06.516 --> 00:12:08.886 A:middle
其实就是一个 GeoJSON 文件

00:12:08.886 --> 00:12:11.056 A:middle
我们将使用新的 MKGeoJSONDecoder

00:12:11.466 --> 00:12:13.346 A:middle
并调用其中的 decode 方法

00:12:14.666 --> 00:12:15.786 A:middle
稍后 我们将带大家看一下

00:12:15.786 --> 00:12:19.736 A:middle
具体的实现细节

00:12:19.966 --> 00:12:22.116 A:middle
在进行第 3 步的过程中

00:12:22.116 --> 00:12:24.036 A:middle
我们将使用 MapKit 框架中的

00:12:24.036 --> 00:12:26.666 A:middle
addOverlays 和 addAnnotations 

00:12:27.276 --> 00:12:29.276 A:middle
用这两个 API 在地图上

00:12:29.276 --> 00:12:31.836 A:middle
绘制多边形以及线和点

00:12:31.836 --> 00:12:33.036 A:middle
对于每一个添加到地图上的 overlay（覆盖）

00:12:33.036 --> 00:12:34.726 A:middle
我们都会有一个

00:12:34.726 --> 00:12:36.466 A:middle
给到 mapView 的代理回调方法

00:12:36.466 --> 00:12:39.586 A:middle
叫做 renderFor overlay

00:12:40.956 --> 00:12:42.766 A:middle
对于每一个 annotation 来说

00:12:42.766 --> 00:12:44.666 A:middle
我们都会有一个给 mapView 的回调方法 

00:12:44.666 --> 00:12:45.256 A:middle
叫做 viewFor annotation

00:12:46.026 --> 00:12:47.486 A:middle
在这两个代理方法中

00:12:47.536 --> 00:12:48.916 A:middle
我们便有机会

00:12:48.916 --> 00:12:50.226 A:middle
给室内地图的元素

00:12:50.226 --> 00:12:51.296 A:middle
定制它们的外观

00:12:51.586 --> 00:12:55.146 A:middle
那么在有了这些之后 我们就开始

00:12:55.146 --> 00:12:56.486 A:middle
为我们的恐龙博物馆做室内地图吧

00:13:13.036 --> 00:13:14.276 A:middle
这是一个基于 MKMapView 的

00:13:14.276 --> 00:13:17.056 A:middle
单一视图的 App

00:13:19.096 --> 00:13:20.366 A:middle
我想做的第一件事

00:13:20.366 --> 00:13:22.026 A:middle
就是确保我已经给我的项目

00:13:22.216 --> 00:13:23.746 A:middle
添加了 IMDF 文件

00:13:24.236 --> 00:13:28.186 A:middle
它们在这儿

00:13:28.846 --> 00:13:30.256 A:middle
在你的 App 里

00:13:30.256 --> 00:13:31.606 A:middle
你可以选择将这些文件

00:13:31.686 --> 00:13:33.206 A:middle
直接打包到你的 App 内

00:13:33.206 --> 00:13:34.076 A:middle
或者是从你的服务器进行下载

00:13:36.186 --> 00:13:37.706 A:middle
我们看一下其中一个文件

00:13:39.226 --> 00:13:41.046 A:middle
这是一个 unit 的特征类型

00:13:41.876 --> 00:13:43.846 A:middle
我们的目标是解码并呈现

00:13:43.846 --> 00:13:48.036 A:middle
这个文件里面的内容

00:13:49.426 --> 00:13:51.906 A:middle
我会先写一个叫做 feature 的抽象类

00:13:55.636 --> 00:13:57.886 A:middle
这直接给出了我们之前看到的三个成员

00:13:58.366 --> 00:14:00.486 A:middle
identifier  properties 和 geometry

00:14:01.596 --> 00:14:03.546 A:middle
我们的这个类缺少一个初始化方法

00:14:03.546 --> 00:14:06.000 A:middle
我们给他添加一个

00:14:10.046 --> 00:14:11.096 A:middle
初始化由一串选择语句加上

00:14:11.096 --> 00:14:12.766 A:middle
属性值的抛出异常的语句来组成

00:14:12.766 --> 00:14:14.066 A:middle
非常的简单直白

00:14:15.046 --> 00:14:17.066 A:middle
MKGeoJSON 的特征会把其属性

00:14:17.256 --> 00:14:20.136 A:middle
公开成不透明的数据

00:14:20.136 --> 00:14:22.006 A:middle
所以在使用之前我们必须要先解码

00:14:23.856 --> 00:14:25.976 A:middle
我们使用 JSONDecoder 这个类

00:14:25.976 --> 00:14:28.196 A:middle
来解码我们的数据并把它转换为

00:14:28.196 --> 00:14:29.196 A:middle
相邻的对象

00:14:29.846 --> 00:14:33.526 A:middle
现在 我可以给 feature 这个类

00:14:33.526 --> 00:14:35.016 A:middle
来编写它的具体实现

00:14:35.736 --> 00:14:37.396 A:middle
我们首先先实现 unit（空间单元）这个类型

00:14:41.316 --> 00:14:43.796 A:middle
我们把基类设成 feature

00:14:47.276 --> 00:14:49.046 A:middle
为了描述 unit 这种特征类型

00:14:49.046 --> 00:14:51.316 A:middle
我们需要定义一些属性

00:14:55.126 --> 00:14:57.426 A:middle
属性由 category 和 levelID 组成

00:14:57.426 --> 00:14:58.846 A:middle
category 用于区分

00:14:58.846 --> 00:15:01.856 A:middle
不同种类的 unit 的类型

00:15:01.996 --> 00:15:03.086 A:middle
levelID 则是该 unit 所属的

00:15:03.086 --> 00:15:08.436 A:middle
楼层的标识符

00:15:08.686 --> 00:15:10.226 A:middle
unit 中包括有 occupant（使用者）

00:15:10.226 --> 00:15:10.926 A:middle
以及 amenity（便利设施）

00:15:11.216 --> 00:15:16.596 A:middle
所以让我们在这里加上它们两个

00:15:16.596 --> 00:15:17.866 A:middle
这就是我们需要给 unit 特征类

00:15:17.866 --> 00:15:20.146 A:middle
所做的所有操作

00:15:20.616 --> 00:15:22.116 A:middle
与 unit 类相似的

00:15:22.116 --> 00:15:24.906 A:middle
我们可以为 venue（场所）以及

00:15:24.906 --> 00:15:26.266 A:middle
level（楼层）以及其他所有的我们想要

00:15:26.266 --> 00:15:27.546 A:middle
解码的特征类型创建模型类

00:15:28.706 --> 00:15:30.546 A:middle
我已经把它们都实现好了

00:15:30.546 --> 00:15:32.206 A:middle
并且添加到了项目当中

00:15:32.856 --> 00:15:34.896 A:middle
你可以下载

00:15:35.146 --> 00:15:36.426 A:middle
本场会议的示例代码

00:15:36.426 --> 00:15:40.216 A:middle
并查看它们

00:15:40.766 --> 00:15:42.296 A:middle
好了 我们可以进到第 2 个步骤了

00:15:42.476 --> 00:15:45.116 A:middle
解码 IMDF 数据

00:15:45.706 --> 00:15:50.736 A:middle
我们将在 IMDFDecoder 类中实现这件事

00:15:51.406 --> 00:15:57.246 A:middle
我们添加一个 MKGeoJSONDecoder 类型的属性

00:15:58.336 --> 00:15:59.706 A:middle
这个是 MapKit 框架中

00:15:59.706 --> 00:16:01.746 A:middle
一个新的可用类

00:16:01.746 --> 00:16:04.756 A:middle
你可以使用它解码所有的 GeoJSON 数据

00:16:07.756 --> 00:16:09.556 A:middle
我现在要写一个名叫

00:16:09.656 --> 00:16:11.486 A:middle
decodeFeatures 的方法来解码单个的

00:16:11.546 --> 00:16:12.696 A:middle
IMDF 文件

00:16:13.276 --> 00:16:17.236 A:middle
在这个方法中

00:16:17.236 --> 00:16:18.896 A:middle
我们首先从磁盘里

00:16:18.896 --> 00:16:21.276 A:middle
读取 IMDF 文件的内容

00:16:21.276 --> 00:16:23.456 A:middle
并使用实例化后的 MKGeoJSONDecoder 方法

00:16:24.106 --> 00:16:27.556 A:middle
对数据进行解码

00:16:27.756 --> 00:16:29.826 A:middle
我们可以得到一个

00:16:29.826 --> 00:16:32.746 A:middle
MKGeoJSONFeature 型的对象数组

00:16:32.746 --> 00:16:40.036 A:middle
我们可以使用它来初始化我们的模型类

00:16:40.036 --> 00:16:41.206 A:middle
我现在要写一个名为 IMDFDecoder 的方法

00:16:41.206 --> 00:16:43.106 A:middle
来解码 IMDF 档案文件

00:16:43.136 --> 00:16:45.946 A:middle
或是 IMDF 文件集

00:16:51.236 --> 00:16:52.906 A:middle
让我们创建我们希望解码的

00:16:52.906 --> 00:16:54.346 A:middle
特征对象的具体实例吧

00:16:54.376 --> 00:16:56.026 A:middle
例如 venues（场所）

00:16:56.026 --> 00:16:57.886 A:middle
levels（楼层）以及 units（空间单元）

00:16:57.886 --> 00:17:00.316 A:middle
我们使用的就是刚才我写过的

00:17:00.316 --> 00:17:02.596 A:middle
decodeFeatures 方法

00:17:02.776 --> 00:17:04.726 A:middle
以此解码我们想要解码的特征类型

00:17:06.876 --> 00:17:08.685 A:middle
为了能够更容易地显示出

00:17:08.685 --> 00:17:11.955 A:middle
正确的特征子集

00:17:11.955 --> 00:17:13.215 A:middle
我们需要给不同的特征对象间

00:17:13.215 --> 00:17:14.455 A:middle
创建关联

00:17:15.705 --> 00:17:18.465 A:middle
例如 venue（场所）包含有 levels（楼层）

00:17:19.276 --> 00:17:20.266 A:middle
我们把他们关联起来

00:17:20.836 --> 00:17:24.146 A:middle
我们是在按序号对 levels（楼层）

00:17:24.146 --> 00:17:25.435 A:middle
进行分组之后再做上去的关联

00:17:29.176 --> 00:17:31.246 A:middle
levels 包含 units（空间单元）以及

00:17:31.246 --> 00:17:33.346 A:middle
openings（出入口）我们把它们也关联起来

00:17:38.776 --> 00:17:41.146 A:middle
units 和 openings 都有一个属性

00:17:41.196 --> 00:17:43.146 A:middle
叫做 levelID

00:17:44.136 --> 00:17:46.206 A:middle
我们使用 levelID 将 units

00:17:46.206 --> 00:17:48.556 A:middle
和 level 进行分组

00:17:48.556 --> 00:17:49.896 A:middle
之后再遍历这个 venue（场所）的所有的楼层

00:17:49.896 --> 00:17:52.806 A:middle
找到包含在对应楼层中的空间单元

00:17:52.806 --> 00:17:55.466 A:middle
把它们关联起来

00:17:55.586 --> 00:18:00.000 A:middle
对于openings 也是一样的操作

00:18:06.236 --> 00:18:07.806 A:middle
amenities（便利设施）和 occupants（使用者）

00:18:07.806 --> 00:18:08.616 A:middle
我们给它们创建上关联

00:18:13.876 --> 00:18:15.276 A:middle
我们遍历所有的 amenities

00:18:15.276 --> 00:18:18.076 A:middle
找到他们对应的 unit

00:18:18.076 --> 00:18:20.406 A:middle
并建立关联

00:18:21.746 --> 00:18:23.166 A:middle
同样的 我们也可以把

00:18:23.166 --> 00:18:24.776 A:middle
occupants 和 unit 关联起来

00:18:28.696 --> 00:18:31.546 A:middle
但 occupants 是个例外

00:18:32.366 --> 00:18:33.936 A:middle
请记住 我们用 occupants 是来显示

00:18:33.936 --> 00:18:35.386 A:middle
地图上商户的名称的

00:18:35.386 --> 00:18:37.786 A:middle
它们是没有

00:18:37.786 --> 00:18:38.786 A:middle
geometry 这个对象的

00:18:39.406 --> 00:18:41.986 A:middle
取而代之的 他们依赖于 anchor（锚点）对象

00:18:41.986 --> 00:18:45.000 A:middle
来获取它们的显示位置

00:18:47.896 --> 00:18:50.016 A:middle
好了 现在我们就有了一个解码方法

00:18:51.076 --> 00:18:53.276 A:middle
并且结合上 IMDF 档案文件可以

00:18:53.396 --> 00:18:56.176 A:middle
给我们提供一个完全解码并且配置过的

00:18:56.176 --> 00:18:58.306 A:middle
venue（场所）对象并且它

00:18:58.416 --> 00:18:59.876 A:middle
还引入了所有我们希望呈现出来的

00:18:59.876 --> 00:19:01.246 A:middle
特征类型

00:19:02.426 --> 00:19:03.626 A:middle
所以现在我们可以进入到第 3 步了

00:19:03.716 --> 00:19:09.196 A:middle
就是在地图上呈现 IMDF 数据

00:19:09.566 --> 00:19:11.356 A:middle
我们将在控制主视图的

00:19:11.356 --> 00:19:12.946 A:middle
IndoorMapViewController 类中

00:19:12.946 --> 00:19:13.876 A:middle
实现这件事

00:19:18.136 --> 00:19:19.886 A:middle
让我们调用

00:19:20.176 --> 00:19:22.426 A:middle
在第 2 步中定义的解码方法

00:19:24.476 --> 00:19:27.606 A:middle
我们会得到一个 venue（场所）的对象

00:19:27.606 --> 00:19:29.626 A:middle
这样我们就可以把其他的特征以

00:19:29.626 --> 00:19:31.996 A:middle
overlay（覆盖）和 annotation（注释）的方式添加上去

00:19:33.466 --> 00:19:35.386 A:middle
为此 我将编写一个叫做

00:19:35.386 --> 00:19:37.956 A:middle
showFeaturesForOrdinal 的方法

00:19:38.026 --> 00:19:42.626 A:middle
其中序号是整型的

00:19:42.626 --> 00:19:44.706 A:middle
代表某一个 level 具体在

00:19:44.706 --> 00:19:47.396 A:middle
整个 building 的所有楼层范围内的位置

00:19:47.946 --> 00:19:52.776 A:middle
在这个方法中 我们首先

00:19:52.776 --> 00:19:54.606 A:middle
移除掉属于前一个楼层的 

00:19:54.686 --> 00:19:56.286 A:middle
所有的覆盖和注释

00:19:56.876 --> 00:19:59.686 A:middle
之后再把我们希望

00:19:59.726 --> 00:20:01.216 A:middle
在这个当前楼层中呈现出来的

00:20:01.266 --> 00:20:03.986 A:middle
特征给聚合起来

00:20:03.986 --> 00:20:05.576 A:middle
检索出这些特征对象的 geometry 部分

00:20:05.576 --> 00:20:08.736 A:middle
并把它们以覆盖和注释的形式

00:20:08.736 --> 00:20:11.066 A:middle
添加到地图上

00:20:11.626 --> 00:20:16.083 A:middle
让我们从 showFeaturesForOrdinal 中调用这个方法

00:20:22.046 --> 00:20:23.296 A:middle
我们把初始楼层设为

00:20:23.296 --> 00:20:24.686 A:middle
序号为 1 的楼层

00:20:25.316 --> 00:20:30.086 A:middle
我们已经实现了

00:20:30.086 --> 00:20:31.276 A:middle
MKMapViewDelegate 方法

00:20:31.766 --> 00:20:33.796 A:middle
mapView 以及 renderFor overlay 

00:20:34.426 --> 00:20:36.466 A:middle
其中我们为每种

00:20:36.466 --> 00:20:39.586 A:middle
GeoJSON 的几何类型都创建了

00:20:39.586 --> 00:20:41.966 A:middle
MKOverlayRenderer 的实例

00:20:41.966 --> 00:20:43.816 A:middle
包括新的 MKMultipolygonRenderer 以及

00:20:43.896 --> 00:20:46.436 A:middle
新的 MKMultipolylineRenderer 方法

00:20:46.436 --> 00:20:48.596 A:middle
以便更有效地呈现

00:20:48.596 --> 00:20:51.096 A:middle
多边形和线条

00:20:51.696 --> 00:20:56.796 A:middle
让我们运行一下这个 App

00:20:56.796 --> 00:20:58.486 A:middle
看看我们是不是得到了一个室内地图

00:21:06.766 --> 00:21:11.176 A:middle
让我们放大一点

00:21:11.386 --> 00:21:15.746 A:middle
在这张地图内 空间单元是以多边形来显示的

00:21:17.326 --> 00:21:19.636 A:middle
像卫生间这样的便利设施则是以

00:21:19.996 --> 00:21:21.746 A:middle
注释的形式呈现的

00:21:22.076 --> 00:21:25.596 A:middle
之后使用者像是这里的

00:21:25.596 --> 00:21:27.506 A:middle
Jurassic Table Restaurant

00:21:27.506 --> 00:21:29.346 A:middle
也是以注释的形式呈现的

00:21:29.946 --> 00:21:33.386 A:middle
因为博物馆也是个多楼层的建筑

00:21:33.386 --> 00:21:35.236 A:middle
所以它需要一个楼层选择器

00:21:36.396 --> 00:21:40.476 A:middle
我们给它加一个

00:21:40.656 --> 00:21:41.716 A:middle
我已经在 Storyboard 里

00:21:41.716 --> 00:21:42.866 A:middle
加了一个楼层选择器

00:21:43.596 --> 00:21:45.896 A:middle
这是一个基于 UIStackView 的楼层选择器

00:21:46.626 --> 00:21:47.516 A:middle
我现在把它调成可见的

00:21:47.966 --> 00:21:52.426 A:middle
为了接受与楼层选择器

00:21:52.426 --> 00:21:54.846 A:middle
相关的更新信息

00:21:54.846 --> 00:21:56.316 A:middle
我们已经实现了一个

00:21:56.316 --> 00:21:58.356 A:middle
楼层选择的代理事件  其中包含一个

00:21:58.356 --> 00:21:59.986 A:middle
叫做 selectedLevelDidChange 的方法

00:22:02.206 --> 00:22:04.006 A:middle
进行选择时

00:22:04.006 --> 00:22:05.346 A:middle
都会调用这个方法

00:22:06.846 --> 00:22:10.000 A:middle
我们在这里处理更换楼层更换的事件

00:22:16.056 --> 00:22:17.886 A:middle
当楼层发生变化时

00:22:18.026 --> 00:22:20.496 A:middle
我们使用 showFeaturesForOrdinal 方法

00:22:20.496 --> 00:22:22.966 A:middle
更新地图中所选楼层的

00:22:22.966 --> 00:22:24.166 A:middle
各个特征

00:22:24.686 --> 00:22:28.276 A:middle
我们再运行一下 确认下我们已经有了一个

00:22:28.276 --> 00:22:34.446 A:middle
楼层选择器

00:22:34.636 --> 00:22:38.166 A:middle
好了 现在我就可以在楼层选择器里

00:22:38.166 --> 00:22:40.956 A:middle
点击上面的项目

00:22:41.016 --> 00:22:46.566 A:middle
并查看博物馆的每一个楼层了

00:22:48.516 --> 00:22:52.546 A:middle
[掌声]

00:22:53.046 --> 00:22:54.436 A:middle
让我们在这里停一下

00:22:55.166 --> 00:23:00.056 A:middle
回顾一下我们刚才所做的

00:23:02.266 --> 00:23:04.966 A:middle
首先 我们给 IMDF 的特征类型

00:23:05.016 --> 00:23:06.546 A:middle
都创建它们的模型类

00:23:08.076 --> 00:23:09.996 A:middle
之后 我们使用 MKGeoJSONDecoder

00:23:09.996 --> 00:23:13.026 A:middle
对 IMDF 数据进行了解码

00:23:13.026 --> 00:23:15.476 A:middle
并且在特征类之间建立了关联

00:23:15.706 --> 00:23:19.886 A:middle
最后 我们使用MapKit框架的

00:23:19.886 --> 00:23:22.396 A:middle
addOverlays 和

00:23:22.396 --> 00:23:24.326 A:middle
addAnnotation 这两个 API

00:23:24.326 --> 00:23:25.526 A:middle
在地图视图上呈现 IMDF 数据

00:23:26.856 --> 00:23:28.046 A:middle
你可能已经注意到

00:23:28.046 --> 00:23:29.596 A:middle
我们现在的地图没有什么样式

00:23:29.596 --> 00:23:31.446 A:middle
上面的注释看起来

00:23:31.506 --> 00:23:32.596 A:middle
也不怎么有趣

00:23:33.226 --> 00:23:36.206 A:middle
只需要两个额外的步骤

00:23:36.206 --> 00:23:37.776 A:middle
你就可以显著地改进

00:23:37.776 --> 00:23:39.676 A:middle
室内地图体验和功能

00:23:40.296 --> 00:23:44.876 A:middle
首先是将样式应用到室内地图的元素上

00:23:46.036 --> 00:23:48.246 A:middle
对于理解和使用地图来说

00:23:48.246 --> 00:23:49.896 A:middle
给它设计一个合适的样式是十分重要的

00:23:51.226 --> 00:23:53.476 A:middle
你可以使用与 App 团队

00:23:53.546 --> 00:23:55.076 A:middle
或是公司品牌相匹配的

00:23:55.076 --> 00:23:56.186 A:middle
独一无二的颜色或图标

00:23:56.806 --> 00:23:59.796 A:middle
在最后一个步骤里

00:23:59.796 --> 00:24:02.826 A:middle
我们可以通过展示用户的实时位置

00:24:02.826 --> 00:24:04.426 A:middle
来让你的 App 变得更加实用

00:24:05.896 --> 00:24:06.886 A:middle
请记住 你可以参与

00:24:06.886 --> 00:24:08.466 A:middle
室内地图项目以及

00:24:08.466 --> 00:24:11.276 A:middle
运用室内测量 App

00:24:11.276 --> 00:24:13.076 A:middle
来测量你的场所

00:24:13.116 --> 00:24:14.826 A:middle
用这样的方式你就可以

00:24:14.826 --> 00:24:16.106 A:middle
获得准确的室内位置

00:24:17.156 --> 00:24:18.826 A:middle
幸运的是 我们有一个团队

00:24:18.826 --> 00:24:20.636 A:middle
已经测量过恐龙博物馆了

00:24:20.636 --> 00:24:22.206 A:middle
所以我们可以更进一步将实时位置

00:24:22.206 --> 00:24:23.206 A:middle
和表现位置的蓝点添加到题图当中

00:24:23.726 --> 00:24:26.726 A:middle
让我们先来看一下

00:24:26.726 --> 00:24:28.566 A:middle
一些用来辅助样式设计的代码吧

00:24:29.136 --> 00:24:32.436 A:middle
我们将定义一个叫做

00:24:32.436 --> 00:24:35.796 A:middle
StylableFeature 的协议

00:24:35.966 --> 00:24:37.296 A:middle
它有一个属性和两个方法

00:24:38.506 --> 00:24:40.896 A:middle
每一个可以进行样式设计的特征都必须包含 geometry

00:24:41.426 --> 00:24:45.146 A:middle
并且 为了将样式应用于 overlays

00:24:45.276 --> 00:24:46.596 A:middle
我们需要实现 configure(overlayRenderer:)

00:24:46.596 --> 00:24:51.006 A:middle
这个方法类似的 并且 为了将样式应用于

00:24:51.006 --> 00:24:52.856 A:middle
annotations 我们需要实现

00:24:52.896 --> 00:24:54.646 A:middle
configure(annotationView:) 这个方法

00:24:55.196 --> 00:24:57.576 A:middle
我将切换回 Xcode 为各位展示下

00:24:57.576 --> 00:24:59.000 A:middle
如何实现上述的内容

00:25:09.376 --> 00:25:11.196 A:middle
我们需要利用 asset 这个目录

00:25:11.806 --> 00:25:14.776 A:middle
这里面我已经给

00:25:14.846 --> 00:25:18.256 A:middle
这个室内地图添加了特定的颜色

00:25:18.916 --> 00:25:22.766 A:middle
所以 为了应用这些颜色

00:25:22.766 --> 00:25:24.856 A:middle
我们进到 styles.swift 这个文件内

00:25:26.016 --> 00:25:27.486 A:middle
这里我已经定义好了

00:25:27.486 --> 00:25:28.646 A:middle
StylableFeature 协议了

00:25:30.206 --> 00:25:32.296 A:middle
现在 我们给 amenity 特征

00:25:32.296 --> 00:25:34.136 A:middle
来应用一下样式吧

00:25:35.616 --> 00:25:38.086 A:middle
我们可以通过扩展

00:25:38.086 --> 00:25:40.826 A:middle
amenity 类来适配

00:25:40.826 --> 00:25:42.066 A:middle
stylableFeature 这个协议

00:25:42.146 --> 00:25:45.846 A:middle
并且因为 amenity 包含有

00:25:45.846 --> 00:25:47.926 A:middle
点状的 geometry 对象 我们将要实现

00:25:47.966 --> 00:25:49.246 A:middle
configure(annotationView:) 这个方法

00:25:49.246 --> 00:25:52.466 A:middle
并把其中的 annotation 视图的背景颜色

00:25:52.516 --> 00:25:54.176 A:middle
设置成 asset 目录中的

00:25:54.176 --> 00:25:55.296 A:middle
默认颜色

00:25:56.546 --> 00:25:58.016 A:middle
在这个地方我们同时可以

00:25:58.106 --> 00:25:59.606 A:middle
把 annotation 的显示优先级

00:25:59.606 --> 00:26:01.636 A:middle
设置成 defaultLow

00:26:02.216 --> 00:26:05.216 A:middle
类似的 我们可以扩展

00:26:05.216 --> 00:26:06.926 A:middle
unit 类来适配

00:26:06.926 --> 00:26:08.256 A:middle
stylableFeature 这个协议

00:26:08.256 --> 00:26:09.296 A:middle
来给 unit 配上样式

00:26:10.746 --> 00:26:12.426 A:middle
但是对于 unit 来说

00:26:12.426 --> 00:26:15.466 A:middle
我们希望给每一种 unit 都配上独特的颜色

00:26:16.546 --> 00:26:18.346 A:middle
为了实现这件事

00:26:18.346 --> 00:26:19.876 A:middle
我将定义一个叫做 StylableCategory 的

00:26:20.396 --> 00:26:24.296 A:middle
枚举型变量 其中的值

00:26:24.296 --> 00:26:26.306 A:middle
是我们希望设计样式的

00:26:26.306 --> 00:26:27.506 A:middle
各种 unit 的名称

00:26:27.906 --> 00:26:32.246 A:middle
并且因为 unit 包含有 have polygon

00:26:32.246 --> 00:26:34.496 A:middle
多边形的 geometry 对象 我们需要实现

00:26:34.526 --> 00:26:36.436 A:middle
这个 configure(overlayRenderer:) 方法

00:26:36.996 --> 00:26:41.916 A:middle
在这个方法中 我们将处理

00:26:41.916 --> 00:26:44.026 A:middle
不同种的 unit 的值

00:26:44.086 --> 00:26:45.796 A:middle
并且给它们都赋予

00:26:45.896 --> 00:26:50.666 A:middle
不一样的颜色

00:26:50.886 --> 00:26:53.206 A:middle
我将切换到主要的

00:26:53.206 --> 00:26:55.736 A:middle
视图控制类这个位置

00:26:55.736 --> 00:26:57.326 A:middle
在我的 mapView 中的 

00:26:57.326 --> 00:27:00.216 A:middle
rendererFor overlay 这个方法里

00:27:00.376 --> 00:27:02.876 A:middle
我们将调用 feature.configure(overlayRenderer:)

00:27:02.916 --> 00:27:05.316 A:middle
这个方法来为特征应用上不同的颜色

00:27:05.706 --> 00:27:07.516 A:middle
而不是让每个多边形

00:27:07.516 --> 00:27:11.346 A:middle
都使用相同的风格和颜色

00:27:11.936 --> 00:27:16.266 A:middle
类似的 对于

00:27:16.266 --> 00:27:18.456 A:middle
annotation 来说 我将调用

00:27:18.986 --> 00:27:23.336 A:middle
stylableFeature.configure(annotationView:)

00:27:23.696 --> 00:27:26.306 A:middle
方法 来给每个 annotation 应用特定的样式

00:27:26.956 --> 00:27:31.156 A:middle
我们想把 occupant 渲染成

00:27:31.216 --> 00:27:33.876 A:middle
一个简单点配上一个标签

00:27:33.876 --> 00:27:35.936 A:middle
之后 amenity 就是一个灰色的点

00:27:36.756 --> 00:27:38.776 A:middle
为了完成这件事

00:27:39.186 --> 00:27:40.736 A:middle
我已经实现了 自定义 annotation 视图的语句

00:27:40.736 --> 00:27:42.036 A:middle
并且把它们放到项目文件里了

00:27:43.166 --> 00:27:45.376 A:middle
在这个位置 我们调用了上面提到的

00:27:45.376 --> 00:27:48.336 A:middle
configure(annotationView:) 方法

00:27:48.416 --> 00:27:50.386 A:middle
并将特定的样式应用给了

00:27:50.496 --> 00:27:51.516 A:middle
annotation 视图

00:27:52.106 --> 00:27:55.296 A:middle
现在 让我们再运行一下这个 App

00:27:55.296 --> 00:27:56.556 A:middle
看看我们的地图是不是看起来不一样了

00:27:57.156 --> 00:28:03.566 A:middle
好了 它现在看起来

00:28:03.566 --> 00:28:05.076 A:middle
比之前的效果好了很多

00:28:06.246 --> 00:28:08.516 A:middle
现在 我们可以看到

00:28:08.516 --> 00:28:11.846 A:middle
不同的空间单元都有了不一样的颜色

00:28:11.846 --> 00:28:14.516 A:middle
并且我们的便利设施都配成了灰色的点

00:28:15.426 --> 00:28:17.246 A:middle
并且使用者 比如

00:28:17.246 --> 00:28:18.566 A:middle
Jurassic Table Restaurant 这里

00:28:18.566 --> 00:28:20.676 A:middle
是以点配上一个标签来显示的

00:28:21.256 --> 00:28:23.626 A:middle
但是这里还是有一些地方是不对的

00:28:24.226 --> 00:28:27.696 A:middle
地图上的这个区域

00:28:27.916 --> 00:28:30.056 A:middle
它是过道 我记得它属于一种空间单元

00:28:30.146 --> 00:28:32.466 A:middle
但是它的颜色和其他他周围的空间单元

00:28:32.466 --> 00:28:34.596 A:middle
没有太大的不同

00:28:35.686 --> 00:28:37.406 A:middle
让我们来看看能不能修复它

00:28:41.676 --> 00:28:44.296 A:middle
为此 我将进到

00:28:44.296 --> 00:28:46.616 A:middle
style.swift 文件内 我们给过道这个类别

00:28:46.616 --> 00:28:51.466 A:middle
添加一个 type 值

00:28:52.446 --> 00:28:53.996 A:middle
我们必须在 configure overlayRenderer

00:28:54.026 --> 00:28:56.326 A:middle
方法中处理这件事

00:28:58.576 --> 00:29:01.326 A:middle
在我们设置颜色的地方

00:29:01.326 --> 00:29:03.016 A:middle
walkway 的填充颜色

00:29:03.276 --> 00:29:04.596 A:middle
应该是叫做 walkway fill 的颜色

00:29:05.156 --> 00:29:08.296 A:middle
这个颜色应该在我们的 asset 目录下

00:29:09.006 --> 00:29:09.546 A:middle
让我们确认一下

00:29:10.366 --> 00:29:13.286 A:middle
好了 这里我们给它设置成了白色

00:29:14.096 --> 00:29:15.986 A:middle
我再运行一下 App

00:29:16.106 --> 00:29:20.096 A:middle
看下我们是不是修复了这个问题

00:29:20.206 --> 00:29:22.656 A:middle
好了 非常棒 这看起来好多了

00:29:23.376 --> 00:29:25.386 A:middle
只是简单地

00:29:25.386 --> 00:29:27.416 A:middle
给过道应用了一个不同的颜色

00:29:27.416 --> 00:29:30.186 A:middle
我们这个地图的外观就有了显著的改善

00:29:30.806 --> 00:29:35.446 A:middle
让我们再优化一下

00:29:36.686 --> 00:29:39.316 A:middle
给便利设施使用灰点的确不错

00:29:39.316 --> 00:29:41.716 A:middle
但我觉得用图标会更好一点

00:29:43.026 --> 00:29:44.346 A:middle
比普通的图标更好的是什么呢

00:29:44.596 --> 00:29:45.456 A:middle
恐龙图标应该是最佳选择

00:29:45.926 --> 00:29:47.706 A:middle
那么我们就用恐龙的图标吧

00:29:49.196 --> 00:29:51.596 A:middle
我们的设计师已经给了我们一些图标

00:29:51.596 --> 00:29:53.336 A:middle
我们已经把它们放到了项目里

00:29:54.336 --> 00:29:58.276 A:middle
让我们把它们放到地图里吧

00:29:58.276 --> 00:30:00.136 A:middle
我进入到 styles.swift 文件内 我们在这儿

00:30:01.206 --> 00:30:03.796 A:middle
看到 amenity 显示出来是个点

00:30:03.856 --> 00:30:05.906 A:middle
让我们在这做一点改变

00:30:13.136 --> 00:30:15.486 A:middle
为了方便起见

00:30:15.486 --> 00:30:17.186 A:middle
我们把图标的名称

00:30:17.186 --> 00:30:20.876 A:middle
和 amenity 类别设置成一样的

00:30:22.186 --> 00:30:23.276 A:middle
所以这里的代码就是到 asset 的 category

00:30:23.276 --> 00:30:25.666 A:middle
里面看一下这个特定的名称

00:30:26.096 --> 00:30:28.556 A:middle
如果找到一个名称对应的图标

00:30:28.556 --> 00:30:29.926 A:middle
我们就把 annotation 视图的 image 属性

00:30:30.006 --> 00:30:33.256 A:middle
设置成这个图标

00:30:33.256 --> 00:30:34.706 A:middle
如果没找到 就继续按照默认的方式显示灰点

00:30:35.426 --> 00:30:38.826 A:middle
我们运行一下 App 看下效果

00:30:41.376 --> 00:30:43.326 A:middle
太酷了 现在我们就能在地图上看到一些

00:30:43.326 --> 00:30:44.976 A:middle
漂亮的图标了

00:30:44.976 --> 00:30:46.996 A:middle
并且我们可以清晰地

00:30:46.996 --> 00:30:48.326 A:middle
看到洗手间以及扶梯和电梯的位置

00:30:48.326 --> 00:30:50.846 A:middle
更重要的是

00:30:50.846 --> 00:30:55.656 A:middle
我们可以看到一个叫霸王龙的展览

00:30:58.516 --> 00:31:03.206 A:middle
[掌声]

00:31:03.706 --> 00:31:06.826 A:middle
最后一件事 我们知道我们在这个博物馆内

00:31:06.826 --> 00:31:08.906 A:middle
是可以使用室内定位的

00:31:09.606 --> 00:31:10.956 A:middle
那就让我们利用起来这个功能吧

00:31:11.556 --> 00:31:16.246 A:middle
让我们把用户的位置添加到地图中

00:31:17.456 --> 00:31:18.866 A:middle
为了实现这件事

00:31:18.926 --> 00:31:21.936 A:middle
我到这里的 Map View 这个位置

00:31:21.936 --> 00:31:22.826 A:middle
从这儿打开 user location

00:31:23.436 --> 00:31:28.306 A:middle
在我的 ViewController 这个文件里

00:31:29.276 --> 00:31:32.276 A:middle
首先我要添加一个

00:31:32.276 --> 00:31:36.596 A:middle
CLLocationManager 类型的属性

00:31:36.596 --> 00:31:39.946 A:middle
然后用这个属性

00:31:40.076 --> 00:31:41.606 A:middle
在 App 处于前台使用状态的时候

00:31:41.736 --> 00:31:44.506 A:middle
向用户请求定位功能的权限

00:31:45.046 --> 00:31:48.596 A:middle
每当我们获得一个定位的更新

00:31:48.596 --> 00:31:50.636 A:middle
我们就会得到一个回传的参数给到

00:31:50.636 --> 00:31:54.176 A:middle
MKMapViewDelegate 方法

00:31:54.176 --> 00:31:56.866 A:middle
之后 mapView 就会更新用户的位置

00:31:57.506 --> 00:32:00.676 A:middle
让我们来处理下位置更新吧

00:32:01.296 --> 00:32:04.716 A:middle
首先我们要检查一下用户是不是在

00:32:04.716 --> 00:32:06.216 A:middle
场所的内部

00:32:07.096 --> 00:32:08.576 A:middle
如果用户在内部的话

00:32:08.576 --> 00:32:09.656 A:middle
我们就不需要更新地图了

00:32:11.006 --> 00:32:12.646 A:middle
如果用户在场所的外部的话

00:32:12.646 --> 00:32:14.446 A:middle
我们也不用更新地图

00:32:14.446 --> 00:32:16.586 A:middle
但是 如果用户在内部的话

00:32:16.586 --> 00:32:18.816 A:middle
我们就要用 MKUserLocation 上的

00:32:18.956 --> 00:32:20.756 A:middle
CLLocation 这个属性

00:32:20.756 --> 00:32:21.856 A:middle
来获取用户的坐标

00:32:22.586 --> 00:32:26.156 A:middle
CLLocation 不仅提供用户的

00:32:26.226 --> 00:32:27.856 A:middle
经度和纬度

00:32:27.856 --> 00:32:29.826 A:middle
还将提供楼层的信息

00:32:29.826 --> 00:32:31.936 A:middle
不过前提是你的场所已经被测量过

00:32:31.936 --> 00:32:35.616 A:middle
并且用户在场所的内部

00:32:36.186 --> 00:32:39.556 A:middle
所以我们将利用

00:32:39.556 --> 00:32:41.976 A:middle
从 CLLocation 对象中的楼层信息

00:32:41.976 --> 00:32:44.446 A:middle
并使用 showFeaturesForOrdinal 来

00:32:44.446 --> 00:32:46.366 A:middle
更新地图信息

00:32:46.926 --> 00:32:48.656 A:middle
以呈现用户的位置

00:32:49.606 --> 00:32:50.976 A:middle
让我们在运行一下这个 App

00:32:58.936 --> 00:33:03.016 A:middle
我在这点击允许

00:33:03.016 --> 00:33:03.976 A:middle
现在我们就有课用户的室内定位

00:33:04.516 --> 00:33:08.276 A:middle
[掌声]

00:33:08.776 --> 00:33:10.316 A:middle
我还必须说明一下

00:33:10.316 --> 00:33:11.856 A:middle
当用户在不同的楼层间进行了切换

00:33:11.946 --> 00:33:15.026 A:middle
地图将显示用户的当前的楼层

00:33:15.746 --> 00:33:17.816 A:middle
以上这就是这个演示的全部内容

00:33:18.016 --> 00:33:19.046 A:middle
接下来的部分就由 Stephane 

00:33:19.046 --> 00:33:22.196 A:middle
来为各位演示如何在 Web App

00:33:22.396 --> 00:33:23.836 A:middle
中显示室内地图吧

00:33:24.516 --> 00:33:29.500 A:middle
[掌声]

00:33:37.276 --> 00:33:39.796 A:middle
&gt;&gt; 好的 使用 MapKit JS 我们可以在 Web 上

00:33:39.926 --> 00:33:42.066 A:middle
实现出类似的室内地图

00:33:42.066 --> 00:33:43.606 A:middle
的外观和感觉

00:33:44.666 --> 00:33:46.626 A:middle
我将演示如何使用

00:33:46.666 --> 00:33:49.136 A:middle
MapKit JS 渲染我们的地图

00:33:49.136 --> 00:33:50.816 A:middle
并且为所有的主要浏览器

00:33:51.126 --> 00:33:53.206 A:middle
带来相同的室内地图体验

00:33:53.856 --> 00:33:56.396 A:middle
在 MapKitJS 我们要用到的关键方法是

00:33:56.396 --> 00:33:58.846 A:middle
importGeoJSON 方法

00:33:59.666 --> 00:34:01.446 A:middle
importGeoJSON 方法需要接收两个参数

00:34:01.696 --> 00:34:03.336 A:middle
第一个是需要转换的 GeoJSON 特征量

00:34:03.336 --> 00:34:04.826 A:middle
第二个是

00:34:04.826 --> 00:34:07.226 A:middle
GeoJSON 的代理对象

00:34:07.226 --> 00:34:08.835 A:middle
代理对象允许我们以

00:34:08.835 --> 00:34:11.525 A:middle
自定义的方式来创建项目

00:34:12.525 --> 00:34:14.216 A:middle
在这个基本示例中

00:34:14.436 --> 00:34:15.065 A:middle
我们有两个代理对象

00:34:15.966 --> 00:34:17.735 A:middle
geoJSONDidError 让我们能够对

00:34:17.735 --> 00:34:20.025 A:middle
错误做出反应

00:34:20.025 --> 00:34:21.926 A:middle
geoJSONDidComplete 可以给我们一个

00:34:21.926 --> 00:34:23.755 A:middle
刚创建好的项目的数组

00:34:28.356 --> 00:34:30.065 A:middle
之后们们通过 showItems 方法

00:34:30.065 --> 00:34:32.335 A:middle
来显示之前得到的项

00:34:33.176 --> 00:34:34.666 A:middle
我们其实也可以用 addItems 方法

00:34:34.896 --> 00:34:36.216 A:middle
但区别是 addItems 方法

00:34:36.216 --> 00:34:38.936 A:middle
不会把地图的中心点给聚焦在新添加的项目上

00:34:41.656 --> 00:34:43.386 A:middle
为了给 overlays 添加样式

00:34:43.606 --> 00:34:45.626 A:middle
比如说多边形和线条

00:34:45.626 --> 00:34:46.815 A:middle
我们可以运用 styleForOverlay 方法

00:34:47.696 --> 00:34:49.235 A:middle
它用一个新获得的 overlay 作为参数

00:34:49.235 --> 00:34:51.226 A:middle
并期望返回一个

00:34:51.226 --> 00:34:53.056 A:middle
style 型的对象

00:34:54.005 --> 00:34:55.585 A:middle
当然我们也可以创建一个

00:34:55.585 --> 00:34:57.296 A:middle
全新的样式

00:34:57.296 --> 00:34:59.066 A:middle
但我们也可以通过 style 属性

00:34:59.066 --> 00:35:00.936 A:middle
使用与 overlay 相关联的默认样式

00:35:00.936 --> 00:35:04.086 A:middle
之后再定制它

00:35:06.596 --> 00:35:08.796 A:middle
我们也可以使用 itemForPoint 方法

00:35:08.796 --> 00:35:11.076 A:middle
定制点的呈现效果

00:35:11.896 --> 00:35:13.066 A:middle
itemForPoint 接收 point 特征的一个

00:35:13.066 --> 00:35:14.436 A:middle
coordinate 作为参数

00:35:14.526 --> 00:35:18.196 A:middle
并且会返回一个项

00:35:18.916 --> 00:35:21.386 A:middle
这里返回的是一个 MarkerAnnotation 项

00:35:22.446 --> 00:35:23.996 A:middle
当然 我们也可以设置

00:35:24.086 --> 00:35:25.576 A:middle
标题和颜色等选项

00:35:26.136 --> 00:35:29.016 A:middle
我们还可以设置显示的优先级

00:35:29.766 --> 00:35:31.416 A:middle
当地图被缩放的很小的时候

00:35:31.416 --> 00:35:32.636 A:middle
如果地图上出现很多的注释

00:35:32.636 --> 00:35:34.146 A:middle
它们可能就会发生冲突

00:35:35.006 --> 00:35:37.106 A:middle
有多种策略可以解决这个问题

00:35:37.106 --> 00:35:39.336 A:middle
比如将注释集群在一起显示成一个

00:35:39.336 --> 00:35:41.496 A:middle
或者是根据显示优先级来显示

00:35:42.566 --> 00:35:43.776 A:middle
MapView JS 可以根据显示的优先级

00:35:43.776 --> 00:35:46.276 A:middle
来决定首先应该

00:35:46.476 --> 00:35:49.000 A:middle
隐藏哪些注释

00:35:50.676 --> 00:35:52.386 A:middle
有了 importGeoJSON 我们就有了

00:35:52.386 --> 00:35:55.776 A:middle
创建恐龙博物馆的地图所需的一切了

00:35:56.176 --> 00:35:56.816 A:middle
那么我们开始吧

00:36:15.486 --> 00:36:16.996 A:middle
mapView 来开始我们的项目吧

00:36:17.606 --> 00:36:19.636 A:middle
我正在运行着一个 HTTP 服务器

00:36:19.636 --> 00:36:20.306 A:middle
并且它正在为我们的 Web 资产

00:36:20.306 --> 00:36:22.216 A:middle
提供着服务 同时他还负责生成

00:36:22.216 --> 00:36:24.626 A:middle
MapKit JS 的授权令牌

00:36:25.886 --> 00:36:27.786 A:middle
为了将恐龙博物馆的地图

00:36:27.786 --> 00:36:29.526 A:middle
绘制在浏览器里 我们需要

00:36:29.526 --> 00:36:31.476 A:middle
加载 IMDF 文件 并为其中包含的

00:36:31.476 --> 00:36:33.016 A:middle
每个特性创建 mapView 项

00:36:33.846 --> 00:36:35.136 A:middle
这听起来很难 但并非如此

00:36:35.316 --> 00:36:37.166 A:middle
有了 importGeoJSON 方法

00:36:37.166 --> 00:36:38.216 A:middle
一切就变得不那么复杂

00:36:38.216 --> 00:36:40.396 A:middle
因为我们之前已经看到

00:36:40.396 --> 00:36:42.226 A:middle
IMDF 实际上就是 GeoJSON

00:36:42.816 --> 00:36:45.376 A:middle
在 iOS 的演示里 你们已经看到

00:36:45.376 --> 00:36:48.056 A:middle
我们实际给所有的特征做了个图的结构

00:36:48.726 --> 00:36:49.846 A:middle
在这个演示里我们将采取

00:36:49.846 --> 00:36:51.106 A:middle
有点不同的方法

00:36:51.516 --> 00:36:54.236 A:middle
根据需要去过滤特征

00:36:55.256 --> 00:36:56.936 A:middle
我们创建一个名为 IMDFArchive 的类

00:36:56.936 --> 00:37:00.566 A:middle
它将提供加载 组织和筛选特征所用到的

00:37:00.996 --> 00:37:02.926 A:middle
基本的方法

00:37:11.066 --> 00:37:12.726 A:middle
静态的 ImdfArchive.load 方法

00:37:12.726 --> 00:37:13.826 A:middle
将从服务器下载

00:37:13.826 --> 00:37:16.106 A:middle
我们需要的所有文件

00:37:16.106 --> 00:37:17.676 A:middle
然后将特征聚合到一个数组中

00:37:17.676 --> 00:37:18.846 A:middle
并将该数组传递给构造函数

00:37:18.846 --> 00:37:20.436 A:middle
然后创建两个对象

00:37:20.436 --> 00:37:23.956 A:middle
featureById 和 featuresByType

00:37:24.076 --> 00:37:25.456 A:middle
它们在后面就会派上用场

00:37:27.076 --> 00:37:30.076 A:middle
现在我们就可以调用这个方法

00:37:30.076 --> 00:37:33.126 A:middle
来加载我们的特征

00:37:33.126 --> 00:37:35.186 A:middle
并且我们可以用 importGeoJSON 来

00:37:35.186 --> 00:37:39.666 A:middle
给每个特征创建 MapKit 项

00:37:39.886 --> 00:37:40.166 A:middle
好了

00:37:40.756 --> 00:37:43.466 A:middle
现在我们需要做的

00:37:43.776 --> 00:37:46.206 A:middle
就是用 showItems 方法来

00:37:46.206 --> 00:37:47.886 A:middle
显示这些新创建的地图项 我们来做这一步

00:37:56.186 --> 00:37:58.306 A:middle
好了 我们试一下

00:37:59.036 --> 00:38:05.706 A:middle
好了 我们可以看到地图上

00:38:05.706 --> 00:38:07.166 A:middle
呈现了一大堆的几何图形

00:38:07.166 --> 00:38:08.996 A:middle
不过这也是意料之中的

00:38:09.056 --> 00:38:10.296 A:middle
因为我们要求 MapKit JS 渲染了

00:38:10.296 --> 00:38:11.166 A:middle
我们这个场所内的所有特征

00:38:12.056 --> 00:38:13.386 A:middle
我们需要的是只保留我们需要的

00:38:13.386 --> 00:38:14.426 A:middle
特征类型并按照楼层来

00:38:14.426 --> 00:38:17.216 A:middle
过滤并显示它们

00:38:18.026 --> 00:38:19.346 A:middle
因此 我们需要在

00:38:19.346 --> 00:38:21.256 A:middle
IMDFArchive 类中实现一些方法

00:38:21.896 --> 00:38:23.766 A:middle
他们只返回给定序号的

00:38:23.796 --> 00:38:25.496 A:middle
特定的类型的特征对象

00:38:26.536 --> 00:38:27.666 A:middle
我们先从 level 开始吧

00:38:33.426 --> 00:38:35.416 A:middle
好了 所以这里我们只保留了

00:38:35.416 --> 00:38:37.236 A:middle
有着正确序号的 level

00:38:37.236 --> 00:38:38.976 A:middle
类似的 我们也给 units 做一样的操作

00:38:46.046 --> 00:38:46.946 A:middle
好了 它们都有一样的 levelID

00:38:48.346 --> 00:38:49.436 A:middle
之后我们会为 units 里面的

00:38:49.436 --> 00:38:50.766 A:middle
amenities 也做一样的操作

00:38:51.456 --> 00:38:55.936 A:middle
还有 level 上的 openings amenities 和 anchors

00:39:05.696 --> 00:39:07.356 A:middle
事实上由于 IMDF files 根源上是

00:39:07.546 --> 00:39:08.696 A:middle
标准的 GeoJSON 所以才让

00:39:08.696 --> 00:39:09.646 A:middle
我们的工作变得如此简单

00:39:10.586 --> 00:39:12.776 A:middle
这里无需复杂的解析或者解码的逻辑语句

00:39:13.566 --> 00:39:14.436 A:middle
我们只需要知道

00:39:14.436 --> 00:39:16.056 A:middle
我们希望呈现的属性它是

00:39:16.056 --> 00:39:16.726 A:middle
属于哪一种特征类型就足够了

00:39:18.146 --> 00:39:20.406 A:middle
好了 现在我们重新写一下渲染的逻辑

00:39:22.056 --> 00:39:25.266 A:middle
我们将在这里创建一个叫做

00:39:25.266 --> 00:39:26.496 A:middle
createItemsForOrdinal 的函数

00:39:26.546 --> 00:39:28.726 A:middle
它将为给定的序号创建出对应的项

00:39:30.206 --> 00:39:31.266 A:middle
现在我们要做的就是

00:39:31.266 --> 00:39:33.206 A:middle
得到这个序号对应的特征

00:39:33.206 --> 00:39:34.426 A:middle
我们还是先从 levels 开始

00:39:35.066 --> 00:39:38.826 A:middle
好的 对于 levels 中的每一层

00:39:38.826 --> 00:39:40.226 A:middle
我们都等到了对应的

00:39:40.906 --> 00:39:44.976 A:middle
units 类似的还有 amenities 以及 openings

00:39:49.146 --> 00:39:50.886 A:middle
好了 所以这就是我们现在

00:39:50.956 --> 00:39:53.446 A:middle
想要的所有的特征类型

00:39:57.636 --> 00:40:00.736 A:middle
好了 现在我们要做的就是显示它们

00:40:01.286 --> 00:40:02.816 A:middle
现在我们用一个序号

00:40:02.816 --> 00:40:05.386 A:middle
来调用 createItemsForOrdinal 函数

00:40:05.386 --> 00:40:06.846 A:middle
我们就用序号 1

00:40:06.896 --> 00:40:08.976 A:middle
它代表 2 楼 然后我们把它适配到地图上

00:40:14.496 --> 00:40:20.076 A:middle
好了 让我们来写一下

00:40:20.226 --> 00:40:22.116 A:middle
好的 这样就好多了

00:40:22.116 --> 00:40:23.786 A:middle
现在我们可以清楚地

00:40:23.786 --> 00:40:25.216 A:middle
看到 2 楼的结构了

00:40:26.176 --> 00:40:27.586 A:middle
现在让我们添加一个楼层选择器

00:40:28.486 --> 00:40:29.916 A:middle
我已经实现了一个简单的楼层选择器

00:40:29.916 --> 00:40:32.646 A:middle
它其实就是一个基础的 HTML 表单

00:40:32.736 --> 00:40:35.036 A:middle
是我用 venue 内的 level 的名称来实现的

00:40:35.986 --> 00:40:36.896 A:middle
你可以在网站上

00:40:36.896 --> 00:40:38.236 A:middle
本场讲座的下方链接中

00:40:38.236 --> 00:40:39.576 A:middle
找到示例代码并查看细节

00:40:40.906 --> 00:40:42.516 A:middle
在需要的情况下

00:40:42.896 --> 00:40:43.866 A:middle
楼层选择器也会使用我们的

00:40:44.046 --> 00:40:46.886 A:middle
createItemsForOrdinal 来创建项

00:40:47.636 --> 00:40:49.126 A:middle
我已经导入了脚本

00:40:49.126 --> 00:40:50.116 A:middle
所以这里我需要的就是实例化它

00:40:50.116 --> 00:40:55.966 A:middle
并选择序号 1

00:40:56.206 --> 00:40:57.756 A:middle
这样一来

00:40:57.756 --> 00:40:59.336 A:middle
在加载完页面的时候

00:40:59.336 --> 00:41:00.056 A:middle
就会显示出 2 楼

00:41:00.666 --> 00:41:04.026 A:middle
我们再来试一下

00:41:05.586 --> 00:41:08.586 A:middle
好了 现在 我就可以在楼层间切换了

00:41:09.156 --> 00:41:12.636 A:middle
现在 我们需要做的

00:41:12.636 --> 00:41:13.826 A:middle
就是添加一些样式

00:41:14.826 --> 00:41:15.776 A:middle
现在 所有的空间单元看起来都是一样的

00:41:16.096 --> 00:41:18.006 A:middle
现在我们甚至无法把

00:41:18.006 --> 00:41:19.236 A:middle
代表出入口的线

00:41:19.236 --> 00:41:20.416 A:middle
和其他的几何图形区分出来

00:41:20.416 --> 00:41:21.486 A:middle
给了我们一个错误的印象

00:41:21.486 --> 00:41:23.896 A:middle
就好像所有的空间单元都没有门

00:41:24.276 --> 00:41:25.056 A:middle
这点有点让人困惑

00:41:26.006 --> 00:41:27.216 A:middle
我们可以定制

00:41:27.216 --> 00:41:28.286 A:middle
多边形和线条的样式

00:41:28.286 --> 00:41:29.266 A:middle
只需要在 GeoJSON 的代理对象中

00:41:29.266 --> 00:41:33.146 A:middle
把 styleForOverlay 方法给实现出来就可以了

00:41:33.906 --> 00:41:36.456 A:middle
那么 我们就从把 openings 画成白色

00:41:36.456 --> 00:41:45.356 A:middle
来开始吧 好了 这很简单

00:41:45.356 --> 00:41:47.056 A:middle
我们只需在这儿选到 opening 特征这个位置

00:41:47.056 --> 00:41:49.556 A:middle
之后把描边颜色设置成白色就可以了

00:41:51.786 --> 00:41:54.436 A:middle
正如我们在 iOS App 种所做的

00:41:54.436 --> 00:41:57.126 A:middle
这里让我们也根据 unit 的类别

00:41:57.236 --> 00:41:58.356 A:middle
来设置不同的填充颜色

00:41:59.166 --> 00:42:00.776 A:middle
为了实现这件事

00:42:00.776 --> 00:42:01.976 A:middle
让我们创建一个叫做 unitStyles 的对象

00:42:09.506 --> 00:42:11.786 A:middle
好了 所以这个对象内

00:42:11.786 --> 00:42:13.886 A:middle
将包含我们想要显示的每一个种类的 unit 

00:42:13.886 --> 00:42:15.386 A:middle
的样式属性

00:42:16.566 --> 00:42:18.916 A:middle
但我们也需要一个默认的

00:42:18.916 --> 00:42:21.696 A:middle
因为有一些种类的 unit 可能没有指定的样式

00:42:21.696 --> 00:42:27.466 A:middle
我们先把默认的写出来

00:42:27.646 --> 00:42:29.356 A:middle
好了 现在我们就可以给

00:42:29.356 --> 00:42:30.966 A:middle
我们关心的 unit 的种类

00:42:30.966 --> 00:42:32.000 A:middle
来设定样式了

00:42:35.876 --> 00:42:38.796 A:middle
好了 所以 我们可以用这个对象

00:42:38.796 --> 00:42:42.926 A:middle
来给 unit 的 overlay 应用上一个样式

00:42:43.556 --> 00:42:56.996 A:middle
好了 所以我们在这做的

00:42:56.996 --> 00:42:58.686 A:middle
就是获取指定的 unit 类别的唯一样式

00:42:58.686 --> 00:43:01.556 A:middle
之后把 fillOpacity strokeColor

00:43:01.666 --> 00:43:03.056 A:middle
和 fillColor 设置成样式值

00:43:03.056 --> 00:43:05.556 A:middle
如果没有样式值

00:43:05.556 --> 00:43:06.576 A:middle
就设置按默认值显示

00:43:08.546 --> 00:43:09.686 A:middle
这实际上是一个很好的例子

00:43:09.686 --> 00:43:12.186 A:middle
说明了渲染 IMDF 地图是多么容易

00:43:13.336 --> 00:43:14.426 A:middle
大多数情况下将 feature_type

00:43:14.546 --> 00:43:16.216 A:middle
和其包含 categoty 联合起来运用一下

00:43:16.216 --> 00:43:17.386 A:middle
就能把样式给应用上去

00:43:17.866 --> 00:43:19.596 A:middle
当然 我们其实也可以

00:43:19.646 --> 00:43:22.836 A:middle
依赖其他属性来实现这件事

00:43:22.836 --> 00:43:23.816 A:middle
那么 让我们来看一下变化吧

00:43:24.476 --> 00:43:29.526 A:middle
好了 看起来好多了

00:43:29.876 --> 00:43:31.206 A:middle
现在我们就能看出来

00:43:31.206 --> 00:43:33.756 A:middle
哪里是过道以及用户可以从哪儿

00:43:33.756 --> 00:43:36.636 A:middle
进到各个房间

00:43:36.886 --> 00:43:38.896 A:middle
现在 你也许会注意到

00:43:39.706 --> 00:43:41.446 A:middle
地图上的这些红色大头针

00:43:42.216 --> 00:43:43.256 A:middle
它们代表的是便利设施

00:43:43.886 --> 00:43:45.416 A:middle
请记住 amenities 包含

00:43:45.416 --> 00:43:47.886 A:middle
点型 geometries 并且 importGeoJSON

00:43:47.886 --> 00:43:50.416 A:middle
默认情况会把点型的 geometries

00:43:50.416 --> 00:43:51.656 A:middle
按照 marker annotations 的方式呈现出来

00:43:53.526 --> 00:43:58.316 A:middle
这里 我们希望和 iOS App 使用相同的图标

00:43:58.766 --> 00:44:01.356 A:middle
为此 我们需要使用 MapKit JS 的

00:44:01.356 --> 00:44:02.336 A:middle
图片注释功能

00:44:03.576 --> 00:44:04.496 A:middle
就像我们之前所做的

00:44:04.496 --> 00:44:05.946 A:middle
我们可以通过

00:44:05.946 --> 00:44:07.536 A:middle
提供我们自己的 itemForPoint 方法

00:44:07.536 --> 00:44:10.496 A:middle
来替换掉 importGeoJSON 的默认行为

00:44:11.176 --> 00:44:11.686 A:middle
那么我们就来这么做吧

00:44:21.046 --> 00:44:23.406 A:middle
好了 所以我们在这儿做的

00:44:23.406 --> 00:44:25.116 A:middle
就是从属性中找到一个显示用的名称

00:44:25.116 --> 00:44:26.216 A:middle
或者是显示 category 给传回来的种类名

00:44:26.216 --> 00:44:28.656 A:middle
如果这两者都没有的话

00:44:28.656 --> 00:44:30.756 A:middle
就把它本身的名称作为 annotation 来显示

00:44:32.296 --> 00:44:33.586 A:middle
当这个 annotation 被点击时

00:44:34.036 --> 00:44:35.516 A:middle
显示用的名称将会出现在对话框里

00:44:36.466 --> 00:44:38.236 A:middle
我们还给所有的 amenities 先设置了

00:44:38.236 --> 00:44:40.706 A:middle
一个较低的显示优先级

00:44:40.706 --> 00:44:42.686 A:middle
这样我们就能给其他

00:44:42.686 --> 00:44:43.876 A:middle
更重要的 amenities 比如说展品

00:44:44.296 --> 00:44:45.166 A:middle
设置一个更高的优先级

00:44:45.346 --> 00:44:47.116 A:middle
我们很快就会讲到

00:44:49.296 --> 00:44:51.366 A:middle
并且最后 如果存在的话

00:44:51.366 --> 00:44:55.946 A:middle
如果我们的图标有一个 URL 的话

00:44:55.946 --> 00:44:57.146 A:middle
我们就创建一个 ImageAnnotation

00:44:57.266 --> 00:44:59.546 A:middle
如果没有的话 我们就返回

00:44:59.616 --> 00:45:00.976 A:middle
CreateDotAnnotation 的函数值

00:45:02.086 --> 00:45:03.596 A:middle
我已经在一个单独的文件里

00:45:03.596 --> 00:45:04.726 A:middle
实现了一个简单的点注释

00:45:04.726 --> 00:45:06.076 A:middle
而且我也已经把它导到项目里了

00:45:06.866 --> 00:45:08.416 A:middle
所以我们可以在这里直接用

00:45:09.696 --> 00:45:12.316 A:middle
好了 我们在这里要做的是

00:45:12.626 --> 00:45:14.706 A:middle
根据 category 给图标提供

00:45:14.706 --> 00:45:17.026 A:middle
正确的 URL

00:45:17.856 --> 00:45:21.766 A:middle
为此 我们在这儿创建一个对象

00:45:21.766 --> 00:45:23.906 A:middle
叫做 iconUrls

00:45:24.616 --> 00:45:29.196 A:middle
好了 这很简单

00:45:30.306 --> 00:45:31.876 A:middle
现在我们就可以用这个对象

00:45:32.686 --> 00:45:41.196 A:middle
来为图标获取 URL

00:45:42.956 --> 00:45:45.356 A:middle
你可能会注意到

00:45:45.456 --> 00:45:50.006 A:middle
这里的有一些条目非常的独特

00:45:50.006 --> 00:45:52.416 A:middle
它们并不是用来显示各种便利设施的

00:45:52.656 --> 00:45:54.706 A:middle
这些标志是用来表示

00:45:54.846 --> 00:45:56.456 A:middle
霸王龙 蜥脚类动物 以及骨骼展厅的

00:45:57.946 --> 00:46:00.976 A:middle
所以 我们需要以不同的方式来处理它们

00:46:07.616 --> 00:46:09.446 A:middle
所以我们要做的是测试名称

00:46:09.446 --> 00:46:11.216 A:middle
如果名称是正确的匹配上了

00:46:11.216 --> 00:46:13.386 A:middle
我们就把对应的图标给显示上去

00:46:13.596 --> 00:46:14.786 A:middle
当然 我们也可以用

00:46:14.786 --> 00:46:16.006 A:middle
feature ID 来实现这件事

00:46:17.486 --> 00:46:20.016 A:middle
我们同时给所有的展品

00:46:20.016 --> 00:46:22.256 A:middle
设置了一个较高的显示优先级

00:46:22.256 --> 00:46:24.586 A:middle
其中霸王龙展览的优先级最高

00:46:24.706 --> 00:46:28.526 A:middle
最后但是也是十分重要的一步

00:46:28.526 --> 00:46:30.586 A:middle
我们还将把展品和

00:46:30.586 --> 00:46:34.646 A:middle
名称的 unicode 字符做一个匹配

00:46:34.786 --> 00:46:35.706 A:middle
是的 你没听错

00:46:36.246 --> 00:46:37.136 A:middle
实际上恐龙和霸王龙

00:46:37.136 --> 00:46:39.876 A:middle
都有它们专属的 unicode 字符

00:46:41.186 --> 00:46:47.946 A:middle
好了 让我们重新加载一下看下地图的渲染效果

00:46:49.476 --> 00:46:51.066 A:middle
现在 这张地图就可以

00:46:51.136 --> 00:46:51.976 A:middle
对得起《Dinoseum》这个名字了

00:46:52.516 --> 00:46:55.866 A:middle
[掌声]

00:46:56.366 --> 00:46:59.366 A:middle
再看这儿 如果我缩到

00:47:03.216 --> 00:47:04.716 A:middle
这是我们最后呈现出来的注释

00:47:04.716 --> 00:47:06.546 A:middle
是非常匹配主题的一个恐龙展品的图标

00:47:07.656 --> 00:47:10.606 A:middle
好了 当然 我们也可以

00:47:11.186 --> 00:47:12.526 A:middle
限制用户 让他们不能把比例尺

00:47:12.526 --> 00:47:15.216 A:middle
缩放到非常小

00:47:15.846 --> 00:47:19.266 A:middle
我们可以使用 MapKit JS 中提供的

00:47:19.556 --> 00:47:25.206 A:middle
一个叫做 cameraZoomRange 的设置

00:47:25.206 --> 00:47:26.216 A:middle
来实现这一点

00:47:27.046 --> 00:47:32.386 A:middle
好了 让我们来试一下 看看我们现在还能不能缩小了

00:47:32.696 --> 00:47:36.016 A:middle
看 无法再缩小了 这太棒了

00:47:36.286 --> 00:47:43.786 A:middle
好了 所以 最后一个我们想要在这里

00:47:43.786 --> 00:47:45.676 A:middle
处理掉的就是 occpant 了

00:47:46.466 --> 00:47:48.396 A:middle
请记得 这个部分

00:47:48.396 --> 00:47:49.336 A:middle
的确有点挑战性

00:47:49.956 --> 00:47:51.806 A:middle
因为 occupants 并不包含显示的定位点

00:47:52.596 --> 00:47:54.376 A:middle
但它们和 anchors 对象相连

00:47:54.616 --> 00:47:55.956 A:middle
anchors 是有显示的定位点的

00:47:55.986 --> 00:47:57.336 A:middle
因此 我们可以使用与之关联的

00:47:57.336 --> 00:48:00.006 A:middle
anchor 来获取坐标

00:48:00.006 --> 00:48:01.956 A:middle
以便将 MapKit 注释放在地图上

00:48:03.456 --> 00:48:05.666 A:middle
因此 让我们在 ImdfArchive 类

00:48:05.666 --> 00:48:07.376 A:middle
中实现一个方法

00:48:07.906 --> 00:48:09.766 A:middle
它将所有 occupants 和他们的 anchors

00:48:09.766 --> 00:48:12.746 A:middle
按照特定的序号绑定在一起

00:48:19.156 --> 00:48:21.516 A:middle
好了 所以 这个方法返回一个 对象数组

00:48:21.516 --> 00:48:22.586 A:middle
这个数组包含of objects containing the

00:48:22.586 --> 00:48:24.556 A:middle
occupant 和它关联的

00:48:24.926 --> 00:48:30.456 A:middle
那么 让我们用这个来渲染 occupants 吧

00:48:34.556 --> 00:48:37.506 A:middle
就像你在这看到的

00:48:37.556 --> 00:48:38.606 A:middle
我们做的操作和给 amenities 的操作

00:48:38.606 --> 00:48:40.826 A:middle
是非常相似的 不过有一个例外

00:48:41.576 --> 00:48:43.426 A:middle
我们并不将 occupant 它本身提供给

00:48:43.426 --> 00:48:44.816 A:middle
importGeoJSON 这个方法

00:48:44.816 --> 00:48:47.646 A:middle
而提供的是 anchor

00:48:47.646 --> 00:48:49.216 A:middle
因为 anchor 中包含 geometry

00:48:50.016 --> 00:48:51.796 A:middle
我们把 occupant 的名称

00:48:51.796 --> 00:48:53.096 A:middle
设置成 annotation 显示出来的标题

00:48:53.476 --> 00:48:57.696 A:middle
我还基于 category 来设定了一个

00:48:57.806 --> 00:49:01.066 A:middle
特定的类 叫做 category-annotation

00:49:01.136 --> 00:49:03.266 A:middle
这样 我就能给某些特定的

00:49:03.266 --> 00:49:05.376 A:middle
occupants 提供一个特定的样式

00:49:06.876 --> 00:49:08.646 A:middle
我已经在我们的 CSS 文件里

00:49:08.736 --> 00:49:10.796 A:middle
提供了一个样式

00:49:11.366 --> 00:49:17.906 A:middle
好了 现在我们再重新加载一次

00:49:18.126 --> 00:49:19.956 A:middle
好了 现在我们可以看到 Jurassic Table

00:49:19.956 --> 00:49:21.976 A:middle
这是我们一个著名的室内餐厅

00:49:22.516 --> 00:49:26.986 A:middle
[掌声]

00:49:27.486 --> 00:49:30.756 A:middle
现在 让我们回顾下我们都做了什么

00:49:31.556 --> 00:49:33.586 A:middle
首先我们从服务器上

00:49:33.586 --> 00:49:35.196 A:middle
下载 GeoJSON 文件

00:49:35.196 --> 00:49:36.636 A:middle
从中提取各类特征

00:49:36.676 --> 00:49:38.316 A:middle
并按照类别来组织它们

00:49:39.316 --> 00:49:40.386 A:middle
之后 我们实现了一些方法

00:49:40.386 --> 00:49:42.256 A:middle
来获得给定序数后的

00:49:42.256 --> 00:49:44.276 A:middle
对应特征上的特定类型

00:49:45.026 --> 00:49:47.546 A:middle
然后我们添加了一个楼层选择器

00:49:47.546 --> 00:49:49.726 A:middle
以便用户能够

00:49:49.726 --> 00:49:51.146 A:middle
选择它们想要查看的楼层

00:49:52.456 --> 00:49:53.856 A:middle
我们还给空间单元和出入口

00:49:54.286 --> 00:49:55.696 A:middle
提供了特定的样式

00:49:57.946 --> 00:49:59.426 A:middle
最后 我们为便利设施和使用者

00:49:59.426 --> 00:50:01.206 A:middle
创建了图标和

00:50:01.206 --> 00:50:02.886 A:middle
自定义的注释

00:50:03.156 --> 00:50:04.846 A:middle
替换掉了默认的标记注释效果

00:50:05.446 --> 00:50:08.336 A:middle
使用 MapKit JS 我们能够

00:50:08.336 --> 00:50:10.316 A:middle
创建一个和 iOS 版本

00:50:10.316 --> 00:50:12.116 A:middle
具有相同外观和感觉的地图

00:50:12.816 --> 00:50:14.266 A:middle
现在 我们有了一个漂亮的地图

00:50:14.266 --> 00:50:16.006 A:middle
可以把它嵌入到 Dinoseum 的网站里

00:50:16.006 --> 00:50:17.776 A:middle
并在所有的主流浏览器中

00:50:17.776 --> 00:50:19.506 A:middle
给用户们提供

00:50:19.506 --> 00:50:20.476 A:middle
相同的使用体验

00:50:21.286 --> 00:50:23.396 A:middle
关于这一点

00:50:23.396 --> 00:50:24.736 A:middle
我将让 Mithilesh 上台来做个总结

00:50:26.516 --> 00:50:31.756 A:middle
[掌声]

00:50:32.256 --> 00:50:36.686 A:middle
&gt;&gt; 大家好 我希望你们能喜欢你们今天看到的一切

00:50:37.886 --> 00:50:39.166 A:middle
在我们结束今天的讲座之前

00:50:39.166 --> 00:50:40.166 A:middle
我还想介绍一些

00:50:40.166 --> 00:50:42.196 A:middle
适用于室内地图的最佳实践建议

00:50:44.356 --> 00:50:45.396 A:middle
我们先来说说样式

00:50:46.756 --> 00:50:47.906 A:middle
当你设计一个室内地图的时候

00:50:47.986 --> 00:50:49.106 A:middle
应该让它看起来像是你 App 的

00:50:49.106 --> 00:50:50.256 A:middle
自然的延申

00:50:51.106 --> 00:50:53.196 A:middle
你应该使用和你的 App 的主题

00:50:53.306 --> 00:50:55.896 A:middle
或是和你的公司相匹配的颜色及图标

00:50:57.176 --> 00:50:58.296 A:middle
不要尝试去复制 Apple 地图

00:50:58.296 --> 00:50:59.686 A:middle
或者其他 App 的外观效果

00:51:02.866 --> 00:51:05.126 A:middle
地图上的覆盖颜色 图标 标签

00:51:05.126 --> 00:51:06.216 A:middle
要匹配你的 App 的视觉效果

00:51:09.296 --> 00:51:10.506 A:middle
给你地图上的不同的特征对象

00:51:10.506 --> 00:51:12.146 A:middle
选择不同的风格的样式

00:51:13.516 --> 00:51:14.696 A:middle
给诸如电梯之类的区域

00:51:14.696 --> 00:51:16.496 A:middle
使用特定的颜色分类

00:51:17.186 --> 00:51:19.486 A:middle
让人们可以一眼就发现它们

00:51:22.366 --> 00:51:24.216 A:middle
使用容易识别的图标

00:51:25.376 --> 00:51:27.246 A:middle
图标不仅在视觉上吸引人

00:51:27.316 --> 00:51:29.116 A:middle
而且给能够

00:51:29.116 --> 00:51:31.306 A:middle
有效的传达其目的

00:51:34.196 --> 00:51:36.256 A:middle
你应该根据缩放级别

00:51:36.376 --> 00:51:37.506 A:middle
调整地图的细节

00:51:38.326 --> 00:51:39.776 A:middle
过多的细节会让地图

00:51:39.776 --> 00:51:41.056 A:middle
看起来杂乱无章

00:51:42.026 --> 00:51:43.856 A:middle
当地图被缩到非常小的时候

00:51:43.856 --> 00:51:45.166 A:middle
展示大的区域 像是房间和建筑物

00:51:45.516 --> 00:51:47.516 A:middle
然后随着地图的放大

00:51:47.516 --> 00:51:49.056 A:middle
逐步添加更多的

00:51:49.086 --> 00:51:50.006 A:middle
细节功能和标签等

00:51:53.026 --> 00:51:54.346 A:middle
你应该在地图里包含一些

00:51:54.346 --> 00:51:55.786 A:middle
周围的区域来提供一些相关的参照

00:51:56.696 --> 00:51:58.176 A:middle
临街的街道 运动场

00:51:58.266 --> 00:51:59.786 A:middle
以及其他地标可以帮助人们

00:51:59.836 --> 00:52:02.496 A:middle
在使用地图时确定方位

00:52:04.396 --> 00:52:05.486 A:middle
并且 最终也是最重要的是

00:52:05.486 --> 00:52:08.106 A:middle
在 iOS 上开启

00:52:08.106 --> 00:52:10.406 A:middle
用户的室内定位

00:52:10.406 --> 00:52:13.086 A:middle
可以让用户在浏览你的场所时

00:52:13.086 --> 00:52:14.276 A:middle
优化他们的使用体验

00:52:15.886 --> 00:52:17.146 A:middle
更多信息 你可以

00:52:17.146 --> 00:52:18.596 A:middle
查看相关的讲座

00:52:18.756 --> 00:52:20.596 A:middle
《What's New in MapKit and MapKit JS》以及

00:52:21.186 --> 00:52:24.566 A:middle
《Introducing the Apple Maps Program》这两场讲座

00:52:25.346 --> 00:52:26.446 A:middle
如果你有任何意见和问题

00:52:26.446 --> 00:52:28.416 A:middle
可以在这场讲座结束后

00:52:28.416 --> 00:52:29.486 A:middle
到我们的实验室来

00:52:30.176 --> 00:52:31.556 A:middle
非常感谢各位

00:52:31.556 --> 00:52:33.156 A:middle
出席这场讲座

00:52:33.156 --> 00:52:33.966 A:middle
希望你们能享受接下来的会议

00:52:34.516 --> 00:52:39.500 A:middle
[掌声]

