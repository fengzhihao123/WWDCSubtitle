WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:05.500 A:middle
[音乐]

00:00:09.516 --> 00:00:16.556 A:middle
[掌声]

00:00:17.056 --> 00:00:18.706 A:middle
&gt;&gt; 欢迎来到网络发展专场

00:00:18.756 --> 00:00:19.976 A:middle
我是 Joshua Graessley

00:00:20.126 --> 00:00:21.416 A:middle
我和我的同事都来自

00:00:21.416 --> 00:00:22.896 A:middle
互联网技术部

00:00:22.896 --> 00:00:24.946 A:middle
我们很高兴向你们介绍去年我们在

00:00:24.946 --> 00:00:26.196 A:middle
我们平台的网络方面

00:00:26.276 --> 00:00:28.076 A:middle
所做的一些改进

00:00:29.206 --> 00:00:32.636 A:middle
第一部分 我们要讲讲低数据模式

00:00:32.706 --> 00:00:34.156 A:middle
这是一个令人惊喜的新功能

00:00:34.156 --> 00:00:35.286 A:middle
我们可以一起协作

00:00:35.286 --> 00:00:36.766 A:middle
来帮助保存用户的网络数据

00:00:36.766 --> 00:00:38.116 A:middle
如果它很重要的话

00:00:38.406 --> 00:00:39.896 A:middle
我们会跟大家谈谈

00:00:39.896 --> 00:00:41.466 A:middle
你是如何编写异步

00:00:41.466 --> 00:00:42.926 A:middle
用 Combine 在 URLSession 里编写

00:00:42.926 --> 00:00:45.486 A:middle
非常漂亮的异步网络代码

00:00:46.396 --> 00:00:48.816 A:middle
我们也会谈到 WebSocket API

00:00:49.096 --> 00:00:50.056 A:middle
去年 这是你们在答疑会上

00:00:50.056 --> 00:00:51.326 A:middle
提出的一系列问题中的一个

00:00:51.326 --> 00:00:52.896 A:middle
今年 我们很高兴

00:00:52.896 --> 00:00:54.426 A:middle
能为你们带来一个解决方案

00:00:55.506 --> 00:00:56.866 A:middle
最后 我们会说说

00:00:56.866 --> 00:00:58.446 A:middle
一些在移动性上的改进

00:00:58.526 --> 00:00:59.976 A:middle
我们还将讨论如何彼此协作

00:00:59.976 --> 00:01:01.346 A:middle
以在设备从一个网络转换到另一个时

00:01:01.346 --> 00:01:03.156 A:middle
给我们的用户提供

00:01:03.156 --> 00:01:05.396 A:middle
一个更加无缝的体验

00:01:07.036 --> 00:01:10.606 A:middle
在第二部分 我们将涉及到

00:01:10.606 --> 00:01:11.476 A:middle
许多额外的话题

00:01:11.526 --> 00:01:12.596 A:middle
将会在今天的 5 点进行

00:01:12.696 --> 00:01:13.736 A:middle
我希望你们届时能够

00:01:13.736 --> 00:01:15.246 A:middle
回来继续参加

00:01:15.936 --> 00:01:17.866 A:middle
那么在我们进入低数据模式之前

00:01:17.866 --> 00:01:19.016 A:middle
我想要花几分钟

00:01:19.016 --> 00:01:20.546 A:middle
来说说我们平台上

00:01:20.546 --> 00:01:22.036 A:middle
使用的网络 API

00:01:23.046 --> 00:01:25.376 A:middle
在我们的平台上使用的

00:01:25.376 --> 00:01:27.226 A:middle
最好的网络 API 是 URLSession

00:01:27.366 --> 00:01:28.226 A:middle
和 Network.framework

00:01:28.696 --> 00:01:29.676 A:middle
接下来你会在这一场

00:01:29.676 --> 00:01:31.526 A:middle
和这个部分的第二场中听到

00:01:31.526 --> 00:01:33.936 A:middle
我们做了许多很棒的改进

00:01:33.936 --> 00:01:34.736 A:middle
所有这些改进

00:01:34.736 --> 00:01:35.966 A:middle
都可以在你的 App 里获得

00:01:36.166 --> 00:01:37.516 A:middle
如果你正在使用这些框架的话

00:01:38.936 --> 00:01:40.636 A:middle
但如果你使用套接字

00:01:40.636 --> 00:01:42.146 A:middle
那么你将不能利用这个

00:01:42.686 --> 00:01:44.106 A:middle
因为很不巧 套接字并不具备

00:01:44.106 --> 00:01:45.266 A:middle
我们所要求的丰富性

00:01:45.266 --> 00:01:46.706 A:middle
以在该层提供

00:01:46.706 --> 00:01:48.076 A:middle
这个功能

00:01:48.076 --> 00:01:49.876 A:middle
那么 如果你正在做一个

00:01:49.876 --> 00:01:52.056 A:middle
VPN 或者一个内容过滤器

00:01:52.386 --> 00:01:53.686 A:middle
那么 NetworkExtension 框架

00:01:53.686 --> 00:01:54.916 A:middle
是一个很好的解决方案

00:01:54.916 --> 00:01:56.146 A:middle
我们在这方面也做了很多改进

00:01:56.146 --> 00:01:57.386 A:middle
我们将会在明早 9 点

00:01:57.386 --> 00:02:01.226 A:middle
为大家介绍

00:02:01.386 --> 00:02:03.326 A:middle
现在 我要为大家介绍低数据模式

00:02:03.946 --> 00:02:05.486 A:middle
低数据模式是一个非常棒的

00:02:05.486 --> 00:02:07.516 A:middle
iOS 13 里的新功能

00:02:08.876 --> 00:02:10.166 A:middle
我觉得要介绍低数据模式

00:02:10.166 --> 00:02:11.526 A:middle
最好的方法就是

00:02:11.526 --> 00:02:12.736 A:middle
你可以回想一下

00:02:12.736 --> 00:02:14.086 A:middle
你是怎么来到 WWDC 的

00:02:14.086 --> 00:02:17.326 A:middle
也许你会乘坐飞机

00:02:17.386 --> 00:02:20.006 A:middle
飞到明媚的圣何塞

00:02:21.046 --> 00:02:22.646 A:middle
而在那班飞机上

00:02:22.736 --> 00:02:24.786 A:middle
也许有一个 Wi-Fi 网络

00:02:24.786 --> 00:02:26.686 A:middle
而这个 Wi-Fi 网络

00:02:26.796 --> 00:02:28.786 A:middle
可能有点昂贵

00:02:28.786 --> 00:02:30.656 A:middle
而且可能很拥挤

00:02:30.656 --> 00:02:31.706 A:middle
这时你可能很希望

00:02:31.706 --> 00:02:33.646 A:middle
你能有办法

00:02:33.646 --> 00:02:35.036 A:middle
告诉你的 App

00:02:35.036 --> 00:02:37.036 A:middle
和你设备上的系统

00:02:37.036 --> 00:02:38.696 A:middle
说使用这个网络

00:02:38.696 --> 00:02:39.946 A:middle
真的要在非常节省地

00:02:39.946 --> 00:02:42.116 A:middle
使用网络数据

00:02:43.066 --> 00:02:45.776 A:middle
低数据模式就是用来解决这个问题的

00:02:47.226 --> 00:02:48.936 A:middle
低数据模式给用户一种能力

00:02:49.216 --> 00:02:51.176 A:middle
一种偏好选择

00:02:51.176 --> 00:02:52.546 A:middle
来给你的 App 和系统

00:02:52.606 --> 00:02:54.436 A:middle
发出信号并告诉它们

00:02:54.666 --> 00:02:56.556 A:middle
你真的很想在用这个网络时

00:02:56.686 --> 00:02:57.826 A:middle
十分节省数据

00:02:59.256 --> 00:03:01.636 A:middle
这个可以在每一个

00:03:01.636 --> 00:03:03.856 A:middle
基于 SSID 的 Wi-Fi 网络上

00:03:03.926 --> 00:03:05.506 A:middle
和基于 SIM 的蜂窝移动网络上进行设定

00:03:06.876 --> 00:03:09.416 A:middle
当你的设备处于 

00:03:09.416 --> 00:03:10.696 A:middle
低数据模式网络时

00:03:10.736 --> 00:03:11.686 A:middle
会有两个主要的影响

00:03:11.876 --> 00:03:12.986 A:middle
包括对系统规则的一个更改

00:03:12.986 --> 00:03:14.816 A:middle
以及对采用了 

00:03:14.816 --> 00:03:16.976 A:middle
低数据模式的 App 的一个更改

00:03:17.536 --> 00:03:19.866 A:middle
在系统规则方面

00:03:19.866 --> 00:03:21.206 A:middle
当我们打开低数据模式网络时 

00:03:21.206 --> 00:03:22.796 A:middle
我们会推迟所有的

00:03:22.796 --> 00:03:24.016 A:middle
后台自主型任务

00:03:24.806 --> 00:03:26.016 A:middle
因此 如果你在飞机上

00:03:26.016 --> 00:03:27.166 A:middle
打开了低数据模式

00:03:27.166 --> 00:03:28.986 A:middle
我们会推迟所有的

00:03:29.016 --> 00:03:30.336 A:middle
后台自主任务

00:03:30.946 --> 00:03:31.616 A:middle
当你下了飞机

00:03:31.616 --> 00:03:32.766 A:middle
入住酒店之后

00:03:32.806 --> 00:03:34.606 A:middle
然后连上了酒店的 Wi-Fi 网络

00:03:34.606 --> 00:03:35.986 A:middle
那儿的网络可能不是那么拥挤 

00:03:35.986 --> 00:03:37.386 A:middle
也更加便宜

00:03:37.386 --> 00:03:39.316 A:middle
然后我们会将所有这些后台任务

00:03:39.316 --> 00:03:43.026 A:middle
重新开始并继续进行下去

00:03:43.616 --> 00:03:44.976 A:middle
我们所做的另一个更改是

00:03:45.126 --> 00:03:46.776 A:middle
禁用后台 App 刷新

00:03:47.166 --> 00:03:48.686 A:middle
这帮助我们避免了

00:03:48.686 --> 00:03:49.656 A:middle
后台的 App 占用网络数据

00:03:49.656 --> 00:03:51.386 A:middle
而这些后台 App

00:03:51.386 --> 00:03:52.266 A:middle
和用户真正感兴趣的

00:03:52.266 --> 00:03:54.856 A:middle
可能一点关系都没有

00:03:55.676 --> 00:03:56.786 A:middle
这样我们已经节省了很多数据

00:03:56.786 --> 00:03:58.236 A:middle
但我们认为如果你在

00:03:58.236 --> 00:03:59.566 A:middle
你的 App 中采用

00:03:59.566 --> 00:04:00.486 A:middle
低数据模式

00:04:00.486 --> 00:04:01.266 A:middle
那么它所带来的改变

00:04:01.266 --> 00:04:03.276 A:middle
还能节省更多的数据

00:04:04.166 --> 00:04:05.196 A:middle
因此 我想花一些时间

00:04:05.196 --> 00:04:07.016 A:middle
来谈谈你可以使用的技术

00:04:07.576 --> 00:04:10.126 A:middle
首先我们要看看

00:04:10.126 --> 00:04:11.746 A:middle
你的 App 是怎样

00:04:11.746 --> 00:04:12.906 A:middle
使用网络数据的

00:04:13.816 --> 00:04:15.856 A:middle
当你开始深入了解时

00:04:15.916 --> 00:04:17.266 A:middle
一定要时刻记住

00:04:18.106 --> 00:04:20.766 A:middle
你可以节省数据

00:04:20.815 --> 00:04:22.256 A:middle
但不要影响你的用户体验

00:04:22.256 --> 00:04:24.636 A:middle
务必要做到这一点

00:04:25.636 --> 00:04:26.496 A:middle
我知道虽然这看上去很明显

00:04:26.496 --> 00:04:27.356 A:middle
但你也许会惊讶于

00:04:27.416 --> 00:04:28.406 A:middle
能减少你正在使用的

00:04:28.406 --> 00:04:29.796 A:middle
网络数据的数量

00:04:30.126 --> 00:04:34.026 A:middle
的优化方式

00:04:35.366 --> 00:04:36.666 A:middle
好 一旦你达成了

00:04:36.666 --> 00:04:38.276 A:middle
这些容易实现的目标

00:04:38.276 --> 00:04:39.356 A:middle
即可以在节省数据的同时

00:04:39.356 --> 00:04:40.536 A:middle
保证用户体验不受影响

00:04:40.656 --> 00:04:41.766 A:middle
那么你就必须要开始

00:04:41.766 --> 00:04:43.246 A:middle
做出一些权衡的决定

00:04:44.506 --> 00:04:46.226 A:middle
在很多情况下

00:04:46.226 --> 00:04:48.116 A:middle
你有机会使用更多的数据

00:04:48.116 --> 00:04:49.396 A:middle
这给你带来很好的体验

00:04:49.396 --> 00:04:51.206 A:middle
而使用更少的数据

00:04:51.206 --> 00:04:52.906 A:middle
仍然能给你一个很好的体验

00:04:52.986 --> 00:04:54.846 A:middle
但也有可能会让你的用户体验打折扣

00:04:55.406 --> 00:04:57.266 A:middle
低数据模式就是一种方法

00:04:57.266 --> 00:04:58.566 A:middle
让用户来向你的 App 发送信号

00:04:58.566 --> 00:05:01.876 A:middle
说明你真的想要节省该数据

00:05:01.876 --> 00:05:03.596 A:middle
然后在选择该选项的同时

00:05:03.596 --> 00:05:04.806 A:middle
要保证一个好的用户体验

00:05:05.146 --> 00:05:08.076 A:middle
但也许没有那么好

00:05:08.356 --> 00:05:09.156 A:middle
那么 我们来说说你一些

00:05:09.156 --> 00:05:10.116 A:middle
你能用到的技术

00:05:10.556 --> 00:05:12.956 A:middle
第一个是减少图片质量

00:05:13.386 --> 00:05:15.856 A:middle
如果你的 App 里并不以图片为主

00:05:15.856 --> 00:05:17.546 A:middle
那么通过降低图片质量

00:05:17.546 --> 00:05:18.866 A:middle
你可以节省大量数据

00:05:18.866 --> 00:05:20.396 A:middle
你仍然可以让用户

00:05:20.396 --> 00:05:21.716 A:middle
做他们想要做的事

00:05:21.716 --> 00:05:24.676 A:middle
但在此过程中节省数据

00:05:26.256 --> 00:05:28.296 A:middle
你可以减少预载入

00:05:28.526 --> 00:05:29.986 A:middle
预载入是一个很棒的技术

00:05:30.116 --> 00:05:31.766 A:middle
能够提高性能

00:05:31.766 --> 00:05:33.026 A:middle
但它也有个缺点

00:05:33.026 --> 00:05:34.436 A:middle
即有时你所预载的资源

00:05:34.436 --> 00:05:36.046 A:middle
是用户从来不需要的

00:05:36.236 --> 00:05:37.406 A:middle
同时 如果他们真的在意

00:05:37.406 --> 00:05:38.636 A:middle
自己使用了多少

00:05:38.636 --> 00:05:39.736 A:middle
网络数据的话 

00:05:39.986 --> 00:05:41.746 A:middle
预载入确实是会增加数据使用量

00:05:43.056 --> 00:05:44.656 A:middle
那么 当你在低数据模式时

00:05:44.656 --> 00:05:46.206 A:middle
你可以使用

00:05:46.206 --> 00:05:47.606 A:middle
你可以消除预载入

00:05:47.606 --> 00:05:48.336 A:middle
这样就能节省数据

00:05:48.336 --> 00:05:49.526 A:middle
而如果用户将该内容

00:05:49.526 --> 00:05:50.646 A:middle
滚到视图中等待它加载

00:05:50.646 --> 00:05:54.126 A:middle
那他们则必须等得久一点

00:05:54.746 --> 00:05:56.036 A:middle
你可以少进行同步

00:05:56.206 --> 00:05:57.266 A:middle
数据将会延迟

00:05:57.266 --> 00:05:58.496 A:middle
稍微长一点

00:05:58.496 --> 00:05:59.206 A:middle
但你仍然会有数据

00:05:59.366 --> 00:06:00.576 A:middle
用户仍然可以完成

00:06:00.576 --> 00:06:04.366 A:middle
他们打算去做的事

00:06:04.366 --> 00:06:05.636 A:middle
但是在一长段时间内

00:06:05.636 --> 00:06:06.816 A:middle
你其实可以节省相当多的数据

00:06:06.876 --> 00:06:09.886 A:middle
通过降低同步的频率

00:06:10.536 --> 00:06:14.436 A:middle
你可以标记后台任务

00:06:14.436 --> 00:06:15.306 A:middle
为自主型任务

00:06:15.896 --> 00:06:16.916 A:middle
你会感到惊讶

00:06:16.916 --> 00:06:18.076 A:middle
有多少你设置的后台任务

00:06:18.076 --> 00:06:20.876 A:middle
并不是真的需要立即完成

00:06:21.936 --> 00:06:23.216 A:middle
标记一个后台任务

00:06:23.216 --> 00:06:25.176 A:middle
为自主型任务

00:06:25.176 --> 00:06:26.756 A:middle
这使得系统在实际的

00:06:26.756 --> 00:06:28.586 A:middle
调度操作时具有很大的灵活性

00:06:28.716 --> 00:06:30.696 A:middle
正如我之前提到过的

00:06:30.926 --> 00:06:32.246 A:middle
当你坐在飞机上

00:06:32.246 --> 00:06:33.886 A:middle
系统就有机会

00:06:33.886 --> 00:06:35.156 A:middle
推迟那个任务

00:06:35.156 --> 00:06:36.566 A:middle
直到我们连上一个

00:06:36.566 --> 00:06:39.066 A:middle
非低数据模式网络

00:06:39.536 --> 00:06:41.796 A:middle
另一个很棒的解决方案是禁用自动播放

00:06:42.686 --> 00:06:44.076 A:middle
这样做真的很棒

00:06:44.076 --> 00:06:45.326 A:middle
因为它不会妨碍用户

00:06:45.446 --> 00:06:46.466 A:middle
播放他们感兴趣的内容

00:06:46.466 --> 00:06:48.046 A:middle
但是它意味着用户

00:06:48.046 --> 00:06:49.226 A:middle
不需要为他们

00:06:49.226 --> 00:06:50.836 A:middle
根本不感兴趣的内容花费数据

00:06:51.726 --> 00:06:54.356 A:middle
这就引出了另一个

00:06:54.356 --> 00:06:55.836 A:middle
非常重要的问题

00:06:55.836 --> 00:06:56.646 A:middle
当你选择如何实现

00:06:56.646 --> 00:06:57.676 A:middle
低数据模式时

00:06:58.106 --> 00:06:59.236 A:middle
你不能够阻碍

00:06:59.236 --> 00:07:00.286 A:middle
用户发起的活动

00:07:00.796 --> 00:07:02.346 A:middle
低数据模式就是

00:07:02.986 --> 00:07:04.486 A:middle
告诉系统来减少

00:07:04.486 --> 00:07:05.446 A:middle
所使用的网络数量

00:07:05.446 --> 00:07:07.326 A:middle
但是要确保

00:07:07.326 --> 00:07:08.886 A:middle
用户仍然可以完成

00:07:08.886 --> 00:07:09.846 A:middle
他们打算要做的

00:07:10.926 --> 00:07:11.916 A:middle
当你查看你的 App 时

00:07:11.916 --> 00:07:13.286 A:middle
你可能意识到

00:07:13.286 --> 00:07:14.316 A:middle
你所进行的一些操作

00:07:14.316 --> 00:07:16.206 A:middle
的确使用了很多网络数据

00:07:16.206 --> 00:07:17.906 A:middle
而你对此无能为力

00:07:18.936 --> 00:07:20.646 A:middle
虽然我们想用任何可能的方式 

00:07:20.646 --> 00:07:21.686 A:middle
来减少用于这些操作的

00:07:21.686 --> 00:07:22.926 A:middle
网络数据的使用量

00:07:22.926 --> 00:07:25.166 A:middle
但是我们并不想

00:07:25.166 --> 00:07:26.876 A:middle
突然弹出一个对话框

00:07:26.926 --> 00:07:28.176 A:middle
来问你确定要这么做吗

00:07:28.336 --> 00:07:29.586 A:middle
我看到你在使用网络数据

00:07:29.586 --> 00:07:31.106 A:middle
而这将会花费很多数据

00:07:31.256 --> 00:07:32.476 A:middle
不要质疑用户

00:07:32.586 --> 00:07:33.696 A:middle
他们已经打开了低数据模式

00:07:34.666 --> 00:07:35.436 A:middle
同时已经要求你的 App 

00:07:35.436 --> 00:07:37.226 A:middle
来执行该操作了

00:07:37.266 --> 00:07:40.236 A:middle
那就直接照做吧

00:07:40.316 --> 00:07:41.596 A:middle
那么 我们来再说说

00:07:41.596 --> 00:07:43.346 A:middle
支持你的 App 执行

00:07:43.346 --> 00:07:45.766 A:middle
低数据模式的 API

00:07:47.266 --> 00:07:49.546 A:middle
我们已经为 URLSession

00:07:49.546 --> 00:07:50.936 A:middle
和 Network.framework 增加了 API

00:07:51.746 --> 00:07:54.966 A:middle
我们要记住的是

00:07:54.966 --> 00:07:55.896 A:middle
当一个网络处于

00:07:55.896 --> 00:07:57.676 A:middle
低数据模式时

00:07:57.676 --> 00:07:59.756 A:middle
该数据网络上则会设置约束属性

00:08:02.596 --> 00:08:04.756 A:middle
所有基于该约束属性的 API 

00:08:05.156 --> 00:08:07.016 A:middle
在 URLSession 中我们

00:08:07.016 --> 00:08:07.906 A:middle
添加了一个属性

00:08:07.906 --> 00:08:09.546 A:middle
allowsConstrainedNetworkAccess

00:08:10.326 --> 00:08:11.706 A:middle
在默认情况下 此属性设置为真

00:08:12.096 --> 00:08:13.246 A:middle
你的 App 就可以在默认情况下

00:08:13.246 --> 00:08:14.886 A:middle
使用低数据模式网络

00:08:15.506 --> 00:08:17.236 A:middle
然后可以将其设置为假来退出

00:08:17.236 --> 00:08:18.936 A:middle
你可以将其设置

00:08:18.936 --> 00:08:20.576 A:middle
在 URLSession 请求上

00:08:20.576 --> 00:08:22.026 A:middle
和 URLSession 配置上

00:08:23.036 --> 00:08:25.006 A:middle
在 URLSession 中 我们真的

00:08:25.006 --> 00:08:26.536 A:middle
鼓励你继续尝试

00:08:26.536 --> 00:08:28.796 A:middle
大型资源获取

00:08:28.796 --> 00:08:29.926 A:middle
或者预取并设置

00:08:29.926 --> 00:08:31.816 A:middle
allowsConstrainedNetworkAccess 为假

00:08:32.635 --> 00:08:33.936 A:middle
如果操作出现错误

00:08:33.936 --> 00:08:35.876 A:middle
且该错误有一个网络不可用的

00:08:35.876 --> 00:08:37.486 A:middle
原因限制 那就意味着

00:08:37.486 --> 00:08:38.876 A:middle
该操作的失败

00:08:38.926 --> 00:08:40.076 A:middle
是因为你正处于低数据模式

00:08:40.076 --> 00:08:41.756 A:middle
而此时你要做的事应该是

00:08:41.926 --> 00:08:43.436 A:middle
返回并执行

00:08:43.436 --> 00:08:44.776 A:middle
低数据模式操作

00:08:44.776 --> 00:08:46.576 A:middle
如果是一个大型资源获取的情况

00:08:46.696 --> 00:08:48.016 A:middle
它可能就反而获取一个

00:08:48.016 --> 00:08:49.206 A:middle
更小的资源

00:08:49.206 --> 00:08:51.026 A:middle
而在预取的例子中

00:08:51.026 --> 00:08:52.836 A:middle
只要等到用户真正需要该内容

00:08:53.916 --> 00:08:55.936 A:middle
这样做的另一个好处是

00:08:55.936 --> 00:08:56.856 A:middle
你可以利用缓存中

00:08:56.856 --> 00:08:58.946 A:middle
可能已经存在的任何内容

00:08:59.876 --> 00:09:01.366 A:middle
那么在 Network.framework 中

00:09:01.366 --> 00:09:02.446 A:middle
有一个相似的属性

00:09:02.446 --> 00:09:03.646 A:middle
叫做 prohibitConstrainedPaths

00:09:04.136 --> 00:09:05.396 A:middle
你可以设置其为真

00:09:05.396 --> 00:09:06.666 A:middle
来限制你的连接

00:09:06.666 --> 00:09:08.526 A:middle
及其他网络对象

00:09:08.526 --> 00:09:09.556 A:middle
使用低数据模式

00:09:10.796 --> 00:09:12.276 A:middle
不过在 Network.framework 里

00:09:12.276 --> 00:09:13.056 A:middle
你还有另一个选择

00:09:13.376 --> 00:09:14.216 A:middle
如果你要连接相同的主机

00:09:14.216 --> 00:09:15.566 A:middle
无论你是否处于低数据模式

00:09:15.566 --> 00:09:17.046 A:middle
你都可以继续

00:09:17.046 --> 00:09:18.426 A:middle
并建立该连接

00:09:18.776 --> 00:09:19.736 A:middle
一旦连接建立起来

00:09:19.736 --> 00:09:21.196 A:middle
你可以获得当前的路径

00:09:21.196 --> 00:09:23.016 A:middle
而在当前路径上

00:09:23.016 --> 00:09:25.516 A:middle
你可以查看它是否受到限制

00:09:25.516 --> 00:09:26.396 A:middle
这会告诉你这个连接

00:09:26.426 --> 00:09:28.056 A:middle
是否建立在一个

00:09:28.056 --> 00:09:29.046 A:middle
低数据模式网络下

00:09:30.296 --> 00:09:32.216 A:middle
好 如果你照此方法做

00:09:32.216 --> 00:09:33.356 A:middle
一定要确保

00:09:33.356 --> 00:09:34.526 A:middle
你处理了路径的更新

00:09:35.876 --> 00:09:36.896 A:middle
因为很有可能

00:09:36.896 --> 00:09:38.346 A:middle
限制属性会改变

00:09:38.376 --> 00:09:40.616 A:middle
你的连接的使用寿命

00:09:43.176 --> 00:09:44.106 A:middle
那么 我花了很多时间

00:09:44.106 --> 00:09:45.126 A:middle
讨论了限制属性

00:09:45.126 --> 00:09:46.406 A:middle
和低数据模式

00:09:47.066 --> 00:09:48.236 A:middle
还有一些其他的属性

00:09:48.236 --> 00:09:49.876 A:middle
你的 App 可以用它们

00:09:49.876 --> 00:09:51.306 A:middle
来在给定的网络上

00:09:51.586 --> 00:09:52.336 A:middle
判断该做什么

00:09:53.376 --> 00:09:54.946 A:middle
还有一个昂贵属性

00:09:55.016 --> 00:09:56.936 A:middle
我们去年在 Network.framework 中引入了它

00:09:56.936 --> 00:09:58.656 A:middle
今年我们将在 URLSession 中引入

00:09:58.656 --> 00:10:02.386 A:middle
allowsExpensiveNetworkAccess 属性

00:10:03.656 --> 00:10:06.056 A:middle
也有特定接口类型的检查

00:10:06.056 --> 00:10:08.526 A:middle
比如蜂窝移动网络或 Wi-Fi

00:10:09.896 --> 00:10:11.006 A:middle
如果你还没有

00:10:11.006 --> 00:10:12.226 A:middle
采用其中任何一个

00:10:12.226 --> 00:10:13.606 A:middle
你可以将重点放在

00:10:13.606 --> 00:10:14.886 A:middle
采用低数据模式上

00:10:14.886 --> 00:10:16.046 A:middle
这绝对是一条正确的路

00:10:16.846 --> 00:10:18.006 A:middle
低数据模式

00:10:18.006 --> 00:10:19.196 A:middle
与限制属性相互关联

00:10:19.236 --> 00:10:22.646 A:middle
因而用户拥有控制权

00:10:22.776 --> 00:10:25.466 A:middle
他们有自己控制的设定

00:10:25.466 --> 00:10:26.766 A:middle
另一方面 昂贵属性

00:10:26.766 --> 00:10:27.976 A:middle
是一个系统设置的属性

00:10:27.976 --> 00:10:29.946 A:middle
它几乎总是为

00:10:29.996 --> 00:10:31.386 A:middle
蜂窝移动网络而设置

00:10:31.386 --> 00:10:32.976 A:middle
它同时也为 Wi-Fi 网络设置

00:10:33.016 --> 00:10:35.196 A:middle
当该网络连接到个人热点时

00:10:36.316 --> 00:10:37.946 A:middle
你也可以检查蜂窝移动网络

00:10:38.286 --> 00:10:39.536 A:middle
但那也是用户

00:10:39.536 --> 00:10:40.916 A:middle
无法控制的事

00:10:41.896 --> 00:10:42.766 A:middle
所以 如果你正在进行

00:10:42.766 --> 00:10:44.086 A:middle
基于蜂窝移动网络接口

00:10:44.146 --> 00:10:45.386 A:middle
或昂贵属性的检查

00:10:45.436 --> 00:10:47.116 A:middle
这个时候转去

00:10:47.116 --> 00:10:49.406 A:middle
使用限制属性

00:10:49.406 --> 00:10:51.166 A:middle
来利用低数据模式

00:10:51.166 --> 00:10:52.226 A:middle
是非常好的想法

00:10:52.886 --> 00:10:54.606 A:middle
如果你已经着眼于这些选项

00:10:54.606 --> 00:10:55.896 A:middle
并决定了你仍然想要

00:10:55.896 --> 00:10:57.166 A:middle
基于昂贵属性

00:10:57.166 --> 00:10:59.626 A:middle
或蜂窝移动网络来做决定

00:10:59.626 --> 00:11:02.566 A:middle
我们强烈建议你使用昂贵属性

00:11:03.746 --> 00:11:05.336 A:middle
昂贵属性更为灵活

00:11:05.336 --> 00:11:07.196 A:middle
在许多方面 它都能够

00:11:07.196 --> 00:11:09.026 A:middle
有效地保证你的 App 不过时  

00:11:09.676 --> 00:11:11.186 A:middle
现在 蜂窝移动网络几乎

00:11:11.186 --> 00:11:12.046 A:middle
总是被标记为昂贵的

00:11:12.046 --> 00:11:13.426 A:middle
但是在未来也许不会

00:11:13.426 --> 00:11:16.106 A:middle
也许还会有其他的接口类型

00:11:16.106 --> 00:11:17.956 A:middle
它们也可能很昂贵

00:11:18.456 --> 00:11:19.846 A:middle
通过使用昂贵属性

00:11:19.956 --> 00:11:21.236 A:middle
你的 App 会在将来

00:11:21.236 --> 00:11:23.346 A:middle
用不同的接口来保证正常运行

00:11:23.996 --> 00:11:24.686 A:middle
如果你正在检查

00:11:24.686 --> 00:11:25.726 A:middle
一个特定的接口

00:11:25.726 --> 00:11:27.326 A:middle
比如蜂窝移动网络

00:11:27.326 --> 00:11:29.316 A:middle
那么你就不能够利用它

00:11:29.916 --> 00:11:31.116 A:middle
我真的很期待看到

00:11:31.116 --> 00:11:32.816 A:middle
你们都真的采用了低数据模式

00:11:33.146 --> 00:11:34.216 A:middle
非常感谢大家的聆听

00:11:34.456 --> 00:11:36.936 A:middle
下面 我想要请 Guoye 上台来跟大家谈谈

00:11:36.936 --> 00:11:38.566 A:middle
URLSession 中的 Combine

00:11:39.516 --> 00:11:42.636 A:middle
[掌声]

00:11:43.136 --> 00:11:45.916 A:middle
&gt;&gt; 谢谢 Josh 早上好

00:11:46.206 --> 00:11:48.346 A:middle
我是 Guoye Zhang

00:11:48.696 --> 00:11:50.616 A:middle
今天很高兴与那么分享

00:11:50.886 --> 00:11:52.366 A:middle
我们是如何支持一个

00:11:52.366 --> 00:11:54.026 A:middle
新的 Swift 框架的

00:11:54.026 --> 00:11:56.466 A:middle
也就是 URLSession 里的 Combine

00:11:56.466 --> 00:11:57.866 A:middle
以及你如何利用 Combine 来简化

00:11:57.866 --> 00:11:59.386 A:middle
你的网络代码

00:12:06.446 --> 00:12:09.486 A:middle
要给大家解释这是什么

00:12:09.586 --> 00:12:11.266 A:middle
我就要从一个构建一个

00:12:11.266 --> 00:12:13.156 A:middle
响应式检索栏的例子开始

00:12:13.786 --> 00:12:16.826 A:middle
因此 无论何时用户

00:12:16.826 --> 00:12:19.676 A:middle
在这里键入和接收订阅

00:12:19.676 --> 00:12:21.446 A:middle
同时接收 URL 以启动搜索

00:12:21.446 --> 00:12:24.006 A:middle
搜索栏都会发布值

00:12:24.556 --> 00:12:27.326 A:middle
在这中间 我们用

00:12:27.326 --> 00:12:30.626 A:middle
映射操作符来为 URL 映射值

00:12:33.526 --> 00:12:35.496 A:middle
那么 假设我只想

00:12:35.496 --> 00:12:37.306 A:middle
在有足够内容的时候

00:12:37.346 --> 00:12:38.316 A:middle
启动一个搜索

00:12:38.916 --> 00:12:42.406 A:middle
我们可以使用过滤器

00:12:43.896 --> 00:12:45.566 A:middle
在这种情况下 过滤器会

00:12:45.946 --> 00:12:48.916 A:middle
删除所有小于三个字符的字符串

00:12:52.406 --> 00:12:54.926 A:middle
现在我们已经消除了

00:12:54.926 --> 00:12:57.056 A:middle
用户类似于一个 H 这样的查询

00:12:57.896 --> 00:13:01.526 A:middle
但是 该搜索仍然时常发生

00:13:02.286 --> 00:13:04.526 A:middle
如果我只想在用户

00:13:04.806 --> 00:13:06.756 A:middle
暂时停止输入时进行搜索呢

00:13:07.396 --> 00:13:11.426 A:middle
我们可以用去 debounce() 操作符

00:13:12.516 --> 00:13:17.776 A:middle
[掌声]

00:13:18.276 --> 00:13:20.576 A:middle
这样 去抖动就延迟了该值

00:13:20.896 --> 00:13:22.566 A:middle
并且只在有显著延迟时转发它

00:13:22.566 --> 00:13:26.486 A:middle
在这个例子中是 0.2 秒

00:13:30.316 --> 00:13:33.296 A:middle
然而 使用去抖动

00:13:33.296 --> 00:13:35.186 A:middle
如果用户键入了一些东西

00:13:35.646 --> 00:13:37.176 A:middle
然后删除掉了 我们最终可能

00:13:37.176 --> 00:13:38.766 A:middle
会在该链上发送相同的值

00:13:38.766 --> 00:13:40.806 A:middle
然后一次又一次地开始

00:13:40.806 --> 00:13:43.136 A:middle
相同的搜索

00:13:43.356 --> 00:13:45.786 A:middle
为了解决这个问题

00:13:45.786 --> 00:13:47.416 A:middle
我们可以添加 removeDuplicates() 操作符

00:13:49.036 --> 00:13:51.836 A:middle
removeDuplicates 会记住

00:13:51.836 --> 00:13:54.346 A:middle
接收到的最后的值

00:13:54.346 --> 00:13:56.526 A:middle
然后当它发生改变的时候只转发一个新的值

00:14:03.526 --> 00:14:05.596 A:middle
检索栏的版本

00:14:05.596 --> 00:14:07.696 A:middle
通过更改这些操作符

00:14:07.696 --> 00:14:10.656 A:middle
你的异步代码就会变成线性且可组合的代码了

00:14:16.116 --> 00:14:20.196 A:middle
Combine 会处理一段时间内的值

00:14:21.336 --> 00:14:23.866 A:middle
它由发布器 操作符

00:14:24.146 --> 00:14:26.216 A:middle
和订阅器组成

00:14:27.596 --> 00:14:30.166 A:middle
这个链是由订阅器

00:14:30.166 --> 00:14:32.526 A:middle
所发送的需求驱动的

00:14:34.236 --> 00:14:36.136 A:middle
为了对需求做出响应

00:14:36.676 --> 00:14:38.536 A:middle
发布器向该链发送值

00:14:39.486 --> 00:14:41.436 A:middle
这就是 Combine

00:14:41.436 --> 00:14:42.476 A:middle
处理压力的方法

00:14:43.116 --> 00:14:46.376 A:middle
如果你想要学习更多

00:14:47.306 --> 00:14:48.866 A:middle
近期会有一个会议叫做

00:14:48.866 --> 00:14:50.596 A:middle
介绍 Foundation 中的 Combine 和 Advances

00:14:51.076 --> 00:14:52.536 A:middle
同时我还建议你去参加

00:14:52.796 --> 00:14:58.276 A:middle
周四下午的 Combine 实践会议

00:14:58.436 --> 00:15:00.326 A:middle
网络在本质上是异步的

00:15:00.326 --> 00:15:02.006 A:middle
这就是它为什么

00:15:02.006 --> 00:15:03.356 A:middle
很适合采用 Combine

00:15:05.396 --> 00:15:07.706 A:middle
今年 我们在 URLSession 中

00:15:07.706 --> 00:15:10.206 A:middle
引入 DataTaskPublisher

00:15:10.876 --> 00:15:13.076 A:middle
它是一个单一的值发布器

00:15:13.616 --> 00:15:14.936 A:middle
它的工作原理类似于

00:15:14.996 --> 00:15:18.946 A:middle
我们现有的基于闭包的便利方法

00:15:18.946 --> 00:15:20.736 A:middle
这意味着你可以从一个共享的

00:15:20.736 --> 00:15:23.016 A:middle
URLSession  或从你自己的

00:15:23.016 --> 00:15:24.706 A:middle
URLSession 中创造它

00:15:24.706 --> 00:15:26.386 A:middle
同时接收你的委托上的

00:15:26.386 --> 00:15:27.986 A:middle
身份验证挑战和软件度量

00:15:28.576 --> 00:15:32.556 A:middle
这是 DataTaskPublisher 的界面

00:15:33.116 --> 00:15:37.006 A:middle
它遵循发布器协议

00:15:37.806 --> 00:15:39.926 A:middle
一旦成功 它会向你发送一个

00:15:39.926 --> 00:15:41.906 A:middle
真正的数据池和响应

00:15:42.196 --> 00:15:44.976 A:middle
如果失败它会发送给你一个 URLError

00:15:48.416 --> 00:15:50.206 A:middle
现在 让我给你演示一下

00:15:50.206 --> 00:15:51.976 A:middle
Combine 在 URLSession 中是如何工作的

00:15:59.006 --> 00:16:00.186 A:middle
那么 为了做这个演示

00:16:00.186 --> 00:16:02.766 A:middle
我已经禁用了 URL 缓存

00:16:02.966 --> 00:16:04.536 A:middle
所以所有的资源都要

00:16:04.536 --> 00:16:05.456 A:middle
通过网络获取

00:16:06.296 --> 00:16:08.126 A:middle
我也已经使用网络连接调节器

00:16:08.226 --> 00:16:10.976 A:middle
来模拟一个真实的 3G 环境

00:16:16.426 --> 00:16:18.396 A:middle
因此 我正在为一个

00:16:18.396 --> 00:16:19.286 A:middle
叫 PubSocket 的酒吧构建一个 App

00:16:20.636 --> 00:16:23.536 A:middle
这个 App 在栏中显示了

00:16:23.536 --> 00:16:25.956 A:middle
每个项目的名字 图像和项目价格

00:16:27.956 --> 00:16:29.676 A:middle
那么 在听完 Josh 讲的低数据模式后

00:16:29.676 --> 00:16:32.626 A:middle
我决定为低数据模式提供

00:16:32.626 --> 00:16:34.346 A:middle
一个高分辨率的图像

00:16:34.346 --> 00:16:37.756 A:middle
和一个低分辨率的图像

00:16:37.976 --> 00:16:39.336 A:middle
现在我正处于低数据模式

00:16:39.336 --> 00:16:40.976 A:middle
那你可以看这些黑白的图像

00:16:43.686 --> 00:16:45.296 A:middle
而如果我关掉低数据模式

00:16:49.036 --> 00:16:50.676 A:middle
这些图片就会被换成

00:16:50.676 --> 00:16:51.976 A:middle
高分辨率的图片

00:16:55.416 --> 00:16:56.896 A:middle
让我们来看看没有 Combine

00:16:56.896 --> 00:16:57.946 A:middle
现在这个是怎么完成的

00:17:06.516 --> 00:17:09.396 A:middle
在 UITableView 中构建的

00:17:09.396 --> 00:17:11.516 A:middle
这里我们有数据资源方法

00:17:11.516 --> 00:17:12.236 A:middle
cellForRowAt indexPath

00:17:13.156 --> 00:17:15.675 A:middle
在这个方法中 我们取回

00:17:15.675 --> 00:17:18.266 A:middle
一个可重用单元格

00:17:18.266 --> 00:17:20.366 A:middle
并配置单元格上的每个项目的名称和价格

00:17:21.596 --> 00:17:25.626 A:middle
然后我们开始一个 URLRequest

00:17:25.626 --> 00:17:27.386 A:middle
来提取高分辨率的图像

00:17:27.516 --> 00:17:29.816 A:middle
同时禁止限制网络访问

00:17:31.116 --> 00:17:33.196 A:middle
这里的 pubSession 是

00:17:33.196 --> 00:17:35.066 A:middle
共享全球会话

00:17:35.066 --> 00:17:37.496 A:middle
我们在《PubSocket》App 中使用它

00:17:37.496 --> 00:17:40.226 A:middle
同时用它从请求中创建数据任务

00:17:44.376 --> 00:17:46.826 A:middle
当任务结束时

00:17:46.826 --> 00:17:48.546 A:middle
我们查看状态码是否是 200

00:17:48.546 --> 00:17:50.796 A:middle
好 我们将数据转换为图片

00:17:50.796 --> 00:17:52.946 A:middle
然后将图片放进单元格中

00:17:59.496 --> 00:18:01.446 A:middle
当任务因为低数据模式而失败时

00:18:01.446 --> 00:18:04.256 A:middle
我们创建一个新的数据任务

00:18:04.556 --> 00:18:05.976 A:middle
来提取低分辨率的图片

00:18:09.556 --> 00:18:10.776 A:middle
我们在这里做同样的事

00:18:10.776 --> 00:18:13.406 A:middle
我们检查状态码

00:18:13.406 --> 00:18:14.976 A:middle
转换成图片 然后将它放入单元格

00:18:17.576 --> 00:18:18.916 A:middle
不要忘记重新开始这些任务

00:18:23.696 --> 00:18:26.056 A:middle
那么 作为一个网络工程师

00:18:26.056 --> 00:18:28.176 A:middle
我知道这里的网络逻辑是可靠的

00:18:29.216 --> 00:18:30.556 A:middle
我坚持用最好的方法

00:18:30.556 --> 00:18:32.566 A:middle
以不进行任何预取操作

00:18:33.236 --> 00:18:36.046 A:middle
但是 我对现在的代码

00:18:36.046 --> 00:18:38.196 A:middle
还不是很满意

00:18:38.196 --> 00:18:39.566 A:middle
因为它有很多的重复

00:18:40.476 --> 00:18:42.236 A:middle
我们要两次查看状态码

00:18:42.236 --> 00:18:46.796 A:middle
然后转换图片

00:18:46.966 --> 00:18:48.796 A:middle
同时 你也许注意到了

00:18:49.056 --> 00:18:50.286 A:middle
我犯了最常见的错误

00:18:50.286 --> 00:18:52.436 A:middle
即采集单元格

00:18:52.436 --> 00:18:53.676 A:middle
然后异步地将图像

00:18:53.676 --> 00:18:54.976 A:middle
放入单元格中

00:18:57.126 --> 00:18:58.596 A:middle
该单元格此时可能已经

00:18:58.596 --> 00:19:00.516 A:middle
被 UIKit 重新使用了

00:19:02.446 --> 00:19:04.256 A:middle
那么 接下来为大家展示这个 Bug

00:19:04.256 --> 00:19:07.426 A:middle
我会很快速地向下滚动

00:19:07.426 --> 00:19:10.236 A:middle
请注意菜单上的最后一些项目

00:19:10.796 --> 00:19:13.546 A:middle
正如你看到的 

00:19:13.546 --> 00:19:15.476 A:middle
热狗和鸡腿的图片给放错了

00:19:19.086 --> 00:19:20.526 A:middle
让我再来演示一遍

00:19:20.526 --> 00:19:21.986 A:middle
我会滚动到顶端

00:19:21.986 --> 00:19:24.356 A:middle
然后注意前几个项目

00:19:27.436 --> 00:19:28.686 A:middle
对 沙士和炸薯条

00:19:28.686 --> 00:19:30.396 A:middle
摆放的图像也是错误的

00:19:30.396 --> 00:19:31.976 A:middle
在它们被正确的图像替换之前

00:19:37.506 --> 00:19:38.886 A:middle
好 我们来看看如何使用

00:19:38.886 --> 00:19:40.746 A:middle
Combine 来解决所有这些问题

00:19:42.676 --> 00:19:44.976 A:middle
首先 我要删除这个用来提取的代码

00:19:49.666 --> 00:19:50.446 A:middle
这里我们用

00:19:50.446 --> 00:19:52.746 A:middle
MenuItemTableViewCell 类

00:19:53.146 --> 00:19:55.816 A:middle
那么 单元格接收到一个图像

00:19:55.816 --> 00:19:57.106 A:middle
单元格是很适合放

00:19:57.106 --> 00:19:58.866 A:middle
订阅器的地方

00:20:02.186 --> 00:20:03.526 A:middle
任何可取消的协议

00:20:04.796 --> 00:20:07.096 A:middle
我们可以取消该订阅器

00:20:08.676 --> 00:20:10.486 A:middle
准备使用重用方法

00:20:11.036 --> 00:20:12.326 A:middle
取消会立即发生

00:20:12.326 --> 00:20:13.886 A:middle
这意味着我们将不会

00:20:13.886 --> 00:20:15.586 A:middle
有机会将任何图像

00:20:15.586 --> 00:20:17.106 A:middle
放置在错误的单元格上

00:20:18.996 --> 00:20:20.556 A:middle
现在我们回到

00:20:20.556 --> 00:20:22.196 A:middle
TableView 数据资源方法

00:20:22.196 --> 00:20:23.776 A:middle
和 cellForRowAt indexPath

00:20:26.256 --> 00:20:28.046 A:middle
我们首先要做同一件事情

00:20:28.046 --> 00:20:30.216 A:middle
即创建一个 URL 请求

00:20:30.386 --> 00:20:31.916 A:middle
然后提取高分辨率的图像

00:20:32.156 --> 00:20:34.116 A:middle
并禁用限制网络访问

00:20:34.926 --> 00:20:36.876 A:middle
但是我们不创建数据任务

00:20:36.876 --> 00:20:39.446 A:middle
而是一个请求的数据任务发布器

00:20:44.156 --> 00:20:46.536 A:middle
然后我们在 Combine 中使用

00:20:46.536 --> 00:20:47.766 A:middle
新的 tryCatch 操作符

00:20:48.336 --> 00:20:50.446 A:middle
这个 tryCatch 操作符

00:20:50.446 --> 00:20:51.466 A:middle
会捕捉 DataTaskPublisher

00:20:51.466 --> 00:20:53.856 A:middle
所产生的错误

00:20:53.856 --> 00:20:55.506 A:middle
如果该任务因为低数据模式

00:20:55.506 --> 00:20:57.856 A:middle
而失败 我们就用新的发布器

00:20:57.856 --> 00:20:59.236 A:middle
来更换该发布器

00:20:59.236 --> 00:21:01.146 A:middle
以提取低分辨率的图像

00:21:02.776 --> 00:21:04.486 A:middle
否则 我们只是将一样的错误

00:21:04.486 --> 00:21:05.686 A:middle
重新抛给了该链条

00:21:10.336 --> 00:21:13.226 A:middle
接下来我们用 tryMap 操作符

00:21:13.416 --> 00:21:15.036 A:middle
来处理我们接收该数据

00:21:15.036 --> 00:21:16.956 A:middle
和该响应的成功案例

00:21:17.406 --> 00:21:18.986 A:middle
我们查看了状态码

00:21:18.986 --> 00:21:20.566 A:middle
然后从该数据中创建一个图像

00:21:21.876 --> 00:21:23.606 A:middle
而此图可以同时处理

00:21:23.936 --> 00:21:25.286 A:middle
高分辨率图像

00:21:25.286 --> 00:21:26.446 A:middle
和低分辨率图像

00:21:26.856 --> 00:21:28.646 A:middle
这样就消除了代码的复制

00:21:33.556 --> 00:21:35.926 A:middle
最后 我们将该错误

00:21:35.926 --> 00:21:38.776 A:middle
用一个图片占位符代替

00:21:38.776 --> 00:21:40.566 A:middle
切换主队列

00:21:40.566 --> 00:21:42.646 A:middle
然后使用指定的订阅器

00:21:42.646 --> 00:21:43.596 A:middle
将该图像放入该单元格

00:21:51.096 --> 00:21:52.136 A:middle
现在 这样很不错

00:21:52.396 --> 00:21:53.976 A:middle
我们完成了一样的逻辑

00:21:53.976 --> 00:21:56.076 A:middle
用更短的代码和线性的代码

00:21:57.436 --> 00:21:58.756 A:middle
但是我们可以完成更多吗

00:21:59.726 --> 00:22:01.336 A:middle
还有一个操作符

00:22:01.336 --> 00:22:02.226 A:middle
我想分享给大家

00:22:02.786 --> 00:22:04.506 A:middle
它叫做 retry

00:22:06.936 --> 00:22:09.446 A:middle
想象一下在支持 retry 之前

00:22:09.446 --> 00:22:11.976 A:middle
你应该要做些什么呢

00:22:12.586 --> 00:22:16.276 A:middle
你必须要么递归地调用

00:22:16.276 --> 00:22:19.686 A:middle
数据任务创建器

00:22:19.686 --> 00:22:20.996 A:middle
要么维护一个状态机

00:22:22.486 --> 00:22:24.976 A:middle
现在在 Combine 里我可以

00:22:24.976 --> 00:22:28.346 A:middle
直接把 retry 操作符放在这里

00:22:28.346 --> 00:22:29.596 A:middle
在我们替换该错误之前

00:22:32.516 --> 00:22:37.826 A:middle
[掌声]

00:22:38.326 --> 00:22:40.276 A:middle
retry 会捕捉

00:22:40.276 --> 00:22:43.116 A:middle
抛在这里的错误 它通过重启

00:22:43.116 --> 00:22:44.406 A:middle
操作符的链条进行重试

00:22:44.406 --> 00:22:46.906 A:middle
然后再次提取该图像

00:22:46.906 --> 00:22:49.856 A:middle
在这个例子里 我只重试了一次

00:22:53.816 --> 00:22:55.616 A:middle
那么 所有平台上的网络 API

00:22:55.616 --> 00:22:57.166 A:middle
都设计得十分可靠

00:22:57.166 --> 00:22:59.576 A:middle
所以通常来说

00:22:59.576 --> 00:23:00.646 A:middle
你不需要进行重试

00:23:01.306 --> 00:23:03.466 A:middle
但是 你的 App 也许需要

00:23:03.466 --> 00:23:05.066 A:middle
连接一些不可靠的服务器

00:23:05.066 --> 00:23:07.496 A:middle
或者 Meta Box 它经常会

00:23:07.496 --> 00:23:09.136 A:middle
出现 500 服务器错误

00:23:09.666 --> 00:23:12.906 A:middle
这种情况下这个 tryMap 操作符

00:23:12.906 --> 00:23:14.876 A:middle
将会抛出一个无效的

00:23:14.876 --> 00:23:16.756 A:middle
服务器响应错误

00:23:16.756 --> 00:23:17.956 A:middle
而这会被 retry 捕捉

00:23:21.536 --> 00:23:23.296 A:middle
但一定要注意

00:23:23.296 --> 00:23:24.906 A:middle
网络操作符是很昂贵的

00:23:24.906 --> 00:23:27.336 A:middle
retry 也不例外

00:23:27.336 --> 00:23:30.396 A:middle
所以如果可以 就尽量避免 retry

00:23:30.956 --> 00:23:32.996 A:middle
如果必须要 retry

00:23:32.996 --> 00:23:34.066 A:middle
就从一个非常低的数字开始

00:23:35.916 --> 00:23:37.826 A:middle
同时 我们还要注意

00:23:37.826 --> 00:23:39.686 A:middle
你的请求的幂等性

00:23:40.876 --> 00:23:43.206 A:middle
在我的 App 中两次下载

00:23:43.206 --> 00:23:45.436 A:middle
一个图像没问题

00:23:45.436 --> 00:23:46.856 A:middle
但如果你的 App 要处理

00:23:46.856 --> 00:23:49.236 A:middle
如付款等交易的话

00:23:49.236 --> 00:23:50.286 A:middle
盲目进行重试是很危险的

00:23:56.286 --> 00:23:57.976 A:middle
现在我来再次打开低数据模式

00:24:23.286 --> 00:24:24.676 A:middle
正如你所看到的

00:24:24.676 --> 00:24:25.976 A:middle
我们像以前一样提取了低分辨率的图像

00:24:29.066 --> 00:24:30.616 A:middle
而如果我关闭低数据模式

00:24:34.416 --> 00:24:36.716 A:middle
会提取一样的高分辨率图像

00:24:36.976 --> 00:24:38.496 A:middle
我们的单元格里

00:24:38.496 --> 00:24:39.976 A:middle
不会有任何放错的图像

00:24:44.516 --> 00:24:52.206 A:middle
[掌声]

00:24:52.706 --> 00:24:55.646 A:middle
好 让我们回到幻灯片

00:24:59.046 --> 00:25:01.086 A:middle
总的来说 我已经给你们展示了

00:25:01.086 --> 00:25:02.276 A:middle
如何用 Combine 使你的网络代码

00:25:02.276 --> 00:25:05.306 A:middle
变为简单的线性的

00:25:05.516 --> 00:25:07.396 A:middle
同时更少出错的代码

00:25:08.156 --> 00:25:09.646 A:middle
我也为大家讲了

00:25:09.646 --> 00:25:11.146 A:middle
这些 Combine 操作符

00:25:11.146 --> 00:25:12.946 A:middle
是多么容易组合

00:25:12.946 --> 00:25:14.396 A:middle
你可以通过添加一次性代码

00:25:14.396 --> 00:25:15.346 A:middle
来支持 retry

00:25:16.256 --> 00:25:18.536 A:middle
但是一定要注意

00:25:18.536 --> 00:25:20.636 A:middle
使用少量 retry 次数

00:25:20.636 --> 00:25:22.036 A:middle
且只重试幂等的请求

00:25:23.026 --> 00:25:25.576 A:middle
最后我向大家展示了

00:25:25.936 --> 00:25:28.056 A:middle
你可以如何在低数据模式中

00:25:28.056 --> 00:25:30.546 A:middle
使用 Combine 且不用做任何预取检查

00:25:34.176 --> 00:25:35.736 A:middle
这是我从我的演示中

00:25:35.736 --> 00:25:37.666 A:middle
抽取出的代码

00:25:37.666 --> 00:25:39.026 A:middle
为低数据模式进行自适应加载

00:25:39.636 --> 00:25:43.276 A:middle
它接受一个常规 URL

00:25:43.276 --> 00:25:45.846 A:middle
和一个低数据 URL

00:25:45.846 --> 00:25:48.696 A:middle
并返回一个数据发布器

00:25:48.876 --> 00:25:51.906 A:middle
首先 我们创建一个请求

00:25:51.906 --> 00:25:53.946 A:middle
来提取一个常规 URL

00:25:54.156 --> 00:25:56.186 A:middle
并禁用限制网络访问

00:25:57.196 --> 00:25:58.976 A:middle
我们用 URL 用该请求

00:25:58.976 --> 00:26:01.376 A:middle
创建一个数据任务发布器

00:26:03.116 --> 00:26:05.516 A:middle
然后 我们马上处理

00:26:05.516 --> 00:26:08.106 A:middle
低数据模式所引起的错误

00:26:08.106 --> 00:26:09.916 A:middle
然后我们用一个新的发布器

00:26:09.916 --> 00:26:11.336 A:middle
来代替该发布器

00:26:11.516 --> 00:26:13.376 A:middle
来提取低数据 URL

00:26:13.866 --> 00:26:17.466 A:middle
下面 我们一起处理这两个

00:26:17.466 --> 00:26:19.486 A:middle
成功案例 检查状态码

00:26:19.556 --> 00:26:21.976 A:middle
然后将数据返回给你

00:26:25.796 --> 00:26:27.066 A:middle
你可以将这个代码

00:26:27.066 --> 00:26:29.076 A:middle
用作一个 Combine

00:26:29.076 --> 00:26:31.156 A:middle
和低数据模式的起点

00:26:31.156 --> 00:26:31.936 A:middle
然后根据需要定制此代码

00:26:34.096 --> 00:26:35.646 A:middle
在这里我必须要提到

00:26:35.646 --> 00:26:37.316 A:middle
在现有的 SDK 中还无法获得

00:26:37.406 --> 00:26:38.216 A:middle
其中一些 API

00:26:38.216 --> 00:26:40.166 A:middle
我们正在努力将它们放入

00:26:40.166 --> 00:26:41.816 A:middle
未来的测试版中

00:26:45.486 --> 00:26:46.956 A:middle
接下来我想邀请

00:26:46.956 --> 00:26:49.956 A:middle
我的同事 Jiten 来谈谈 WebSocket

00:26:50.726 --> 00:26:51.946 A:middle
&gt;&gt; 谢谢你 Guoye

00:26:51.946 --> 00:26:54.166 A:middle
大家早上好

00:26:54.606 --> 00:26:56.946 A:middle
我的名字叫 Jiten Mehta

00:26:56.946 --> 00:26:58.506 A:middle
很高兴能你们谈谈

00:26:58.506 --> 00:27:00.516 A:middle
网络框架中的 

00:27:00.516 --> 00:27:03.026 A:middle
iOS 13 和 macOS Catalina 里

00:27:03.076 --> 00:27:05.026 A:middle
全新的 WebSocket 协议

00:27:06.726 --> 00:27:08.696 A:middle
过去几年 有大量的开发者

00:27:08.696 --> 00:27:09.886 A:middle
向我们询问

00:27:09.886 --> 00:27:11.446 A:middle
关于 Apple 框架

00:27:11.446 --> 00:27:13.216 A:middle
对 WebSocket 的支持

00:27:14.096 --> 00:27:15.516 A:middle
事实上 这是我们去年进行的

00:27:15.516 --> 00:27:16.666 A:middle
一项关于网络的调查中

00:27:16.666 --> 00:27:18.976 A:middle
开发者们提出的第一个要求

00:27:22.456 --> 00:27:24.526 A:middle
WebSocket 允许通过

00:27:24.526 --> 00:27:27.496 A:middle
单个 HTTP 连接进行双向通信

00:27:28.676 --> 00:27:30.346 A:middle
这使得开发者们能够

00:27:30.346 --> 00:27:31.966 A:middle
编写一些 App

00:27:32.736 --> 00:27:34.356 A:middle
如聊天 多人游戏

00:27:34.356 --> 00:27:36.166 A:middle
和其他实时的 App

00:27:36.976 --> 00:27:38.606 A:middle
WebSocket 在众所周知的

00:27:38.606 --> 00:27:41.386 A:middle
HTTP 端口上工作

00:27:41.446 --> 00:27:42.816 A:middle
它完全兼容于

00:27:42.816 --> 00:27:44.426 A:middle
现有的网络基础设施

00:27:44.796 --> 00:27:46.176 A:middle
允许你连接到代理服务器

00:27:46.246 --> 00:27:48.886 A:middle
CDN 和防火墙

00:27:50.256 --> 00:27:52.156 A:middle
在过去 WebSocket 协议

00:27:52.156 --> 00:27:54.316 A:middle
已经作为 JavaScript API 

00:27:54.316 --> 00:27:56.686 A:middle
在网络浏览器中可用

00:27:57.866 --> 00:27:59.146 A:middle
但是看到 WebSocket

00:27:59.146 --> 00:28:00.636 A:middle
给网络 App 带来的益处

00:28:00.936 --> 00:28:03.206 A:middle
我们决定将这种益处

00:28:03.426 --> 00:28:05.446 A:middle
扩大到我们的网络框架中

00:28:05.446 --> 00:28:07.026 A:middle
不知是在网络视图中

00:28:07.026 --> 00:28:09.906 A:middle
已有的 JavaScript API 中

00:28:11.226 --> 00:28:12.746 A:middle
这让你能够使用

00:28:12.746 --> 00:28:14.856 A:middle
你现有的网络基础设施

00:28:14.856 --> 00:28:16.166 A:middle
并将它带到 Apple 平台上的

00:28:16.226 --> 00:28:16.976 A:middle
本地 App 中

00:28:20.476 --> 00:28:22.106 A:middle
之前我们说过 WebSocket

00:28:22.836 --> 00:28:24.186 A:middle
那么现在我们来看一个

00:28:24.186 --> 00:28:26.516 A:middle
我们今天使用的能够

00:28:26.516 --> 00:28:28.056 A:middle
实现双向通信的普通技术

00:28:29.136 --> 00:28:31.456 A:middle
我们以一个聊天 App 为例

00:28:31.956 --> 00:28:34.726 A:middle
当一个客户端想要从服务器

00:28:34.726 --> 00:28:36.096 A:middle
接收一个响应

00:28:36.096 --> 00:28:37.056 A:middle
它会发出一个请求

00:28:38.266 --> 00:28:40.046 A:middle
该服务器用一个 200 OK 的状态码

00:28:40.046 --> 00:28:42.006 A:middle
来立即做出响应

00:28:42.006 --> 00:28:43.496 A:middle
但它并没有发出响应体

00:28:43.496 --> 00:28:45.706 A:middle
因为它在这时候没有响应体

00:28:46.866 --> 00:28:48.536 A:middle
在未来的某个时候

00:28:48.536 --> 00:28:50.336 A:middle
一旦服务器具备为客户端

00:28:50.336 --> 00:28:52.576 A:middle
准备的响应 它便会将它发给客户端

00:28:53.356 --> 00:28:55.116 A:middle
就在这时 客户端

00:28:55.116 --> 00:28:56.656 A:middle
会发送一个新的请求

00:28:56.656 --> 00:28:58.536 A:middle
表示它想要接受下个消息

00:28:59.916 --> 00:29:01.606 A:middle
这被称作长期轮询

00:29:02.206 --> 00:29:03.666 A:middle
但是长期轮询

00:29:03.666 --> 00:29:04.976 A:middle
也有一些缺点

00:29:06.436 --> 00:29:08.176 A:middle
当它们想发送消息时

00:29:08.176 --> 00:29:09.916 A:middle
两个端点都必须发送

00:29:09.916 --> 00:29:12.396 A:middle
一个 HTTP 请求

00:29:12.396 --> 00:29:14.786 A:middle
或一个 HTTP 响应

00:29:14.786 --> 00:29:15.336 A:middle
这是很大的开销

00:29:16.836 --> 00:29:18.536 A:middle
此外我们必须要

00:29:18.696 --> 00:29:19.936 A:middle
在服务器上维护复杂性

00:29:19.936 --> 00:29:21.176 A:middle
以启用长期轮询

00:29:22.726 --> 00:29:24.226 A:middle
我们来看看 WebSocket 是怎么

00:29:24.226 --> 00:29:25.396 A:middle
解决这个问题的吧

00:29:25.936 --> 00:29:29.446 A:middle
在 WebSocket 进行握手的

00:29:29.446 --> 00:29:31.086 A:middle
第一步的第一部分

00:29:31.336 --> 00:29:33.586 A:middle
客户端发送给

00:29:33.766 --> 00:29:35.416 A:middle
服务器一个请求

00:29:35.416 --> 00:29:36.696 A:middle
说明想要升级这个

00:29:36.696 --> 00:29:37.766 A:middle
到 WebSocket 的连接

00:29:39.206 --> 00:29:41.376 A:middle
服务器用 101 

00:29:41.456 --> 00:29:42.996 A:middle
切换协议来响应

00:29:43.566 --> 00:29:45.126 A:middle
就在这个时候

00:29:45.126 --> 00:29:47.076 A:middle
我们在两个端口中间

00:29:47.076 --> 00:29:47.966 A:middle
有一个双向流

00:29:48.506 --> 00:29:51.286 A:middle
现在 两个端点都可以

00:29:51.286 --> 00:29:53.526 A:middle
自由地向任何方向发送消息

00:29:54.096 --> 00:29:56.716 A:middle
它们可以发送数据串

00:29:57.026 --> 00:29:59.246 A:middle
或 Ping/Pong 帧之类的消息

00:29:59.566 --> 00:30:03.566 A:middle
且不需要任何 HTTP 开销

00:30:03.566 --> 00:30:07.056 A:middle
URLSession 是 Apple 推荐的 HTTP API

00:30:07.056 --> 00:30:10.816 A:middle
今年我们很高兴宣布

00:30:10.986 --> 00:30:13.216 A:middle
URLSessionWebSocketTask

00:30:13.216 --> 00:30:14.976 A:middle
一个基础框架中新的 API

00:30:15.516 --> 00:30:20.816 A:middle
[欢呼和掌声]

00:30:21.316 --> 00:30:22.906 A:middle
为了创建一个 WebSocket 任务

00:30:22.906 --> 00:30:24.626 A:middle
你可以简单地传入

00:30:24.626 --> 00:30:26.736 A:middle
你想要的连接和调用 resume() 的 URL

00:30:27.406 --> 00:30:28.996 A:middle
我们将开始进行握手

00:30:28.996 --> 00:30:29.936 A:middle
你不需要担心

00:30:29.936 --> 00:30:31.426 A:middle
要处理任何的状态码

00:30:31.956 --> 00:30:34.866 A:middle
WebSocket 握手的第一部分

00:30:34.866 --> 00:30:37.296 A:middle
使用的是 HTTP 语义

00:30:37.666 --> 00:30:38.996 A:middle
这意味着你的 

00:30:39.036 --> 00:30:42.106 A:middle
URLSessionWebSocketTask 将会使用

00:30:42.106 --> 00:30:45.016 A:middle
你现有的 URLSession 配置对象

00:30:46.136 --> 00:30:47.576 A:middle
它还将使用你的网络存储

00:30:47.576 --> 00:30:48.996 A:middle
来做 Cookie 及约定查找

00:30:48.996 --> 00:30:50.766 A:middle
我们将处理你代理

00:30:50.766 --> 00:30:52.826 A:middle
收到的任何挑战

00:30:54.156 --> 00:30:55.566 A:middle
一旦你成功连接

00:30:55.616 --> 00:30:58.336 A:middle
你就可以在该任务上发送消息

00:30:59.556 --> 00:31:01.266 A:middle
你还可以通过传送一个

00:31:01.266 --> 00:31:03.206 A:middle
完成处理程序来接收

00:31:03.206 --> 00:31:04.806 A:middle
该任务上的消息 一旦我们

00:31:04.806 --> 00:31:06.706 A:middle
从服务器接收到整个消息

00:31:06.706 --> 00:31:09.336 A:middle
该处理程序将被异步调用

00:31:10.396 --> 00:31:12.456 A:middle
WebSockets 中的 URLSession API

00:31:12.456 --> 00:31:14.186 A:middle
很接近 JavaScript API

00:31:14.186 --> 00:31:16.576 A:middle
而后者是基于

00:31:16.576 --> 00:31:19.466 A:middle
完整的消息和回调

00:31:20.706 --> 00:31:21.936 A:middle
但是一些开发者需要的

00:31:21.936 --> 00:31:24.766 A:middle
不止如此 比如服务器支持

00:31:24.766 --> 00:31:26.186 A:middle
或读取部分消息

00:31:26.726 --> 00:31:28.616 A:middle
为此 我们很高兴介绍

00:31:28.616 --> 00:31:31.136 A:middle
Network.framework 中的 WebSocketSupport 

00:31:31.136 --> 00:31:32.756 A:middle
通过 NWConnection 

00:31:32.756 --> 00:31:34.816 A:middle
和 NWListener 对象

00:31:34.816 --> 00:31:36.976 A:middle
同时给你客户端和服务器支持

00:31:39.516 --> 00:31:43.066 A:middle
[掌声]

00:31:43.566 --> 00:31:45.646 A:middle
有了它 你可以有一个

00:31:45.646 --> 00:31:47.066 A:middle
面向消息的传输协议

00:31:47.066 --> 00:31:50.306 A:middle
该协议可以扩展为对等通信

00:31:51.646 --> 00:31:53.166 A:middle
你也可以通过

00:31:53.166 --> 00:31:54.566 A:middle
为 give 和 receive 操作值

00:31:54.566 --> 00:31:56.406 A:middle
指定最小和最大字节

00:31:56.406 --> 00:31:57.836 A:middle
来接收部分消息

00:31:58.446 --> 00:32:00.816 A:middle
要将 WebSocket 添加到

00:32:00.816 --> 00:32:02.416 A:middle
对象的网络框架中

00:32:02.416 --> 00:32:04.556 A:middle
你可以只创造一个

00:32:04.556 --> 00:32:06.156 A:middle
启用了 TLS 的参数对象

00:32:07.066 --> 00:32:09.686 A:middle
接着 创建一个 websocketOptions

00:32:09.956 --> 00:32:11.766 A:middle
然后将其设置为

00:32:11.766 --> 00:32:12.966 A:middle
参数的默认协议栈

00:32:15.506 --> 00:32:16.766 A:middle
一旦你创建了参数

00:32:17.196 --> 00:32:18.516 A:middle
接下来你就可以将

00:32:18.516 --> 00:32:20.206 A:middle
这些参数传入

00:32:20.206 --> 00:32:21.886 A:middle
NWConnection 构造器

00:32:21.886 --> 00:32:22.916 A:middle
来创建一个 NWConnection 对象

00:32:23.826 --> 00:32:24.836 A:middle
或者如果你想要创建

00:32:24.836 --> 00:32:26.196 A:middle
一个监听器 你只要将这些参数

00:32:26.196 --> 00:32:28.026 A:middle
传入该监听器的构造器中

00:32:29.446 --> 00:32:31.946 A:middle
发送和接收 API

00:32:31.946 --> 00:32:34.156 A:middle
与去年相比没有变化

00:32:34.156 --> 00:32:36.346 A:middle
你可以继续使用这些

00:32:36.346 --> 00:32:37.976 A:middle
来发送和接收 WebSocket 消息

00:32:42.046 --> 00:32:43.156 A:middle
好 下面我们来看看

00:32:43.156 --> 00:32:44.366 A:middle
WebSocket 的实际操作

00:32:44.976 --> 00:32:47.166 A:middle
我将会在 Guoyue 刚刚

00:32:47.166 --> 00:32:48.476 A:middle
向你们展示的 App

00:32:48.476 --> 00:32:51.276 A:middle
《PubSocket》上进行创建

00:32:51.276 --> 00:32:52.496 A:middle
但我想对《PubSocket》的商业模式

00:32:52.496 --> 00:32:54.406 A:middle
进行一点点改变

00:32:54.876 --> 00:32:57.836 A:middle
现在项目的价格将会变为动态的

00:32:57.836 --> 00:33:00.486 A:middle
而且会根据需求而变化

00:33:01.266 --> 00:33:02.686 A:middle
那么 想一想股票市场

00:33:02.686 --> 00:33:05.126 A:middle
但这里是交易食物和饮品的

00:33:05.886 --> 00:33:06.896 A:middle
那么 在左边你可以看到

00:33:06.896 --> 00:33:08.366 A:middle
《PubServer》它是

00:33:08.366 --> 00:33:09.936 A:middle
调酒师可以在其中

00:33:09.936 --> 00:33:11.316 A:middle
编辑商品或者

00:33:11.316 --> 00:33:13.246 A:middle
更改价格的一款 App

00:33:14.286 --> 00:33:15.286 A:middle
在右边是我们

00:33:15.326 --> 00:33:16.396 A:middle
已经看到的酒吧菜单

00:33:16.396 --> 00:33:17.886 A:middle
这是你的客户端

00:33:17.886 --> 00:33:19.516 A:middle
或走进酒吧的客户

00:33:19.516 --> 00:33:20.766 A:middle
可以看到的 App

00:33:21.316 --> 00:33:24.096 A:middle
动态定价的新功能

00:33:24.096 --> 00:33:26.826 A:middle
将被称作 PubSocket+

00:33:27.246 --> 00:33:28.096 A:middle
因此 我们来看 PubSocket+

00:33:28.096 --> 00:33:29.336 A:middle
是如何与我们当前的

00:33:29.336 --> 00:33:31.136 A:middle
服务器和客户端实现一起工作的

00:33:31.726 --> 00:33:34.966 A:middle
我们假设调酒师想要

00:33:34.966 --> 00:33:36.476 A:middle
把沙士的价格

00:33:36.476 --> 00:33:39.226 A:middle
提升到 6.99 美元

00:33:39.226 --> 00:33:41.126 A:middle
我单击更新

00:33:42.316 --> 00:33:44.956 A:middle
现在 客户端就要下拉刷新

00:33:45.496 --> 00:33:47.836 A:middle
只要他们这么做了

00:33:47.836 --> 00:33:49.796 A:middle
沙士的价格就更新了

00:33:50.936 --> 00:33:53.096 A:middle
好了 但我觉得我们肯定能

00:33:53.096 --> 00:33:53.956 A:middle
做得比这个更好

00:33:54.806 --> 00:33:56.856 A:middle
我想让《PubSocket》的客户

00:33:56.856 --> 00:33:58.496 A:middle
有一个无缝的体验

00:33:58.706 --> 00:33:59.746 A:middle
他们不需要下拉刷新

00:33:59.746 --> 00:34:02.826 A:middle
就可以得到实时的价格更新

00:34:03.526 --> 00:34:06.156 A:middle
让我们来看看 WebSocket 是如何

00:34:06.156 --> 00:34:07.496 A:middle
帮助我们实现这个的

00:34:08.025 --> 00:34:11.275 A:middle
下面我们前往 Xcode

00:34:11.366 --> 00:34:13.476 A:middle
首先我要停止

00:34:14.525 --> 00:34:18.466 A:middle
服务器和客户端

00:34:18.466 --> 00:34:20.775 A:middle
接着我们前往服务器

00:34:20.775 --> 00:34:22.576 A:middle
那里有一个 NWListener

00:34:22.576 --> 00:34:25.795 A:middle
它作为我的 TCB 服务器

00:34:27.156 --> 00:34:29.016 A:middle
这里有一些参数

00:34:29.016 --> 00:34:31.096 A:middle
这些参数是我用设置了 TLS 选项的方法创建的

00:34:32.156 --> 00:34:32.966 A:middle
首先 我要在这里做一个更改

00:34:32.966 --> 00:34:35.416 A:middle
来创建一些 WebSocket 选项

00:34:35.416 --> 00:34:37.856 A:middle
然后将它设置在

00:34:37.856 --> 00:34:39.966 A:middle
参数的协议栈上

00:34:40.856 --> 00:34:43.876 A:middle
这样就告诉我的服务器

00:34:43.876 --> 00:34:45.716 A:middle
怎样完成 WebSocket 与想要

00:34:45.755 --> 00:34:47.525 A:middle
与之相连接的用户端的握手

00:34:48.156 --> 00:34:49.985 A:middle
我将会在我的服务器上

00:34:49.985 --> 00:34:53.056 A:middle
做出的下一个改变

00:34:53.056 --> 00:34:55.176 A:middle
在这个叫做 sendPriceChanges 的函数里

00:34:56.306 --> 00:34:58.556 A:middle
这个函数原本发送

00:34:58.556 --> 00:35:00.686 A:middle
WebSocket 消息给所有

00:35:00.686 --> 00:35:01.826 A:middle
想要连接到它的客户端

00:35:01.826 --> 00:35:04.446 A:middle
在服务器上每次更改

00:35:04.446 --> 00:35:07.146 A:middle
一个项目的一个价格

00:35:07.326 --> 00:35:09.216 A:middle
现在 我使用 defaultStream

00:35:09.216 --> 00:35:11.936 A:middle
实现了一个 send()

00:35:13.056 --> 00:35:15.166 A:middle
这意味着我传送到

00:35:15.166 --> 00:35:17.086 A:middle
send() 方法的数据

00:35:17.086 --> 00:35:18.626 A:middle
是作为一个字节包

00:35:18.626 --> 00:35:20.416 A:middle
在这个 TCB 连接中被发送的

00:35:20.416 --> 00:35:21.876 A:middle
它没有任何的消息结构

00:35:21.876 --> 00:35:24.496 A:middle
我要更改这里的上下文

00:35:24.496 --> 00:35:28.246 A:middle
并创建一个新的上下文

00:35:28.606 --> 00:35:32.876 A:middle
用一些与之相联系的元数据

00:35:32.926 --> 00:35:34.946 A:middle
现在 这就告诉我的连接

00:35:34.946 --> 00:35:38.296 A:middle
要以 WebSocket 消息结构的形式发送数据

00:35:39.376 --> 00:35:40.586 A:middle
有了这两点变化

00:35:40.586 --> 00:35:42.456 A:middle
我的服务器应该准备好

00:35:42.456 --> 00:35:44.266 A:middle
向我的客户端发送 WebSocket 消息了

00:35:45.316 --> 00:35:48.216 A:middle
现在 我们来看

00:35:48.216 --> 00:35:49.656 A:middle
我可以在创建服务器的同时

00:35:49.656 --> 00:35:50.336 A:middle
前往客户端

00:35:51.566 --> 00:35:52.956 A:middle
那么 在客户端上

00:35:54.086 --> 00:35:55.086 A:middle
我首先要更改

00:35:55.086 --> 00:35:57.546 A:middle
connect() 函数

00:35:58.116 --> 00:35:59.086 A:middle
connect() 将会连接到

00:35:59.086 --> 00:36:01.936 A:middle
一个新的服务器上

00:36:02.286 --> 00:36:05.316 A:middle
因此我要用 URLSessionWebSocketTask

00:36:05.316 --> 00:36:07.686 A:middle
我会简单地将 URL 传入任务中

00:36:07.686 --> 00:36:09.836 A:middle
然后调用重新开始

00:36:09.836 --> 00:36:11.876 A:middle
这样就可以开始进行握手

00:36:12.866 --> 00:36:14.266 A:middle
一旦我连接上了

00:36:14.266 --> 00:36:16.436 A:middle
我就会调用 readMessage

00:36:16.536 --> 00:36:18.196 A:middle
它将会收到来自服务器的消息

00:36:18.196 --> 00:36:20.846 A:middle
现在 我们看看应该如何

00:36:20.846 --> 00:36:21.646 A:middle
完成 readMessage

00:36:23.156 --> 00:36:26.386 A:middle
在 readMessage 里我将

00:36:26.386 --> 00:36:28.916 A:middle
在任务上调用 receive()

00:36:28.916 --> 00:36:29.866 A:middle
然后通过一个完成块

00:36:30.866 --> 00:36:34.276 A:middle
在成功的案例里

00:36:34.276 --> 00:36:36.616 A:middle
我将更新我的 UI 更改价格

00:36:36.616 --> 00:36:38.046 A:middle
之后我会立刻再次调用

00:36:38.046 --> 00:36:39.676 A:middle
readMessage 来读取

00:36:39.676 --> 00:36:41.696 A:middle
下一条从服务器传回的消息

00:36:42.646 --> 00:36:44.166 A:middle
一旦我在客户端上做了

00:36:44.166 --> 00:36:45.916 A:middle
这两处更改 我应该完全

00:36:46.136 --> 00:36:47.806 A:middle
准备好连接我的服务器

00:36:47.806 --> 00:36:49.246 A:middle
并接收 WebSocket 消息

00:36:50.576 --> 00:36:52.656 A:middle
好 现在来运行一个新的服务器

00:36:52.656 --> 00:36:54.386 A:middle
和客户端 看看它们是如何工作

00:36:55.486 --> 00:37:01.086 A:middle
首先我要运行我的服务器

00:37:01.276 --> 00:37:02.416 A:middle
现在我们的新客户端在读取

00:37:02.486 --> 00:37:04.456 A:middle
PubSocket+ 它有新的

00:37:04.456 --> 00:37:06.836 A:middle
改良的 WebSocket 能力

00:37:07.606 --> 00:37:09.396 A:middle
那么 我们假设现在是

00:37:09.396 --> 00:37:11.156 A:middle
饮品减价供应的时间

00:37:11.156 --> 00:37:12.516 A:middle
调酒师想将沙士的价格

00:37:12.676 --> 00:37:14.556 A:middle
降低到 1.99 美元

00:37:14.556 --> 00:37:16.326 A:middle
那么 让我来完成这个更改

00:37:20.076 --> 00:37:21.756 A:middle
我会点击更新

00:37:22.506 --> 00:37:23.606 A:middle
然后你可以看到

00:37:23.606 --> 00:37:25.296 A:middle
客户端上的价格就会更新

00:37:25.346 --> 00:37:26.396 A:middle
客户不需要再刷新

00:37:27.516 --> 00:37:29.586 A:middle
[掌声]

00:37:30.086 --> 00:37:32.386 A:middle
那么 对于那些错过的人

00:37:32.386 --> 00:37:33.306 A:middle
我将降低炸薯条的价格

00:37:33.306 --> 00:37:34.386 A:middle
降到和沙士一样

00:37:34.386 --> 00:37:35.886 A:middle
那么现在仍然是降价时间

00:37:36.556 --> 00:37:39.906 A:middle
而只要我点击更新

00:37:39.906 --> 00:37:41.586 A:middle
你就会看到在客户端上

00:37:41.586 --> 00:37:42.886 A:middle
炸薯条的价格发生了改变

00:37:42.886 --> 00:37:43.426 A:middle
我并不用下拉刷新

00:37:43.646 --> 00:37:45.926 A:middle
我再做一次

00:37:45.926 --> 00:37:47.696 A:middle
那里薯条的价格就改变了

00:37:48.516 --> 00:37:51.746 A:middle
[掌声]

00:37:52.246 --> 00:37:54.166 A:middle
那么 这是没有

00:37:54.386 --> 00:37:55.726 A:middle
任何 HTTP 开销的

00:37:55.726 --> 00:37:57.696 A:middle
WebSockets 双向通信

00:37:58.916 --> 00:38:00.766 A:middle
你们中的一些人也许想知道

00:38:00.766 --> 00:38:02.926 A:middle
右上角的“Stats”按钮是用来干什么的

00:38:03.376 --> 00:38:05.216 A:middle
如果我单击它 

00:38:05.216 --> 00:38:06.446 A:middle
这里就会有一些我们

00:38:06.446 --> 00:38:07.866 A:middle
从 URLSessionTaskMetrics API 中

00:38:07.866 --> 00:38:09.886 A:middle
收集的新统计数据

00:38:11.486 --> 00:38:13.216 A:middle
此外 在底部

00:38:13.216 --> 00:38:15.326 A:middle
RTT 是我的客户端

00:38:15.326 --> 00:38:17.006 A:middle
和服务器之间的往返时间

00:38:17.006 --> 00:38:19.116 A:middle
我在 WebSockets 中使用

00:38:19.116 --> 00:38:20.256 A:middle
Ping/Pong 帧进行计算

00:38:21.126 --> 00:38:22.806 A:middle
我目前使用网络连接调节器

00:38:22.806 --> 00:38:25.366 A:middle
来模仿一个繁忙的酒吧环境

00:38:25.366 --> 00:38:26.246 A:middle
你看可以用像这样的东西

00:38:26.246 --> 00:38:27.396 A:middle
来监控你的客户端

00:38:27.446 --> 00:38:29.866 A:middle
和服务器之间的连接

00:38:30.886 --> 00:38:31.946 A:middle
如果你有兴趣了解更多

00:38:31.946 --> 00:38:33.646 A:middle
关于添加 Metrics API 中的新特性

00:38:33.646 --> 00:38:35.966 A:middle
或者如何使用

00:38:35.966 --> 00:38:37.686 A:middle
网络连接调节器

00:38:37.946 --> 00:38:39.326 A:middle
请在今天下午 5 点

00:38:39.326 --> 00:38:41.116 A:middle
来到我们的网络会场

00:38:42.266 --> 00:38:43.736 A:middle
现在让我们回到幻灯片

00:38:47.496 --> 00:38:51.706 A:middle
让我们快速回顾一下 PubSocket+

00:38:51.886 --> 00:38:53.406 A:middle
对于我们的服务器

00:38:53.406 --> 00:38:55.176 A:middle
我们使用了设置在协议栈上的

00:38:55.176 --> 00:38:56.836 A:middle
WebSocket 选项中的 NWListener

00:38:57.486 --> 00:38:59.846 A:middle
而对于客户端 我们使用了

00:38:59.846 --> 00:39:01.816 A:middle
URLSessionWebSocketTask

00:39:01.816 --> 00:39:04.006 A:middle
来连接我们的服务器读取消息

00:39:04.006 --> 00:39:07.026 A:middle
对于传输 我们使用了

00:39:07.026 --> 00:39:08.736 A:middle
双向 WebSocket 消息

00:39:09.606 --> 00:39:11.076 A:middle
最后 所有操作的优点是

00:39:11.106 --> 00:39:12.496 A:middle
双向消息传递

00:39:12.976 --> 00:39:14.556 A:middle
这样做的话

00:39:14.556 --> 00:39:18.586 A:middle
开销非常小

00:39:18.706 --> 00:39:20.676 A:middle
现在 让我们回顾一下

00:39:20.676 --> 00:39:23.026 A:middle
可以为你的 App 添加 WebSockets 的 API

00:39:24.256 --> 00:39:26.136 A:middle
让你能够在你的

00:39:26.136 --> 00:39:28.266 A:middle
网络 App 和网络视图中

00:39:28.266 --> 00:39:30.556 A:middle
现有的 JavaScript API 中

00:39:30.556 --> 00:39:31.366 A:middle
添加 WebSockets

00:39:31.916 --> 00:39:34.626 A:middle
而今年有所不同的是

00:39:34.626 --> 00:39:37.196 A:middle
我们可以将创建在 Network.framework

00:39:37.196 --> 00:39:39.376 A:middle
顶端的 URLSessionWebSocketTask

00:39:39.376 --> 00:39:40.526 A:middle
嵌入 URLSession

00:39:41.276 --> 00:39:42.976 A:middle
它与你现有的 URLSession

00:39:42.976 --> 00:39:44.666 A:middle
配置对象一起工作

00:39:44.896 --> 00:39:46.796 A:middle
同时提供自动的 Cookie

00:39:46.796 --> 00:39:47.836 A:middle
和身份验证支持

00:39:48.656 --> 00:39:50.896 A:middle
它还提供一个便利的方法

00:39:50.896 --> 00:39:53.746 A:middle
用 Ping/Pong 来测量往返时间

00:39:55.606 --> 00:39:56.616 A:middle
此外 今年

00:39:56.846 --> 00:39:58.226 A:middle
在 Network.framework 中的

00:39:58.226 --> 00:39:59.686 A:middle
WebSocketSupport

00:39:59.686 --> 00:40:01.546 A:middle
可以通过 NWConnection 和 NWListener 对象 

00:40:01.546 --> 00:40:04.836 A:middle
为你提供客户端和服务器支持

00:40:06.046 --> 00:40:07.916 A:middle
它让你直接存储

00:40:07.966 --> 00:40:09.706 A:middle
完整和部分的消息

00:40:10.006 --> 00:40:11.726 A:middle
包括 Ping/Pong 帧

00:40:12.636 --> 00:40:14.076 A:middle
你可以通过 webSocketOptions 对象

00:40:14.076 --> 00:40:16.226 A:middle
随意地设置自定 Header

00:40:16.226 --> 00:40:17.846 A:middle
如 Cookie 或其他的

00:40:17.846 --> 00:40:19.536 A:middle
身份验证 Header

00:40:20.806 --> 00:40:21.916 A:middle
我们很高兴为所有的开发者们

00:40:21.916 --> 00:40:23.056 A:middle
开放这项技术

00:40:23.056 --> 00:40:24.656 A:middle
我们很想看看你们

00:40:24.656 --> 00:40:25.836 A:middle
要拿这个来做什么

00:40:26.806 --> 00:40:28.116 A:middle
接下来就有请

00:40:28.176 --> 00:40:29.776 A:middle
Christoph 来为大家讲讲

00:40:29.776 --> 00:40:30.456 A:middle
移动性的改进

00:40:31.516 --> 00:40:35.826 A:middle
[掌声]

00:40:36.326 --> 00:40:39.276 A:middle
&gt;&gt; 谢谢 Jiten 大家好

00:40:40.386 --> 00:40:41.766 A:middle
我是 Christoph 我现在要为你

00:40:41.766 --> 00:40:43.726 A:middle
展示我们在 iOS 13 中

00:40:43.726 --> 00:40:45.526 A:middle
对移动性所做的改进

00:40:46.986 --> 00:40:50.276 A:middle
那么 用户经常会遇到这种情况

00:40:50.556 --> 00:40:51.966 A:middle
当他们走出家门

00:40:51.966 --> 00:40:53.696 A:middle
并远离他们的

00:40:53.696 --> 00:40:54.976 A:middle
Wi-Fi 接入点时

00:40:54.976 --> 00:40:57.476 A:middle
Wi-Fi 的信号变得更弱

00:40:57.476 --> 00:40:59.666 A:middle
通常这时 App

00:40:59.666 --> 00:41:00.906 A:middle
就会变得更慢

00:41:00.906 --> 00:41:03.056 A:middle
因为网络变得更慢了

00:41:03.736 --> 00:41:05.576 A:middle
有时 App 会完全失效

00:41:06.326 --> 00:41:08.136 A:middle
所以人们已经习惯了

00:41:08.136 --> 00:41:08.976 A:middle
这种状况 所以当他们

00:41:08.976 --> 00:41:10.136 A:middle
走出家门的时候

00:41:10.136 --> 00:41:11.706 A:middle
他们就会向上滑出控制中心

00:41:11.706 --> 00:41:13.546 A:middle
然后关闭 Wi-Fi

00:41:14.986 --> 00:41:16.836 A:middle
好 我相信我们都经历过

00:41:16.836 --> 00:41:18.206 A:middle
这种情况 对吗

00:41:19.066 --> 00:41:21.556 A:middle
所以我想要改变这种现状

00:41:22.326 --> 00:41:23.526 A:middle
我认为用户应该永远

00:41:23.526 --> 00:41:25.116 A:middle
不需要关掉 Wi-Fi

00:41:25.556 --> 00:41:26.976 A:middle
当他们走出家门的时候

00:41:27.416 --> 00:41:28.056 A:middle
而你的 App

00:41:28.056 --> 00:41:29.576 A:middle
也应该时刻正常运行

00:41:29.576 --> 00:41:31.906 A:middle
甚至是在 Wi-Fi 信号很差的时候

00:41:33.106 --> 00:41:34.536 A:middle
我相信这个屋子里

00:41:34.536 --> 00:41:37.136 A:middle
在座的每个人都想达到这一目标

00:41:38.026 --> 00:41:39.976 A:middle
那么让我来展示我们要怎么做

00:41:44.536 --> 00:41:47.686 A:middle
我们常用这种方法来表述 Wi-Fi

00:41:48.316 --> 00:41:50.016 A:middle
我们在中间有一个 Wi-Fi 接入点

00:41:50.016 --> 00:41:51.586 A:middle
它周围的同心圆

00:41:51.586 --> 00:41:54.096 A:middle
向我们显示 Wi-Fi 信号

00:41:54.096 --> 00:41:55.706 A:middle
是如何逐渐消失的

00:41:55.706 --> 00:41:57.536 A:middle
随着手机越来越远

00:41:57.536 --> 00:42:00.166 A:middle
信号就变得越来越弱

00:42:01.216 --> 00:42:02.666 A:middle
在这种场景中

00:42:02.666 --> 00:42:04.676 A:middle
要手机决定是使用 Wi-Fi

00:42:04.676 --> 00:42:06.216 A:middle
还是切换到蜂窝移动网络

00:42:06.626 --> 00:42:07.886 A:middle
这是非常简单的

00:42:08.656 --> 00:42:11.846 A:middle
对吗 好 现在问题是

00:42:12.166 --> 00:42:13.526 A:middle
这种对 Wi-Fi 外观的描述

00:42:13.526 --> 00:42:16.986 A:middle
实际上与现实相去甚远

00:42:17.796 --> 00:42:22.316 A:middle
事实上它看上去更像这样

00:42:22.536 --> 00:42:23.856 A:middle
在中间有Wi-Fi接入点

00:42:23.856 --> 00:42:25.786 A:middle
然后在它周围的是非常

00:42:25.786 --> 00:42:27.636 A:middle
参差不齐的 Wi-Fi 信号

00:42:28.556 --> 00:42:29.826 A:middle
而这些斑点是因为

00:42:29.826 --> 00:42:32.656 A:middle
房间里的物体干扰了信号

00:42:33.316 --> 00:42:35.546 A:middle
房间 墙壁 所有的东西

00:42:35.546 --> 00:42:37.406 A:middle
都在使 Wi-Fi 信号成为

00:42:37.406 --> 00:42:41.366 A:middle
一个非常不确定的质量指标

00:42:42.216 --> 00:42:43.766 A:middle
手机只要有一点小的移动

00:42:43.766 --> 00:42:45.186 A:middle
就可能将它从一个好的位置

00:42:45.186 --> 00:42:47.566 A:middle
移到一个坏的位置

00:42:48.486 --> 00:42:49.536 A:middle
所以 手机的确很难

00:42:49.536 --> 00:42:51.296 A:middle
知道 Wi-Fi 信号

00:42:51.296 --> 00:42:53.196 A:middle
仍然是好或坏

00:42:53.546 --> 00:42:54.576 A:middle
它也许仍然接收到

00:42:54.576 --> 00:42:56.186 A:middle
来自接入点的信标

00:42:56.756 --> 00:42:57.636 A:middle
但是尽管如此

00:42:57.636 --> 00:42:59.196 A:middle
信号其实可能会很差

00:42:59.256 --> 00:43:01.916 A:middle
以至于无法发送或接收任何数据

00:43:03.076 --> 00:43:04.906 A:middle
所以 在这种环境下

00:43:05.366 --> 00:43:06.656 A:middle
手机需要决定

00:43:06.866 --> 00:43:08.676 A:middle
自己使用 Wi-Fi 还是

00:43:08.676 --> 00:43:09.246 A:middle
蜂窝移动网络

00:43:10.236 --> 00:43:11.726 A:middle
Wi-Fi 信号的不确定性

00:43:11.726 --> 00:43:15.146 A:middle
正是移动性所面临的重大挑战

00:43:17.696 --> 00:43:20.936 A:middle
那么 在 Apple 中我们已经

00:43:20.936 --> 00:43:22.106 A:middle
意识到这个问题有一段时间了

00:43:22.106 --> 00:43:24.526 A:middle
我要向你展示在过去

00:43:24.526 --> 00:43:27.456 A:middle
我们已经采取了多少步骤

00:43:27.456 --> 00:43:28.966 A:middle
来改进这样的场景

00:43:28.966 --> 00:43:33.706 A:middle
这一切都开始于 iOS 7 的 Siri

00:43:36.156 --> 00:43:38.066 A:middle
在 iOS 7 中 我们为 Siri

00:43:38.066 --> 00:43:39.766 A:middle
引入了多路 TCP

00:43:40.516 --> 00:43:42.056 A:middle
多路 TCP 允许同时使用

00:43:42.056 --> 00:43:43.996 A:middle
Wi-Fi 和蜂窝移动网络

00:43:44.496 --> 00:43:46.656 A:middle
所以 从 iOS 7 开始

00:43:46.716 --> 00:43:48.226 A:middle
无论何时 当人们

00:43:48.226 --> 00:43:49.366 A:middle
走出家门使用 Siri 时

00:43:50.276 --> 00:43:52.276 A:middle
多路 TCP 都会保证

00:43:52.276 --> 00:43:53.426 A:middle
要么使用 Wi-Fi

00:43:53.426 --> 00:43:56.556 A:middle
要么使用蜂窝移动网络

00:43:56.556 --> 00:43:58.846 A:middle
以减少 Siri 用户的延迟

00:43:58.846 --> 00:44:00.046 A:middle
同时减少出错率

00:44:01.316 --> 00:44:03.556 A:middle
通过引入多路 TCP

00:44:03.776 --> 00:44:05.136 A:middle
我们看到了很不错的结果

00:44:06.346 --> 00:44:08.656 A:middle
那么 一个真正的端对端的

00:44:08.836 --> 00:44:12.376 A:middle
多路径协议 如多路 TCP

00:44:12.376 --> 00:44:14.466 A:middle
要求客户端

00:44:14.466 --> 00:44:15.896 A:middle
和服务器都知道它

00:44:16.546 --> 00:44:18.926 A:middle
二者需要一起工作 对吧

00:44:19.236 --> 00:44:20.586 A:middle
它们需要共同决定

00:44:20.586 --> 00:44:21.776 A:middle
是通过 Wi-Fi 发送流量

00:44:21.776 --> 00:44:23.516 A:middle
还是通过蜂窝移动网络

00:44:24.566 --> 00:44:26.866 A:middle
所以我们问自己

00:44:26.866 --> 00:44:29.436 A:middle
如何在提高移动性的同时

00:44:29.436 --> 00:44:31.896 A:middle
不需要让客户端

00:44:31.896 --> 00:44:33.586 A:middle
和服务器一起工作

00:44:34.436 --> 00:44:36.306 A:middle
也不需要修改

00:44:36.356 --> 00:44:38.056 A:middle
服务器配置

00:44:39.366 --> 00:44:41.126 A:middle
答案出现在两年后的

00:44:41.126 --> 00:44:43.266 A:middle
带有 Wi-Fi Assist 的 iOS 9 中

00:44:43.796 --> 00:44:47.516 A:middle
Wi-Fi Assist 为所有的 App

00:44:47.516 --> 00:44:49.536 A:middle
和所有的流量处理移动性

00:44:49.536 --> 00:44:51.226 A:middle
与任意的服务器对话

00:44:51.226 --> 00:44:53.986 A:middle
而它所用的方法是

00:44:53.986 --> 00:44:56.216 A:middle
首先启动 Wi-Fi

00:44:56.216 --> 00:44:57.596 A:middle
当信号不好连接不上时

00:44:57.596 --> 00:44:59.326 A:middle
它会设法足够快速地

00:44:59.326 --> 00:45:00.786 A:middle
建立起连接 

00:45:01.256 --> 00:45:02.406 A:middle
我们只需要通过蜂窝移动网络

00:45:02.406 --> 00:45:06.306 A:middle
连接来建立另一个连接

00:45:06.696 --> 00:45:08.406 A:middle
从 iOS 9 开始

00:45:08.406 --> 00:45:09.666 A:middle
自从我们引入了 Wi-Fi Assist

00:45:09.666 --> 00:45:11.456 A:middle
你所有的使用

00:45:12.176 --> 00:45:13.506 A:middle
高级 API 的应用

00:45:13.506 --> 00:45:14.976 A:middle
都可以从 Wi-Fi Assist 中获益

00:45:14.976 --> 00:45:17.566 A:middle
而当用户移动时

00:45:17.606 --> 00:45:19.346 A:middle
会带来更好的体验

00:45:19.346 --> 00:45:21.916 A:middle
这适用于任何的在网上

00:45:22.246 --> 00:45:24.726 A:middle
与服务器对话的服务器

00:45:26.626 --> 00:45:28.186 A:middle
那么 Wi-Fi Assist 也许

00:45:28.186 --> 00:45:30.276 A:middle
仍会被 Wi-Fi 困住

00:45:30.276 --> 00:45:31.556 A:middle
例如 如果它设法

00:45:31.556 --> 00:45:33.286 A:middle
建立该连接

00:45:33.286 --> 00:45:34.966 A:middle
但是之后信号变弱了

00:45:35.426 --> 00:45:37.676 A:middle
那么那些流量仍然会被堵住

00:45:38.156 --> 00:45:39.416 A:middle
为了更好地处理

00:45:39.416 --> 00:45:42.016 A:middle
那些场景 我们仍然需要

00:45:42.016 --> 00:45:43.856 A:middle
真实的端对端的多路径

00:45:44.306 --> 00:45:45.836 A:middle
和我们在 Siri 中使用的方法一样

00:45:46.766 --> 00:45:48.466 A:middle
所以 有了四年的 Siri 中的

00:45:48.466 --> 00:45:52.096 A:middle
多路 TCP 的经验后

00:45:52.096 --> 00:45:54.616 A:middle
我们决定向你们每个人

00:45:54.616 --> 00:45:55.736 A:middle
开放这个 API

00:45:56.616 --> 00:45:58.776 A:middle
那么 从 iOS 11 开始 你就可以

00:45:58.776 --> 00:46:00.616 A:middle
开始使用切换或者 URLSession

00:46:00.616 --> 00:46:04.336 A:middle
或 Network.framework 中的交互方式

00:46:05.426 --> 00:46:07.076 A:middle
所以 当你能够确定

00:46:07.076 --> 00:46:07.976 A:middle
你的服务器准备好了

00:46:07.976 --> 00:46:09.946 A:middle
你就可以启动多路 TCP

00:46:09.946 --> 00:46:11.966 A:middle
然后获得与 Siri 所获相同的好处

00:46:13.456 --> 00:46:15.836 A:middle
那么 在这些版本中的每一个

00:46:16.036 --> 00:46:19.596 A:middle
包括 iOS 7 iOS 9 和 iOS 11 中

00:46:19.596 --> 00:46:22.366 A:middle
我们都集中一个指定区域来提高移动性

00:46:23.876 --> 00:46:25.736 A:middle
我们集中在多路 TCP

00:46:25.736 --> 00:46:28.416 A:middle
集中在 Siri 集中在 Wi-Fi Assist

00:46:29.356 --> 00:46:31.166 A:middle
那么现在是 iOS 13

00:46:32.326 --> 00:46:34.906 A:middle
在 iOS 13 中我们改进了

00:46:34.906 --> 00:46:36.986 A:middle
许多东西 这张幻灯片

00:46:36.986 --> 00:46:38.116 A:middle
甚至放不下它们

00:46:40.086 --> 00:46:43.436 A:middle
这就是在 iOS 13 中

00:46:43.436 --> 00:46:44.976 A:middle
移动性的改进 谢谢

00:46:45.516 --> 00:46:48.276 A:middle
[掌声]

00:46:48.776 --> 00:46:50.866 A:middle
谢谢 在 iOS 13 中

00:46:50.866 --> 00:46:52.966 A:middle
移动性的改进贯穿整个系统

00:46:53.756 --> 00:46:55.206 A:middle
包括许多不同的框架

00:46:55.316 --> 00:46:57.626 A:middle
后台程序和 App

00:46:57.626 --> 00:46:59.016 A:middle
从固件到驱动程序

00:46:59.696 --> 00:47:02.226 A:middle
所有东西的移动性都得到了改进

00:47:02.546 --> 00:47:04.256 A:middle
那么在这场的这个部分里

00:47:04.436 --> 00:47:05.836 A:middle
我要谈一谈其中的两个

00:47:05.836 --> 00:47:08.206 A:middle
即 Wi-Fi Assist

00:47:08.206 --> 00:47:09.526 A:middle
和多路径传输

00:47:10.816 --> 00:47:13.716 A:middle
那么 首先是 Wi-Fi Assist

00:47:14.636 --> 00:47:16.746 A:middle
传统上来说

00:47:16.746 --> 00:47:18.656 A:middle
Wi-Fi Assist 只是考虑到

00:47:18.656 --> 00:47:20.356 A:middle
非常有限的信息

00:47:20.356 --> 00:47:23.266 A:middle
来判断 Wi-Fi 信号是否足够好

00:47:24.376 --> 00:47:26.596 A:middle
在 iOS 13 里我们改变了这一点

00:47:27.946 --> 00:47:30.046 A:middle
我们使系统中的

00:47:30.046 --> 00:47:31.766 A:middle
所有组件都提供信息

00:47:31.766 --> 00:47:33.476 A:middle
到 Wi-Fi Assist 中去

00:47:33.476 --> 00:47:35.526 A:middle
使 Wi-Fi Assist 有一个

00:47:35.526 --> 00:47:37.396 A:middle
完整的跨层的移动性检测

00:47:38.526 --> 00:47:40.316 A:middle
较低层 Wi-Fi

00:47:40.316 --> 00:47:41.716 A:middle
和蜂窝移动网络

00:47:41.716 --> 00:47:43.656 A:middle
都提供关于信号质量的信息

00:47:43.656 --> 00:47:45.256 A:middle
以一种比 iOS 12 中

00:47:45.256 --> 00:47:47.236 A:middle
粒度更细的方式

00:47:48.306 --> 00:47:49.526 A:middle
同时 高层次的框架

00:47:49.626 --> 00:47:52.596 A:middle
比如 Network.framework 和 URLSession

00:47:53.116 --> 00:47:54.516 A:middle
及系统其他的后台程序

00:47:54.736 --> 00:47:55.596 A:middle
它们都为 Wi-Fi Assist

00:47:55.596 --> 00:47:57.166 A:middle
提供关于它们的流量

00:47:57.636 --> 00:47:59.826 A:middle
如何前进的信息

00:48:02.796 --> 00:48:04.206 A:middle
信息让他能够检测到

00:48:04.206 --> 00:48:06.136 A:middle
我们是否在一个

00:48:06.136 --> 00:48:08.076 A:middle
移动性的情景内

00:48:08.076 --> 00:48:09.526 A:middle
同时我们是否应该开始

00:48:09.526 --> 00:48:10.796 A:middle
使用蜂窝移动网络

00:48:11.776 --> 00:48:13.416 A:middle
那么有了所有这些信息

00:48:13.746 --> 00:48:15.086 A:middle
之后 Wi-Fi Assist 就会

00:48:15.086 --> 00:48:17.786 A:middle
做出它的决定

00:48:17.786 --> 00:48:19.106 A:middle
并反馈给系统

00:48:19.546 --> 00:48:21.326 A:middle
它告诉较低层 Wi-Fi 

00:48:21.326 --> 00:48:23.106 A:middle
和蜂窝移动网络

00:48:23.106 --> 00:48:24.346 A:middle
去努力提高信号质量

00:48:25.246 --> 00:48:27.046 A:middle
它还与其他层对话

00:48:27.046 --> 00:48:27.936 A:middle
如 Network.framework

00:48:28.406 --> 00:48:29.986 A:middle
和 URLSession

00:48:30.076 --> 00:48:31.406 A:middle
来开始恢复数据

00:48:31.406 --> 00:48:34.946 A:middle
所有这些都大大改善了

00:48:34.946 --> 00:48:36.306 A:middle
流量的恢复

00:48:37.796 --> 00:48:39.896 A:middle
那么即使已经在 Wi-Fi 上

00:48:39.896 --> 00:48:40.886 A:middle
建立了流量

00:48:40.886 --> 00:48:42.416 A:middle
并开始交换数据

00:48:42.416 --> 00:48:44.936 A:middle
如果之后信号质量下降

00:48:44.936 --> 00:48:47.636 A:middle
我们也能够移动

00:48:47.636 --> 00:48:49.466 A:middle
下一个会在 Wi-Fi 上

00:48:49.466 --> 00:48:50.786 A:middle
使用的请求

00:48:50.786 --> 00:48:53.396 A:middle
我们能够将该请求

00:48:53.396 --> 00:48:54.796 A:middle
移动到蜂窝移动网络

00:48:55.796 --> 00:48:57.476 A:middle
因此你的 App 现在应该

00:48:57.476 --> 00:48:59.686 A:middle
不太容易被困在 Wi-Fi 上

00:49:03.306 --> 00:49:04.976 A:middle
当然是如何从

00:49:04.976 --> 00:49:06.676 A:middle
Wi-Fi Assist 中获得好处

00:49:07.236 --> 00:49:08.366 A:middle
如何从我们在 iOS 13 中所做的

00:49:08.366 --> 00:49:10.886 A:middle
所有这些改进中获得好处呢

00:49:12.346 --> 00:49:14.756 A:middle
那么首先 你可以获得好处

00:49:14.756 --> 00:49:16.096 A:middle
通过使用高级别的 API

00:49:16.096 --> 00:49:18.356 A:middle
比如 URLSession

00:49:18.356 --> 00:49:19.306 A:middle
和 Network.framework

00:49:20.206 --> 00:49:22.276 A:middle
所有这些 API 都是在考虑

00:49:22.276 --> 00:49:23.886 A:middle
Wi-Fi Assist 的情况下构建的

00:49:24.846 --> 00:49:26.586 A:middle
它们从中得到了充分的好处

00:49:27.396 --> 00:49:28.656 A:middle
那么 你只要确保

00:49:28.656 --> 00:49:32.656 A:middle
你的 App 在使用那些 API

00:49:33.706 --> 00:49:36.966 A:middle
接下来 你们中的一些人正在用

00:49:36.966 --> 00:49:39.566 A:middle
SCNetworkReachability 之类的 API 

00:49:39.566 --> 00:49:41.896 A:middle
来进行活跃的接口管理

00:49:42.686 --> 00:49:43.996 A:middle
你也许在做启动时检查

00:49:43.996 --> 00:49:45.896 A:middle
以知道你的请求

00:49:46.016 --> 00:49:47.506 A:middle
最终会到达哪里

00:49:47.506 --> 00:49:49.476 A:middle
它会打开 Wi-Fi 还是蜂窝移动网络呢

00:49:50.606 --> 00:49:51.666 A:middle
但这些启动时检查

00:49:51.666 --> 00:49:53.766 A:middle
有一个问题就是

00:49:53.766 --> 00:49:55.906 A:middle
在你检查的时候和

00:49:55.906 --> 00:49:57.326 A:middle
你确实使用连接时

00:49:58.816 --> 00:50:00.196 A:middle
接口有可能已经改变了

00:50:00.316 --> 00:50:02.136 A:middle
Wi-Fi Assist 可能已经决定

00:50:02.136 --> 00:50:03.396 A:middle
将你的流量发送到蜂窝移动网络

00:50:03.396 --> 00:50:05.256 A:middle
或者 Wi-Fi 信号可能已经

00:50:05.346 --> 00:50:06.456 A:middle
明显地改善了

00:50:06.946 --> 00:50:08.806 A:middle
因此 启动时检查是一个

00:50:08.806 --> 00:50:10.636 A:middle
表明你的流量最终

00:50:10.636 --> 00:50:11.966 A:middle
会流向哪里非常糟糕的指标

00:50:12.506 --> 00:50:14.696 A:middle
那么 我们建议你回想一下

00:50:14.696 --> 00:50:16.166 A:middle
你所使用的启动时检查

00:50:16.166 --> 00:50:18.796 A:middle
然后在之后的答疑会中

00:50:18.796 --> 00:50:20.326 A:middle
告诉我们为什么你需要它

00:50:20.326 --> 00:50:22.286 A:middle
我们将会和你一起

00:50:22.286 --> 00:50:24.246 A:middle
找到一个替代

00:50:25.806 --> 00:50:28.656 A:middle
现在如果你仍然需要

00:50:28.756 --> 00:50:30.316 A:middle
掌控流量 比如说不使用

00:50:30.316 --> 00:50:32.216 A:middle
蜂窝移动网络

00:50:32.216 --> 00:50:34.936 A:middle
原因也许是数据传输太大

00:50:34.936 --> 00:50:36.966 A:middle
或者流量对用户体验

00:50:36.966 --> 00:50:39.146 A:middle
不是很重要

00:50:39.146 --> 00:50:40.206 A:middle
你就可以使用

00:50:40.296 --> 00:50:42.396 A:middle
allowsExpensiveNetworkAccess 之类的 Helper

00:50:42.396 --> 00:50:43.346 A:middle
并将它们设置为假

00:50:43.946 --> 00:50:46.116 A:middle
这样一来 你的请求

00:50:46.116 --> 00:50:48.546 A:middle
就不会进入蜂窝移动网络连接

00:50:50.176 --> 00:50:53.076 A:middle
那么 这是 Wi-Fi Assist

00:50:53.076 --> 00:50:54.486 A:middle
我们做了很多努力

00:50:54.486 --> 00:50:56.616 A:middle
来使它在 iOS 13 里变得更好

00:50:56.616 --> 00:50:59.066 A:middle
你还可以通过使用高级别的 API

00:50:59.066 --> 00:51:01.356 A:middle
来获得其好处

00:51:01.356 --> 00:51:02.856 A:middle
那么我要进入下一个

00:51:03.186 --> 00:51:04.696 A:middle
多路径传输

00:51:07.296 --> 00:51:10.306 A:middle
Siri 已经用它有一段时间了

00:51:10.676 --> 00:51:12.366 A:middle
我们已经在两年前

00:51:12.366 --> 00:51:15.416 A:middle
开放了这个 API

00:51:15.416 --> 00:51:18.336 A:middle
并鼓励你浏览自己的 App

00:51:18.336 --> 00:51:19.776 A:middle
查看哪个流量可能让你

00:51:19.776 --> 00:51:23.716 A:middle
从多路径 TCP 中获益最多

00:51:23.926 --> 00:51:26.326 A:middle
那么今年在 iOS 13 中

00:51:26.326 --> 00:51:27.946 A:middle
这个运行得很好

00:51:27.946 --> 00:51:31.246 A:middle
浏览我们自己的 App 

00:51:31.556 --> 00:51:33.126 A:middle
我们决定看看如何

00:51:33.126 --> 00:51:34.266 A:middle
从多路径 TCP 中获益最多

00:51:34.936 --> 00:51:36.196 A:middle
当移动设备对用户体验

00:51:36.196 --> 00:51:37.736 A:middle
非常关键

00:51:37.736 --> 00:51:39.046 A:middle
且难以恢复时

00:51:39.046 --> 00:51:40.206 A:middle
我们通常使用哪一个流量

00:51:41.256 --> 00:51:43.796 A:middle
那么一个 App 是 Apple 的《地图》

00:51:44.576 --> 00:51:46.306 A:middle
大多数用户 当他们

00:51:46.306 --> 00:51:47.666 A:middle
寻找他们的方向时

00:51:47.666 --> 00:51:48.816 A:middle
都是走出家门的时候

00:51:49.336 --> 00:51:50.526 A:middle
这时候才需要搜索

00:51:50.956 --> 00:51:53.226 A:middle
那么在 iOS 13 中 我们为

00:51:53.226 --> 00:51:54.976 A:middle
《地图》启用了 Multipath TCP

00:51:55.516 --> 00:51:59.716 A:middle
[掌声]

00:52:01.806 --> 00:52:03.576 A:middle
走出家门 使用 Apple《地图》

00:52:03.876 --> 00:52:05.846 A:middle
来查找方向

00:52:05.916 --> 00:52:07.346 A:middle
并尝试搜索餐馆

00:52:08.266 --> 00:52:10.016 A:middle
你都会使用 MP TCP

00:52:10.016 --> 00:52:11.616 A:middle
你的流量将会从 Wi-Fi 移动到蜂窝移动网络

00:52:12.456 --> 00:52:14.666 A:middle
从周一开始 从第一个

00:52:14.666 --> 00:52:15.836 A:middle
测试版开始 我们就一直

00:52:15.836 --> 00:52:17.846 A:middle
在启用它 我们将看到

00:52:17.846 --> 00:52:20.286 A:middle
Apple《地图》的响应能力将大大提高

00:52:22.086 --> 00:52:24.386 A:middle
在接下来这个 App 中我们有一个

00:52:24.386 --> 00:52:26.666 A:middle
非常关键的用户体验

00:52:27.326 --> 00:52:29.236 A:middle
这也是经常使用的

00:52:29.236 --> 00:52:30.916 A:middle
当你走出家门

00:52:30.916 --> 00:52:31.856 A:middle
你会播放音乐 对吗

00:52:32.416 --> 00:52:33.616 A:middle
当你播放音乐时

00:52:33.616 --> 00:52:34.796 A:middle
你就是在下载一个

00:52:34.796 --> 00:52:38.006 A:middle
充满音乐内容的大文件

00:52:38.326 --> 00:52:40.696 A:middle
你不想让这个音乐暂停

00:52:41.116 --> 00:52:42.286 A:middle
因为当它暂停时

00:52:42.286 --> 00:52:43.646 A:middle
用户会收到打扰

00:52:44.616 --> 00:52:46.836 A:middle
所以在 iOS 13 中我们

00:52:46.836 --> 00:52:48.716 A:middle
为 Apple Music 启用了多路径 TCP

00:52:49.516 --> 00:52:53.866 A:middle
[掌声]

00:52:54.366 --> 00:52:56.026 A:middle
我们看到音乐播放的暂停

00:52:56.026 --> 00:52:58.616 A:middle
越来越少 因为多路径 TCP 现在正在

00:52:58.616 --> 00:53:00.596 A:middle
将流量移到蜂窝移动网络

00:53:00.846 --> 00:53:02.806 A:middle
当我们接近暂停时

00:53:03.616 --> 00:53:05.466 A:middle
所以用户就会有

00:53:05.466 --> 00:53:06.666 A:middle
一个更好的体验

00:53:07.266 --> 00:53:09.916 A:middle
现在 关于这一点

00:53:09.916 --> 00:53:11.816 A:middle
我们已经在 Siri 地图

00:53:11.876 --> 00:53:14.316 A:middle
和音乐中启用了它

00:53:14.316 --> 00:53:14.576 A:middle
你也可以这么做

00:53:15.646 --> 00:53:17.536 A:middle
我们推荐你

00:53:17.536 --> 00:53:19.146 A:middle
看看你自己的 App

00:53:19.286 --> 00:53:20.566 A:middle
看看出门的时候

00:53:20.566 --> 00:53:21.646 A:middle
经常使用的是哪个流量

00:53:22.516 --> 00:53:24.746 A:middle
哪一个有很重要的流量

00:53:24.746 --> 00:53:26.266 A:middle
对用户体验至关重要

00:53:26.266 --> 00:53:28.256 A:middle
并且很难恢复呢

00:53:29.146 --> 00:53:30.376 A:middle
这些流量的种类

00:53:30.376 --> 00:53:31.676 A:middle
他们都很适合

00:53:31.676 --> 00:53:33.316 A:middle
多路径服务类型

00:53:33.316 --> 00:53:35.056 A:middle
你可以切换选择他们

00:53:35.516 --> 00:53:36.736 A:middle
或者在 URLSession 

00:53:36.736 --> 00:53:37.516 A:middle
和 Network.framework 中进行交互

00:53:38.696 --> 00:53:42.596 A:middle
那么不要忘记 如果你真的进入多路径

00:53:42.596 --> 00:53:44.446 A:middle
它仍然需要客户端

00:53:44.446 --> 00:53:47.046 A:middle
和服务器一起工作

00:53:47.046 --> 00:53:49.076 A:middle
所以去看看这个 URL

00:53:49.076 --> 00:53:50.776 A:middle
确定正确配置了你的服务器

00:53:52.796 --> 00:53:56.566 A:middle
那么移动性的部分

00:53:56.626 --> 00:53:58.466 A:middle
到这里就结束了

00:53:59.976 --> 00:54:01.146 A:middle
如果我们想要你记住一件事

00:54:01.146 --> 00:54:02.866 A:middle
那就是无论何时

00:54:03.626 --> 00:54:05.886 A:middle
一个用户走出他的家门

00:54:05.886 --> 00:54:07.586 A:middle
他都不应该有一个

00:54:07.676 --> 00:54:09.846 A:middle
不好的体验 导致他关掉 Wi-Fi

00:54:10.786 --> 00:54:13.416 A:middle
那么 当你开发你的 App 时

00:54:13.416 --> 00:54:14.666 A:middle
当你在测试它们的时候

00:54:14.666 --> 00:54:16.716 A:middle
当你在配置一个

00:54:16.716 --> 00:54:19.336 A:middle
糟糕的 Wi-Fi 网络的时候

00:54:19.336 --> 00:54:20.316 A:middle
当你走出家门去测试它的时候

00:54:20.316 --> 00:54:22.266 A:middle
不要期望你的 App

00:54:22.266 --> 00:54:23.416 A:middle
会变得很慢 甚至失灵

00:54:23.416 --> 00:54:25.556 A:middle
或者你的流量

00:54:25.556 --> 00:54:29.156 A:middle
会基本上永远持续下去

00:54:29.916 --> 00:54:31.476 A:middle
原则上它应该就是正常运行

00:54:31.956 --> 00:54:33.996 A:middle
如果不能运行 就要确保

00:54:33.996 --> 00:54:35.106 A:middle
那些失效的流量

00:54:35.106 --> 00:54:37.736 A:middle
正在使用高层次的 API

00:54:38.026 --> 00:54:39.356 A:middle
这些 API 充分地

00:54:39.356 --> 00:54:41.356 A:middle
受益于 Wi-Fi Assist 

00:54:41.356 --> 00:54:42.856 A:middle
受益于 iOS 13 中我们做的

00:54:42.856 --> 00:54:43.806 A:middle
所有改进

00:54:44.376 --> 00:54:46.576 A:middle
如果你正在进行活跃的

00:54:46.606 --> 00:54:48.826 A:middle
接口管理 请来答疑会告诉我们

00:54:48.826 --> 00:54:50.726 A:middle
或者发送给我们一个

00:54:50.726 --> 00:54:51.726 A:middle
Apple Bug 报告

00:54:52.296 --> 00:54:53.846 A:middle
告诉我们你的使用案例

00:54:53.846 --> 00:54:55.086 A:middle
我们将会和你一起

00:54:55.086 --> 00:54:57.056 A:middle
找到一个替代

00:54:57.516 --> 00:55:00.226 A:middle
这样你就可以避免进行

00:55:00.226 --> 00:55:01.736 A:middle
这种活跃的接口管理

00:55:01.736 --> 00:55:03.666 A:middle
并充分获益于 Wi-Fi Assist

00:55:04.206 --> 00:55:07.026 A:middle
最后 如果你有流量

00:55:07.026 --> 00:55:08.146 A:middle
仍然堵在 Wi-Fi 上

00:55:08.146 --> 00:55:09.826 A:middle
并且很难恢复

00:55:09.826 --> 00:55:12.756 A:middle
试着看看你能否开始

00:55:12.756 --> 00:55:14.266 A:middle
使用一个多路径服务类型

00:55:14.266 --> 00:55:16.006 A:middle
准备好服务器

00:55:16.006 --> 00:55:17.956 A:middle
然后获得和 Apple Music 和《地图》

00:55:17.956 --> 00:55:20.056 A:middle
以及 Siri 一样的益处

00:55:20.556 --> 00:55:23.186 A:middle
那么 这就是本场的这一部分

00:55:24.126 --> 00:55:25.336 A:middle
我们看过了用低数据模式

00:55:25.336 --> 00:55:28.196 A:middle
用户现在可以打开

00:55:28.196 --> 00:55:29.816 A:middle
标记了的网络 这样就能

00:55:29.816 --> 00:55:32.206 A:middle
减少那些网络上的数据使用

00:55:32.696 --> 00:55:34.906 A:middle
我们展示了一个新的 API

00:55:34.906 --> 00:55:37.726 A:middle
你们的 App 也可以从中获益

00:55:38.276 --> 00:55:41.246 A:middle
如果你在构建一个发布器

00:55:41.246 --> 00:55:43.036 A:middle
订阅器风格的 App

00:55:43.766 --> 00:55:45.496 A:middle
在 URLSession 中使用 Combine

00:55:45.496 --> 00:55:47.136 A:middle
你就能够创建一个很好的 App

00:55:47.746 --> 00:55:49.936 A:middle
就像 Guoyue 今天向你们展示的那样

00:55:50.676 --> 00:55:52.706 A:middle
最后是 WebSockets

00:55:53.106 --> 00:55:54.366 A:middle
最受欢迎的功能就是

00:55:54.406 --> 00:55:57.026 A:middle
将它引入了 iOS 13 中

00:55:57.596 --> 00:55:59.396 A:middle
这样你可以很容易地

00:55:59.396 --> 00:56:01.876 A:middle
在你的 App 中建立双向通信

00:56:02.436 --> 00:56:05.996 A:middle
在 iOS 13 中我们对 App 的

00:56:05.996 --> 00:56:08.486 A:middle
移动性进行了大量的改进

00:56:08.636 --> 00:56:11.306 A:middle
这样你就可以获得

00:56:11.306 --> 00:56:14.746 A:middle
与使用高级的 API 一样的益处

00:56:15.816 --> 00:56:18.796 A:middle
那么 今天下午晚些时候

00:56:18.796 --> 00:56:20.446 A:middle
我们将会进行网络 

00:56:20.446 --> 00:56:21.346 A:middle
专场的第二部分

00:56:21.836 --> 00:56:23.216 A:middle
我们会看到更令人兴奋的

00:56:23.216 --> 00:56:26.016 A:middle
给你的 App 带来益处的新的 API

00:56:26.836 --> 00:56:28.216 A:middle
明天 对于那些

00:56:28.216 --> 00:56:30.496 A:middle
正在 macOS 上开发的人

00:56:30.906 --> 00:56:32.466 A:middle
网络扩展上我们有新的 API

00:56:32.466 --> 00:56:35.046 A:middle
我们也在早上 9 点有答疑会

00:56:35.046 --> 00:56:36.636 A:middle
明天早上 9 点开始

00:56:36.636 --> 00:56:38.016 A:middle
你可以届时前来

00:56:38.016 --> 00:56:39.626 A:middle
向我们提出问题

00:56:40.086 --> 00:56:41.586 A:middle
我们很高兴能够

00:56:41.586 --> 00:56:44.006 A:middle
帮你解决问题

00:56:44.286 --> 00:56:45.676 A:middle
那么 就到这里吧

00:56:45.776 --> 00:56:50.516 A:middle
希望你们喜欢今天的内容 谢谢大家

00:56:51.508 --> 00:56:53.508 A:middle
[掌声]

