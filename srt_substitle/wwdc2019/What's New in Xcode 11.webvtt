WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:01.516 --> 00:00:05.516 A:middle
[音乐]

00:00:06.296 --> 00:00:08.296 A:middle
[掌声]

00:00:08.576 --> 00:00:09.146 A:middle
&gt;&gt; 早上好

00:00:14.046 --> 00:00:18.106 A:middle
Xcode 有很多新功能和改进

00:00:19.026 --> 00:00:20.896 A:middle
这些工具所做的一切是为了

00:00:20.896 --> 00:00:22.016 A:middle
协助你进行

00:00:22.016 --> 00:00:26.156 A:middle
产品构思 产品开发和优质产品交付

00:00:26.766 --> 00:00:29.796 A:middle
我们希望这些工具能让你更有效率

00:00:29.796 --> 00:00:31.576 A:middle
因而你能花更多的时间去设想和

00:00:31.576 --> 00:00:32.986 A:middle
实现下一个伟大的事情

00:00:33.786 --> 00:00:37.066 A:middle
所以今年我们将重点放在

00:00:37.066 --> 00:00:41.016 A:middle
提高你使用这些工具的效率和速度上

00:00:41.116 --> 00:00:42.536 A:middle
我们重新考虑了这些工具的基本工作流

00:00:44.346 --> 00:00:44.846 A:middle
让我们来看看

00:00:45.306 --> 00:00:49.816 A:middle
我们首先简要回顾一下 Xcode 10

00:00:50.666 --> 00:00:52.126 A:middle
现在在 Xcode 10 中

00:00:52.126 --> 00:00:54.366 A:middle
有三种主要的编辑器模式

00:00:54.566 --> 00:00:56.496 A:middle
标准模式 助手模式和版本模式

00:00:56.496 --> 00:00:57.686 A:middle
它们位于工具栏的上方

00:00:57.896 --> 00:01:00.256 A:middle
因为它们适用于整个窗口的内容

00:01:00.816 --> 00:01:03.216 A:middle
对于目前的版本编辑器

00:01:03.216 --> 00:01:04.446 A:middle
它有自己的三种模式

00:01:04.736 --> 00:01:06.876 A:middle
比较模式 作者模式和日志模式

00:01:07.476 --> 00:01:10.396 A:middle
你有很多可供使用的功能

00:01:10.756 --> 00:01:13.526 A:middle
你只需要选择你最感兴趣的功能

00:01:14.156 --> 00:01:17.526 A:middle
有很多反馈说希望增加灵活性

00:01:18.036 --> 00:01:20.636 A:middle
所以我们做了一些改进

00:01:22.086 --> 00:01:25.966 A:middle
首先我们把源代码管理日志信息

00:01:25.966 --> 00:01:27.346 A:middle
移动至检查器中

00:01:27.706 --> 00:01:30.776 A:middle
现在它可以随时用于任何文件

00:01:30.876 --> 00:01:32.526 A:middle
因此你可以在需要时将源代码管理日志信息打开

00:01:32.526 --> 00:01:36.046 A:middle
而不会打乱主编辑器区域的内容

00:01:36.606 --> 00:01:39.306 A:middle
接下来 我们想让你

00:01:39.346 --> 00:01:41.346 A:middle
独立地更改每个编辑器窗格模式

00:01:41.346 --> 00:01:45.406 A:middle
因为我们知道不同的文件类型

00:01:45.406 --> 00:01:47.006 A:middle
譬如源代码和故事板

00:01:47.436 --> 00:01:48.836 A:middle
具有非常不同的工作流

00:01:49.886 --> 00:01:53.886 A:middle
因此 我们将助手和作者从主工具栏

00:01:54.516 --> 00:01:56.286 A:middle
移到每个编辑器窗格中

00:01:56.866 --> 00:01:59.226 A:middle
现在你可以为每个编辑器选择正确的模式

00:01:59.766 --> 00:02:03.566 A:middle
如今很多人使用助手来拆分

00:02:03.566 --> 00:02:05.836 A:middle
Xcode 窗口中的多个编辑器

00:02:06.646 --> 00:02:08.656 A:middle
在 Xcode 11 中

00:02:08.656 --> 00:02:11.196 A:middle
你可以随时随地创建拆分

00:02:12.306 --> 00:02:17.916 A:middle
你可以在同一个窗口内进行水平和垂直拆分

00:02:18.466 --> 00:02:22.406 A:middle
今年增加了很多灵活性

00:02:22.406 --> 00:02:23.916 A:middle
这确实比以往任何时候都更容易按照你

00:02:23.916 --> 00:02:25.946 A:middle
想要的方式工作

00:02:26.486 --> 00:02:30.846 A:middle
没有比演示更好的方法了

00:02:30.846 --> 00:02:33.146 A:middle
Brendan 现在将为你展示

00:02:34.516 --> 00:02:38.366 A:middle
[掌声]

00:02:38.866 --> 00:02:39.406 A:middle
&gt;&gt; 谢谢 Ken

00:02:42.206 --> 00:02:45.796 A:middle
今年我们对 Xcode 进行了一些改进

00:02:45.796 --> 00:02:47.246 A:middle
以便你可以更好地控制工作空间

00:02:48.516 --> 00:02:54.036 A:middle
最明显的变化之一是编辑器拆分和助手

00:02:54.796 --> 00:02:57.276 A:middle
现在让我从助手

00:02:57.576 --> 00:03:00.876 A:middle
及其新的配套模式 SwiftUI 画布开始

00:03:01.246 --> 00:03:03.296 A:middle
每个编辑器右上角都有一个选项菜单

00:03:04.346 --> 00:03:07.636 A:middle
这是你控制编辑器行为的地方

00:03:07.636 --> 00:03:09.366 A:middle
我将这个设置为 Editor in Canvas

00:03:09.366 --> 00:03:11.556 A:middle
这意味着

00:03:11.586 --> 00:03:13.686 A:middle
如果存在 SwiftUI 预览

00:03:13.686 --> 00:03:16.016 A:middle
Xcode 将显示它

00:03:16.066 --> 00:03:17.366 A:middle
在这种情况下是没有预览的

00:03:17.616 --> 00:03:18.876 A:middle
所以没什么可看的

00:03:19.646 --> 00:03:22.956 A:middle
但是如果我切换到一个有预览的文件

00:03:22.956 --> 00:03:24.496 A:middle
画布就会出现

00:03:24.686 --> 00:03:25.616 A:middle
Xcode 也会呈现我的 UI 预览

00:03:26.266 --> 00:03:28.816 A:middle
现在助手以同样的方式工作

00:03:29.686 --> 00:03:32.186 A:middle
如果我使用选项菜单切换到助手

00:03:32.216 --> 00:03:38.406 A:middle
Xcode 将显示该文件的生成界面

00:03:38.596 --> 00:03:42.216 A:middle
但如果我切换到一个没有助手的文件

00:03:42.216 --> 00:03:44.156 A:middle
比如这个项目 它就会消失

00:03:45.236 --> 00:03:46.376 A:middle
既不浪费空间

00:03:46.376 --> 00:03:50.256 A:middle
也不需要在切换文件时手动切换模式

00:03:50.896 --> 00:03:52.936 A:middle
好的

00:03:53.126 --> 00:03:55.176 A:middle
当然 当我切换回源文件时

00:03:55.416 --> 00:03:57.776 A:middle
它会记住我所处的状态

00:03:57.776 --> 00:03:58.666 A:middle
助手就会回来

00:03:59.856 --> 00:04:04.086 A:middle
所以这是关于助手和 SwiftUI 的情况

00:04:04.086 --> 00:04:05.056 A:middle
接下来我们来聊聊编辑器拆分

00:04:05.326 --> 00:04:08.386 A:middle
首先 它不再需要助手

00:04:08.386 --> 00:04:10.986 A:middle
因此我们暂时先不谈它

00:04:11.206 --> 00:04:13.146 A:middle
我可以通过几种不同的方式来拆分这个窗口

00:04:13.146 --> 00:04:16.505 A:middle
我将从添加编辑器按钮开始

00:04:16.505 --> 00:04:17.826 A:middle
这个按钮在这个角落里

00:04:17.826 --> 00:04:18.565 A:middle
在选项菜单的旁边

00:04:19.375 --> 00:04:21.745 A:middle
当我单击它时 会有两个独立的编辑器

00:04:22.166 --> 00:04:24.266 A:middle
这些编辑器有自己本身的状态

00:04:24.326 --> 00:04:29.486 A:middle
因此如果我愿意的话

00:04:26.046 --> 00:04:27.306 A:middle
我可以为每个编辑器单独打开代码覆盖

00:04:27.306 --> 00:04:29.486 A:middle
或者作者等模式

00:04:30.566 --> 00:04:32.176 A:middle
新编辑器处于活动状态

00:04:32.866 --> 00:04:34.446 A:middle
如果要将另一个文件加载到其中

00:04:34.886 --> 00:04:36.826 A:middle
我所要做的就是单击该文件

00:04:36.826 --> 00:04:37.566 A:middle
好的

00:04:39.396 --> 00:04:41.346 A:middle
所以我现在有两个编辑器

00:04:41.346 --> 00:04:42.826 A:middle
两个文件

00:04:42.826 --> 00:04:43.116 A:middle
让我们添加第三个

00:04:43.116 --> 00:04:45.626 A:middle
我要拆分左侧的编辑器

00:04:45.626 --> 00:04:47.196 A:middle
因此我将使用左侧编辑器中的

00:04:47.196 --> 00:04:49.036 A:middle
添加编辑器按钮

00:04:49.036 --> 00:04:50.516 A:middle
我将按住 option 键

00:04:50.516 --> 00:04:53.886 A:middle
以便可以将其反方向拆分

00:04:54.336 --> 00:04:56.326 A:middle
图标旋转以显示将要发生的事情

00:04:57.616 --> 00:04:58.506 A:middle
在底部我有一个编辑器

00:04:58.506 --> 00:04:59.966 A:middle
并且它是活跃的

00:05:04.596 --> 00:05:05.356 A:middle
我已经加载了该文件

00:05:06.816 --> 00:05:08.726 A:middle
有时候我想用另一种方法来进行操作

00:05:08.726 --> 00:05:10.076 A:middle
有时候我想点击一个文件

00:05:10.076 --> 00:05:11.716 A:middle
并告诉 Xcode 把它放在哪里

00:05:12.466 --> 00:05:14.226 A:middle
为此我要使用目标选择器

00:05:14.716 --> 00:05:16.006 A:middle
我只需按住 option 按钮和 shift 按钮

00:05:16.896 --> 00:05:18.016 A:middle
单击我想要的文件

00:05:18.016 --> 00:05:19.666 A:middle
然后目标选择器会出现

00:05:20.386 --> 00:05:22.476 A:middle
现在我可以点击返回

00:05:22.476 --> 00:05:23.606 A:middle
并在活动的编辑器中打开它

00:05:24.596 --> 00:05:26.506 A:middle
或者我可以用箭头键或者鼠标

00:05:26.506 --> 00:05:29.366 A:middle
插入一个新编辑器

00:05:29.366 --> 00:05:31.506 A:middle
在这个编辑器中打开它

00:05:31.636 --> 00:05:33.476 A:middle
在那里再放一个编辑器

00:05:33.476 --> 00:05:34.066 A:middle
随便我想怎么操作都可以

00:05:34.066 --> 00:05:37.156 A:middle
我也可以使用标准键盘快捷指令来进行操作

00:05:37.156 --> 00:05:39.576 A:middle
比如说切换标签 把它放到这里

00:05:39.576 --> 00:05:41.476 A:middle
或者切换窗口

00:05:42.236 --> 00:05:43.216 A:middle
把它放到这里

00:05:44.216 --> 00:05:46.186 A:middle
这里有很多灵活性和自主功能

00:05:46.816 --> 00:05:49.666 A:middle
所以我打算把这个放在 Globe Scene 的下面

00:05:50.146 --> 00:05:50.946 A:middle
只需按回车即可

00:05:52.266 --> 00:05:53.706 A:middle
现在我有一组想要使用的文件

00:05:53.706 --> 00:05:55.186 A:middle
一个我喜欢的布局

00:05:55.186 --> 00:05:57.056 A:middle
一切都已经设置好

00:05:57.496 --> 00:06:01.106 A:middle
但是如果我想暂时只关注其中一个文件

00:06:01.106 --> 00:06:03.086 A:middle
这种情况下应该怎么办呢

00:06:03.836 --> 00:06:05.226 A:middle
这就是新焦点模式的用途

00:06:05.226 --> 00:06:08.096 A:middle
每个编辑器在关闭按钮旁边的角落

00:06:08.096 --> 00:06:09.936 A:middle
都有一个按钮

00:06:09.936 --> 00:06:12.446 A:middle
如果我点击它

00:06:12.446 --> 00:06:15.126 A:middle
我可以放大这个编辑器来接管整个窗口

00:06:15.126 --> 00:06:17.036 A:middle
现在让我用它来放大

00:06:17.036 --> 00:06:18.846 A:middle
并讨论源代码编辑器中的新功能

00:06:19.446 --> 00:06:24.006 A:middle
源代码编辑器中我最喜欢的新功能之一

00:06:24.006 --> 00:06:27.716 A:middle
当然就是选项菜单中的小地图

00:06:24.006 --> 00:06:27.716 A:middle
现在我打开小地图

00:06:30.336 --> 00:06:31.766 A:middle
把它放大一点

00:06:31.766 --> 00:06:32.736 A:middle
这样你们就能看清楚

00:06:33.706 --> 00:06:37.846 A:middle
小地图是你代码的鸟瞰图

00:06:37.846 --> 00:06:39.186 A:middle
它显示代码的轮廓

00:06:39.186 --> 00:06:40.876 A:middle
并且显示语法高亮

00:06:41.926 --> 00:06:44.036 A:middle
它是用来导航的

00:06:44.106 --> 00:06:46.496 A:middle
小地图会告诉你所在的位置

00:06:46.496 --> 00:06:47.376 A:middle
当你在不同的部分上悬停时

00:06:47.376 --> 00:06:49.356 A:middle
它会告诉你它是什么

00:06:49.356 --> 00:06:50.966 A:middle
所以你知道你要去哪里

00:06:51.946 --> 00:06:54.666 A:middle
它还显示了一些重要的标记

00:06:54.666 --> 00:06:56.106 A:middle
比如文件中哪些地方有变化

00:06:56.106 --> 00:06:58.616 A:middle
或者断点在哪里

00:06:58.616 --> 00:07:00.566 A:middle
下面这里看到的标记

00:07:00.566 --> 00:07:02.676 A:middle
是我用来组织代码的

00:07:02.676 --> 00:07:04.436 A:middle
如果我点击其中一个

00:07:04.436 --> 00:07:06.746 A:middle
你可以看到我们在小地图中渲染了这些标记

00:07:06.746 --> 00:07:07.996 A:middle
源编辑器也是一样的

00:07:08.266 --> 00:07:12.166 A:middle
包括分隔线来帮助你在滚动时锚定

00:07:12.936 --> 00:07:15.646 A:middle
小地图还显示瞬态信息

00:07:15.896 --> 00:07:17.986 A:middle
所以如果我找到了

00:07:20.356 --> 00:07:25.096 A:middle
例如小地图显示了我文件中的所有匹配项

00:07:25.166 --> 00:07:26.326 A:middle
它会隐去一些其他的信息

00:07:26.326 --> 00:07:27.606 A:middle
这样就能突出显示

00:07:27.606 --> 00:07:28.986 A:middle
你就能准确地看到你在哪里

00:07:29.696 --> 00:07:31.696 A:middle
以及你当前匹配项的上下文

00:07:35.186 --> 00:07:36.376 A:middle
好吧 这就是小地图

00:07:37.076 --> 00:07:38.426 A:middle
在源代码方面

00:07:38.906 --> 00:07:39.996 A:middle
我们做了一些改进

00:07:40.056 --> 00:07:42.236 A:middle
比如新的语法高亮选项

00:07:42.776 --> 00:07:45.326 A:middle
像你在这里看到的这些定义

00:07:45.326 --> 00:07:47.776 A:middle
我们添加了新主题

00:07:47.776 --> 00:07:50.796 A:middle
包括浅色和深色的高对比度主题

00:07:54.716 --> 00:07:57.366 A:middle
我们还提供了文档

00:07:57.366 --> 00:07:58.566 A:middle
极大地提高了可读性

00:07:59.686 --> 00:08:00.936 A:middle
我们重新设计了它的样式

00:08:00.936 --> 00:08:02.396 A:middle
使它读起来更像文档

00:08:02.936 --> 00:08:06.846 A:middle
Xcode 现在能更准确地解析文档结构

00:08:06.846 --> 00:08:08.966 A:middle
从而使它更容易维护

00:08:09.446 --> 00:08:10.516 A:middle
让我举一个例子

00:08:10.516 --> 00:08:13.656 A:middle
我这里有一个完全记录的函数

00:08:14.436 --> 00:08:18.446 A:middle
但是如果我为此添加一个新参数

00:08:18.446 --> 00:08:20.106 A:middle
我将把它作为双精度值

00:08:20.576 --> 00:08:23.626 A:middle
我赋予它一个值

00:08:23.626 --> 00:08:25.286 A:middle
然后下面用参数

00:08:25.286 --> 00:08:26.856 A:middle
这样就不会有问题了

00:08:27.696 --> 00:08:30.366 A:middle
现在我可以使用弹出式操作

00:08:30.366 --> 00:08:34.196 A:middle
以及添加文档来填充代码中的空白

00:08:34.785 --> 00:08:38.126 A:middle
最重要的是

00:08:38.596 --> 00:08:39.785 A:middle
它还可以与多个游标一起工作

00:08:39.785 --> 00:08:40.966 A:middle
所以如果你有一堆空白需要填充

00:08:40.966 --> 00:08:41.496 A:middle
那么就非常容易了

00:08:41.525 --> 00:08:46.606 A:middle
好的 我得到了我的文档

00:08:47.036 --> 00:08:48.656 A:middle
现在让我们假设

00:08:48.656 --> 00:08:51.866 A:middle
你的受众非常广泛

00:08:51.866 --> 00:08:53.986 A:middle
你刚刚在你的代码中犯了一个错误

00:08:54.086 --> 00:08:55.746 A:middle
然后你使用代码补全

00:08:55.746 --> 00:08:59.826 A:middle
以及添加文档传播了这个错误

00:09:03.986 --> 00:09:06.136 A:middle
现在可以非常快速地清理你的错误

00:09:06.136 --> 00:09:08.046 A:middle
你的签名

00:09:08.046 --> 00:09:09.596 A:middle
你的代码

00:09:09.596 --> 00:09:12.466 A:middle
现在甚至文档都可以一次性修复

00:09:13.516 --> 00:09:17.376 A:middle
[掌声]

00:09:17.876 --> 00:09:20.946 A:middle
好的 关于源代码编辑器

00:09:20.946 --> 00:09:23.026 A:middle
我想向你展示并且最让我兴奋的最后一点

00:09:23.026 --> 00:09:24.236 A:middle
是变更指示符的增强功能

00:09:24.796 --> 00:09:26.036 A:middle
在我文件的底部

00:09:26.036 --> 00:09:27.786 A:middle
有一个我之前做的改动

00:09:28.426 --> 00:09:29.646 A:middle
变更指示符总是会显示一个提示

00:09:29.646 --> 00:09:33.536 A:middle
提醒你前面所做的更改

00:09:33.636 --> 00:09:35.256 A:middle
提醒你文件中的哪些行已经更改

00:09:35.666 --> 00:09:36.746 A:middle
如果你将鼠标悬停在变更指示符上

00:09:35.666 --> 00:09:36.746 A:middle
它将显示这些更改在这行中的什么位置

00:09:39.476 --> 00:09:43.826 A:middle
但现在你可以单击变更指示符

00:09:44.106 --> 00:09:45.756 A:middle
然后会出现一个新的显示更改命令

00:09:45.756 --> 00:09:47.436 A:middle
该命令会在你的文件中显示行内差异

00:09:47.976 --> 00:09:49.216 A:middle
如果你再次将鼠标悬停在指示符上

00:09:49.216 --> 00:09:50.246 A:middle
则可以确切地看到

00:09:50.246 --> 00:09:51.996 A:middle
它从更改后的内容发生了变化

00:09:52.536 --> 00:09:53.836 A:middle
并且它处于实时状态

00:09:53.876 --> 00:09:55.236 A:middle
因此你所做的任何更新

00:09:55.236 --> 00:09:57.656 A:middle
都会立即反映在差异中

00:09:57.886 --> 00:09:58.806 A:middle
所以这就是我想要在第一个编辑器中

00:09:58.806 --> 00:10:00.056 A:middle
显示的所有内容

00:10:00.056 --> 00:10:02.706 A:middle
让我再次回到大局

00:10:02.706 --> 00:10:03.996 A:middle
我只需再次单击 Focus 按钮

00:10:05.046 --> 00:10:06.776 A:middle
我的布局回到了原来的位置

00:10:07.726 --> 00:10:09.206 A:middle
在我结束之前的最后一件事

00:10:09.206 --> 00:10:11.836 A:middle
我想在这里对我的更改

00:10:11.836 --> 00:10:13.486 A:middle
进行快速的代码浏览

00:10:13.866 --> 00:10:16.066 A:middle
我要点击 Code Review 按钮

00:10:16.066 --> 00:10:18.696 A:middle
它会把活动的编辑器放大到全屏

00:10:18.696 --> 00:10:19.996 A:middle
这样我就能专注于手头的任务

00:10:19.996 --> 00:10:22.006 A:middle
就像焦点模式一样

00:10:22.476 --> 00:10:24.736 A:middle
当我完成后 再次点击

00:10:24.736 --> 00:10:25.516 A:middle
我的布局又回来了

00:10:26.336 --> 00:10:28.966 A:middle
这就是快速浏览

00:10:29.106 --> 00:10:31.546 A:middle
Xcode 11 中的工作流更改

00:10:32.116 --> 00:10:32.826 A:middle
回到 Ken 这

00:10:33.516 --> 00:10:38.776 A:middle
[掌声]

00:10:39.276 --> 00:10:39.756 A:middle
&gt;&gt; 谢谢 Brendan

00:10:40.546 --> 00:10:42.286 A:middle
顺便说一下 我喜欢那个新的小地图

00:10:42.286 --> 00:10:44.666 A:middle
今年还有很多其他很出色的

00:10:44.666 --> 00:10:46.196 A:middle
源代码编辑器特性

00:10:46.866 --> 00:10:48.686 A:middle
比如拼写检查

00:10:48.686 --> 00:10:51.196 A:middle
嵌套代码折叠和行内差异等等

00:10:51.676 --> 00:10:54.646 A:middle
但是我们在过去一年中特别关注的

00:10:55.136 --> 00:10:56.676 A:middle
一个领域是代码补全

00:10:56.676 --> 00:10:58.666 A:middle
以及在更多地方为你提供更好的结果

00:11:05.256 --> 00:11:07.336 A:middle
它能够实现前所未有的可靠操作

00:11:07.336 --> 00:11:11.026 A:middle
并且能在更多方面实现操作

00:11:11.096 --> 00:11:13.636 A:middle
比如当你进行数组和枚举的待处理时
[掌声]

00:11:14.216 --> 00:11:14.936 A:middle
好的 [掌声]

00:11:17.836 --> 00:11:20.996 A:middle
现在有了函数重载的代码补全

00:11:20.996 --> 00:11:23.056 A:middle
这些只是我们在 Xcode 11 中改进的

00:11:23.056 --> 00:11:26.156 A:middle
众多补全中的一部分

00:11:27.476 --> 00:11:30.546 A:middle
现在让我们看看源代码编辑器和工作流

00:11:31.126 --> 00:11:37.266 A:middle
今年对 Swift 包管理器来说是一个大年 

00:11:38.196 --> 00:11:41.366 A:middle
自从我们推出了大量可用的包以来

00:11:41.366 --> 00:11:44.046 A:middle
Swift 包管理器一直在蓬勃发展

00:11:44.046 --> 00:11:45.546 A:middle
所有这些包都可以让你

00:11:45.546 --> 00:11:47.536 A:middle
在社区的成果的基础上工作

00:11:48.536 --> 00:11:51.496 A:middle
这些包是分解你自己代码的好方法

00:11:51.496 --> 00:11:53.656 A:middle
可以将其分解为更小并且更可测试的部分

00:11:54.956 --> 00:11:58.866 A:middle
今年我们已经完全整合了 Swift 包管理器和 Xcode

00:11:59.266 --> 00:12:02.976 A:middle
你可以使用包为所有平台构建 App

00:12:03.516 --> 00:12:10.686 A:middle
[掌声]

00:12:11.186 --> 00:12:15.016 A:middle
包在整个 Xcode 中获得一流的集成

00:12:15.546 --> 00:12:19.376 A:middle
从源代码控制集成到调试再到测试

00:12:19.846 --> 00:12:23.286 A:middle
直到你通过包所做的所有事情

00:12:23.286 --> 00:12:24.786 A:middle
它的工作原理和你以前做项目时一样

00:12:25.486 --> 00:12:29.076 A:middle
Xcode 使发现和使用包变得很容易

00:12:29.076 --> 00:12:32.586 A:middle
创建包和与世界共享也一样容易

00:12:33.176 --> 00:12:38.036 A:middle
与多个服务的集成整合意味着

00:12:38.036 --> 00:12:40.356 A:middle
你只需单击几下鼠标就可以完成

00:12:40.356 --> 00:12:42.016 A:middle
一些非常棒的代码

00:12:42.846 --> 00:12:45.646 A:middle
我们真心认为你会喜欢使用 Swift 包

00:12:46.696 --> 00:12:47.726 A:middle
Patrick 将在这里向你展示

00:12:47.726 --> 00:12:50.466 A:middle
如何开始使用 Xcode 中的 Swift 包

00:12:51.516 --> 00:12:57.126 A:middle
[掌声]

00:12:57.626 --> 00:12:58.796 A:middle
&gt;&gt; 谢谢 Ken

00:12:59.166 --> 00:13:00.366 A:middle
今天我非常激动地

00:13:00.366 --> 00:13:02.576 A:middle
向大家展示 Xcode 11 中的所有 Swift 包

00:13:02.826 --> 00:13:05.776 A:middle
我将开发我们的旅行 App

00:13:05.776 --> 00:13:07.636 A:middle
其中包括一个旅行计划功能

00:13:08.686 --> 00:13:10.486 A:middle
这个功能现在没有任何天气信息

00:13:10.486 --> 00:13:12.046 A:middle
而天气信息对于任何旅行都是非常重要的

00:13:12.736 --> 00:13:14.916 A:middle
我不想为了在我的 App 中得到这些信息

00:13:14.916 --> 00:13:16.606 A:middle
而做些无用功

00:13:16.796 --> 00:13:18.706 A:middle
幸运的是 我的同事 Rhonda 告诉我

00:13:18.706 --> 00:13:20.926 A:middle
我可以用一个包来做这件事

00:13:21.516 --> 00:13:22.546 A:middle
所以让我们把它添加到我们的项目中

00:13:23.836 --> 00:13:26.916 A:middle
我首先导航到项目编辑器

00:13:27.776 --> 00:13:31.666 A:middle
我将导航到这个项目

00:13:30.086 --> 00:13:31.666 A:middle
在那里我将看到一个新的 Swift 包选项卡

00:13:32.696 --> 00:13:34.176 A:middle
这个选项卡将显示

00:13:34.176 --> 00:13:36.006 A:middle
当前我的项目依赖的所有包

00:13:37.226 --> 00:13:38.856 A:middle
要添加第一个

00:13:38.856 --> 00:13:39.396 A:middle
我将点击 + 按钮

00:13:40.036 --> 00:13:42.486 A:middle
因为我已经登录了我的 GitHub 账户

00:13:42.486 --> 00:13:43.836 A:middle
我可以看到我所有的个人包

00:13:43.986 --> 00:13:45.456 A:middle
组织包

00:13:45.456 --> 00:13:46.606 A:middle
以及位于顶部我收藏的代码仓库

00:13:48.136 --> 00:13:50.006 A:middle
这就是我所说的天气预测包

00:13:51.116 --> 00:13:52.936 A:middle
所以如果我点击 Next

00:13:52.936 --> 00:13:56.196 A:middle
Xcode 会在这里提示我输入我的版本信息

00:13:56.196 --> 00:14:00.106 A:middle
Xcode 会自动填写最新的版本以供使用

00:14:00.206 --> 00:14:01.416 A:middle
这就是我想要的

00:14:01.416 --> 00:14:02.816 A:middle
因为我想立即获得最新的代码

00:14:04.256 --> 00:14:06.036 A:middle
当我单击 Next 时

00:14:06.036 --> 00:14:07.246 A:middle
Xcode 将解析我的包

00:14:07.246 --> 00:14:08.826 A:middle
可能具有的任何依赖项

00:14:08.826 --> 00:14:10.066 A:middle
但是因为它是一个非常简单的包

00:14:10.096 --> 00:14:10.806 A:middle
它没有任何依赖项

00:14:10.806 --> 00:14:12.146 A:middle
所以 Xcode 将立即解析

00:14:13.426 --> 00:14:17.586 A:middle
最后我需要选择将我的包产品

00:14:17.636 --> 00:14:18.776 A:middle
链接到哪个 Target

00:14:18.776 --> 00:14:21.526 A:middle
我将在这里选择我的 App Target 完成

00:14:22.276 --> 00:14:23.186 A:middle
所以就是这样

00:14:23.336 --> 00:14:26.126 A:middle
要在项目中设置包

00:14:26.126 --> 00:14:27.376 A:middle
我所要做的就是将它添加到这个 Dependencies 部分

00:14:28.516 --> 00:14:33.786 A:middle
[掌声]

00:14:34.286 --> 00:14:35.066 A:middle
在项目导航器中

00:14:35.066 --> 00:14:37.426 A:middle
我现在有一个 Swift Package Dependencies 项

00:14:37.586 --> 00:14:40.206 A:middle
在这里我可以浏览这个包的所有源代码

00:14:40.206 --> 00:14:41.256 A:middle
就像它是我项目的一部分一样

00:14:41.316 --> 00:14:41.926 A:middle
因为它确实是

00:14:43.886 --> 00:14:46.966 A:middle
太好了我知道哪里需要这个功能

00:14:46.966 --> 00:14:49.526 A:middle
我要把它放在我的 WeatherFetcher.swift 文件中

00:14:49.666 --> 00:14:50.766 A:middle
这个文件目前并没有做很多事情

00:14:51.836 --> 00:14:53.826 A:middle
现在我已经把它配置好了

00:14:53.826 --> 00:14:56.316 A:middle
我可以快速导入预测模块

00:14:56.886 --> 00:15:06.456 A:middle
首先我将使用传入的区域创建一个 Forecast 对象

00:15:07.826 --> 00:15:08.896 A:middle
但我只是在 GitHub 上抓取了这个包

00:15:08.896 --> 00:15:10.706 A:middle
我本身对 API 不是很熟悉

00:15:10.706 --> 00:15:13.956 A:middle
我可以在网上看一下

00:15:14.016 --> 00:15:15.246 A:middle
但是由于 Xcode 中的功能

00:15:15.276 --> 00:15:18.506 A:middle
我可以快速跳转到它的定义

00:15:18.506 --> 00:15:19.876 A:middle
并立即开始浏览它的源代码

00:15:21.426 --> 00:15:22.726 A:middle
向下滚动一点

00:15:22.796 --> 00:15:25.596 A:middle
这个 Observation 方法就像我要用的方法一样

00:15:26.396 --> 00:15:29.386 A:middle
但是我不熟悉这种 Observation 结构

00:15:29.866 --> 00:15:32.736 A:middle
所以我想要深入了解更多关于它的内容

00:15:33.426 --> 00:15:36.276 A:middle
为了展示 Xcode 11 中的一些新搜索功能

00:15:36.276 --> 00:15:38.486 A:middle
我将通过快捷键 Command-Shift-F

00:15:38.486 --> 00:15:40.306 A:middle
来使用查询导航器

00:15:40.926 --> 00:15:44.166 A:middle
我将在这里导航到 Forecast 包

00:15:44.166 --> 00:15:46.396 A:middle
将我的搜索范围缩小到 Forecast 包中

00:15:47.446 --> 00:15:49.356 A:middle
我将搜索 observation

00:15:49.826 --> 00:15:51.416 A:middle
并且只会得到该包的结果

00:15:51.966 --> 00:15:53.736 A:middle
它看起来是在这里定义的

00:15:54.896 --> 00:15:58.616 A:middle
这个枚举类型对我来说有不同的选项

00:15:58.616 --> 00:16:01.426 A:middle
比如从这个 API 返回的指标

00:16:01.426 --> 00:16:03.466 A:middle
比如高温 低温 降水等等

00:16:03.466 --> 00:16:05.016 A:middle
我的方法只需要高温和低温

00:16:05.016 --> 00:16:07.156 A:middle
所以我会使用它们

00:16:07.386 --> 00:16:09.216 A:middle
我将使用快捷键 Command-Shift-J

00:16:09.216 --> 00:16:10.096 A:middle
跳转回项目导航器

00:16:10.096 --> 00:16:13.156 A:middle
并导航回到 WeatherFetcher 这里

00:16:13.156 --> 00:16:14.136 A:middle
然后我将开始实现这个方法

00:16:15.086 --> 00:16:17.106 A:middle
我将使用我的 Observation 对象

00:16:17.836 --> 00:16:19.976 A:middle
我将传入传输给这个方法的日期

00:16:20.926 --> 00:16:22.276 A:middle
就像我之前说的那样

00:16:22.276 --> 00:16:25.586 A:middle
我想要高温和低温

00:16:26.656 --> 00:16:29.966 A:middle
我会很快填充调用语句

00:16:29.966 --> 00:16:31.396 A:middle
从结果中获取高温度和低温度

00:16:31.396 --> 00:16:35.556 A:middle
然后以低温和高温为参数调用 completion

00:16:35.556 --> 00:16:39.286 A:middle
我将以非常相似的方式填充 condition 方法

00:16:39.506 --> 00:16:43.286 A:middle
只从结果中获取条件

00:16:43.396 --> 00:16:44.996 A:middle
太棒了

00:16:44.996 --> 00:16:46.846 A:middle
所以现在当我在模拟器中构建

00:16:46.846 --> 00:16:47.746 A:middle
运行和查看结果时

00:16:47.746 --> 00:16:49.436 A:middle
我应该能够浏览 Plan 选项卡

00:16:50.306 --> 00:16:53.356 A:middle
并且查看我在旧金山旅行中的一些天气信息

00:16:53.626 --> 00:16:54.546 A:middle
看起来我得到了

00:16:54.546 --> 00:16:56.796 A:middle
高温 低温和预期的天气

00:16:57.336 --> 00:16:58.926 A:middle
我旅行快结束的时候好像要下雨了

00:16:58.926 --> 00:17:00.456 A:middle
所以我应该带件夹克

00:17:01.426 --> 00:17:05.336 A:middle
在我的项目中配置一个 Swift 包依赖项

00:17:05.336 --> 00:17:06.896 A:middle
并且立即开始使用它非常简单

00:17:07.816 --> 00:17:08.376 A:middle
这就是天气部分

00:17:08.685 --> 00:17:09.356 A:middle
让我们在回到 Ken 这里

00:17:10.516 --> 00:17:13.306 A:middle
[掌声]

00:17:13.806 --> 00:17:14.415 A:middle
&gt;&gt; 非常感谢 Patrick

00:17:15.016 --> 00:17:17.000 A:middle
[掌声]

00:17:19.185 --> 00:17:22.465 A:middle
目前所有新的包集成

00:17:22.465 --> 00:17:23.806 A:middle
都建立在 Xcode 源代码控制支持之上

00:17:24.185 --> 00:17:26.675 A:middle
今年我们将通过更多功能来完善它

00:17:26.675 --> 00:17:31.296 A:middle
从 Git Stash 开始

00:17:31.296 --> 00:17:32.296 A:middle
它可以让你保存一组更改

00:17:33.516 --> 00:17:38.206 A:middle
[掌声]

00:17:38.706 --> 00:17:40.936 A:middle
你可以在源代码控制菜单这

00:17:40.936 --> 00:17:44.006 A:middle
快速地保存当前工作更改集

00:17:45.516 --> 00:17:48.386 A:middle
当你要查看这些更改并弹出存储时

00:17:48.386 --> 00:17:50.676 A:middle
你可以从源代码控制导航器中进行操作

00:17:51.676 --> 00:17:53.206 A:middle
我们还在此处集成了

00:17:53.476 --> 00:17:55.316 A:middle
源代码管理历史记录视图中的

00:17:55.316 --> 00:17:57.326 A:middle
Cherry-Pick 功能

00:17:57.326 --> 00:17:58.256 A:middle
只要在注释上显示上下文菜单

00:17:58.256 --> 00:17:59.816 A:middle
并选择 Cherry-Pick 功能

00:17:59.816 --> 00:18:03.176 A:middle
因此 分支之间移动更改变得非常容易

00:17:59.816 --> 00:18:03.176 A:middle
你现在可以随时通过新的历史检查器

00:17:59.816 --> 00:18:03.176 A:middle
你现在可以随时通过新的历史检查器

00:18:04.116 --> 00:18:05.236 A:middle
就像我之前提到的

00:18:05.236 --> 00:18:11.626 A:middle
获取任何文件的源代码控制历史记录

00:18:11.626 --> 00:18:13.656 A:middle
顺便说一下

00:18:13.656 --> 00:18:15.426 A:middle
这对非技术文件也很有用

00:18:16.516 --> 00:18:23.896 A:middle
[掌声]

00:18:24.396 --> 00:18:27.336 A:middle
昨天你看到了许多新的操作系统功能介绍

00:18:27.726 --> 00:18:30.636 A:middle
你可以从今天开始就采用这些功能

00:18:32.386 --> 00:18:34.416 A:middle
一旦你将 iPad App 带到 Mac 上

00:18:35.276 --> 00:18:38.526 A:middle
你就可以在故事板设备栏中

00:18:38.526 --> 00:18:40.196 A:middle
使用新的 Mac 设备开始自定义它

00:18:41.396 --> 00:18:43.196 A:middle
让你的 App 在 Mac 上感觉就像

00:18:43.196 --> 00:18:44.596 A:middle
在家里一样快捷 简单

00:18:44.596 --> 00:18:49.176 A:middle
对于新的 iOS 深色模式

00:18:49.496 --> 00:18:51.696 A:middle
该系统为你完成了大量工作

00:18:52.476 --> 00:18:53.886 A:middle
同样使用设备栏

00:18:53.886 --> 00:18:55.526 A:middle
你可以快速在浅色和深色模式之间切换

00:18:55.526 --> 00:18:58.916 A:middle
确保你的 App 看起来很棒

00:18:59.506 --> 00:19:03.636 A:middle
现在所有新的 SF 符号都完全集成

00:19:03.966 --> 00:19:06.886 A:middle
你需要的选项就在检查器中

00:19:06.886 --> 00:19:08.456 A:middle
比如包含符号大小

00:19:08.686 --> 00:19:10.126 A:middle
追踪系统字体大小

00:19:11.026 --> 00:19:14.156 A:middle
然后当你想要浏览所有符号时

00:19:14.156 --> 00:19:16.376 A:middle
你可以在重新设计的库中执行此操作

00:19:16.376 --> 00:19:18.006 A:middle
然后将它们拖到故事板中

00:19:18.586 --> 00:19:21.536 A:middle
现在对于你自己的资源

00:19:21.766 --> 00:19:24.056 A:middle
如颜色和图像

00:19:24.536 --> 00:19:26.176 A:middle
Asset Catalogs 等等

00:19:26.176 --> 00:19:27.626 A:middle
它们起着非常重要的作用

00:19:28.086 --> 00:19:29.786 A:middle
它们可以让你根据设备类型和明暗情况

00:19:29.786 --> 00:19:32.216 A:middle
而有所改变

00:19:33.286 --> 00:19:35.256 A:middle
最好的一点是

00:19:35.256 --> 00:19:38.356 A:middle
你不需要编写任何代码就可以做到这一点

00:19:38.686 --> 00:19:41.726 A:middle
在 Xcode 11 和 iOS 13 中

00:19:41.726 --> 00:19:43.576 A:middle
你可以创建自己的自定义符号

00:19:43.816 --> 00:19:47.456 A:middle
它们具有新 SF 符号的所有优点

00:19:48.346 --> 00:19:49.796 A:middle
因此符号允许你

00:19:49.796 --> 00:19:52.666 A:middle
指定图案的各种大小和权重

00:19:53.296 --> 00:19:55.226 A:middle
然后在运行时

00:19:55.396 --> 00:19:57.016 A:middle
系统会根据用户的字体大小

00:19:57.256 --> 00:20:00.556 A:middle
可访问性设置

00:20:00.556 --> 00:20:02.756 A:middle
甚至是用户界面中的位置

00:20:02.756 --> 00:20:04.356 A:middle
选择正确的变体

00:20:05.086 --> 00:20:06.386 A:middle
所以这是一种创建动态图案的

00:20:06.386 --> 00:20:08.236 A:middle
非常强大的新方法

00:20:09.976 --> 00:20:11.856 A:middle
在 Xcode 11 中

00:20:11.856 --> 00:20:13.866 A:middle
你现在也可以进行资源本地化

00:20:16.256 --> 00:20:17.356 A:middle
你只需选择一个资源

00:20:17.356 --> 00:20:19.256 A:middle
单击本地化按钮和属性检查器

00:20:19.256 --> 00:20:21.396 A:middle
并选择要自定义的本地化

00:20:22.516 --> 00:20:25.036 A:middle
[掌声]

00:20:25.536 --> 00:20:26.616 A:middle
非常重要的东西

00:20:29.046 --> 00:20:32.346 A:middle
在这里向你展示最新设计工具的是 Lisa

00:20:33.416 --> 00:20:33.936 A:middle
&gt;&gt; 非常感谢 Ken

00:20:35.546 --> 00:20:36.696 A:middle
大家好

00:20:37.006 --> 00:20:39.086 A:middle
今天我很高兴向大家展示

00:20:39.176 --> 00:20:41.366 A:middle
如何使用 iOS 13 的新功能

00:20:41.366 --> 00:20:44.256 A:middle
深色模式和 SF symbols

00:20:45.126 --> 00:20:48.746 A:middle
让我们来看看我们旅游 App 的登录视图

00:20:51.396 --> 00:20:53.796 A:middle
这里的两个图像

00:20:53.796 --> 00:20:56.426 A:middle
电子邮件和密码现在使用的是自定义图像

00:20:56.906 --> 00:20:58.676 A:middle
我想改为使用 SF 符号

00:20:58.676 --> 00:21:02.406 A:middle
这样它们看起来很棒

00:21:02.406 --> 00:21:04.366 A:middle
并且可以使用动态类型

00:21:05.176 --> 00:21:06.996 A:middle
我早些浏览库时

00:21:06.996 --> 00:21:09.616 A:middle
有两张图片我很喜欢

00:21:10.086 --> 00:21:11.686 A:middle
一个叫做 envelope

00:21:11.686 --> 00:21:12.286 A:middle
另一个叫 lock

00:21:12.846 --> 00:21:15.006 A:middle
所以让我们改用它们

00:21:15.556 --> 00:21:19.956 A:middle
首先 要点击电子邮件图标

00:21:19.956 --> 00:21:20.696 A:middle
然后打开检查器

00:21:21.716 --> 00:21:24.966 A:middle
在 Xcode 11 中

00:21:24.966 --> 00:21:27.666 A:middle
在我们这里的图像图标中

00:21:27.666 --> 00:21:30.606 A:middle
我不仅能看到图像名称

00:21:30.606 --> 00:21:33.796 A:middle
而且在我选择使用它们之前

00:21:33.796 --> 00:21:37.476 A:middle
我能看到它们的外观

00:21:38.066 --> 00:21:38.486 A:middle
所以我 [掌声]

00:21:39.276 --> 00:21:40.116 A:middle
是的 我也很喜欢

00:21:41.146 --> 00:21:42.876 A:middle
所以我打算输入 envelope

00:21:43.636 --> 00:21:47.116 A:middle
现在它将显示一个具有不同外观的信封列表

00:21:47.656 --> 00:21:51.716 A:middle
选择 envelope.fill 看起来不错

00:21:52.946 --> 00:21:56.406 A:middle
对于符号配置

00:21:56.526 --> 00:21:58.536 A:middle
我想设置为字体

00:21:58.536 --> 00:21:59.816 A:middle
以便它们可以使用动态类型

00:22:03.816 --> 00:22:05.176 A:middle
让我们换一个更大的

00:22:05.446 --> 00:22:06.046 A:middle
标题一

00:22:06.636 --> 00:22:11.986 A:middle
接下来，我想对密码图标执行相同操作

00:22:12.706 --> 00:22:15.656 A:middle
我将键入 lock

00:22:15.656 --> 00:22:18.426 A:middle
并选择 lock.fill 与此风格相匹配

00:22:19.576 --> 00:22:22.566 A:middle
同样我将把配置设置为字体

00:22:23.126 --> 00:22:28.416 A:middle
接下来我想看看我的视图在深色模式下的样子

00:22:29.646 --> 00:22:31.836 A:middle
在设备栏里有一个开关

00:22:31.836 --> 00:22:33.986 A:middle
我可以把它从亮调到暗

00:22:34.146 --> 00:22:35.946 A:middle
我们来操作一下

00:22:36.386 --> 00:22:39.666 A:middle
现在你可以看到视图已经更新

00:22:40.776 --> 00:22:43.076 A:middle
然而这张照片看起来不太对劲

00:22:43.856 --> 00:22:46.086 A:middle
我手提箱的提手不见了

00:22:46.776 --> 00:22:48.056 A:middle
我们来看看发生了什么

00:22:48.976 --> 00:22:51.146 A:middle
我切换回来

00:22:51.146 --> 00:22:52.336 A:middle
哦 我明白了

00:22:52.716 --> 00:22:53.736 A:middle
把手是黑色的

00:22:54.266 --> 00:22:57.026 A:middle
所以它在黑暗的背景下显示不出来

00:22:57.976 --> 00:22:59.986 A:middle
为了解决这个问题

00:23:01.846 --> 00:23:03.406 A:middle
提供一个新的图像变体

00:23:04.186 --> 00:23:06.376 A:middle
幸运的是 有一个伟大的设计师叫 At

00:23:07.136 --> 00:23:10.736 A:middle
他已经为我创造了一张在黑暗中使用的图像

00:23:11.286 --> 00:23:12.406 A:middle
让我们换用它

00:23:12.406 --> 00:23:15.166 A:middle
我要选择图像

00:23:15.166 --> 00:23:18.036 A:middle
我要选择图像

00:23:18.766 --> 00:23:21.696 A:middle
它会将此图像打开成暗色

00:23:22.416 --> 00:23:25.016 A:middle
首先让我们启用深色模式

00:23:25.696 --> 00:23:32.486 A:middle
然后我可以拖动 At 创建的图像

00:23:32.746 --> 00:23:35.006 A:middle
让我们切换到故事板

00:23:36.346 --> 00:23:38.496 A:middle
现在你可以看到在浅色模式下

00:23:38.616 --> 00:23:42.306 A:middle
它仍然按预期使用原始图像

00:23:42.306 --> 00:23:43.186 A:middle
但当我把它改成深色

00:23:43.826 --> 00:23:45.516 A:middle
现在新图片已经开始使用了

00:23:45.516 --> 00:23:46.816 A:middle
看起来不错

00:23:47.516 --> 00:23:52.056 A:middle
[掌声]

00:23:52.556 --> 00:23:54.996 A:middle
但 At 是一个完美主义者

00:23:54.996 --> 00:23:56.276 A:middle
他认为这两个蓝色按钮

00:23:56.336 --> 00:23:57.716 A:middle
虽然它们在浅色模式下看起来还不错

00:23:57.716 --> 00:23:59.626 A:middle
但在它们不如 At 所想的那样

00:23:59.626 --> 00:24:01.536 A:middle
在深色模式下凸显出来

00:24:02.226 --> 00:24:06.026 A:middle
因此他希望我改为使用不同颜色的橙色

00:24:06.906 --> 00:24:08.166 A:middle
让我们弄清楚如何做到这一点

00:24:08.166 --> 00:24:10.566 A:middle
我要选择按钮

00:24:11.476 --> 00:24:13.816 A:middle
现在 我可以看到

00:24:13.816 --> 00:24:15.396 A:middle
色调颜色设置为

00:24:15.396 --> 00:24:16.726 A:middle
Button color 的自定义颜色

00:24:17.706 --> 00:24:20.026 A:middle
所以要在浅色模式下使用亮色

00:24:20.026 --> 00:24:24.106 A:middle
我想继续使用蓝色按钮

00:24:24.106 --> 00:24:25.826 A:middle
但实际上在深色模式下

00:24:25.826 --> 00:24:30.306 A:middle
我想改变为使用橙色

00:24:30.306 --> 00:24:32.456 A:middle
这就像我对图像所做的一样简单

00:24:32.456 --> 00:24:37.036 A:middle
我将打开检查器启用深色外观

00:24:37.756 --> 00:24:39.366 A:middle
对于深色的外观

00:24:39.496 --> 00:24:41.556 A:middle
我将使用橙色

00:24:42.576 --> 00:24:44.186 A:middle
我们换回来吧

00:24:45.296 --> 00:24:47.866 A:middle
我发现这两个橙色的按钮凸显得更多了

00:24:47.916 --> 00:24:50.116 A:middle
现在看起来好多了

00:24:50.636 --> 00:24:55.016 A:middle
接下来我想看看我的视图在运行时的样子

00:24:55.016 --> 00:24:58.566 A:middle
我要在模拟器中构建并运行

00:25:07.046 --> 00:25:09.646 A:middle
有一个称为环境覆盖的新功能

00:25:10.686 --> 00:25:12.976 A:middle
它位于调试栏中

00:25:13.886 --> 00:25:16.286 A:middle
当我点击它时

00:25:16.286 --> 00:25:18.286 A:middle
它会显示一个弹出窗口

00:25:18.366 --> 00:25:19.846 A:middle
我可以改变不同的设置

00:25:19.886 --> 00:25:22.486 A:middle
如系统设置和可访问性设置

00:25:23.476 --> 00:25:29.526 A:middle
因此可以将界面样式从浅改为深

00:25:29.776 --> 00:25:31.376 A:middle
以查看我的视图是如何更新的

00:25:31.376 --> 00:25:36.766 A:middle
我可以设置不同的可访问性设置

00:25:36.766 --> 00:25:39.846 A:middle
例如粗体文本

00:25:40.456 --> 00:25:43.776 A:middle
通过这个覆盖

00:25:43.776 --> 00:25:47.736 A:middle
它允许我在运行时用这些不同的设置

00:25:48.086 --> 00:25:52.066 A:middle
而不需要实际更改模拟器或设备上的设置

00:25:52.066 --> 00:25:53.546 A:middle
我可以 --

00:25:54.516 --> 00:25:57.876 A:middle
[掌声]

00:25:58.376 --> 00:26:01.526 A:middle
我还可以通过拖动这里的滑块

00:26:01.666 --> 00:26:03.646 A:middle
来更改动态类型大小

00:26:03.726 --> 00:26:06.976 A:middle
你可以看到视图是如何更新的

00:26:07.516 --> 00:26:11.976 A:middle
[掌声]

00:26:12.476 --> 00:26:14.696 A:middle
记得前面

00:26:14.696 --> 00:26:16.436 A:middle
我说这两个图像的 SF 符号

00:26:16.936 --> 00:26:19.296 A:middle
我用字体进行配置

00:26:19.876 --> 00:26:24.436 A:middle
现在 当我拖动设置不同的动态类型时

00:26:24.436 --> 00:26:28.386 A:middle
它们会像文本一样做出反应

00:26:28.536 --> 00:26:30.836 A:middle
通过非常简单的编辑

00:26:30.836 --> 00:26:33.546 A:middle
我认为我的视图在 iOS 13 中看起来很棒

00:26:33.546 --> 00:26:36.406 A:middle
我希望这可以使你的 App 看起来也很棒

00:26:36.876 --> 00:26:38.576 A:middle
谢谢 Ken 请你继续 [掌声]

00:26:39.806 --> 00:26:40.426 A:middle
&gt;&gt; 非常感谢 Lisa

00:26:41.856 --> 00:26:44.396 A:middle
这些新的深色 iOS App 看起来棒极了

00:26:44.846 --> 00:26:47.486 A:middle
你的用户在他们的设备上遇到的一些场景

00:26:47.486 --> 00:26:51.666 A:middle
比如网络或温度条件

00:26:52.336 --> 00:26:54.396 A:middle
这些真的很难复制

00:26:55.046 --> 00:26:56.606 A:middle
这使得它们很难调试

00:26:56.646 --> 00:26:59.226 A:middle
在 Xcode 11 中

00:26:59.276 --> 00:27:02.996 A:middle
你可以改变设备的行为方式

00:27:02.996 --> 00:27:05.676 A:middle
改变网络吞吐量

00:27:05.676 --> 00:27:07.156 A:middle
或者改变设备的热状态

00:27:07.276 --> 00:27:12.006 A:middle
在设备窗口中有一个新的 Device Condition 部分

00:27:12.516 --> 00:27:15.576 A:middle
你可以打开网络连接调节器

00:27:15.576 --> 00:27:17.166 A:middle
并模拟真实的网络场景

00:27:17.256 --> 00:27:20.806 A:middle
或者你可以打开热状态调节器

00:27:21.616 --> 00:27:22.696 A:middle
改变你设备的热状态

00:27:22.696 --> 00:27:26.076 A:middle
让它表现得比实际温度更高

00:27:26.626 --> 00:27:29.776 A:middle
一旦你打开其中一个状态

00:27:29.776 --> 00:27:32.036 A:middle
你就会在你的设备上看到一个指示器

00:27:32.036 --> 00:27:33.736 A:middle
你可以点击那个指示器来查看

00:27:33.736 --> 00:27:35.556 A:middle
到底哪个状态在运行

00:27:36.426 --> 00:27:38.236 A:middle
你可以在这里停止它

00:27:38.706 --> 00:27:40.036 A:middle
或者当你从 Xcode 断开连接时

00:27:40.036 --> 00:27:42.376 A:middle
它会自动为你停止

00:27:43.126 --> 00:27:44.426 A:middle
这是确保你的 App

00:27:44.426 --> 00:27:47.936 A:middle
在所有情况下都运行良好的好方法

00:27:51.066 --> 00:27:53.186 A:middle
随着测试计划的推出

00:27:53.226 --> 00:27:56.696 A:middle
Xcode 11 今年将继续改进测试

00:27:57.736 --> 00:27:59.766 A:middle
现在测试计划允许你

00:27:59.766 --> 00:28:02.226 A:middle
定义一组可以跨 Schema 共享的测试

00:28:03.006 --> 00:28:06.336 A:middle
测试计划可以有任意数量的配置

00:28:06.336 --> 00:28:08.156 A:middle
这些配置允许你指定想要传递什么参数

00:28:08.156 --> 00:28:11.456 A:middle
或想要传递什么环境变量

00:28:11.456 --> 00:28:13.616 A:middle
甚至想要打开什么杀毒软件

00:28:14.506 --> 00:28:16.486 A:middle
当你运行该测试计划时

00:28:16.486 --> 00:28:19.496 A:middle
它将以所有不同的配置运行所有的测试

00:28:20.316 --> 00:28:22.546 A:middle
因此例如 你可以制定一个测试计划

00:28:22.546 --> 00:28:25.736 A:middle
其中包含你的 App 支持的每种语言的配置

00:28:26.356 --> 00:28:28.106 A:middle
当你运行该测试计划时

00:28:28.106 --> 00:28:31.696 A:middle
它将以所有不同语言运行所有测试

00:28:31.696 --> 00:28:33.486 A:middle
所有测试只需一个操作

00:28:34.036 --> 00:28:35.926 A:middle
当然还有测试计划

00:28:35.926 --> 00:28:37.186 A:middle
它们与 Xcode 的服务器配合得很好

00:28:37.186 --> 00:28:40.806 A:middle
你可以在多个设备和模拟器上运行测试

00:28:40.856 --> 00:28:43.486 A:middle
所有这些都是并行的

00:28:43.486 --> 00:28:45.776 A:middle
而且现在的配置比以往任何时候都多

00:28:46.356 --> 00:28:48.466 A:middle
毫无疑问

00:28:48.516 --> 00:28:52.676 A:middle
测试对 Mac 上的 iPad App

00:28:52.736 --> 00:28:54.446 A:middle
以及 SwiftUI 开发的 App 都非常好用

00:28:55.316 --> 00:28:59.046 A:middle
这便是测试

00:29:06.146 --> 00:29:09.446 A:middle
有新的独立 watchOS App

00:29:09.446 --> 00:29:11.716 A:middle
你可以直接部署到 watch 模拟器

00:29:12.306 --> 00:29:13.976 A:middle
不需要 iPhone 模拟器

00:29:14.516 --> 00:29:19.306 A:middle
[掌声]

00:29:19.806 --> 00:29:21.466 A:middle
但今年最大的新闻是

00:29:21.466 --> 00:29:24.856 A:middle
模拟器是建立在 Metal 技术之上的

00:29:25.081 --> 00:29:27.276 A:middle
[掌声] 是的

00:29:28.161 --> 00:29:30.161 A:middle
[掌声]

00:29:30.306 --> 00:29:33.696 A:middle
这意味着用 Metal 技术构建的 App

00:29:33.696 --> 00:29:35.916 A:middle
现在可以在模拟器中运行

00:29:35.916 --> 00:29:37.806 A:middle
它们有惊人的图形性能

00:29:37.806 --> 00:29:39.276 A:middle
所有在 Metal 之上构建的东西

00:29:39.276 --> 00:29:41.556 A:middle
比如 UIKit

00:29:41.556 --> 00:29:42.746 A:middle
也会变得更快

00:29:44.246 --> 00:29:47.656 A:middle
你会看到每秒 60 帧的画面

00:29:47.716 --> 00:29:50.796 A:middle
CPU 的使用减少了 90%

00:29:50.886 --> 00:29:55.486 A:middle
这对电池寿命非常好[掌声]

00:29:55.486 --> 00:29:59.726 A:middle
是的 [掌声]

00:30:02.456 --> 00:30:06.816 A:middle
模拟器 Warm Boots 现在也快了两倍

00:30:07.516 --> 00:30:10.756 A:middle
[掌声]

00:30:11.256 --> 00:30:12.776 A:middle
模拟器有了很大的改进

00:30:15.286 --> 00:30:18.296 A:middle
去年我们引入了 OS Signposts 和自定义工具

00:30:18.296 --> 00:30:19.936 A:middle
这样你就可以通过这些工具

00:30:19.936 --> 00:30:22.526 A:middle
将自己的数据显示出来

00:30:23.256 --> 00:30:27.276 A:middle
今年我们将引入层次结构

00:30:27.276 --> 00:30:30.396 A:middle
使你更容易地探索和关联数据

00:30:31.486 --> 00:30:33.076 A:middle
但是当你使用 OS Signposts 时

00:30:33.486 --> 00:30:35.756 A:middle
你所记录的每个类别

00:30:35.756 --> 00:30:37.556 A:middle
现在都将得到自己的踪迹 像这样

00:30:39.136 --> 00:30:41.466 A:middle
然后你可以锁定该踪迹

00:30:41.566 --> 00:30:43.026 A:middle
并轻松地将其与另一个踪迹关联起来

00:30:43.026 --> 00:30:44.716 A:middle
比如 CPU 使用

00:30:46.236 --> 00:30:49.956 A:middle
我们还为 SwiftUI 引入了一个新模板

00:30:49.956 --> 00:30:52.656 A:middle
让你深入了解在新的 body 方法中

00:30:52.656 --> 00:30:55.306 A:middle
构建用户界面所花费的时间

00:30:56.556 --> 00:30:58.506 A:middle
我们从头开始完全重写了

00:30:58.506 --> 00:31:01.356 A:middle
Metal 系统跟踪模板

00:31:02.666 --> 00:31:05.406 A:middle
它利用了新的层级轨道

00:31:05.406 --> 00:31:09.996 A:middle
速度显著加快 达到 10 倍

00:31:10.666 --> 00:31:16.216 A:middle
现在我们不能在今天结束之前

00:31:16.216 --> 00:31:20.436 A:middle
不进行 SwiftUI 的讨论

00:31:20.436 --> 00:31:23.946 A:middle
SwiftUI 是构建用户界面的新方法

00:31:25.296 --> 00:31:27.376 A:middle
SwiftUI 实现了

00:31:27.376 --> 00:31:31.296 A:middle
从编辑到运行到调试的无缝切换

00:31:32.266 --> 00:31:34.806 A:middle
新的预览显示了你真实的 UI

00:31:34.806 --> 00:31:40.126 A:middle
它们将这三件事变成了一个活动

00:31:41.396 --> 00:31:45.646 A:middle
编辑 这就是 UI 开发的未来

00:31:46.226 --> 00:31:51.406 A:middle
因此从新的预览模式到行内编辑器

00:31:51.406 --> 00:31:53.956 A:middle
我们重新考虑了如何构建 UI 代码

00:31:54.546 --> 00:31:55.886 A:middle
我们这样做的目的

00:31:55.886 --> 00:31:57.586 A:middle
是为了提高效率和直接操作

00:31:57.586 --> 00:32:01.866 A:middle
这样你就可以编写更多的代码

00:32:01.866 --> 00:32:02.926 A:middle
而不需要输入任何字符

00:32:03.576 --> 00:32:07.686 A:middle
这是一种全新的文档体验

00:32:07.896 --> 00:32:11.026 A:middle
这将使你快速地编写代码

00:32:11.576 --> 00:32:13.366 A:middle
有很棒的新教程

00:32:13.996 --> 00:32:18.386 A:middle
在帮助你编写代码的同时指导和教授你

00:32:19.046 --> 00:32:23.306 A:middle
现在你不需要创建新项目来开始预览

00:32:23.306 --> 00:32:27.636 A:middle
你可以在现有 App 中使用它们

00:32:27.636 --> 00:32:31.026 A:middle
只需实现新的 UIViewRepresentable 协议

00:32:31.026 --> 00:32:32.396 A:middle
并回传你自己的一个视图

00:32:32.396 --> 00:32:33.836 A:middle
这真的很容易

00:32:35.166 --> 00:32:36.576 A:middle
因此无论你是 iOS

00:32:36.576 --> 00:32:40.016 A:middle
macOS watchOS 还是 tvOS App

00:32:40.166 --> 00:32:41.896 A:middle
都可以立即开始使用

00:32:41.896 --> 00:32:45.906 A:middle
这就是 Xcode 11

00:32:46.366 --> 00:32:47.306 A:middle
非常感谢

00:32:47.756 --> 00:32:48.786 A:middle
祝大家会议愉快

00:32:49.516 --> 00:32:56.500 A:middle
[掌声]

