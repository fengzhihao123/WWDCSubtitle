WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:01.176 --> 00:00:04.500 A:middle
[音乐]

00:00:07.516 --> 00:00:13.686 A:middle
[掌声]

00:00:14.186 --> 00:00:14.836 A:middle
&gt;&gt; 下午好

00:00:15.616 --> 00:00:17.356 A:middle
我叫 Anders 我在 Xcode 工作

00:00:18.376 --> 00:00:19.696 A:middle
在这次会议中

00:00:19.696 --> 00:00:20.806 A:middle
我和我的同事 Balraj

00:00:20.806 --> 00:00:22.246 A:middle
将谈一谈如何从 Xcode 项目

00:00:22.316 --> 00:00:23.946 A:middle
使用 Swift 包

00:00:26.106 --> 00:00:27.526 A:middle
Swift 包管理器

00:00:27.576 --> 00:00:29.396 A:middle
是 Open Source Swift 工具链的一部分

00:00:29.656 --> 00:00:31.536 A:middle
它在 Swift 3 中被引入

00:00:32.296 --> 00:00:34.286 A:middle
之后 有很多 Swift 包

00:00:34.336 --> 00:00:35.486 A:middle
被创建出来

00:00:36.686 --> 00:00:38.506 A:middle
同时 也有很多

00:00:38.506 --> 00:00:40.216 A:middle
Open Source 函数库

00:00:40.216 --> 00:00:41.736 A:middle
被写入其他包管理器

00:00:41.736 --> 00:00:43.956 A:middle
被改编得与 Swift 包管理器相兼容

00:00:44.426 --> 00:00:48.126 A:middle
Swift 包让你可以

00:00:48.126 --> 00:00:49.546 A:middle
管理你依赖的版本

00:00:49.546 --> 00:00:51.496 A:middle
保证你依赖的包更新时

00:00:51.496 --> 00:00:53.176 A:middle
你在不需要

00:00:53.176 --> 00:00:54.596 A:middle
将代码受制于

00:00:54.596 --> 00:00:56.116 A:middle
源分解改变的情况下

00:00:56.116 --> 00:00:57.706 A:middle
修复 Bug

00:00:59.066 --> 00:01:00.466 A:middle
Swift 包对于你自己来说也是一个很好的方法

00:01:00.466 --> 00:01:03.736 A:middle
可以在你自己的 App 中分享代码

00:01:04.105 --> 00:01:05.146 A:middle
不管是在一个小团队内

00:01:05.146 --> 00:01:07.556 A:middle
一个大组织内

00:01:07.556 --> 00:01:10.486 A:middle
或者在你自己开发的 App 间

00:01:12.966 --> 00:01:15.736 A:middle
现在在 Xcode 11 中

00:01:15.736 --> 00:01:17.356 A:middle
你可以直接从 Xcode 项目

00:01:17.356 --> 00:01:18.456 A:middle
获取访问 Swift 包的权限

00:01:20.516 --> 00:01:22.666 A:middle
[掌声]

00:01:23.166 --> 00:01:27.336 A:middle
我们也很激动 在这次会议中

00:01:27.336 --> 00:01:28.816 A:middle
我们将首先谈谈

00:01:28.816 --> 00:01:30.336 A:middle
如何使用一个包

00:01:30.336 --> 00:01:31.846 A:middle
以及如何通过使用一个包

00:01:31.846 --> 00:01:32.376 A:middle
扩展 App 的功能

00:01:32.806 --> 00:01:34.066 A:middle
然后我们将谈一点

00:01:34.066 --> 00:01:35.486 A:middle
关于包中到底有什么

00:01:35.486 --> 00:01:37.016 A:middle
它们如何构建

00:01:37.016 --> 00:01:38.636 A:middle
数据储存中有什么

00:01:38.636 --> 00:01:39.756 A:middle
在文档形式的包中

00:01:40.846 --> 00:01:41.856 A:middle
当我们谈论包解析时

00:01:41.856 --> 00:01:43.846 A:middle
就是关于 Xcode 如何

00:01:43.846 --> 00:01:45.296 A:middle
取得包的正确版本

00:01:45.296 --> 00:01:46.626 A:middle
并将其嵌入你的 App 中

00:01:46.666 --> 00:01:48.396 A:middle
然后我们将谈一点

00:01:48.396 --> 00:01:49.586 A:middle
关于如何更新包的事情

00:01:49.586 --> 00:01:50.806 A:middle
当包的一个更新版发布时

00:01:50.806 --> 00:01:52.146 A:middle
会发生什么

00:01:52.146 --> 00:01:53.656 A:middle
你又该如何

00:01:53.656 --> 00:01:55.706 A:middle
利用这一点

00:01:55.706 --> 00:01:57.176 A:middle
我们还将谈论

00:01:57.176 --> 00:01:59.376 A:middle
解决在你更新包时

00:01:59.376 --> 00:02:01.446 A:middle
可能发生的

00:02:01.446 --> 00:02:02.036 A:middle
任何版本的冲突

00:02:03.396 --> 00:02:04.796 A:middle
所以让我们

00:02:04.796 --> 00:02:06.786 A:middle
从扩展 NAP 功能

00:02:06.786 --> 00:02:07.976 A:middle
来利用包开始

00:02:18.126 --> 00:02:19.226 A:middle
在这里 我们有一个小的 iPhone App

00:02:19.226 --> 00:02:22.486 A:middle
简单地展示了

00:02:22.486 --> 00:02:24.146 A:middle
在我工作的附近的

00:02:24.146 --> 00:02:27.046 A:middle
咖啡厅的午餐菜单

00:02:27.046 --> 00:02:29.346 A:middle
我们看到这里有两个入口

00:02:29.346 --> 00:02:30.906 A:middle
这是一个 SwiftUI App

00:02:30.906 --> 00:02:32.196 A:middle
我不需要运行我的 App

00:02:32.196 --> 00:02:33.826 A:middle
就可以看到预览和 Xcode

00:02:35.676 --> 00:02:37.196 A:middle
所以我们可以看到

00:02:37.256 --> 00:02:39.856 A:middle
两个不同地方的午餐菜单出现了

00:02:39.966 --> 00:02:41.576 A:middle
在这个 App 真实的版本中

00:02:41.686 --> 00:02:43.256 A:middle
我们可以在网络上提取这个数据

00:02:44.056 --> 00:02:45.616 A:middle
但是在这个演示 App 上

00:02:45.616 --> 00:02:48.136 A:middle
我只是在我的源中将其作为本地文件

00:02:48.176 --> 00:02:50.456 A:middle
所以你也可以说这个菜单是本地采购的

00:02:51.286 --> 00:02:53.286 A:middle
[笑声]

00:02:53.556 --> 00:02:55.996 A:middle
所以这两个 JSON 文件

00:02:55.996 --> 00:02:57.226 A:middle
出现得很好

00:02:57.326 --> 00:02:59.596 A:middle
但是这里的这个咖啡馆

00:02:59.596 --> 00:03:00.856 A:middle
更加现代和高档

00:03:00.856 --> 00:03:02.376 A:middle
所以他们有一个 YAML 菜单 对吗

00:03:02.376 --> 00:03:04.346 A:middle
我们不能解析它

00:03:04.346 --> 00:03:05.246 A:middle
我们不再看这个了

00:03:05.756 --> 00:03:08.616 A:middle
我们来看一看加载这个数据的源代码

00:03:09.246 --> 00:03:10.636 A:middle
我们看到在这里我们处理 JSON

00:03:10.636 --> 00:03:11.926 A:middle
但是不处理 YAML

00:03:12.146 --> 00:03:14.126 A:middle
幸运的是 

00:03:14.126 --> 00:03:16.326 A:middle
我知道一个函数库可以很好地解析 YAML

00:03:16.506 --> 00:03:18.066 A:middle
它也有一个很好的 Swift 界面

00:03:18.316 --> 00:03:20.126 A:middle
被称为 Yams

00:03:20.126 --> 00:03:21.456 A:middle
我将使用它

00:03:22.666 --> 00:03:24.786 A:middle
为了使用它我下拉了文件菜单

00:03:25.056 --> 00:03:27.286 A:middle
我来到这个新的 Swift 包子菜单

00:03:27.286 --> 00:03:30.366 A:middle
添加包依赖

00:03:30.366 --> 00:03:31.606 A:middle
现在这个子菜单

00:03:31.606 --> 00:03:33.226 A:middle
有很多其他菜单命令

00:03:33.226 --> 00:03:34.836 A:middle
一旦包出现在你的 App 中 它们就可以处理

00:03:35.736 --> 00:03:37.696 A:middle
但是你说到包依赖

00:03:38.246 --> 00:03:40.226 A:middle
在这里 我看到

00:03:40.276 --> 00:03:42.006 A:middle
因为我为 Xcode 的偏好

00:03:42.006 --> 00:03:44.136 A:middle
添加了我的 GitHub 账号到 Swift

00:03:44.136 --> 00:03:45.406 A:middle
我在那个账户中

00:03:45.406 --> 00:03:47.146 A:middle
看到了所有的包仓储

00:03:47.546 --> 00:03:48.676 A:middle
我还可以看到其他

00:03:48.676 --> 00:03:50.006 A:middle
我标星的仓储

00:03:51.086 --> 00:03:52.566 A:middle
在这个例子中 我将 Yams 标星

00:03:53.246 --> 00:03:55.376 A:middle
但是我还可以

00:03:55.376 --> 00:03:57.286 A:middle
如果有针对一个包的 URL 我可以将其输入这里

00:03:58.506 --> 00:04:00.146 A:middle
在这个例子中 我将

00:04:00.146 --> 00:04:01.696 A:middle
点击说明链接
 
00:04:01.736 --> 00:04:04.056 A:middle
然后来到 Yams 项目的主页

00:04:04.056 --> 00:04:07.826 A:middle
这个看起来不错 我将看一眼 API

00:04:07.826 --> 00:04:10.606 A:middle
这看起来是我需要的

00:04:11.126 --> 00:04:11.956 A:middle
现在 当然了

00:04:11.956 --> 00:04:13.626 A:middle
当你使用一个 Open Source 函数库时

00:04:13.626 --> 00:04:14.716 A:middle
你将把其他人的代码

00:04:14.716 --> 00:04:15.656 A:middle
代入你的 App

00:04:15.736 --> 00:04:17.586 A:middle
所以有很多你需要仔细处理的事情

00:04:17.586 --> 00:04:18.636 A:middle
你要保证你信任

00:04:18.676 --> 00:04:19.815 A:middle
那个包的源

00:04:20.546 --> 00:04:21.536 A:middle
你想要保证

00:04:21.536 --> 00:04:22.686 A:middle
你明确知道函数库在做什么

00:04:22.686 --> 00:04:24.526 A:middle
所以你不会有任何惊讶

00:04:24.966 --> 00:04:26.206 A:middle
你还想要保证

00:04:26.206 --> 00:04:27.966 A:middle
这个 Open Source 函数库的许可证

00:04:27.966 --> 00:04:30.126 A:middle
与你的 App 的许可证是兼容的

00:04:31.226 --> 00:04:32.516 A:middle
这些我都完成了

00:04:32.566 --> 00:04:34.086 A:middle
我将要回到 Xcode

00:04:34.086 --> 00:04:36.016 A:middle
在这里我将要点击下一步

00:04:36.016 --> 00:04:37.126 A:middle
我们将添加一个引用

00:04:37.126 --> 00:04:38.956 A:middle
一个在 Yams 上的依赖

00:04:40.396 --> 00:04:42.796 A:middle
现在 Xcode 向我展示了可用的版本

00:04:42.926 --> 00:04:44.486 A:middle
它自动将我设定为

00:04:44.556 --> 00:04:46.966 A:middle
使用包的最新版本

00:04:46.966 --> 00:04:49.206 A:middle
在之后我们将更多地谈到

00:04:49.206 --> 00:04:50.766 A:middle
关于这个选项的细节

00:04:51.566 --> 00:04:52.856 A:middle
但是通常来说

00:04:52.856 --> 00:04:54.246 A:middle
这里的默认选项往往是你想要的那个

00:04:54.246 --> 00:04:57.486 A:middle
它使用了版本 2.0.0

00:04:57.486 --> 00:04:59.636 A:middle
一直到 但是不包括

00:04:59.636 --> 00:05:00.586 A:middle
下一个主要的版本

00:05:00.746 --> 00:05:02.746 A:middle
我将要点击下一步

00:05:04.136 --> 00:05:05.156 A:middle
现在 Xcode 在提取

00:05:05.156 --> 00:05:06.956 A:middle
Yams 包的内容

00:05:07.476 --> 00:05:11.466 A:middle
它为我预选了单一的产品

00:05:11.466 --> 00:05:13.116 A:middle
有些包可能会有超过一个产品

00:05:13.116 --> 00:05:14.226 A:middle
这个例子中就只有一个

00:05:14.226 --> 00:05:14.896 A:middle
这是一个函数库

00:05:15.356 --> 00:05:16.556 A:middle
和包的名字一样

00:05:17.136 --> 00:05:18.106 A:middle
如果在你的项目中

00:05:18.106 --> 00:05:19.366 A:middle
有超过一个的 App

00:05:19.366 --> 00:05:20.476 A:middle
你可以选择你想要超链接的地方

00:05:20.476 --> 00:05:21.666 A:middle
在这个例子中

00:05:21.666 --> 00:05:23.186 A:middle
就只是这个一个 所以我将把它链接至午餐 App

00:05:23.766 --> 00:05:25.566 A:middle
我点击完成

00:05:27.026 --> 00:05:28.176 A:middle
现在我们看到这里有一些东西

00:05:28.296 --> 00:05:30.126 A:middle
在我的项目编辑器中

00:05:30.126 --> 00:05:32.526 A:middle
Xcode 为 Yams 包依赖

00:05:32.656 --> 00:05:36.206 A:middle
添加了对新的 Swift 包标签的引用

00:05:37.706 --> 00:05:38.926 A:middle
我们还可以看到 Yams 包

00:05:38.926 --> 00:05:43.576 A:middle
在 Swift 包依赖部分下方出现

00:05:45.356 --> 00:05:47.916 A:middle
我们不会现在就去看那个包

00:05:47.916 --> 00:05:48.986 A:middle
我们晚一点再来看

00:05:48.986 --> 00:05:50.086 A:middle
我们接下来要做的

00:05:50.086 --> 00:05:52.246 A:middle
就是再次回到食物菜单

00:05:52.346 --> 00:05:54.496 A:middle
现在 我们将要在我们的代码内利用它

00:05:54.496 --> 00:05:57.056 A:middle
所以我将在这里输入 “import Yams”

00:05:57.186 --> 00:05:58.306 A:middle
我们可以看到我们有针对输入名字的

00:05:58.306 --> 00:06:00.046 A:middle
代码完成

00:06:00.316 --> 00:06:02.356 A:middle
我还可以按住 Command 键点击

00:06:02.356 --> 00:06:04.316 A:middle
这个输入陈述

00:06:04.316 --> 00:06:05.886 A:middle
我可以跳至定义

00:06:05.886 --> 00:06:07.046 A:middle
这里我们可以看到

00:06:07.046 --> 00:06:09.766 A:middle
对 Yams 项目的界面文档的

00:06:09.766 --> 00:06:11.496 A:middle
渲染版本

00:06:12.706 --> 00:06:13.736 A:middle
所有这些都来自于

00:06:13.736 --> 00:06:14.936 A:middle
包含在包中的

00:06:14.936 --> 00:06:16.686 A:middle
源的文档评论

00:06:16.686 --> 00:06:19.306 A:middle
所以我回到我的代码

00:06:19.306 --> 00:06:22.436 A:middle
我将在这里加入另一个例子

00:06:22.646 --> 00:06:25.226 A:middle
case "yaml"

00:06:26.516 --> 00:06:30.956 A:middle
我将输入 YAMLDecoder

00:06:30.956 --> 00:06:33.246 A:middle
我有对于所有的函数库方法的

00:06:33.246 --> 00:06:34.356 A:middle
代码完成

00:06:34.356 --> 00:06:35.696 A:middle
我还有快速帮助

00:06:35.746 --> 00:06:36.716 A:middle
因为包将其包含在内

00:06:36.716 --> 00:06:38.656 A:middle
根据你得到支撑的质量

00:06:38.656 --> 00:06:40.516 A:middle
这个看上去和感觉上就像是

00:06:40.516 --> 00:06:42.466 A:middle
嵌入 API

00:06:42.946 --> 00:06:44.856 A:middle
我将使用这个方法

00:06:45.236 --> 00:06:46.836 A:middle
我将使用

00:06:47.266 --> 00:06:49.036 A:middle
JSON 例子中相同的最初的参数

00:06:49.766 --> 00:06:51.126 A:middle
现在这个 API 似乎获取了字符串

00:06:51.126 --> 00:06:52.256 A:middle
而不是数据

00:06:52.406 --> 00:06:53.486 A:middle
所以我将使用这个

00:06:53.836 --> 00:06:54.786 A:middle
我不需要第三个参数

00:06:54.786 --> 00:06:57.476 A:middle
因为我将只使用默认数值

00:06:58.426 --> 00:07:01.236 A:middle
所以现在我再次重新回到列表视图

00:07:01.866 --> 00:07:02.936 A:middle
因为这是一个很大的变化

00:07:02.936 --> 00:07:04.406 A:middle
导入一个新的模块

00:07:04.406 --> 00:07:05.846 A:middle
我将点击继续

00:07:05.846 --> 00:07:08.306 A:middle
Xcode 将在后台重新构建 App

00:07:08.306 --> 00:07:10.006 A:middle
我将在这里看一下预览

00:07:10.616 --> 00:07:11.866 A:middle
现在我们可以发现

00:07:11.866 --> 00:07:13.976 A:middle
我也可以看到在 YAML 数据文件的内容

00:07:14.516 --> 00:07:20.056 A:middle
[掌声]

00:07:20.556 --> 00:07:21.666 A:middle
好的 现在我要把这个

00:07:21.696 --> 00:07:22.886 A:middle
指派到我的仓储

00:07:24.356 --> 00:07:26.786 A:middle
我们可以看到我们期望的东西

00:07:26.786 --> 00:07:28.406 A:middle
我们看到了源变化

00:07:28.406 --> 00:07:29.346 A:middle
让我把它变得更大一点

00:07:30.186 --> 00:07:31.356 A:middle
我们可以看到我做的源变化

00:07:31.356 --> 00:07:32.736 A:middle
当然这也是

00:07:32.736 --> 00:07:33.416 A:middle
指派表单的一部分

00:07:33.786 --> 00:07:34.906 A:middle
我们也看到项目文件改变了

00:07:34.906 --> 00:07:35.826 A:middle
因为我为 Yams 包

00:07:35.826 --> 00:07:37.896 A:middle
添加了引用

00:07:38.286 --> 00:07:39.756 A:middle
我们还在这里看到了另外一件事

00:07:39.756 --> 00:07:42.236 A:middle
那就是 Xcode 创建了一个

00:07:42.236 --> 00:07:44.146 A:middle
名为 SwiftPM 的目录

00:07:44.146 --> 00:07:45.376 A:middle
这是针对 Swift 包管理器的

00:07:45.806 --> 00:07:46.926 A:middle
在共享的数据之下

00:07:46.926 --> 00:07:48.146 A:middle
在工作空间之下

00:07:48.146 --> 00:07:49.266 A:middle
你想要将其记录

00:07:49.266 --> 00:07:50.786 A:middle
因为我们之后

00:07:50.786 --> 00:07:52.736 A:middle
会讨论在这里面究竟有什么

00:07:52.866 --> 00:07:54.756 A:middle
但是 Xcode 存储了

00:07:54.756 --> 00:07:56.536 A:middle
解决的包版本的信息

00:07:56.536 --> 00:07:58.156 A:middle
你还想要检查

00:07:58.156 --> 00:07:59.646 A:middle
这样你团队中的人

00:07:59.676 --> 00:08:00.466 A:middle
就可以得到相同的版本

00:08:00.996 --> 00:08:05.456 A:middle
好的 现在我们检查然后输入

00:08:05.456 --> 00:08:09.126 A:middle
Use YAML Menus

00:08:10.506 --> 00:08:14.976 A:middle
好的 现在让我们回到幻灯片

00:08:18.686 --> 00:08:20.096 A:middle
好的 我们已经快速地看了一下

00:08:20.096 --> 00:08:21.536 A:middle
如何从一个项目中

00:08:21.536 --> 00:08:22.416 A:middle
使用一个开源包

00:08:22.466 --> 00:08:23.386 A:middle
我们再仔细看看

00:08:23.386 --> 00:08:24.986 A:middle
YAML 包中有什么

00:08:26.206 --> 00:08:30.006 A:middle
这个包是一个

00:08:30.006 --> 00:08:33.076 A:middle
包含 Swift 包清单的目录

00:08:33.515 --> 00:08:35.436 A:middle
这个清单是一个名为 Package.swift 的

00:08:35.436 --> 00:08:37.436 A:middle
文件 它将那个目录

00:08:37.436 --> 00:08:39.366 A:middle
定义为 Swift 包

00:08:39.706 --> 00:08:42.556 A:middle
它还包含了源

00:08:42.556 --> 00:08:43.856 A:middle
当然了 为了保证这些源能够

00:08:43.856 --> 00:08:44.896 A:middle
继续运行良好

00:08:44.896 --> 00:08:45.896 A:middle
还包含了单元测试

00:08:47.366 --> 00:08:48.666 A:middle
在源之下是针对

00:08:48.666 --> 00:08:51.396 A:middle
包中每个分别的目标的子目录

00:08:51.396 --> 00:08:52.406 A:middle
这些是包中

00:08:52.406 --> 00:08:53.896 A:middle
分别的可构建的成分

00:08:55.176 --> 00:08:56.396 A:middle
相似地 在测试目录之下

00:08:56.396 --> 00:08:59.586 A:middle
还有针对每个测试程序组的子目录

00:09:03.036 --> 00:09:04.836 A:middle
在目标目录之一中有什么

00:09:05.486 --> 00:09:07.296 A:middle
每个目标都可能有

00:09:07.406 --> 00:09:11.776 A:middle
C 语言或者 Swift 的实施

00:09:11.776 --> 00:09:13.636 A:middle
在 YAML 的例子中

00:09:13.636 --> 00:09:15.976 A:middle
还有一个核心的 CYaml 解析

00:09:15.976 --> 00:09:16.916 A:middle
是由 C 语言写成的

00:09:17.716 --> 00:09:18.756 A:middle
它可以包含

00:09:18.956 --> 00:09:20.316 A:middle
Objective-C++ 文件

00:09:21.036 --> 00:09:22.256 A:middle
在分别的目标中

00:09:22.256 --> 00:09:24.516 A:middle
还有一个 Swift 界面

00:09:24.516 --> 00:09:25.986 A:middle
除此之外

00:09:25.986 --> 00:09:27.556 A:middle
它会调用 CYaml 代码

00:09:28.416 --> 00:09:30.976 A:middle
然后这些单元测试被写入在 Swift 中

00:09:34.306 --> 00:09:35.636 A:middle
如果我们看到

00:09:35.636 --> 00:09:38.516 A:middle
Swift 包清单的内容

00:09:38.516 --> 00:09:40.796 A:middle
这里的第一行是

00:09:40.796 --> 00:09:43.756 A:middle
包需要的工具版本的声明

00:09:43.756 --> 00:09:45.456 A:middle
这说明了可以解析这个包的

00:09:45.456 --> 00:09:46.726 A:middle
最低版本

00:09:46.726 --> 00:09:47.766 A:middle
可以清楚显示

00:09:48.966 --> 00:09:52.596 A:middle
包描述 API

00:09:52.596 --> 00:09:54.346 A:middle
是一个由包管理器的包描述函数库

00:09:54.346 --> 00:09:56.946 A:middle
提供的宣告型 API

00:09:57.366 --> 00:09:59.296 A:middle
通过导入它

00:09:59.296 --> 00:10:00.746 A:middle
这个文档剩下的内容

00:10:00.806 --> 00:10:04.436 A:middle
可以宣告包的特点

00:10:05.806 --> 00:10:07.986 A:middle
这包含了包的名称

00:10:09.426 --> 00:10:10.816 A:middle
它还包含了

00:10:10.816 --> 00:10:12.076 A:middle
列出了包向客户出售的

00:10:12.076 --> 00:10:13.616 A:middle
产品名单

00:10:14.316 --> 00:10:15.936 A:middle
所以包可以控制

00:10:15.986 --> 00:10:17.606 A:middle
哪个代码的部分

00:10:17.606 --> 00:10:18.936 A:middle
可以直接由客户导入

00:10:18.936 --> 00:10:20.096 A:middle
在这个例子中

00:10:20.096 --> 00:10:22.516 A:middle
有一个函数库的名字和包一样

00:10:22.516 --> 00:10:24.456 A:middle
叫作 Yams

00:10:25.166 --> 00:10:26.616 A:middle
之后我们会谈到

00:10:26.616 --> 00:10:27.716 A:middle
目标部分

00:10:27.996 --> 00:10:30.016 A:middle
它基本上说明

00:10:30.016 --> 00:10:32.356 A:middle
这个函数库

00:10:32.356 --> 00:10:34.956 A:middle
为客户发布了 Yams 目标

00:10:36.976 --> 00:10:38.736 A:middle
目标部分列出了

00:10:38.736 --> 00:10:40.856 A:middle
包中的个别的可构建的部分

00:10:41.106 --> 00:10:42.566 A:middle
正如我们在这里看到的

00:10:42.566 --> 00:10:43.726 A:middle
在源文件夹和目标之间

00:10:43.726 --> 00:10:47.486 A:middle
有一个一一对应的匹配

00:10:48.096 --> 00:10:49.396 A:middle
每个源文件夹

00:10:49.396 --> 00:10:50.676 A:middle
都可以拥有针对有组织的目标的

00:10:50.676 --> 00:10:51.916 A:middle
子文件夹

00:10:51.916 --> 00:10:54.316 A:middle
但是源下的最高等级是

00:10:54.596 --> 00:10:55.936 A:middle
一个包一个文件夹 一个目标一个文件夹

00:10:58.146 --> 00:10:59.866 A:middle
在这个例子中

00:10:59.866 --> 00:11:01.786 A:middle
我们可以看到 CYaml 目标没有依赖的被列出来

00:11:02.226 --> 00:11:04.706 A:middle
而 Yams 目标则

00:11:04.706 --> 00:11:06.626 A:middle
依赖于 CYaml 目标

00:11:06.886 --> 00:11:08.606 A:middle
这意味着当产品

00:11:08.866 --> 00:11:10.466 A:middle
涉及到 Yams 

00:11:10.466 --> 00:11:12.516 A:middle
它将反过来间接地引进 CYaml

00:11:13.306 --> 00:11:15.076 A:middle
这里有一个针对单元测试的

00:11:15.076 --> 00:11:17.146 A:middle
测试目标

00:11:17.496 --> 00:11:19.636 A:middle
这个代码不会链接给客户

00:11:20.036 --> 00:11:21.766 A:middle
但是有必要确保

00:11:21.766 --> 00:11:23.596 A:middle
你的函数库正常运行

00:11:24.316 --> 00:11:26.506 A:middle
在这个例子中 Yams 包清单

00:11:26.876 --> 00:11:28.726 A:middle
同样也列举了

00:11:28.796 --> 00:11:30.106 A:middle
一些与代码相兼容的

00:11:30.106 --> 00:11:31.226 A:middle
更旧的 Swift 版本

00:11:31.766 --> 00:11:33.716 A:middle
这也有其他你可以

00:11:33.716 --> 00:11:34.756 A:middle
在这个声明性语言中

00:11:34.756 --> 00:11:36.476 A:middle
指定的特点

00:11:36.476 --> 00:11:39.326 A:middle
这些我们之后会谈到

00:11:39.926 --> 00:11:42.526 A:middle
当你构建和运行你的 App 时

00:11:42.526 --> 00:11:44.416 A:middle
这个是如何

00:11:44.416 --> 00:11:45.286 A:middle
链接到你的 App 的呢

00:11:45.316 --> 00:11:47.456 A:middle
你的项目由源文件构成

00:11:47.786 --> 00:11:48.786 A:middle
这个可以是 Swift

00:11:48.786 --> 00:11:49.896 A:middle
也可以是其他语言

00:11:50.836 --> 00:11:52.156 A:middle
你依赖的包

00:11:52.156 --> 00:11:53.436 A:middle
它们也同样是源文件

00:11:54.116 --> 00:11:55.776 A:middle
Xcode 做的就是

00:11:55.776 --> 00:11:56.966 A:middle
拿下所有的这些的源文件

00:11:56.966 --> 00:11:59.276 A:middle
遵守它们

00:11:59.456 --> 00:12:00.846 A:middle
尤其是以

00:12:00.846 --> 00:12:02.286 A:middle
与你项目中的 App 代码

00:12:02.286 --> 00:12:05.126 A:middle
相兼容的方式遵守包代码

00:12:05.746 --> 00:12:08.176 A:middle
所以这个包含体系结构平台等

00:12:08.906 --> 00:12:09.936 A:middle
如果需要的话

00:12:09.936 --> 00:12:12.246 A:middle
它会根据你的 App 的需求

00:12:12.306 --> 00:12:13.306 A:middle
重新编译多次

00:12:13.996 --> 00:12:16.356 A:middle
然后将其链入

00:12:16.356 --> 00:12:18.596 A:middle
然后把所有这些都融合在 App 中

00:12:19.716 --> 00:12:21.606 A:middle
包函数库在默认情况下是静止的

00:12:22.036 --> 00:12:23.146 A:middle
所以所有的代码

00:12:23.146 --> 00:12:23.526 A:middle
都链接在了一起

00:12:24.836 --> 00:12:26.696 A:middle
在你项目中

00:12:26.696 --> 00:12:28.756 A:middle
使用相同包的多种 App

00:12:28.756 --> 00:12:30.256 A:middle
也重复这个过程

00:12:30.256 --> 00:12:32.086 A:middle
如果你有一个 iOS App

00:12:32.086 --> 00:12:33.586 A:middle
和 watchOS App 它们使用

00:12:33.586 --> 00:12:34.076 A:middle
相同的包

00:12:34.316 --> 00:12:35.436 A:middle
Xcode 可能会

00:12:35.436 --> 00:12:37.976 A:middle
根据需要为每个 App 构建代码

00:12:41.526 --> 00:12:43.076 A:middle
现在 我们看到了一个

00:12:43.076 --> 00:12:44.766 A:middle
项目可以依赖于包的例子

00:12:45.306 --> 00:12:47.376 A:middle
我们也看到了这个在

00:12:47.506 --> 00:12:51.016 A:middle
目标编辑器中的包依赖部分展示

00:12:51.556 --> 00:12:54.246 A:middle
但是一个包同样可以依赖于其他包

00:12:54.456 --> 00:12:55.616 A:middle
它也可以通过

00:12:55.616 --> 00:12:56.556 A:middle
包清单完成

00:12:57.596 --> 00:12:58.926 A:middle
所以 Yams 曾经没有的

00:12:58.926 --> 00:13:00.506 A:middle
包清单的一个部分是

00:13:00.506 --> 00:13:02.466 A:middle
依赖部分

00:13:02.466 --> 00:13:03.516 A:middle
之所以没有是因为

00:13:03.516 --> 00:13:05.176 A:middle
它实际上并不依赖于其他包

00:13:05.696 --> 00:13:07.296 A:middle
但是你有的一些包可能需要

00:13:07.416 --> 00:13:08.606 A:middle
所以包依赖图表

00:13:08.606 --> 00:13:10.966 A:middle
可以包含直接和间接依赖

00:13:14.846 --> 00:13:16.356 A:middle
之前我提到了

00:13:16.356 --> 00:13:18.096 A:middle
你可以用包管理器

00:13:18.246 --> 00:13:19.886 A:middle
来管理你的版本了

00:13:20.296 --> 00:13:21.346 A:middle
这里使用的是

00:13:21.346 --> 00:13:22.136 A:middle
Semantic Versioning

00:13:22.136 --> 00:13:23.896 A:middle
这是一个广泛运用的策略

00:13:23.896 --> 00:13:25.576 A:middle
它将语义指派到

00:13:25.626 --> 00:13:26.596 A:middle
三部分版本的

00:13:26.596 --> 00:13:27.976 A:middle
每一个成分

00:13:31.076 --> 00:13:32.426 A:middle
在这个例子中 比如说

00:13:32.486 --> 00:13:35.816 A:middle
当 API 发生了破坏性的变化时

00:13:35.816 --> 00:13:37.796 A:middle
主要的版本都会增加

00:13:38.476 --> 00:13:39.686 A:middle
所以这是会让

00:13:39.686 --> 00:13:41.936 A:middle
客户进行改变的事情

00:13:41.936 --> 00:13:43.466 A:middle
比如说 如果你重命名一个方法

00:13:43.466 --> 00:13:45.806 A:middle
或者移除一个方法

00:13:45.806 --> 00:13:47.046 A:middle
或者如果一个包

00:13:47.046 --> 00:13:49.006 A:middle
做出了一个语义变化

00:13:49.006 --> 00:13:52.016 A:middle
让现有的客户必须去适应

00:13:53.046 --> 00:13:54.456 A:middle
这就是为什么

00:13:54.456 --> 00:13:56.076 A:middle
限制的初始版本

00:13:56.076 --> 00:13:57.406 A:middle
一直上到但是却不包括

00:13:57.406 --> 00:13:58.846 A:middle
下一个主要版本的数字

00:14:02.636 --> 00:14:04.566 A:middle
在功能不破坏现有客户的

00:14:04.616 --> 00:14:07.886 A:middle
情况下添加时会被增加

00:14:08.146 --> 00:14:09.916 A:middle
比如说 这个可以添加一个方法

00:14:12.046 --> 00:14:14.056 A:middle
最后 补丁版本是

00:14:14.056 --> 00:14:15.786 A:middle
没有语义变化

00:14:15.786 --> 00:14:17.026 A:middle
语言意义变化时

00:14:17.116 --> 00:14:18.996 A:middle
Bug 被修复

00:14:19.506 --> 00:14:22.236 A:middle
包可以很安全地

00:14:22.236 --> 00:14:25.856 A:middle
更新至 Bug 修复

00:14:25.856 --> 00:14:27.586 A:middle
在不改变 App 语义时

00:14:27.586 --> 00:14:28.836 A:middle
将 Bug 修复嵌入

00:14:31.446 --> 00:14:33.246 A:middle
好的 我们已经看了如何使用包

00:14:33.296 --> 00:14:35.476 A:middle
我们也仔细看了那些包

00:14:35.476 --> 00:14:36.766 A:middle
现在我要邀请我的同事

00:14:36.766 --> 00:14:38.096 A:middle
Balraj 来到台上

00:14:38.096 --> 00:14:39.976 A:middle
从细节上讲述一下包解析

00:14:40.516 --> 00:14:45.846 A:middle
[掌声]

00:14:46.346 --> 00:14:47.096 A:middle
&gt;&gt; 谢谢 Anders

00:14:47.996 --> 00:14:49.116 A:middle
包解析是 Xcode

00:14:49.116 --> 00:14:51.116 A:middle
选择在你的工作空间

00:14:51.116 --> 00:14:52.126 A:middle
应该使用哪个版本的包时

00:14:52.126 --> 00:14:54.766 A:middle
经历的过程

00:14:55.226 --> 00:14:56.486 A:middle
我们将更仔细地

00:14:56.486 --> 00:14:58.116 A:middle
看一看它是如何

00:14:58.116 --> 00:15:02.616 A:middle
在早前 Anders 展示的午餐项目中工作的

00:15:05.336 --> 00:15:07.286 A:middle
所以在 Swift 包标签的

00:15:07.286 --> 00:15:09.126 A:middle
项目编辑器中

00:15:09.126 --> 00:15:10.966 A:middle
我们可以看到

00:15:11.006 --> 00:15:12.516 A:middle
我们的午餐项目对 Yams 的依赖

00:15:12.816 --> 00:15:15.776 A:middle
使用版本 Rule 2.0.0 - Next Major

00:15:16.306 --> 00:15:18.366 A:middle
也就是 Yams 从 2 开始往后的版本

00:15:18.366 --> 00:15:21.366 A:middle
但是不包括 3

00:15:21.706 --> 00:15:24.436 A:middle
在项目导航器的

00:15:24.436 --> 00:15:25.516 A:middle
Swift 包依赖部分

00:15:25.516 --> 00:15:27.306 A:middle
我们可以看到

00:15:27.306 --> 00:15:29.156 A:middle
2.0.0 版本的 Yams

00:15:30.446 --> 00:15:31.866 A:middle
我们再仔细看看这个

00:15:34.086 --> 00:15:35.886 A:middle
午餐项目选择 2.0.0 版本的 Yams

00:15:35.886 --> 00:15:38.886 A:middle
因为它的版本要求 2.0.0 直到

00:15:38.886 --> 00:15:39.856 A:middle
下个主要版本

00:15:40.886 --> 00:15:43.266 A:middle
如果版本 2.1.0 存在

00:15:43.266 --> 00:15:44.206 A:middle
Xcode 会选择它

00:15:44.206 --> 00:15:46.676 A:middle
因为 2.1.0 是适合

00:15:46.676 --> 00:15:48.876 A:middle
我们版本要求的最新版本

00:15:49.886 --> 00:15:52.316 A:middle
然而 如果版本 3.0.0 存在

00:15:52.316 --> 00:15:53.696 A:middle
Xcode 不会选择它

00:15:53.696 --> 00:15:55.596 A:middle
因为它不适合

00:15:55.596 --> 00:15:57.396 A:middle
我们指定的限制

00:15:58.746 --> 00:16:00.686 A:middle
在这个例子中

00:16:00.686 --> 00:16:01.876 A:middle
2.1.0 和 3.0.0 都是假设的案例

00:16:02.066 --> 00:16:03.986 A:middle
在接下来的演示中

00:16:03.986 --> 00:16:05.706 A:middle
你还会看到 Yams 继续

00:16:05.706 --> 00:16:06.976 A:middle
在版本 2.0.0 中解析

00:16:08.416 --> 00:16:10.226 A:middle
在这个例子中

00:16:10.226 --> 00:16:11.516 A:middle
还有一个有一个版本的包

00:16:11.566 --> 00:16:12.086 A:middle
可以用来选择

00:16:12.686 --> 00:16:14.136 A:middle
让我们看些更有意思的例子

00:16:14.136 --> 00:16:15.936 A:middle
在这里 包解析

00:16:15.936 --> 00:16:17.976 A:middle
可以变得更加的复杂

00:16:20.396 --> 00:16:22.746 A:middle
这就是我们今天要讲的午餐 App

00:16:23.596 --> 00:16:25.316 A:middle
它有一个很基本的 UI

00:16:25.316 --> 00:16:27.026 A:middle
正如我们刚刚所说

00:16:27.026 --> 00:16:28.146 A:middle
它只使用一个包

00:16:29.596 --> 00:16:31.736 A:middle
我的团队 全力以赴地

00:16:31.736 --> 00:16:33.496 A:middle
为我们的 App 添加了更多的包

00:16:33.496 --> 00:16:35.216 A:middle
它们用这些包

00:16:35.216 --> 00:16:37.036 A:middle
在我们团队所有的 App 中

00:16:37.036 --> 00:16:38.966 A:middle
展示相同的设计主题

00:16:39.046 --> 00:16:41.386 A:middle
当我们回到午餐 App

00:16:41.386 --> 00:16:43.116 A:middle
在几周之后

00:16:43.386 --> 00:16:46.616 A:middle
我们可以看到

00:16:46.616 --> 00:16:47.976 A:middle
UI 已经更新了

00:16:47.976 --> 00:16:49.886 A:middle
在我们的工作空间内

00:16:49.886 --> 00:16:50.676 A:middle
还有三个附加的包

00:16:51.806 --> 00:16:53.436 A:middle
这三个包是

00:16:53.436 --> 00:16:56.326 A:middle
DesignFont DesignTheme 和 DesignColor

00:16:57.316 --> 00:17:00.006 A:middle
它们都在它们分别的版本中解析

00:17:00.586 --> 00:17:03.696 A:middle
所以 Xcode 在选择这些

00:17:03.696 --> 00:17:05.376 A:middle
包的版本方面

00:17:05.376 --> 00:17:06.465 A:middle
为我们做了很多工作

00:17:06.776 --> 00:17:08.626 A:middle
但我想要知道

00:17:08.685 --> 00:17:10.935 A:middle
为什么这些包解析这些版本

00:17:11.336 --> 00:17:14.976 A:middle
为了这样做 我回到项目编辑器

00:17:18.656 --> 00:17:19.915 A:middle
这是 Swift 包依赖部分

00:17:19.915 --> 00:17:21.685 A:middle
我们可以看到

00:17:21.826 --> 00:17:23.185 A:middle
在 DesignTheme 上的新依赖

00:17:23.185 --> 00:17:26.476 A:middle
伴随着版本 Rule 1.0.0 - Next Major

00:17:28.415 --> 00:17:31.316 A:middle
Xcode 在这个例子中

00:17:31.316 --> 00:17:32.866 A:middle
在 Version 1.0.0 选择了 DesignTheme

00:17:33.086 --> 00:17:35.976 A:middle
因为它从 1.0.0 一直解析到下一个主要版本

00:17:39.216 --> 00:17:40.386 A:middle
所以我们可以看到

00:17:40.386 --> 00:17:42.316 A:middle
在 Yams 上的依赖还是一样的

00:17:43.056 --> 00:17:46.536 A:middle
你可能会想 在这个例子中

00:17:46.536 --> 00:17:47.976 A:middle
DesignFont 和 DesignColor 在哪呢

00:17:48.206 --> 00:17:49.126 A:middle
我们看向项目编辑器

00:17:49.126 --> 00:17:51.516 A:middle
但是却没有在里面找到它们

00:17:51.986 --> 00:17:53.586 A:middle
好的 这个的原因是

00:17:53.586 --> 00:17:55.746 A:middle
项目编辑器

00:17:55.746 --> 00:17:57.256 A:middle
向我们展示了

00:17:57.256 --> 00:18:00.386 A:middle
午餐 App 和它的直接包之间的直接依赖

00:18:02.016 --> 00:18:04.556 A:middle
为了看我们包的依赖

00:18:04.556 --> 00:18:08.686 A:middle
我们想要去看一下 DesignTheme 包

00:18:09.066 --> 00:18:10.456 A:middle
这是因为它是最新的

00:18:10.456 --> 00:18:11.986 A:middle
加入到我们的工作空间的包

00:18:12.296 --> 00:18:14.626 A:middle
假设它们不是来自 Yams 也很安全

00:18:15.296 --> 00:18:16.956 A:middle
为了这样做

00:18:16.956 --> 00:18:18.356 A:middle
我们回到高级的 Xcode 视图

00:18:18.696 --> 00:18:21.376 A:middle
在 Swift 包依赖部分下来看

00:18:21.676 --> 00:18:23.256 A:middle
我们可以看到我们的

00:18:23.256 --> 00:18:23.856 A:middle
包 DesignTheme

00:18:24.396 --> 00:18:26.806 A:middle
我们显露了包

00:18:26.846 --> 00:18:28.826 A:middle
然后看到了包内所有可用的内容

00:18:28.826 --> 00:18:30.476 A:middle
在这个例子中

00:18:30.476 --> 00:18:32.506 A:middle
我们想要看一下 Package.swift 清单文档

00:18:33.246 --> 00:18:36.366 A:middle
因为在这里我们会看到

00:18:36.366 --> 00:18:37.696 A:middle
所有关于这个包的

00:18:37.696 --> 00:18:39.326 A:middle
依赖信息

00:18:40.446 --> 00:18:41.426 A:middle
所以我们来看这个文件

00:18:41.426 --> 00:18:43.086 A:middle
在依赖阵列

00:18:43.336 --> 00:18:44.896 A:middle
我们看到了 DesignFont

00:18:44.896 --> 00:18:46.396 A:middle
和 DesignColor 

00:18:46.396 --> 00:18:47.086 A:middle
还有它们的版本要求

00:18:50.036 --> 00:18:52.076 A:middle
DesignFont 根据我们之前看到的

00:18:52.076 --> 00:18:54.006 A:middle
进行解析

00:18:54.006 --> 00:18:54.916 A:middle
从 1.0.0 一直到之后的主要版本

00:18:55.446 --> 00:18:56.846 A:middle
所以 Xcode 会选择

00:18:56.846 --> 00:18:59.976 A:middle
版本 1.2.0 因为它是包的最新版本

00:19:06.136 --> 00:19:08.166 A:middle
它使用的是 1.0.0 版本

00:19:08.246 --> 00:19:10.536 A:middle
一直到下一个次版本

00:19:10.536 --> 00:19:13.316 A:middle
这意味着从 1.0.0 到设计颜色的版本

00:19:13.876 --> 00:19:15.946 A:middle
然后一直到但是不包括 1.1.0 

00:19:16.556 --> 00:19:18.416 A:middle
这通常用于当包想要

00:19:18.486 --> 00:19:19.746 A:middle
比它们在更新的时候

00:19:19.746 --> 00:19:21.106 A:middle
获得的新版本

00:19:21.106 --> 00:19:22.746 A:middle
更加保守一些

00:19:23.256 --> 00:19:25.776 A:middle
所以 Xcode 选择了

00:19:25.776 --> 00:19:28.176 A:middle
DesignColor 包的

00:19:28.176 --> 00:19:28.716 A:middle
1.0.1 版本

00:19:29.646 --> 00:19:31.036 A:middle
所以这是添加的包

00:19:31.036 --> 00:19:32.136 A:middle
以及为什么它们

00:19:32.176 --> 00:19:37.516 A:middle
要在这个版本解析的全视图

00:19:37.786 --> 00:19:39.296 A:middle
你会记住 Anders 在之前的展示中

00:19:39.296 --> 00:19:42.546 A:middle
的最后一步就是导入 Yams

00:19:42.546 --> 00:19:43.506 A:middle
然后使用它的 API

00:19:43.906 --> 00:19:45.306 A:middle
让我们来看看它是如何运行

00:19:45.426 --> 00:19:46.976 A:middle
以及它如何与包解析相关联

00:19:50.046 --> 00:19:52.976 A:middle
我们所有的包都是有相同名字的生产函数库

00:19:55.046 --> 00:19:56.686 A:middle
我们可以看到午餐 App

00:19:56.686 --> 00:19:57.626 A:middle
从 DesignTheme 导入内容

00:19:57.626 --> 00:20:00.376 A:middle
也从 Yams 导入内容

00:20:00.976 --> 00:20:04.656 A:middle
DesignTheme 函数库同样也从

00:20:04.656 --> 00:20:05.966 A:middle
DesignFont 和 DesignColor 导入内容

00:20:08.116 --> 00:20:09.426 A:middle
如果我们完整地看这个图表

00:20:09.426 --> 00:20:11.316 A:middle
我们可以看到

00:20:11.316 --> 00:20:12.356 A:middle
它与包解析的工作过程

00:20:12.356 --> 00:20:13.336 A:middle
是很相似的

00:20:13.686 --> 00:20:15.076 A:middle
这是有意的

00:20:15.556 --> 00:20:16.786 A:middle
当我们在我们的包上

00:20:16.786 --> 00:20:19.726 A:middle
添加直接的依赖时

00:20:19.726 --> 00:20:21.226 A:middle
我们也不再导入它们的内容

00:20:21.226 --> 00:20:22.786 A:middle
同时实际上在我们的 App 中

00:20:22.786 --> 00:20:24.106 A:middle
使用 API

00:20:24.446 --> 00:20:27.026 A:middle
但是如果我想要

00:20:27.026 --> 00:20:28.536 A:middle
从一个子依赖中

00:20:28.536 --> 00:20:30.576 A:middle
导入内容到我的项目怎么办呢

00:20:31.766 --> 00:20:33.616 A:middle
让我们谈谈如何这样做

00:20:36.046 --> 00:20:38.606 A:middle
我们有依赖于 DesignTheme 的午餐项目

00:20:39.376 --> 00:20:42.096 A:middle
DesignTheme 依赖于 DesignFont 包

00:20:42.886 --> 00:20:44.496 A:middle
DesignFont 包

00:20:44.496 --> 00:20:46.186 A:middle
生成了一个有相同名称的函数库

00:20:46.976 --> 00:20:48.686 A:middle
在这个环境中

00:20:48.686 --> 00:20:50.226 A:middle
我们不想立刻从

00:20:50.406 --> 00:20:52.186 A:middle
DesignFont 导入内容到午餐 App

00:20:52.516 --> 00:20:56.126 A:middle
因为如果 DesignTheme 失去了对

00:20:56.126 --> 00:20:57.526 A:middle
DesignFont 和 Update 的依赖

00:20:57.526 --> 00:20:59.336 A:middle
Xcode 也会失去

00:20:59.336 --> 00:21:00.446 A:middle
对 DesignFont 的引用

00:21:00.446 --> 00:21:02.986 A:middle
所以现在 我们不能

00:21:02.986 --> 00:21:04.106 A:middle
使用 DesignFont 函数库

00:21:05.136 --> 00:21:07.036 A:middle
所以这样做的一个更好办法

00:21:07.036 --> 00:21:10.126 A:middle
我们回到例子的开头

00:21:10.126 --> 00:21:11.696 A:middle
就是创建一个

00:21:11.696 --> 00:21:13.246 A:middle
在午餐项目和 DesignFont 包之间的

00:21:13.246 --> 00:21:15.666 A:middle
直接包依赖

00:21:16.106 --> 00:21:18.276 A:middle
然后我们可以从 DesignFont

00:21:18.276 --> 00:21:19.696 A:middle
导入内容至午餐

00:21:20.086 --> 00:21:21.776 A:middle
因为如果 DesignTheme 在更新中

00:21:21.776 --> 00:21:24.006 A:middle
失去了对 DesignFont 的依赖

00:21:24.006 --> 00:21:26.276 A:middle
我们还是会保持

00:21:26.276 --> 00:21:28.976 A:middle
对 Xcode 内的函数库的引用

00:21:32.176 --> 00:21:33.916 A:middle
这就是 Xcode 如何

00:21:33.916 --> 00:21:35.556 A:middle
选择你的包的不同版本

00:21:36.286 --> 00:21:40.456 A:middle
我们来看看你如何开始

00:21:40.456 --> 00:21:41.656 A:middle
获得这些包的新版本

00:21:41.916 --> 00:21:43.976 A:middle
它提供了 API 提升和 Bug 修复

00:21:46.106 --> 00:21:49.756 A:middle
某天 我与维护 DesignFont 团队

00:21:49.756 --> 00:21:51.036 A:middle
共进午餐

00:21:51.336 --> 00:21:52.936 A:middle
他们告诉了我一个

00:21:52.936 --> 00:21:54.216 A:middle
DesignFont 包的新版本

00:21:54.216 --> 00:21:55.556 A:middle
它有一些小的 Bug 修复

00:21:55.556 --> 00:21:58.206 A:middle
版本 1.2.1

00:21:58.206 --> 00:22:01.276 A:middle
当我回去的时候

00:22:01.276 --> 00:22:03.966 A:middle
我发现 DesignFont 在使用版本 1.2.0

00:22:04.086 --> 00:22:06.066 A:middle
午餐项目在版本 1.2.0

00:22:06.066 --> 00:22:07.716 A:middle
使用 DesignFont

00:22:09.216 --> 00:22:11.016 A:middle
所以我想要更新这个包

00:22:11.446 --> 00:22:15.806 A:middle
为了实现这一点 我点击了文件 Swift 包

00:22:16.066 --> 00:22:17.066 A:middle
在这里 关于 Swift 包

00:22:17.066 --> 00:22:19.146 A:middle
我有很多选项

00:22:19.786 --> 00:22:21.966 A:middle
在这个例子中

00:22:21.966 --> 00:22:23.336 A:middle
我想要更新至最新的包版本

00:22:24.836 --> 00:22:26.706 A:middle
所以继续然后点击这个

00:22:26.706 --> 00:22:27.986 A:middle
更新运作开始了

00:22:29.176 --> 00:22:30.856 A:middle
我们现在使用

00:22:30.856 --> 00:22:32.296 A:middle
DesignFont 版本 1.2.1

00:22:32.886 --> 00:22:35.876 A:middle
那么更新的包版本

00:22:35.876 --> 00:22:36.776 A:middle
到底都做些什么呢

00:22:37.016 --> 00:22:38.936 A:middle
在更新运作中会发生什么呢

00:22:42.086 --> 00:22:43.686 A:middle
有一个文档名为

00:22:43.686 --> 00:22:44.956 A:middle
Package.resolved

00:22:44.956 --> 00:22:45.596 A:middle
对于这个是很重要的

00:22:46.876 --> 00:22:48.906 A:middle
Package.resolved 记录了

00:22:48.906 --> 00:22:50.006 A:middle
你的工作空间内的

00:22:50.006 --> 00:22:51.676 A:middle
所有包的版本信息

00:22:52.176 --> 00:22:53.296 A:middle
当你完成更新

00:22:53.296 --> 00:22:55.446 A:middle
这个文档被更新了

00:22:55.496 --> 00:22:56.976 A:middle
那么 Xcode

00:22:56.976 --> 00:22:58.976 A:middle
会为你拉下新的版本

00:23:04.536 --> 00:23:06.426 A:middle
xcsharedata

00:23:06.426 --> 00:23:08.526 A:middle
它一般由你的团队和源控制共享

00:23:08.956 --> 00:23:10.156 A:middle
所以需要注意的一个很重要的事情

00:23:10.156 --> 00:23:11.286 A:middle
就是我们运行的更新行为

00:23:11.286 --> 00:23:14.116 A:middle
是一个本地行为

00:23:14.576 --> 00:23:15.876 A:middle
为了在我的团队

00:23:15.876 --> 00:23:18.576 A:middle
分享这个更新

00:23:18.576 --> 00:23:20.106 A:middle
我必须指派和将我的变化

00:23:20.106 --> 00:23:20.906 A:middle
放至 Package.resolved 文件

00:23:23.066 --> 00:23:24.366 A:middle
如果你想要

00:23:24.366 --> 00:23:25.586 A:middle
自己寻找所有的东西

00:23:25.586 --> 00:23:27.346 A:middle
这个在 Xcode 项目文件中

00:23:27.846 --> 00:23:29.296 A:middle
但是请注意你不需要

00:23:29.296 --> 00:23:32.026 A:middle
自己编辑 Package.resolved 文件

00:23:32.456 --> 00:23:34.596 A:middle
Xcode 会为你做一切的事情

00:23:38.066 --> 00:23:40.156 A:middle
正如我之前说的

00:23:40.156 --> 00:23:41.996 A:middle
我们并没有与我们的团队分享这个更新

00:23:42.216 --> 00:23:43.236 A:middle
所以让我们来这样做吧

00:23:43.656 --> 00:23:45.176 A:middle
我们可以通过来到

00:23:45.296 --> 00:23:46.576 A:middle
源控制菜单和点击提交
 
00:23:46.576 --> 00:23:47.936 A:middle
在 Xcode 中完成这些

00:23:51.226 --> 00:23:53.946 A:middle
在这里面我们可以看到 

00:23:53.946 --> 00:23:55.636 A:middle
对 Package.resolved 文档做出的所有变化

00:23:55.636 --> 00:23:57.606 A:middle
以及它是如何从我们之前使用的

00:23:58.096 --> 00:23:59.396 A:middle
版本 1.2.0 更新到

00:24:02.876 --> 00:24:04.386 A:middle
因为我想要推送

00:24:04.386 --> 00:24:05.536 A:middle
我继续然后点击了

00:24:05.856 --> 00:24:07.146 A:middle
左下侧的复选框 推送至 remote 端

00:24:07.576 --> 00:24:09.136 A:middle
然后我就可以指派和

00:24:09.136 --> 00:24:09.696 A:middle
推送我的变化了

00:24:10.276 --> 00:24:11.926 A:middle
我们成功地

00:24:11.926 --> 00:24:13.756 A:middle
在我们的团队中分享了这个更新

00:24:14.956 --> 00:24:16.136 A:middle
这些都没有回答问题

00:24:16.136 --> 00:24:17.646 A:middle
为什么我们需要一个

00:24:17.646 --> 00:24:19.376 A:middle
Package.resolved 文件

00:24:20.396 --> 00:24:22.476 A:middle
这个文件存在是

00:24:22.476 --> 00:24:23.676 A:middle
为了保证

00:24:23.876 --> 00:24:25.316 A:middle
我团队的人

00:24:25.536 --> 00:24:27.186 A:middle
在相同的指令中使用午餐项目

00:24:27.186 --> 00:24:28.636 A:middle
他们都能获得

00:24:28.636 --> 00:24:30.276 A:middle
相同版本的 DesignFont

00:24:30.976 --> 00:24:31.856 A:middle
如果这个文件

00:24:31.856 --> 00:24:33.476 A:middle
这个 Package.resolved 文件

00:24:33.476 --> 00:24:35.996 A:middle
并不存在 

00:24:35.996 --> 00:24:37.516 A:middle
最终的情形可能是

00:24:37.516 --> 00:24:39.966 A:middle
你团队的多个人

00:24:39.966 --> 00:24:41.746 A:middle
都使用项目的相同版本

00:24:41.746 --> 00:24:44.456 A:middle
但是和你使用的包的版本

00:24:44.456 --> 00:24:45.956 A:middle
却不一致

00:24:48.326 --> 00:24:49.476 A:middle
所以在这里有个非常重要的事情

00:24:49.476 --> 00:24:50.906 A:middle
需要注意的就是

00:24:50.906 --> 00:24:52.166 A:middle
检查你的 Package.resolved 文件

00:24:52.606 --> 00:24:54.146 A:middle
不然 你可能最后会

00:24:54.196 --> 00:24:55.796 A:middle
在你的团队中使用

00:24:55.796 --> 00:24:57.326 A:middle
不一致版本的包

00:24:57.606 --> 00:24:58.666 A:middle
所以检查这个文件

00:24:58.666 --> 00:24:59.776 A:middle
是非常重要的

00:25:03.756 --> 00:25:05.136 A:middle
你的包的新版本

00:25:05.996 --> 00:25:08.716 A:middle
然后就是有意地更新

00:25:09.016 --> 00:25:10.676 A:middle
不然的话 

00:25:10.676 --> 00:25:12.526 A:middle
你可能会错过你的包提供给你的

00:25:12.526 --> 00:25:14.806 A:middle
一些关键的 Bug 修复以及 API 提升

00:25:16.276 --> 00:25:18.106 A:middle
这就是如何更新包

00:25:18.806 --> 00:25:20.166 A:middle
我们再仔细通过

00:25:20.166 --> 00:25:21.706 A:middle
更先进的例子

00:25:21.706 --> 00:25:22.856 A:middle
来看一下如何解决包冲突

00:25:23.086 --> 00:25:24.376 A:middle
这将我们今天

00:25:24.376 --> 00:25:25.976 A:middle
谈到的很多不同话题都带到了一起

00:25:29.046 --> 00:25:31.296 A:middle
所以我启动了这个项目

00:25:31.296 --> 00:25:33.496 A:middle
来改变午餐 App 中

00:25:33.496 --> 00:25:35.826 A:middle
价格的字体

00:25:37.236 --> 00:25:39.096 A:middle
我想要使用的系统字体

00:25:39.096 --> 00:25:41.206 A:middle
在版本 2.0.0 的 DesignFont 中

00:25:41.206 --> 00:25:42.656 A:middle
是可行的 

00:25:42.656 --> 00:25:43.836 A:middle
这使我们团队

00:25:43.836 --> 00:25:46.226 A:middle
拥有的 App 

00:25:46.356 --> 00:25:49.066 A:middle
可以使用一致的版本的字体

00:25:49.686 --> 00:25:50.686 A:middle
所以让我们这样做吧

00:25:51.456 --> 00:25:52.926 A:middle
为了使用 DesignFont 包 

00:25:53.346 --> 00:25:55.326 A:middle
我们需要在午餐和 DesignFont 间

00:25:55.326 --> 00:25:57.846 A:middle
创建一个直接的依赖

00:25:58.646 --> 00:26:00.356 A:middle
因为版本 2.0.0 的 DesignFont

00:26:00.356 --> 00:26:02.006 A:middle
发布了这个新的字体

00:26:02.006 --> 00:26:04.976 A:middle
我们想要明确地使用那个版本

00:26:07.076 --> 00:26:08.576 A:middle
所以我们来到 Xcode

00:26:08.576 --> 00:26:09.776 A:middle
然后完成了添加包的工作流程

00:26:10.436 --> 00:26:13.696 A:middle
我们在收藏账户中点击 DesignFont

00:26:13.996 --> 00:26:14.756 A:middle
然后是继续

00:26:15.156 --> 00:26:16.456 A:middle
我们选择到下一个主要的版本

00:26:16.456 --> 00:26:17.936 A:middle
因为我们想要

00:26:17.936 --> 00:26:20.016 A:middle
通向任何更新

00:26:20.016 --> 00:26:21.686 A:middle
或者 DesignFont 发布的新版本

00:26:21.686 --> 00:26:23.776 A:middle
然后我们点击继续

00:26:24.606 --> 00:26:26.036 A:middle
在这里 我们遇到了一个

00:26:26.036 --> 00:26:28.186 A:middle
包解析错误

00:26:28.186 --> 00:26:29.726 A:middle
因为 DesignFont 从 2.0.0 到

00:26:29.726 --> 00:26:31.976 A:middle
下一个主要的版本需要新的依赖需求

00:26:35.826 --> 00:26:37.266 A:middle
所以让我们看看

00:26:37.266 --> 00:26:39.116 A:middle
这里在发生什么

00:26:39.116 --> 00:26:41.906 A:middle
同时对其进行调试 调试包解析时

00:26:41.906 --> 00:26:43.206 A:middle
有件需要记住的非常重要的事情

00:26:43.206 --> 00:26:45.046 A:middle
那就是要

00:26:45.046 --> 00:26:46.256 A:middle
看全景图

00:26:47.486 --> 00:26:49.716 A:middle
我们想要考虑到

00:26:49.716 --> 00:26:51.096 A:middle
影响到我们包的所有需求

00:26:51.096 --> 00:26:52.856 A:middle
而不是仅仅

00:26:52.856 --> 00:26:53.976 A:middle
限制于我们刚刚添加的

00:26:56.046 --> 00:26:57.546 A:middle
所以我们退回一步

00:26:57.546 --> 00:26:58.656 A:middle
来看看这个之前是怎么工作的

00:26:59.226 --> 00:27:00.756 A:middle
午餐 App 在版本 1.0.0 的 DesignTheme

00:27:00.756 --> 00:27:02.466 A:middle
有一个很好的依赖

00:27:02.946 --> 00:27:04.316 A:middle
而 DesignTheme 在 1.2.1 版本

00:27:04.316 --> 00:27:06.056 A:middle
直接依赖于 DesignFont 

00:27:06.056 --> 00:27:08.616 A:middle
使用版本需求 1.0.0

00:27:08.616 --> 00:27:10.976 A:middle
直到下一个主要版本

00:27:14.286 --> 00:27:16.276 A:middle
然后 当我们添加

00:27:16.276 --> 00:27:17.656 A:middle
午餐 App 和 DesignFont 之间的

00:27:17.706 --> 00:27:19.486 A:middle
直接依赖关系从 2.0.0 直到

00:27:19.486 --> 00:27:21.306 A:middle
下一个主要版本时 我们遇到了

00:27:21.306 --> 00:27:22.746 A:middle
包解析冲突

00:27:24.336 --> 00:27:26.726 A:middle
你将注意到 DesignTheme

00:27:26.726 --> 00:27:29.016 A:middle
对 DesignFont 1.0.0 的要求

00:27:29.016 --> 00:27:30.316 A:middle
直到 但不包括 2.0.0

00:27:30.596 --> 00:27:31.956 A:middle
午餐 App 对 DesignFont 2 的要求

00:27:31.956 --> 00:27:34.086 A:middle
高至 3.0.0

00:27:34.086 --> 00:27:36.026 A:middle
但是又不包括 3.0.0 版本

00:27:36.026 --> 00:27:37.706 A:middle
不能选择一个

00:27:37.786 --> 00:27:38.916 A:middle
同时符合这两个要求的版本

00:27:39.996 --> 00:27:42.546 A:middle
因此 在将 SwiftPM 嵌入到

00:27:42.546 --> 00:27:44.286 A:middle
Xcode 中 你只能在工作空间中

00:27:44.416 --> 00:27:46.626 A:middle
有一个包的版本

00:27:47.646 --> 00:27:48.926 A:middle
这就解释了

00:27:48.926 --> 00:27:50.366 A:middle
为什么我们在这里看到了

00:27:50.366 --> 00:27:51.126 A:middle
包解析错误

00:27:51.716 --> 00:27:54.016 A:middle
Xcode 不可能选择一个

00:27:54.016 --> 00:27:56.776 A:middle
同时满足两个需求的版本

00:27:58.026 --> 00:27:59.526 A:middle
解决这个问题需要

00:27:59.566 --> 00:28:00.786 A:middle
具体问题具体分析

00:28:01.326 --> 00:28:02.626 A:middle
但通常 当我遇到

00:28:02.626 --> 00:28:03.926 A:middle
这样的包解析错误时

00:28:03.966 --> 00:28:05.466 A:middle
我希望查看

00:28:05.466 --> 00:28:07.716 A:middle
可用的包的更新的版本

00:28:08.196 --> 00:28:09.476 A:middle
然后我就查看这些

00:28:09.476 --> 00:28:11.776 A:middle
新版本是否

00:28:11.776 --> 00:28:12.976 A:middle
为它们的子依赖提供了任何更新

00:28:15.046 --> 00:28:16.026 A:middle
在这个例子中 我注意到

00:28:16.026 --> 00:28:17.066 A:middle
有一个 我们还没有

00:28:17.066 --> 00:28:19.966 A:middle
真正研究过 DesignTheme 的版本 2.0.0

00:28:20.596 --> 00:28:23.006 A:middle
所以让我们去 GitHub 看看

00:28:23.006 --> 00:28:25.726 A:middle
我们的 DesignTheme 主题的版本需求

00:28:27.356 --> 00:28:29.106 A:middle
当我们转到 GitHub 时

00:28:29.106 --> 00:28:30.386 A:middle
我们可以查看 Swift 包清单的

00:28:30.386 --> 00:28:31.636 A:middle
依赖关系阵列

00:28:32.036 --> 00:28:34.916 A:middle
这里 我们看到 DesignFont 的版本需求

00:28:35.076 --> 00:28:37.336 A:middle
已经从 1.0.0 更新到下一个主要版本

00:28:37.336 --> 00:28:40.116 A:middle
变成了 2.0.0 更新到下一个主要版本

00:28:41.066 --> 00:28:42.266 A:middle
这与我们

00:28:42.266 --> 00:28:43.696 A:middle
试图在午餐 App 和 DesignFont 之间

00:28:43.696 --> 00:28:45.506 A:middle
添加的版本需求相匹配

00:28:45.976 --> 00:28:47.966 A:middle
因此 如果我们可以

00:28:48.526 --> 00:28:49.446 A:middle
更新 DesignTheme 的版本需求

00:28:49.446 --> 00:28:51.166 A:middle
使其在版本 2.0.0 中得到解决

00:28:51.166 --> 00:28:53.116 A:middle
那么现在我们

00:28:53.116 --> 00:28:55.036 A:middle
就可以心满意足地

00:28:55.036 --> 00:28:56.706 A:middle
在午餐 App 和 DesignFont 之间添加

00:28:56.706 --> 00:28:57.336 A:middle
一个直接依赖关系

00:28:58.746 --> 00:29:00.366 A:middle
我们来开始这样做

00:29:00.366 --> 00:29:02.426 A:middle
更新一下 DesignTheme 的主要版本

00:29:03.206 --> 00:29:04.736 A:middle
以前 午餐 App 使用的是 DesignTheme

00:29:05.026 --> 00:29:07.676 A:middle
从 1.0.0 到下一个主要版本

00:29:07.916 --> 00:29:09.136 A:middle
我们想要改变它

00:29:09.136 --> 00:29:11.766 A:middle
使它现在使用 2.0.0 到下一个主要版本

00:29:14.286 --> 00:29:15.376 A:middle
回到 Xcode

00:29:15.466 --> 00:29:17.346 A:middle
现在 我们只需

00:29:17.346 --> 00:29:20.036 A:middle
单击项目编辑器中的

00:29:20.236 --> 00:29:21.046 A:middle
DesignTheme 包

00:29:21.046 --> 00:29:24.076 A:middle
然后 我们回到编辑版本规则表

00:29:24.536 --> 00:29:27.166 A:middle
在这里 我们之前指定了 1.0.0

00:29:27.166 --> 00:29:27.936 A:middle
直到下一个主要版本

00:29:28.586 --> 00:29:30.126 A:middle
但现在我们想把它变成

00:29:30.276 --> 00:29:32.266 A:middle
2.0.0 到下一个主要版本

00:29:33.346 --> 00:29:35.986 A:middle
我们只要把 1.0.0 换成 2.0.0

00:29:36.236 --> 00:29:40.476 A:middle
然后点击完成 现在 更新操作发生了

00:29:40.746 --> 00:29:43.266 A:middle
我们可以看到 

00:29:43.266 --> 00:29:45.086 A:middle
DesignTheme 在版本 2.0.0 中 

00:29:45.086 --> 00:29:45.856 A:middle
DesignFont 在版本 2.0.0 中

00:29:49.056 --> 00:29:50.626 A:middle
但这里发生了一件重要的事情

00:29:50.926 --> 00:29:52.246 A:middle
当我们从一个主版本

00:29:52.246 --> 00:29:55.806 A:middle
更新到另一个主版本时 我们会遇到构建失败

00:29:56.146 --> 00:29:57.746 A:middle
这是因为当

00:29:57.746 --> 00:29:59.006 A:middle
从一个包的一个主要版本

00:29:59.006 --> 00:30:01.016 A:middle
切换到另一个主要版本时

00:30:01.016 --> 00:30:01.916 A:middle
可能会发生 API 更改

00:30:02.156 --> 00:30:03.696 A:middle
这可能会潜在地

00:30:03.696 --> 00:30:05.496 A:middle
破坏项目内部的更改

00:30:07.316 --> 00:30:09.076 A:middle
这意味着当你

00:30:09.076 --> 00:30:10.036 A:middle
从一个主要版本更新到

00:30:10.036 --> 00:30:11.566 A:middle
另一个主要版本时 你应该准备

00:30:11.686 --> 00:30:14.086 A:middle
更改一些 API 或者改变

00:30:14.086 --> 00:30:16.956 A:middle
API 在新版本中的包中运行的任何方式

00:30:19.326 --> 00:30:21.306 A:middle
这可以是非常小的改变

00:30:21.306 --> 00:30:22.716 A:middle
也可以是更复杂的改变

00:30:23.336 --> 00:30:24.776 A:middle
在这种情况下 我们已经为你

00:30:24.776 --> 00:30:26.756 A:middle
做了所有的工作 让你在包上花费更多的时间

00:30:27.006 --> 00:30:28.466 A:middle
因此 当我们回到午餐 App 时

00:30:28.466 --> 00:30:30.696 A:middle
我们的构建错误得到了解决

00:30:30.696 --> 00:30:32.206 A:middle
我们成功地使用了版本 2.0.0 的

00:30:32.206 --> 00:30:33.906 A:middle
DesignTheme

00:30:36.046 --> 00:30:37.316 A:middle
所以我们的构建现在成功了

00:30:37.666 --> 00:30:38.886 A:middle
我们想在午餐 App 和 DesignFont 之间

00:30:38.886 --> 00:30:41.396 A:middle
添加一个直接依赖关系

00:30:41.986 --> 00:30:43.286 A:middle
因为现在我们

00:30:43.546 --> 00:30:45.766 A:middle
处于 DesignTheme 的版本 2.0.0

00:30:45.766 --> 00:30:47.596 A:middle
我们可以添加我们想要的版本需求

00:30:50.056 --> 00:30:51.456 A:middle
回到 Xcode 我们

00:30:51.456 --> 00:30:53.036 A:middle
来看看添加包工作流

00:30:53.476 --> 00:30:54.966 A:middle
我们选择 DesignFont

00:30:55.266 --> 00:30:57.116 A:middle
我们选择 2.0.0 到下一个主版本

00:30:58.026 --> 00:30:59.216 A:middle
现在 我们可以将

00:30:59.216 --> 00:31:01.096 A:middle
DesignFont 库与我们的 App 链接起来

00:31:01.606 --> 00:31:02.856 A:middle
现在在项目编辑器中

00:31:02.856 --> 00:31:04.416 A:middle
我们可以看到

00:31:04.416 --> 00:31:05.936 A:middle
我们成功地使用了 DesignFont

00:31:05.936 --> 00:31:06.926 A:middle
从 2.0.0 到下一个主版本

00:31:10.176 --> 00:31:11.576 A:middle
现在我们已经完成了这一步

00:31:11.576 --> 00:31:13.146 A:middle
我们现在可以导入 DesignFont

00:31:13.146 --> 00:31:17.146 A:middle
内部的内容 成功地使用它的函数库

00:31:17.146 --> 00:31:20.816 A:middle
然后 通过一些小小的代码更改

00:31:20.816 --> 00:31:21.976 A:middle
来更新价格的字体

00:31:25.046 --> 00:31:26.116 A:middle
现在我们已经成功地

00:31:26.116 --> 00:31:27.896 A:middle
做到了这一点 并解决了包冲突

00:31:28.506 --> 00:31:29.486 A:middle
我们已经更新了包的

00:31:29.486 --> 00:31:31.236 A:middle
版本 并且我们成功地

00:31:31.236 --> 00:31:32.756 A:middle
讨论了如何在 Xcode 中

00:31:32.756 --> 00:31:33.956 A:middle
调试包解析

00:31:37.146 --> 00:31:38.716 A:middle
所以我们今天讨论了

00:31:38.756 --> 00:31:39.016 A:middle
很多事情

00:31:40.086 --> 00:31:41.116 A:middle
我们讨论了如何

00:31:41.116 --> 00:31:42.826 A:middle
开始在项目中

00:31:42.826 --> 00:31:44.356 A:middle
开源包并快速开始

00:31:44.386 --> 00:31:45.986 A:middle
使用它的 API

00:31:47.496 --> 00:31:48.856 A:middle
我们进一步了解了什么

00:31:48.856 --> 00:31:53.726 A:middle
是包 以及 Package.swift 清单是如何打包的

00:31:55.146 --> 00:31:56.966 A:middle
我们讨论了 Xcode

00:31:56.966 --> 00:31:58.766 A:middle
如何选择在项目中要使用的

00:31:58.796 --> 00:32:00.066 A:middle
包的版本

00:32:01.636 --> 00:32:02.756 A:middle
然后 我们讨论了

00:32:02.756 --> 00:32:03.776 A:middle
如何保持这些版本的

00:32:03.776 --> 00:32:05.596 A:middle
更新并且不断获得

00:32:05.596 --> 00:32:06.736 A:middle
包的新更新

00:32:08.256 --> 00:32:09.386 A:middle
然后 我们看了一个

00:32:09.386 --> 00:32:11.226 A:middle
关于如何解决包冲突的

00:32:11.226 --> 00:32:12.916 A:middle
最新例子

00:32:12.916 --> 00:32:14.326 A:middle
它教会了我们如何调试包

00:32:14.556 --> 00:32:15.976 A:middle
以及如何更新包的版本

00:32:18.136 --> 00:32:19.916 A:middle
今天在 GitHub 上

00:32:20.046 --> 00:32:22.086 A:middle
已经有很多包可用了

00:32:22.996 --> 00:32:24.366 A:middle
我们建议你

00:32:24.366 --> 00:32:25.736 A:middle
仔细查看这些包

00:32:25.736 --> 00:32:27.076 A:middle
看看可以在哪里将它们

00:32:27.076 --> 00:32:28.976 A:middle
合并到现有的 App 中

00:32:31.096 --> 00:32:33.376 A:middle
但我们还没说完 明天 我的同事

00:32:33.376 --> 00:32:34.706 A:middle
Ankit 和 Boris

00:32:35.106 --> 00:32:36.276 A:middle
将做一个演讲 

00:32:36.276 --> 00:32:37.446 A:middle
讨论如何创建 Swift 包

00:32:37.996 --> 00:32:39.466 A:middle
这个演讲将更详细地介绍

00:32:39.466 --> 00:32:41.966 A:middle
包是什么 

00:32:42.016 --> 00:32:45.206 A:middle
如何编辑包

00:32:45.206 --> 00:32:48.666 A:middle
SwiftPM 开源工具等等

00:32:49.606 --> 00:32:50.746 A:middle
这个演讲会帮助你

00:32:50.746 --> 00:32:52.316 A:middle
在包如何在 Xcode 中工作方面

00:32:52.446 --> 00:32:53.786 A:middle
成为一个专家

00:32:53.786 --> 00:32:56.156 A:middle
你不会想错过的

00:32:56.336 --> 00:32:58.216 A:middle
如果你对于 SwiftPM 团队

00:32:58.216 --> 00:33:00.506 A:middle
有更多的疑问

00:33:00.716 --> 00:33:01.956 A:middle
我们会在这个会议之后的

00:33:01.956 --> 00:33:03.646 A:middle
Swift 公开时间实验室等你们
 
00:33:04.186 --> 00:33:05.276 A:middle
还有就是

00:33:05.276 --> 00:33:06.296 A:middle
这个星期还有两个会议

00:33:06.296 --> 00:33:08.316 A:middle
一个是周四十二点

00:33:08.316 --> 00:33:09.716 A:middle
在 Swift 包实验室
 
00:33:09.716 --> 00:33:11.096 A:middle
另一个是周五十二点

00:33:11.096 --> 00:33:11.976 A:middle
有着相同的名称的会议

00:33:12.976 --> 00:33:13.816 A:middle
谢谢你们今天的光临

00:33:13.816 --> 00:33:14.596 A:middle
希望你们能够

00:33:14.596 --> 00:33:15.896 A:middle
度过愉快的一周 谢谢

00:33:16.516 --> 00:33:20.500 A:middle
[掌声]

